
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003b29c  08019c20  08019c20  0001ac20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08054ebc  08054ebc  0005f988  2**0
                  CONTENTS
  4 .ARM          00000008  08054ebc  08054ebc  00055ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08054ec4  08054ec4  0005f988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08054ec4  08054ec4  00055ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08054ec8  08054ec8  00055ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00009848  20000000  08054ecc  00056000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20009848  0805e714  0005f848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200098e8  0805e7b4  0005f8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000af38  20009988  0805e854  0005f988  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200148c0  0805e854  000608c0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0005f988  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c696  00000000  00000000  0005f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006d46  00000000  00000000  0008c04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002188  00000000  00000000  00092d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000361f6  00000000  00000000  00094f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c740  00000000  00000000  000cb116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f048  00000000  00000000  00107856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0021689e  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00001ab0  00000000  00000000  002168e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009d28  00000000  00000000  00218394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  002220bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20009988 	.word	0x20009988
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019c08 	.word	0x08019c08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000998c 	.word	0x2000998c
 800020c:	08019c08 	.word	0x08019c08

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9b5 	b.w	8000f94 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f001 fa63 	bl	800246c <null_ptr_check>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d120      	bne.n	8000ff4 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f8ee 	bl	8001194 <bme680_soft_reset>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d117      	bne.n	8000ff4 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	20d0      	movs	r0, #208	@ 0xd0
 8000fcc:	f000 f818 	bl	8001000 <bme680_get_regs>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10b      	bne.n	8000ff4 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b61      	cmp	r3, #97	@ 0x61
 8000fe2:	d105      	bne.n	8000ff0 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 fbcf 	bl	8001788 <get_calib_data>
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e001      	b.n	8000ff4 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8000ff0:	23fd      	movs	r3, #253	@ 0xfd
 8000ff2:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	4613      	mov	r3, r2
 8001010:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f001 fa2a 	bl	800246c <null_ptr_check>
 8001018:	4603      	mov	r3, r0
 800101a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 800101c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d126      	bne.n	8001072 <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	789b      	ldrb	r3, [r3, #2]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10e      	bne.n	800104a <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f001 f94c 	bl	80022ce <set_mem_page>
 8001036:	4603      	mov	r3, r0
 8001038:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 800103a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d103      	bne.n	800104a <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001048:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7858      	ldrb	r0, [r3, #1]
 8001052:	89bb      	ldrh	r3, [r7, #12]
 8001054:	7bf9      	ldrb	r1, [r7, #15]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	47a0      	blx	r4
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
		if (dev->com_rslt != 0)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 800106e:	23fe      	movs	r3, #254	@ 0xfe
 8001070:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001076:	4618      	mov	r0, r3
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd90      	pop	{r4, r7, pc}

0800107e <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 800107e:	b5b0      	push	{r4, r5, r7, lr}
 8001080:	b090      	sub	sp, #64	@ 0x40
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4613      	mov	r3, r2
 800108c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	2224      	movs	r2, #36	@ 0x24
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f016 fe14 	bl	8017cc8 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f001 f9e3 	bl	800246c <null_ptr_check>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (rslt == BME680_OK) {
 80010ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d169      	bne.n	8001188 <bme680_set_regs+0x10a>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d061      	beq.n	800117e <bme680_set_regs+0x100>
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b13      	cmp	r3, #19
 80010be:	d85e      	bhi.n	800117e <bme680_set_regs+0x100>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80010c4:	e034      	b.n	8001130 <bme680_set_regs+0xb2>
				if (dev->intf == BME680_SPI_INTF) {
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d118      	bne.n	8001100 <bme680_set_regs+0x82>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80010ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 f8f8 	bl	80022ce <set_mem_page>
 80010de:	4603      	mov	r3, r0
 80010e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80010e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4413      	add	r3, r2
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	3340      	adds	r3, #64	@ 0x40
 80010f8:	443b      	add	r3, r7
 80010fa:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80010fe:	e009      	b.n	8001114 <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8001100:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	441a      	add	r2, r3
 8001106:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	7812      	ldrb	r2, [r2, #0]
 800110c:	3340      	adds	r3, #64	@ 0x40
 800110e:	443b      	add	r3, r7
 8001110:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8001114:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	441a      	add	r2, r3
 800111a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	3301      	adds	r3, #1
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	3340      	adds	r3, #64	@ 0x40
 8001124:	443b      	add	r3, r7
 8001126:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 800112a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800112c:	3301      	adds	r3, #1
 800112e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	b29b      	uxth	r3, r3
 8001134:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001136:	429a      	cmp	r2, r3
 8001138:	d3c5      	bcc.n	80010c6 <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 800113a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800113e:	2b00      	cmp	r3, #0
 8001140:	d121      	bne.n	8001186 <bme680_set_regs+0x108>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	7858      	ldrb	r0, [r3, #1]
 800114a:	7d39      	ldrb	r1, [r7, #20]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	b29b      	uxth	r3, r3
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	3b01      	subs	r3, #1
 8001156:	b29d      	uxth	r5, r3
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	462b      	mov	r3, r5
 8001160:	47a0      	blx	r4
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
				if (dev->com_rslt != 0)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <bme680_set_regs+0x108>
					rslt = BME680_E_COM_FAIL;
 8001176:	23fe      	movs	r3, #254	@ 0xfe
 8001178:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			if (rslt == BME680_OK) {
 800117c:	e003      	b.n	8001186 <bme680_set_regs+0x108>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 800117e:	23fc      	movs	r3, #252	@ 0xfc
 8001180:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001184:	e000      	b.n	8001188 <bme680_set_regs+0x10a>
			if (rslt == BME680_OK) {
 8001186:	bf00      	nop
		}
	}

	return rslt;
 8001188:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800118c:	4618      	mov	r0, r3
 800118e:	3740      	adds	r7, #64	@ 0x40
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}

08001194 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 800119c:	23e0      	movs	r3, #224	@ 0xe0
 800119e:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80011a0:	23b6      	movs	r3, #182	@ 0xb6
 80011a2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f001 f961 	bl	800246c <null_ptr_check>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d127      	bne.n	8001206 <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	789b      	ldrb	r3, [r3, #2]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d104      	bne.n	80011c8 <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f001 f8ea 	bl	8002398 <get_mem_page>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 80011c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d11a      	bne.n	8001206 <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011d0:	f107 010d 	add.w	r1, r7, #13
 80011d4:	f107 000e 	add.w	r0, r7, #14
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f7ff ff4f 	bl	800107e <bme680_set_regs>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011e8:	200a      	movs	r0, #10
 80011ea:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80011ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d108      	bne.n	8001206 <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	789b      	ldrb	r3, [r3, #2]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d104      	bne.n	8001206 <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f001 f8cb 	bl	8002398 <get_mem_page>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b088      	sub	sp, #32
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	6039      	str	r1, [r7, #0]
 800121c:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	2300      	movs	r3, #0
 800122c:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	2300      	movs	r3, #0
 8001234:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800123c:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f001 f914 	bl	800246c <null_ptr_check>
 8001244:	4603      	mov	r3, r0
 8001246:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 8001248:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f040 81a2 	bne.w	8001596 <bme680_set_sensor_settings+0x384>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f000 fbbf 	bl	80019e0 <set_gas_config>
 8001262:	4603      	mov	r3, r0
 8001264:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		if (rslt == BME680_OK)
 800126e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d104      	bne.n	8001280 <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f000 f993 	bl	80015a2 <bme680_set_sensor_mode>
 800127c:	4603      	mov	r3, r0
 800127e:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	d03d      	beq.n	8001306 <bme680_set_sensor_settings+0xf4>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f103 003b 	add.w	r0, r3, #59	@ 0x3b
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2207      	movs	r2, #7
 8001294:	2100      	movs	r1, #0
 8001296:	f001 f8ae 	bl	80023f6 <boundary_check>
 800129a:	4603      	mov	r3, r0
 800129c:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 800129e:	2375      	movs	r3, #117	@ 0x75
 80012a0:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80012a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d108      	bne.n	80012bc <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80012aa:	f107 011b 	add.w	r1, r7, #27
 80012ae:	7f38      	ldrb	r0, [r7, #28]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f7ff fea4 	bl	8001000 <bme680_get_regs>
 80012b8:	4603      	mov	r3, r0
 80012ba:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d010      	beq.n	80012e8 <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80012c6:	7efb      	ldrb	r3, [r7, #27]
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	f023 031c 	bic.w	r3, r3, #28
 80012ce:	b25a      	sxtb	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	f003 031c 	and.w	r3, r3, #28
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 80012e8:	7fbb      	ldrb	r3, [r7, #30]
 80012ea:	3320      	adds	r3, #32
 80012ec:	443b      	add	r3, r7
 80012ee:	7f3a      	ldrb	r2, [r7, #28]
 80012f0:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80012f4:	7fbb      	ldrb	r3, [r7, #30]
 80012f6:	7efa      	ldrb	r2, [r7, #27]
 80012f8:	3320      	adds	r3, #32
 80012fa:	443b      	add	r3, r7
 80012fc:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001300:	7fbb      	ldrb	r3, [r7, #30]
 8001302:	3301      	adds	r3, #1
 8001304:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	2b00      	cmp	r3, #0
 800130e:	d037      	beq.n	8001380 <bme680_set_sensor_settings+0x16e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f103 003d 	add.w	r0, r3, #61	@ 0x3d
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	2208      	movs	r2, #8
 800131a:	2100      	movs	r1, #0
 800131c:	f001 f86b 	bl	80023f6 <boundary_check>
 8001320:	4603      	mov	r3, r0
 8001322:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8001324:	2370      	movs	r3, #112	@ 0x70
 8001326:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001328:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d108      	bne.n	8001342 <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001330:	f107 011b 	add.w	r1, r7, #27
 8001334:	7f38      	ldrb	r0, [r7, #28]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2201      	movs	r2, #1
 800133a:	f7ff fe61 	bl	8001000 <bme680_get_regs>
 800133e:	4603      	mov	r3, r0
 8001340:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8001342:	7efb      	ldrb	r3, [r7, #27]
 8001344:	b25b      	sxtb	r3, r3
 8001346:	f023 0308 	bic.w	r3, r3, #8
 800134a:	b25a      	sxtb	r2, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001352:	b25b      	sxtb	r3, r3
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	b25b      	sxtb	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b25b      	sxtb	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001362:	7fbb      	ldrb	r3, [r7, #30]
 8001364:	3320      	adds	r3, #32
 8001366:	443b      	add	r3, r7
 8001368:	7f3a      	ldrb	r2, [r7, #28]
 800136a:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800136e:	7fbb      	ldrb	r3, [r7, #30]
 8001370:	7efa      	ldrb	r2, [r7, #27]
 8001372:	3320      	adds	r3, #32
 8001374:	443b      	add	r3, r7
 8001376:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800137a:	7fbb      	ldrb	r3, [r7, #30]
 800137c:	3301      	adds	r3, #1
 800137e:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d050      	beq.n	800142c <bme680_set_sensor_settings+0x21a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f103 0039 	add.w	r0, r3, #57	@ 0x39
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2205      	movs	r2, #5
 8001394:	2100      	movs	r1, #0
 8001396:	f001 f82e 	bl	80023f6 <boundary_check>
 800139a:	4603      	mov	r3, r0
 800139c:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 800139e:	2374      	movs	r3, #116	@ 0x74
 80013a0:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80013a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d108      	bne.n	80013bc <bme680_set_sensor_settings+0x1aa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80013aa:	f107 011b 	add.w	r1, r7, #27
 80013ae:	7f38      	ldrb	r0, [r7, #28]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f7ff fe24 	bl	8001000 <bme680_get_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00d      	beq.n	80013e2 <bme680_set_sensor_settings+0x1d0>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80013c6:	7efb      	ldrb	r3, [r7, #27]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80013d6:	015b      	lsls	r3, r3, #5
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d010      	beq.n	800140e <bme680_set_sensor_settings+0x1fc>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80013ec:	7efb      	ldrb	r3, [r7, #27]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	f023 031c 	bic.w	r3, r3, #28
 80013f4:	b25a      	sxtb	r2, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	f003 031c 	and.w	r3, r3, #28
 8001404:	b25b      	sxtb	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b25b      	sxtb	r3, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 800140e:	7fbb      	ldrb	r3, [r7, #30]
 8001410:	3320      	adds	r3, #32
 8001412:	443b      	add	r3, r7
 8001414:	7f3a      	ldrb	r2, [r7, #28]
 8001416:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800141a:	7fbb      	ldrb	r3, [r7, #30]
 800141c:	7efa      	ldrb	r2, [r7, #27]
 800141e:	3320      	adds	r3, #32
 8001420:	443b      	add	r3, r7
 8001422:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001426:	7fbb      	ldrb	r3, [r7, #30]
 8001428:	3301      	adds	r3, #1
 800142a:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d037      	beq.n	80014a6 <bme680_set_sensor_settings+0x294>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2205      	movs	r2, #5
 8001440:	2100      	movs	r1, #0
 8001442:	f000 ffd8 	bl	80023f6 <boundary_check>
 8001446:	4603      	mov	r3, r0
 8001448:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 800144a:	2372      	movs	r3, #114	@ 0x72
 800144c:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800144e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d108      	bne.n	8001468 <bme680_set_sensor_settings+0x256>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001456:	f107 011b 	add.w	r1, r7, #27
 800145a:	7f38      	ldrb	r0, [r7, #28]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2201      	movs	r2, #1
 8001460:	f7ff fdce 	bl	8001000 <bme680_get_regs>
 8001464:	4603      	mov	r3, r0
 8001466:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8001468:	7efb      	ldrb	r3, [r7, #27]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	f023 0307 	bic.w	r3, r3, #7
 8001470:	b25a      	sxtb	r2, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001478:	b25b      	sxtb	r3, r3
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	b25b      	sxtb	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b25b      	sxtb	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001488:	7fbb      	ldrb	r3, [r7, #30]
 800148a:	3320      	adds	r3, #32
 800148c:	443b      	add	r3, r7
 800148e:	7f3a      	ldrb	r2, [r7, #28]
 8001490:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001494:	7fbb      	ldrb	r3, [r7, #30]
 8001496:	7efa      	ldrb	r2, [r7, #27]
 8001498:	3320      	adds	r3, #32
 800149a:	443b      	add	r3, r7
 800149c:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80014a0:	7fbb      	ldrb	r3, [r7, #30]
 80014a2:	3301      	adds	r3, #1
 80014a4:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d060      	beq.n	8001572 <bme680_set_sensor_settings+0x360>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f103 003e 	add.w	r0, r3, #62	@ 0x3e
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	2100      	movs	r1, #0
 80014bc:	f000 ff9b 	bl	80023f6 <boundary_check>
 80014c0:	4603      	mov	r3, r0
 80014c2:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 80014c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d109      	bne.n	80014e0 <bme680_set_sensor_settings+0x2ce>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	220a      	movs	r2, #10
 80014d6:	2100      	movs	r1, #0
 80014d8:	f000 ff8d 	bl	80023f6 <boundary_check>
 80014dc:	4603      	mov	r3, r0
 80014de:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 80014e0:	2371      	movs	r3, #113	@ 0x71
 80014e2:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80014e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d108      	bne.n	80014fe <bme680_set_sensor_settings+0x2ec>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80014ec:	f107 011b 	add.w	r1, r7, #27
 80014f0:	7f38      	ldrb	r0, [r7, #28]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f7ff fd83 	bl	8001000 <bme680_get_regs>
 80014fa:	4603      	mov	r3, r0
 80014fc:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001504:	2b00      	cmp	r3, #0
 8001506:	d010      	beq.n	800152a <bme680_set_sensor_settings+0x318>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8001508:	7efb      	ldrb	r3, [r7, #27]
 800150a:	b25b      	sxtb	r3, r3
 800150c:	f023 0310 	bic.w	r3, r3, #16
 8001510:	b25a      	sxtb	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	b25b      	sxtb	r3, r3
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	b25b      	sxtb	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b25b      	sxtb	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00f      	beq.n	8001554 <bme680_set_sensor_settings+0x342>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8001534:	7efb      	ldrb	r3, [r7, #27]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	f023 030f 	bic.w	r3, r3, #15
 800153c:	b25a      	sxtb	r2, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001544:	b25b      	sxtb	r3, r3
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	b25b      	sxtb	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b25b      	sxtb	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001554:	7fbb      	ldrb	r3, [r7, #30]
 8001556:	3320      	adds	r3, #32
 8001558:	443b      	add	r3, r7
 800155a:	7f3a      	ldrb	r2, [r7, #28]
 800155c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001560:	7fbb      	ldrb	r3, [r7, #30]
 8001562:	7efa      	ldrb	r2, [r7, #27]
 8001564:	3320      	adds	r3, #32
 8001566:	443b      	add	r3, r7
 8001568:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800156c:	7fbb      	ldrb	r3, [r7, #30]
 800156e:	3301      	adds	r3, #1
 8001570:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8001572:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d109      	bne.n	800158e <bme680_set_sensor_settings+0x37c>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 800157a:	7fba      	ldrb	r2, [r7, #30]
 800157c:	f107 010c 	add.w	r1, r7, #12
 8001580:	f107 0014 	add.w	r0, r7, #20
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f7ff fd7a 	bl	800107e <bme680_set_regs>
 800158a:	4603      	mov	r3, r0
 800158c:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	7f7a      	ldrb	r2, [r7, #29]
 8001592:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}

	return rslt;
 8001596:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80015ae:	2374      	movs	r3, #116	@ 0x74
 80015b0:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 ff5a 	bl	800246c <null_ptr_check>
 80015b8:	4603      	mov	r3, r0
 80015ba:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80015bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d14c      	bne.n	800165e <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80015c4:	f107 010d 	add.w	r1, r7, #13
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	2074      	movs	r0, #116	@ 0x74
 80015ce:	f7ff fd17 	bl	8001000 <bme680_get_regs>
 80015d2:	4603      	mov	r3, r0
 80015d4:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d119      	bne.n	8001612 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80015de:	7b7b      	ldrb	r3, [r7, #13]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d012      	beq.n	8001612 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80015ec:	7b7b      	ldrb	r3, [r7, #13]
 80015ee:	f023 0303 	bic.w	r3, r3, #3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80015f6:	f107 010d 	add.w	r1, r7, #13
 80015fa:	f107 000c 	add.w	r0, r7, #12
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f7ff fd3c 	bl	800107e <bme680_set_regs>
 8001606:	4603      	mov	r3, r0
 8001608:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800160e:	200a      	movs	r0, #10
 8001610:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1d5      	bne.n	80015c4 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01d      	beq.n	800165e <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8001622:	7b7b      	ldrb	r3, [r7, #13]
 8001624:	b25b      	sxtb	r3, r3
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	b25a      	sxtb	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001632:	b25b      	sxtb	r3, r3
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	b25b      	sxtb	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b25b      	sxtb	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800164a:	f107 010d 	add.w	r1, r7, #13
 800164e:	f107 000c 	add.w	r0, r7, #12
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f7ff fd12 	bl	800107e <bme680_set_regs>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8001676:	4a2c      	ldr	r2, [pc, #176]	@ (8001728 <bme680_get_profile_dur+0xbc>)
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001680:	6018      	str	r0, [r3, #0]
 8001682:	3304      	adds	r3, #4
 8001684:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800168c:	3318      	adds	r3, #24
 800168e:	443b      	add	r3, r7
 8001690:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001694:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800169c:	3318      	adds	r3, #24
 800169e:	443b      	add	r3, r7
 80016a0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016a4:	461a      	mov	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4413      	add	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016b2:	3318      	adds	r3, #24
 80016b4:	443b      	add	r3, r7
 80016b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016ba:	461a      	mov	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	4413      	add	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 80016d4:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 80016dc:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80016e4:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4a10      	ldr	r2, [pc, #64]	@ (800172c <bme680_get_profile_dur+0xc0>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	3301      	adds	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	881a      	ldrh	r2, [r3, #0]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001714:	4413      	add	r3, r2
 8001716:	b29a      	uxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	801a      	strh	r2, [r3, #0]
	}
}
 800171c:	bf00      	nop
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	08019c20 	.word	0x08019c20
 800172c:	10624dd3 	.word	0x10624dd3

08001730 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	f000 fe96 	bl	800246c <null_ptr_check>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d117      	bne.n	800177c <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 fd07 	bl	8002162 <read_field_data>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8001758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10d      	bne.n	800177c <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	da04      	bge.n	8001774 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001772:	e003      	b.n	800177c <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
		}
	}

	return rslt;
 800177c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	@ 0x38
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2225      	movs	r2, #37	@ 0x25
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f016 fa93 	bl	8017cc8 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 80017a2:	2300      	movs	r3, #0
 80017a4:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fe60 	bl	800246c <null_ptr_check>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (rslt == BME680_OK) {
 80017b2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 810c 	bne.w	80019d4 <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 80017bc:	f107 010c 	add.w	r1, r7, #12
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2219      	movs	r2, #25
 80017c4:	2089      	movs	r0, #137	@ 0x89
 80017c6:	f7ff fc1b 	bl	8001000 <bme680_get_regs>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 80017d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10b      	bne.n	80017f0 <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	f103 0119 	add.w	r1, r3, #25
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2210      	movs	r2, #16
 80017e4:	20e1      	movs	r0, #225	@ 0xe1
 80017e6:	f7ff fc0b 	bl	8001000 <bme680_get_regs>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 80017f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	b21b      	sxth	r3, r3
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b21a      	sxth	r2, r3
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21a      	sxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	b25a      	sxtb	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8001822:	7cbb      	ldrb	r3, [r7, #18]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	b21a      	sxth	r2, r3
 8001828:	7c7b      	ldrb	r3, [r7, #17]
 800182a:	b21b      	sxth	r3, r3
 800182c:	4313      	orrs	r3, r2
 800182e:	b21b      	sxth	r3, r3
 8001830:	b29a      	uxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8001836:	7d3b      	ldrb	r3, [r7, #20]
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b21a      	sxth	r2, r3
 800183c:	7cfb      	ldrb	r3, [r7, #19]
 800183e:	b21b      	sxth	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	b21a      	sxth	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8001848:	7d7b      	ldrb	r3, [r7, #21]
 800184a:	b25a      	sxtb	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8001852:	7e3b      	ldrb	r3, [r7, #24]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	b21b      	sxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b21a      	sxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	845a      	strh	r2, [r3, #34]	@ 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8001864:	7ebb      	ldrb	r3, [r7, #26]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	7e7b      	ldrb	r3, [r7, #25]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b21a      	sxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	849a      	strh	r2, [r3, #36]	@ 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8001876:	7f3b      	ldrb	r3, [r7, #28]
 8001878:	b25a      	sxtb	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8001880:	7efb      	ldrb	r3, [r7, #27]
 8001882:	b25a      	sxtb	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 800188a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	7ffb      	ldrb	r3, [r7, #31]
 8001894:	b21b      	sxth	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	b21a      	sxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	851a      	strh	r2, [r3, #40]	@ 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 800189e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80018b4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018c2:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018e0:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	4313      	orrs	r3, r2
 80018f0:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80018f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018fc:	b25a      	sxtb	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8001902:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001906:	b25a      	sxtb	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 800190c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001910:	b25a      	sxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8001916:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 800191e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001922:	b25a      	sxtb	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8001928:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800192c:	b25a      	sxtb	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8001932:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800193e:	b21b      	sxth	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b21a      	sxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8001948:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800194c:	b25a      	sxtb	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8001952:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001956:	2b00      	cmp	r3, #0
 8001958:	d135      	bne.n	80019c6 <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 800195a:	f107 010b 	add.w	r1, r7, #11
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	2002      	movs	r0, #2
 8001964:	f7ff fb4c 	bl	8001000 <bme680_get_regs>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001974:	2b00      	cmp	r3, #0
 8001976:	da00      	bge.n	800197a <get_calib_data+0x1f2>
 8001978:	330f      	adds	r3, #15
 800197a:	111b      	asrs	r3, r3, #4
 800197c:	b2da      	uxtb	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if (rslt == BME680_OK) {
 8001984:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001988:	2b00      	cmp	r3, #0
 800198a:	d11c      	bne.n	80019c6 <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 800198c:	f107 010b 	add.w	r1, r7, #11
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff fb33 	bl	8001000 <bme680_get_regs>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 80019a0:	7afb      	ldrb	r3, [r7, #11]
 80019a2:	b25a      	sxtb	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				if (rslt == BME680_OK)
 80019aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 80019b2:	f107 010b 	add.w	r1, r7, #11
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	2004      	movs	r0, #4
 80019bc:	f7ff fb20 	bl	8001000 <bme680_get_regs>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	111b      	asrs	r3, r3, #4
 80019cc:	b25a      	sxtb	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	}

	return rslt;
 80019d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3738      	adds	r7, #56	@ 0x38
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fd3f 	bl	800246c <null_ptr_check>
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d132      	bne.n	8001a60 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 80019fa:	2300      	movs	r3, #0
 80019fc:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 80019fe:	2300      	movs	r3, #0
 8001a00:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d119      	bne.n	8001a40 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8001a0c:	235a      	movs	r3, #90	@ 0x5a
 8001a0e:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 faff 	bl	800201c <calc_heater_res>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8001a22:	2364      	movs	r3, #100	@ 0x64
 8001a24:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fb73 	bl	8002118 <calc_heater_dur>
 8001a32:	4603      	mov	r3, r0
 8001a34:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001a3e:	e001      	b.n	8001a44 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 8001a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8001a4c:	f107 0108 	add.w	r1, r7, #8
 8001a50:	f107 000c 	add.w	r0, r7, #12
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f7ff fb11 	bl	800107e <bme680_set_regs>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8001a6c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a70:	b091      	sub	sp, #68	@ 0x44
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	61f8      	str	r0, [r7, #28]
 8001a76:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	10da      	asrs	r2, r3, #3
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	8adb      	ldrh	r3, [r3, #22]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	17da      	asrs	r2, r3, #31
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	17da      	asrs	r2, r3, #31
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	617a      	str	r2, [r7, #20]
 8001aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aa2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aa6:	460a      	mov	r2, r1
 8001aa8:	fb02 f203 	mul.w	r2, r2, r3
 8001aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aae:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001ab2:	4601      	mov	r1, r0
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001abc:	6939      	ldr	r1, [r7, #16]
 8001abe:	fba2 4501 	umull	r4, r5, r2, r1
 8001ac2:	442b      	add	r3, r5
 8001ac4:	461d      	mov	r5, r3
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	0ae2      	lsrs	r2, r4, #11
 8001ad0:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8001ad4:	12eb      	asrs	r3, r5, #11
 8001ad6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8001ada:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	0850      	lsrs	r0, r2, #1
 8001ae8:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001aec:	1059      	asrs	r1, r3, #1
 8001aee:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	0862      	lsrs	r2, r4, #1
 8001afc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8001b00:	106b      	asrs	r3, r5, #1
 8001b02:	fb02 f501 	mul.w	r5, r2, r1
 8001b06:	fb00 f403 	mul.w	r4, r0, r3
 8001b0a:	442c      	add	r4, r5
 8001b0c:	fba0 ab02 	umull	sl, fp, r0, r2
 8001b10:	eb04 030b 	add.w	r3, r4, fp
 8001b14:	469b      	mov	fp, r3
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	ea4f 321a 	mov.w	r2, sl, lsr #12
 8001b22:	ea42 520b 	orr.w	r2, r2, fp, lsl #20
 8001b26:	ea4f 332b 	mov.w	r3, fp, asr #12
 8001b2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	17da      	asrs	r2, r3, #31
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	60fa      	str	r2, [r7, #12]
 8001b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b42:	462a      	mov	r2, r5
 8001b44:	fb02 f203 	mul.w	r2, r2, r3
 8001b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b54:	4621      	mov	r1, r4
 8001b56:	fba2 8901 	umull	r8, r9, r2, r1
 8001b5a:	444b      	add	r3, r9
 8001b5c:	4699      	mov	r9, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	ea4f 3298 	mov.w	r2, r8, lsr #14
 8001b6a:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 8001b6e:	ea4f 33a9 	mov.w	r3, r9, asr #14
 8001b72:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8001b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7a:	4413      	add	r3, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	631a      	str	r2, [r3, #48]	@ 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3380      	adds	r3, #128	@ 0x80
 8001b8e:	121b      	asrs	r3, r3, #8
 8001b90:	84fb      	strh	r3, [r7, #38]	@ 0x26

	return calc_temp;
 8001b92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3744      	adds	r7, #68	@ 0x44
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001ba0:	4770      	bx	lr

08001ba2 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b087      	sub	sp, #28
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb0:	105b      	asrs	r3, r3, #1
 8001bb2:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001bb6:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	109b      	asrs	r3, r3, #2
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	1092      	asrs	r2, r2, #2
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	f992 2026 	ldrsb.w	r2, [r2, #38]	@ 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	109b      	asrs	r3, r3, #2
 8001bd2:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001bda:	461a      	mov	r2, r3
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	109a      	asrs	r2, r3, #2
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	109b      	asrs	r3, r3, #2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	1092      	asrs	r2, r2, #2
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8001c0e:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001c14:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001c26:	4413      	add	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	149b      	asrs	r3, r3, #18
 8001c2e:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	8b92      	ldrh	r2, [r2, #28]
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	13db      	asrs	r3, r3, #15
 8001c40:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001c48:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	131b      	asrs	r3, r3, #12
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	f640 4335 	movw	r3, #3125	@ 0xc35
 8001c58:	fb02 f303 	mul.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c64:	db06      	blt.n	8001c74 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e005      	b.n	8001c80 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005a      	lsls	r2, r3, #1
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001c86:	4619      	mov	r1, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001c94:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	131b      	asrs	r3, r3, #12
 8001c9c:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	@ 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	135b      	asrs	r3, r3, #13
 8001cae:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	121b      	asrs	r3, r3, #8
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	1212      	asrs	r2, r2, #8
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
		(int32_t)(pressure_comp >> 8) *
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001cce:	145b      	asrs	r3, r3, #17
 8001cd0:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	441a      	add	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 8001ce2:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001ce4:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001ce6:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4413      	add	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8001cee:	697b      	ldr	r3, [r7, #20]

}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8001cfc:	b490      	push	{r4, r7}
 8001cfe:	b08a      	sub	sp, #40	@ 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	3380      	adds	r3, #128	@ 0x80
 8001d14:	121b      	asrs	r3, r3, #8
 8001d16:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001d18:	88fa      	ldrh	r2, [r7, #6]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	891b      	ldrh	r3, [r3, #8]
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	493d      	ldr	r1, [pc, #244]	@ (8001e28 <calc_humidity+0x12c>)
 8001d32:	fb81 0103 	smull	r0, r1, r1, r3
 8001d36:	1149      	asrs	r1, r1, #5
 8001d38:	17db      	asrs	r3, r3, #31
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	895b      	ldrh	r3, [r3, #10]
 8001d46:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	4a34      	ldr	r2, [pc, #208]	@ (8001e28 <calc_humidity+0x12c>)
 8001d58:	fb82 1203 	smull	r1, r2, r2, r3
 8001d5c:	1152      	asrs	r2, r2, #5
 8001d5e:	17db      	asrs	r3, r3, #31
 8001d60:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	492d      	ldr	r1, [pc, #180]	@ (8001e28 <calc_humidity+0x12c>)
 8001d72:	fb81 4103 	smull	r4, r1, r1, r3
 8001d76:	1149      	asrs	r1, r1, #5
 8001d78:	17db      	asrs	r3, r3, #31
 8001d7a:	1acb      	subs	r3, r1, r3
 8001d7c:	6a39      	ldr	r1, [r7, #32]
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001d84:	4928      	ldr	r1, [pc, #160]	@ (8001e28 <calc_humidity+0x12c>)
 8001d86:	fb81 4103 	smull	r4, r1, r1, r3
 8001d8a:	1149      	asrs	r1, r1, #5
 8001d8c:	17db      	asrs	r3, r3, #31
 8001d8e:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001d90:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001d92:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001d96:	fb00 f303 	mul.w	r3, r0, r3
	var2 = ((int32_t) dev->calib.par_h2
 8001d9a:	129b      	asrs	r3, r3, #10
 8001d9c:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	7bdb      	ldrb	r3, [r3, #15]
 8001dac:	01db      	lsls	r3, r3, #7
 8001dae:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001db6:	461a      	mov	r2, r3
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001e28 <calc_humidity+0x12c>)
 8001dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc4:	1152      	asrs	r2, r2, #5
 8001dc6:	17db      	asrs	r3, r3, #31
 8001dc8:	1ad2      	subs	r2, r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	111b      	asrs	r3, r3, #4
 8001dd0:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	139b      	asrs	r3, r3, #14
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	1392      	asrs	r2, r2, #14
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	129b      	asrs	r3, r3, #10
 8001de0:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	105b      	asrs	r3, r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4413      	add	r3, r2
 8001df4:	129b      	asrs	r3, r3, #10
 8001df6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	131b      	asrs	r3, r3, #12
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	4a09      	ldr	r2, [pc, #36]	@ (8001e2c <calc_humidity+0x130>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	dd02      	ble.n	8001e10 <calc_humidity+0x114>
		calc_hum = 100000;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <calc_humidity+0x130>)
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e0e:	e004      	b.n	8001e1a <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da01      	bge.n	8001e1a <calc_humidity+0x11e>
		calc_hum = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24

	return (uint32_t) calc_hum;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3728      	adds	r7, #40	@ 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc90      	pop	{r4, r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	51eb851f 	.word	0x51eb851f
 8001e2c:	000186a0 	.word	0x000186a0

08001e30 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8001e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e34:	b0bc      	sub	sp, #240	@ 0xf0
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001e3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001e40:	460b      	mov	r3, r1
 8001e42:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8001e46:	4b73      	ldr	r3, [pc, #460]	@ (8002014 <calc_gas_resistance+0x1e4>)
 8001e48:	f107 0594 	add.w	r5, r7, #148	@ 0x94
 8001e4c:	461c      	mov	r4, r3
 8001e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8001e62:	4b6d      	ldr	r3, [pc, #436]	@ (8002018 <calc_gas_resistance+0x1e8>)
 8001e64:	f107 0554 	add.w	r5, r7, #84	@ 0x54
 8001e68:	461c      	mov	r4, r3
 8001e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e80:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	17da      	asrs	r2, r3, #31
 8001e88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e8c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001e90:	4622      	mov	r2, r4
 8001e92:	462b      	mov	r3, r5
 8001e94:	f04f 0000 	mov.w	r0, #0
 8001e98:	f04f 0100 	mov.w	r1, #0
 8001e9c:	0099      	lsls	r1, r3, #2
 8001e9e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001ea2:	0090      	lsls	r0, r2, #2
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	1851      	adds	r1, r2, r1
 8001eac:	6339      	str	r1, [r7, #48]	@ 0x30
 8001eae:	4629      	mov	r1, r5
 8001eb0:	eb43 0101 	adc.w	r1, r3, r1
 8001eb4:	6379      	str	r1, [r7, #52]	@ 0x34
 8001eb6:	f240 533c 	movw	r3, #1340	@ 0x53c
 8001eba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	18d3      	adds	r3, r2, r3
 8001ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	f143 0300 	adc.w	r3, r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		((int64_t) lookupTable1[gas_range])) >> 16;
 8001ecc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	33a8      	adds	r3, #168	@ 0xa8
 8001ed4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001ed8:	4413      	add	r3, r2
 8001eda:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ee2:	647a      	str	r2, [r7, #68]	@ 0x44
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001ee4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ee8:	460b      	mov	r3, r1
 8001eea:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001eee:	4622      	mov	r2, r4
 8001ef0:	fb02 f203 	mul.w	r2, r2, r3
 8001ef4:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8001ef8:	462b      	mov	r3, r5
 8001efa:	4604      	mov	r4, r0
 8001efc:	460d      	mov	r5, r1
 8001efe:	4621      	mov	r1, r4
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	4622      	mov	r2, r4
 8001f08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001f0a:	fba2 8901 	umull	r8, r9, r2, r1
 8001f0e:	444b      	add	r3, r9
 8001f10:	4699      	mov	r9, r3
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001f1e:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001f22:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001f26:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8001f2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f2e:	2200      	movs	r2, #0
 8001f30:	623b      	str	r3, [r7, #32]
 8001f32:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f40:	4629      	mov	r1, r5
 8001f42:	03cb      	lsls	r3, r1, #15
 8001f44:	4621      	mov	r1, r4
 8001f46:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	03ca      	lsls	r2, r1, #15
 8001f4e:	f112 417f 	adds.w	r1, r2, #4278190080	@ 0xff000000
 8001f52:	61b9      	str	r1, [r7, #24]
 8001f54:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8001f5e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f62:	4621      	mov	r1, r4
 8001f64:	1889      	adds	r1, r1, r2
 8001f66:	6139      	str	r1, [r7, #16]
 8001f68:	4629      	mov	r1, r5
 8001f6a:	eb43 0101 	adc.w	r1, r3, r1
 8001f6e:	6179      	str	r1, [r7, #20]
 8001f70:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f74:	e9c7 3438 	strd	r3, r4, [r7, #224]	@ 0xe0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8001f78:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	33a8      	adds	r3, #168	@ 0xa8
 8001f80:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001f84:	4413      	add	r3, r2
 8001f86:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	60fa      	str	r2, [r7, #12]
 8001f90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001f94:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f98:	462a      	mov	r2, r5
 8001f9a:	fb02 f203 	mul.w	r2, r2, r3
 8001f9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001fae:	4621      	mov	r1, r4
 8001fb0:	fba2 ab01 	umull	sl, fp, r2, r1
 8001fb4:	445b      	add	r3, fp
 8001fb6:	469b      	mov	fp, r3
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	ea4f 225a 	mov.w	r2, sl, lsr #9
 8001fc4:	ea42 52cb 	orr.w	r2, r2, fp, lsl #23
 8001fc8:	ea4f 236b 	mov.w	r3, fp, asr #9
 8001fcc:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8001fd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	0842      	lsrs	r2, r0, #1
 8001fde:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001fe2:	104b      	asrs	r3, r1, #1
 8001fe4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001fe8:	1814      	adds	r4, r2, r0
 8001fea:	603c      	str	r4, [r7, #0]
 8001fec:	414b      	adcs	r3, r1
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8001ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ff8:	f7fe fe06 	bl	8000c08 <__aeabi_ldivmod>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4613      	mov	r3, r2
 8002002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	return calc_gas_res;
 8002006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
}
 800200a:	4618      	mov	r0, r3
 800200c:	37f0      	adds	r7, #240	@ 0xf0
 800200e:	46bd      	mov	sp, r7
 8002010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002014:	08019c28 	.word	0x08019c28
 8002018:	08019c68 	.word	0x08019c68

0800201c <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 800201c:	b480      	push	{r7}
 800201e:	b08b      	sub	sp, #44	@ 0x2c
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800202e:	d902      	bls.n	8002036 <calc_heater_res+0x1a>
		temp = 400;
 8002030:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002034:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800203c:	461a      	mov	r2, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	4a2f      	ldr	r2, [pc, #188]	@ (8002108 <calc_heater_res+0xec>)
 800204a:	fb82 1203 	smull	r1, r2, r2, r3
 800204e:	1192      	asrs	r2, r2, #6
 8002050:	17db      	asrs	r3, r3, #31
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800205e:	f503 7244 	add.w	r2, r3, #784	@ 0x310
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002068:	4619      	mov	r1, r3
 800206a:	4b28      	ldr	r3, [pc, #160]	@ (800210c <calc_heater_res+0xf0>)
 800206c:	440b      	add	r3, r1
 800206e:	88f9      	ldrh	r1, [r7, #6]
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4926      	ldr	r1, [pc, #152]	@ (8002110 <calc_heater_res+0xf4>)
 8002076:	fb81 0103 	smull	r0, r1, r1, r3
 800207a:	10c9      	asrs	r1, r1, #3
 800207c:	17db      	asrs	r3, r3, #31
 800207e:	1acb      	subs	r3, r1, r3
 8002080:	f503 1348 	add.w	r3, r3, #3276800	@ 0x320000
 8002084:	4922      	ldr	r1, [pc, #136]	@ (8002110 <calc_heater_res+0xf4>)
 8002086:	fb81 0103 	smull	r0, r1, r1, r3
 800208a:	1089      	asrs	r1, r1, #2
 800208c:	17db      	asrs	r3, r3, #31
 800208e:	1acb      	subs	r3, r1, r3
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	2b00      	cmp	r3, #0
 800209a:	da00      	bge.n	800209e <calc_heater_res+0x82>
 800209c:	3301      	adds	r3, #1
 800209e:	105b      	asrs	r3, r3, #1
 80020a0:	461a      	mov	r2, r3
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	4413      	add	r3, r2
 80020a6:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020ae:	3304      	adds	r3, #4
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80020b6:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80020be:	461a      	mov	r2, r3
 80020c0:	4613      	mov	r3, r2
 80020c2:	019b      	lsls	r3, r3, #6
 80020c4:	4413      	add	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80020ce:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80020d8:	f1a3 02fa 	sub.w	r2, r3, #250	@ 0xfa
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4413      	add	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	3332      	adds	r3, #50	@ 0x32
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <calc_heater_res+0xf8>)
 80020ec:	fb82 1203 	smull	r1, r2, r2, r3
 80020f0:	1152      	asrs	r2, r2, #5
 80020f2:	17db      	asrs	r3, r3, #31
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	372c      	adds	r7, #44	@ 0x2c
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	10624dd3 	.word	0x10624dd3
 800210c:	00025999 	.word	0x00025999
 8002110:	66666667 	.word	0x66666667
 8002114:	51eb851f 	.word	0x51eb851f

08002118 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 800212c:	d308      	bcc.n	8002140 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 800212e:	23ff      	movs	r3, #255	@ 0xff
 8002130:	73bb      	strb	r3, [r7, #14]
 8002132:	e00f      	b.n	8002154 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	3301      	adds	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	2b3f      	cmp	r3, #63	@ 0x3f
 8002144:	d8f6      	bhi.n	8002134 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4413      	add	r3, r2
 8002152:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002154:	7bbb      	ldrb	r3, [r7, #14]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b08a      	sub	sp, #40	@ 0x28
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 800217e:	230a      	movs	r3, #10
 8002180:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002184:	6838      	ldr	r0, [r7, #0]
 8002186:	f000 f971 	bl	800246c <null_ptr_check>
 800218a:	4603      	mov	r3, r0
 800218c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	do {
		if (rslt == BME680_OK) {
 8002190:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002194:	2b00      	cmp	r3, #0
 8002196:	f040 8083 	bne.w	80022a0 <read_field_data+0x13e>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 800219a:	f107 0108 	add.w	r1, r7, #8
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	220f      	movs	r2, #15
 80021a2:	201d      	movs	r0, #29
 80021a4:	f7fe ff2c 	bl	8001000 <bme680_get_regs>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80021ae:	7a3b      	ldrb	r3, [r7, #8]
 80021b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80021ba:	7a3b      	ldrb	r3, [r7, #8]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 80021c6:	7a7a      	ldrb	r2, [r7, #9]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80021cc:	7abb      	ldrb	r3, [r7, #10]
 80021ce:	031a      	lsls	r2, r3, #12
 80021d0:	7afb      	ldrb	r3, [r7, #11]
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 80021d6:	7b3a      	ldrb	r2, [r7, #12]
 80021d8:	0912      	lsrs	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80021dc:	4313      	orrs	r3, r2
 80021de:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80021e0:	7b7b      	ldrb	r3, [r7, #13]
 80021e2:	031a      	lsls	r2, r3, #12
 80021e4:	7bbb      	ldrb	r3, [r7, #14]
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	0912      	lsrs	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80021f4:	7c3b      	ldrb	r3, [r7, #16]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	7c7a      	ldrb	r2, [r7, #17]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8002200:	7d7b      	ldrb	r3, [r7, #21]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	b29b      	uxth	r3, r3
 8002206:	7dba      	ldrb	r2, [r7, #22]
 8002208:	0992      	lsrs	r2, r2, #6
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	4313      	orrs	r3, r2
 800220e:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8002210:	7dbb      	ldrb	r3, [r7, #22]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b25a      	sxtb	r2, r3
 800221e:	7dbb      	ldrb	r3, [r7, #22]
 8002220:	b25b      	sxtb	r3, r3
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	b25b      	sxtb	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b25b      	sxtb	r3, r3
 800222c:	b2da      	uxtb	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b25a      	sxtb	r2, r3
 8002238:	7dbb      	ldrb	r3, [r7, #22]
 800223a:	b25b      	sxtb	r3, r3
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	b25b      	sxtb	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	b25b      	sxtb	r3, r3
 8002246:	b2da      	uxtb	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b25b      	sxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	da20      	bge.n	8002298 <read_field_data+0x136>
				data->temperature = calc_temperature(adc_temp, dev);
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	69f8      	ldr	r0, [r7, #28]
 800225a:	f7ff fc07 	bl	8001a6c <calc_temperature>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	6a38      	ldr	r0, [r7, #32]
 800226a:	f7ff fc9a 	bl	8001ba2 <calc_pressure>
 800226e:	4602      	mov	r2, r0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8002274:	8b7b      	ldrh	r3, [r7, #26]
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fd3f 	bl	8001cfc <calc_humidity>
 800227e:	4602      	mov	r2, r0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8002284:	7df9      	ldrb	r1, [r7, #23]
 8002286:	8b3b      	ldrh	r3, [r7, #24]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fdd0 	bl	8001e30 <calc_gas_resistance>
 8002290:	4602      	mov	r2, r0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]
				break;
 8002296:	e00d      	b.n	80022b4 <read_field_data+0x152>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800229c:	200a      	movs	r0, #10
 800229e:	4798      	blx	r3
		}
		tries--;
 80022a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022a4:	3b01      	subs	r3, #1
 80022a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	} while (tries);
 80022aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f47f af6e 	bne.w	8002190 <read_field_data+0x2e>

	if (!tries)
 80022b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <read_field_data+0x160>
		rslt = BME680_W_NO_NEW_DATA;
 80022bc:	2302      	movs	r3, #2
 80022be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	return rslt;
 80022c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3728      	adds	r7, #40	@ 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80022ce:	b590      	push	{r4, r7, lr}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	6039      	str	r1, [r7, #0]
 80022d8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80022da:	6838      	ldr	r0, [r7, #0]
 80022dc:	f000 f8c6 	bl	800246c <null_ptr_check>
 80022e0:	4603      	mov	r3, r0
 80022e2:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80022e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d14f      	bne.n	800238c <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da02      	bge.n	80022fa <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	73bb      	strb	r3, [r7, #14]
 80022f8:	e001      	b.n	80022fe <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 80022fa:	2310      	movs	r3, #16
 80022fc:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	78db      	ldrb	r3, [r3, #3]
 8002302:	7bba      	ldrb	r2, [r7, #14]
 8002304:	429a      	cmp	r2, r3
 8002306:	d041      	beq.n	800238c <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	7bba      	ldrb	r2, [r7, #14]
 800230c:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	7858      	ldrb	r0, [r3, #1]
 8002316:	f107 020d 	add.w	r2, r7, #13
 800231a:	2301      	movs	r3, #1
 800231c:	21f3      	movs	r1, #243	@ 0xf3
 800231e:	47a0      	blx	r4
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			if (dev->com_rslt != 0)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 8002334:	23fe      	movs	r3, #254	@ 0xfe
 8002336:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 8002338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d125      	bne.n	800238c <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8002340:	7b7b      	ldrb	r3, [r7, #13]
 8002342:	f023 0310 	bic.w	r3, r3, #16
 8002346:	b2db      	uxtb	r3, r3
 8002348:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	78db      	ldrb	r3, [r3, #3]
 800234e:	b25b      	sxtb	r3, r3
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	b25a      	sxtb	r2, r3
 8002356:	7b7b      	ldrb	r3, [r7, #13]
 8002358:	b25b      	sxtb	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	b25b      	sxtb	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	7858      	ldrb	r0, [r3, #1]
 800236a:	f107 020d 	add.w	r2, r7, #13
 800236e:	2301      	movs	r3, #1
 8002370:	2173      	movs	r1, #115	@ 0x73
 8002372:	47a0      	blx	r4
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 8002388:	23fe      	movs	r3, #254	@ 0xfe
 800238a:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 800238c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bd90      	pop	{r4, r7, pc}

08002398 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f863 	bl	800246c <null_ptr_check>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11b      	bne.n	80023ea <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7858      	ldrb	r0, [r3, #1]
 80023ba:	f107 020e 	add.w	r2, r7, #14
 80023be:	2301      	movs	r3, #1
 80023c0:	21f3      	movs	r1, #243	@ 0xf3
 80023c2:	47a0      	blx	r4
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
		if (dev->com_rslt != 0)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 80023d8:	23fe      	movs	r3, #254	@ 0xfe
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e005      	b.n	80023ea <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 80023de:	7bbb      	ldrb	r3, [r7, #14]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}

080023f6 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b087      	sub	sp, #28
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	72fb      	strb	r3, [r7, #11]
 8002404:	4613      	mov	r3, r2
 8002406:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d022      	beq.n	8002458 <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	7afa      	ldrb	r2, [r7, #11]
 8002418:	429a      	cmp	r2, r3
 800241a:	d90b      	bls.n	8002434 <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	7afa      	ldrb	r2, [r7, #11]
 8002420:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	b2da      	uxtb	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	7aba      	ldrb	r2, [r7, #10]
 800243a:	429a      	cmp	r2, r3
 800243c:	d20e      	bcs.n	800245c <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	7aba      	ldrb	r2, [r7, #10]
 8002442:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800244a:	f043 0302 	orr.w	r3, r3, #2
 800244e:	b2da      	uxtb	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002456:	e001      	b.n	800245c <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8002458:	23ff      	movs	r3, #255	@ 0xff
 800245a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800245c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002460:	4618      	mov	r0, r3
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <null_ptr_check+0x26>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <null_ptr_check+0x26>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <null_ptr_check+0x26>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8002492:	23ff      	movs	r3, #255	@ 0xff
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	e001      	b.n	800249c <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800249c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	0000      	movs	r0, r0
	...

080024b0 <CalculateIAQ>:

int CalculateIAQ(int temperature, int humidity, int gas) {
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]

	float temperature_score, humidity_score, gas_score = 0;
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
	int IAQ_score, IAQ;

	if (temperature > 2500) {
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80024c8:	4293      	cmp	r3, r2
 80024ca:	dd12      	ble.n	80024f2 <CalculateIAQ+0x42>
		temperature_score = abs(2500 - temperature)/10;
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bfb8      	it	lt
 80024d8:	425b      	neglt	r3, r3
 80024da:	4a55      	ldr	r2, [pc, #340]	@ (8002630 <CalculateIAQ+0x180>)
 80024dc:	fb82 1203 	smull	r1, r2, r2, r3
 80024e0:	1092      	asrs	r2, r2, #2
 80024e2:	17db      	asrs	r3, r3, #31
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}
	if (gas < 20000) {
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80024f8:	4293      	cmp	r3, r2
 80024fa:	dc0f      	bgt.n	800251c <CalculateIAQ+0x6c>
		gas_score = (20000 - gas)/75;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	4a4b      	ldr	r2, [pc, #300]	@ (8002634 <CalculateIAQ+0x184>)
 8002506:	fb82 1203 	smull	r1, r2, r2, r3
 800250a:	10d2      	asrs	r2, r2, #3
 800250c:	17db      	asrs	r3, r3, #31
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002518:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	humidity_score = abs(50000 - humidity)/125;
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	bfb8      	it	lt
 8002528:	425b      	neglt	r3, r3
 800252a:	4a43      	ldr	r2, [pc, #268]	@ (8002638 <CalculateIAQ+0x188>)
 800252c:	fb82 1203 	smull	r1, r2, r2, r3
 8002530:	10d2      	asrs	r2, r2, #3
 8002532:	17db      	asrs	r3, r3, #31
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253e:	edc7 7a06 	vstr	s15, [r7, #24]

	IAQ_score = 100 - (0.2*temperature_score + 0.2*humidity_score + 0.6*gas_score);
 8002542:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002544:	f7fe f830 	bl	80005a8 <__aeabi_f2d>
 8002548:	a335      	add	r3, pc, #212	@ (adr r3, 8002620 <CalculateIAQ+0x170>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fe f883 	bl	8000658 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4614      	mov	r4, r2
 8002558:	461d      	mov	r5, r3
 800255a:	69b8      	ldr	r0, [r7, #24]
 800255c:	f7fe f824 	bl	80005a8 <__aeabi_f2d>
 8002560:	a32f      	add	r3, pc, #188	@ (adr r3, 8002620 <CalculateIAQ+0x170>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f7fe f877 	bl	8000658 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4620      	mov	r0, r4
 8002570:	4629      	mov	r1, r5
 8002572:	f7fd febb 	bl	80002ec <__adddf3>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4614      	mov	r4, r2
 800257c:	461d      	mov	r5, r3
 800257e:	6a38      	ldr	r0, [r7, #32]
 8002580:	f7fe f812 	bl	80005a8 <__aeabi_f2d>
 8002584:	a328      	add	r3, pc, #160	@ (adr r3, 8002628 <CalculateIAQ+0x178>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	f7fe f865 	bl	8000658 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	f7fd fea9 	bl	80002ec <__adddf3>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	f04f 0000 	mov.w	r0, #0
 80025a2:	4926      	ldr	r1, [pc, #152]	@ (800263c <CalculateIAQ+0x18c>)
 80025a4:	f7fd fea0 	bl	80002e8 <__aeabi_dsub>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe fb02 	bl	8000bb8 <__aeabi_d2iz>
 80025b4:	4603      	mov	r3, r0
 80025b6:	617b      	str	r3, [r7, #20]

	if      (IAQ_score >= 86)                		IAQ = 5; // 5 - Air quality is Good
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b55      	cmp	r3, #85	@ 0x55
 80025bc:	dd02      	ble.n	80025c4 <CalculateIAQ+0x114>
 80025be:	2305      	movs	r3, #5
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	e028      	b.n	8002616 <CalculateIAQ+0x166>
	else if (IAQ_score >= 61 && IAQ_score <= 85 ) 	IAQ = 4; // 4 - Air quality is Moderate
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b3c      	cmp	r3, #60	@ 0x3c
 80025c8:	dd05      	ble.n	80025d6 <CalculateIAQ+0x126>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b55      	cmp	r3, #85	@ 0x55
 80025ce:	dc02      	bgt.n	80025d6 <CalculateIAQ+0x126>
 80025d0:	2304      	movs	r3, #4
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	e01f      	b.n	8002616 <CalculateIAQ+0x166>
	else if (IAQ_score >= 41 && IAQ_score <= 60 ) 	IAQ = 3; // 3 - Air quality is Unhealthy for Sensitive Groups
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b28      	cmp	r3, #40	@ 0x28
 80025da:	dd05      	ble.n	80025e8 <CalculateIAQ+0x138>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b3c      	cmp	r3, #60	@ 0x3c
 80025e0:	dc02      	bgt.n	80025e8 <CalculateIAQ+0x138>
 80025e2:	2303      	movs	r3, #3
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e016      	b.n	8002616 <CalculateIAQ+0x166>
	else if (IAQ_score >= 30 && IAQ_score <= 40 ) 	IAQ = 2; // 2 - Air quality is Unhealthy
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b1d      	cmp	r3, #29
 80025ec:	dd05      	ble.n	80025fa <CalculateIAQ+0x14a>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b28      	cmp	r3, #40	@ 0x28
 80025f2:	dc02      	bgt.n	80025fa <CalculateIAQ+0x14a>
 80025f4:	2302      	movs	r3, #2
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	e00d      	b.n	8002616 <CalculateIAQ+0x166>
	else if (IAQ_score >= 20 && IAQ_score <= 29 ) 	IAQ = 1; // 1 - Air quality is Very Unhealthy
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b13      	cmp	r3, #19
 80025fe:	dd05      	ble.n	800260c <CalculateIAQ+0x15c>
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b1d      	cmp	r3, #29
 8002604:	dc02      	bgt.n	800260c <CalculateIAQ+0x15c>
 8002606:	2301      	movs	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	e004      	b.n	8002616 <CalculateIAQ+0x166>
	else if (IAQ_score <= 19 )						IAQ = 0; // 0 - Air quality is Hazardous
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b13      	cmp	r3, #19
 8002610:	dc01      	bgt.n	8002616 <CalculateIAQ+0x166>
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]

	return IAQ;
 8002616:	69fb      	ldr	r3, [r7, #28]
	//printf("%s | Score = %.2f | %.2f | %.2f", IAQ_text, score, gas_score, humidity_score);
}
 8002618:	4618      	mov	r0, r3
 800261a:	3728      	adds	r7, #40	@ 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bdb0      	pop	{r4, r5, r7, pc}
 8002620:	9999999a 	.word	0x9999999a
 8002624:	3fc99999 	.word	0x3fc99999
 8002628:	33333333 	.word	0x33333333
 800262c:	3fe33333 	.word	0x3fe33333
 8002630:	66666667 	.word	0x66666667
 8002634:	1b4e81b5 	.word	0x1b4e81b5
 8002638:	10624dd3 	.word	0x10624dd3
 800263c:	40590000 	.word	0x40590000

08002640 <CGIForm_Handler>:

//tCGI CGI_TAB[1];


const char *CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
	if (iIndex == 0)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f040 8240 	bne.w	8002ad6 <CGIForm_Handler+0x496>
	{
		for (int i=0; i<iNumParams; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e237      	b.n	8002acc <CGIForm_Handler+0x48c>
		{
			if (strcmp(pcParam[i], "ipv4_address0") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4990      	ldr	r1, [pc, #576]	@ (80028a8 <CGIForm_Handler+0x268>)
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd fdd1 	bl	8000210 <strcmp>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d11d      	bne.n	80026b0 <CGIForm_Handler+0x70>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4413      	add	r3, r2
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <CGIForm_Handler+0x70>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	4413      	add	r3, r2
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00e      	beq.n	80026b0 <CGIForm_Handler+0x70>
			{
				ipv4_address[0] = atoi(pcValue[i]);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	4413      	add	r3, r2
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f014 fae3 	bl	8016c68 <atoi>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a81      	ldr	r2, [pc, #516]	@ (80028ac <CGIForm_Handler+0x26c>)
 80026a6:	6013      	str	r3, [r2, #0]
				changed_ip_status = 1;
 80026a8:	4b81      	ldr	r3, [pc, #516]	@ (80028b0 <CGIForm_Handler+0x270>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e20a      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}

			else if (strcmp(pcParam[i], "ipv4_address1") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	497e      	ldr	r1, [pc, #504]	@ (80028b4 <CGIForm_Handler+0x274>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd fda7 	bl	8000210 <strcmp>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d11d      	bne.n	8002704 <CGIForm_Handler+0xc4>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <CGIForm_Handler+0xc4>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00e      	beq.n	8002704 <CGIForm_Handler+0xc4>
			{
				ipv4_address[1] = atoi(pcValue[i]);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f014 fab9 	bl	8016c68 <atoi>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4a6c      	ldr	r2, [pc, #432]	@ (80028ac <CGIForm_Handler+0x26c>)
 80026fa:	6053      	str	r3, [r2, #4]
				changed_ip_status = 1;
 80026fc:	4b6c      	ldr	r3, [pc, #432]	@ (80028b0 <CGIForm_Handler+0x270>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e1e0      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}

			else if (strcmp(pcParam[i], "ipv4_address2") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	496a      	ldr	r1, [pc, #424]	@ (80028b8 <CGIForm_Handler+0x278>)
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fd7d 	bl	8000210 <strcmp>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d11d      	bne.n	8002758 <CGIForm_Handler+0x118>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	4413      	add	r3, r2
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <CGIForm_Handler+0x118>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00e      	beq.n	8002758 <CGIForm_Handler+0x118>
			{
				ipv4_address[2] = atoi(pcValue[i]);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f014 fa8f 	bl	8016c68 <atoi>
 800274a:	4603      	mov	r3, r0
 800274c:	4a57      	ldr	r2, [pc, #348]	@ (80028ac <CGIForm_Handler+0x26c>)
 800274e:	6093      	str	r3, [r2, #8]
				changed_ip_status = 1;
 8002750:	4b57      	ldr	r3, [pc, #348]	@ (80028b0 <CGIForm_Handler+0x270>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e1b6      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}

			else if (strcmp(pcParam[i], "ipv4_address3") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4956      	ldr	r1, [pc, #344]	@ (80028bc <CGIForm_Handler+0x27c>)
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fd53 	bl	8000210 <strcmp>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11d      	bne.n	80027ac <CGIForm_Handler+0x16c>
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	4413      	add	r3, r2
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <CGIForm_Handler+0x16c>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	4413      	add	r3, r2
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00e      	beq.n	80027ac <CGIForm_Handler+0x16c>
			{
				ipv4_address[3] = atoi(pcValue[i]);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	4413      	add	r3, r2
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f014 fa65 	bl	8016c68 <atoi>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a42      	ldr	r2, [pc, #264]	@ (80028ac <CGIForm_Handler+0x26c>)
 80027a2:	60d3      	str	r3, [r2, #12]
				changed_ip_status = 1;
 80027a4:	4b42      	ldr	r3, [pc, #264]	@ (80028b0 <CGIForm_Handler+0x270>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e18c      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}
			else if (strcmp(pcParam[i], "mask_address0") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4942      	ldr	r1, [pc, #264]	@ (80028c0 <CGIForm_Handler+0x280>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fd29 	bl	8000210 <strcmp>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11d      	bne.n	8002800 <CGIForm_Handler+0x1c0>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <CGIForm_Handler+0x1c0>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00e      	beq.n	8002800 <CGIForm_Handler+0x1c0>
			{
				mask_address[0] = atoi(pcValue[i]);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f014 fa3b 	bl	8016c68 <atoi>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4a33      	ldr	r2, [pc, #204]	@ (80028c4 <CGIForm_Handler+0x284>)
 80027f6:	6013      	str	r3, [r2, #0]
				changed_ip_status = 1;
 80027f8:	4b2d      	ldr	r3, [pc, #180]	@ (80028b0 <CGIForm_Handler+0x270>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e162      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}

			else if (strcmp(pcParam[i], "mask_address1") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	492f      	ldr	r1, [pc, #188]	@ (80028c8 <CGIForm_Handler+0x288>)
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fcff 	bl	8000210 <strcmp>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11d      	bne.n	8002854 <CGIForm_Handler+0x214>
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	4413      	add	r3, r2
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <CGIForm_Handler+0x214>
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00e      	beq.n	8002854 <CGIForm_Handler+0x214>
			{
				mask_address[1] = atoi(pcValue[i]);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	4413      	add	r3, r2
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f014 fa11 	bl	8016c68 <atoi>
 8002846:	4603      	mov	r3, r0
 8002848:	4a1e      	ldr	r2, [pc, #120]	@ (80028c4 <CGIForm_Handler+0x284>)
 800284a:	6053      	str	r3, [r2, #4]
				changed_ip_status = 1;
 800284c:	4b18      	ldr	r3, [pc, #96]	@ (80028b0 <CGIForm_Handler+0x270>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e138      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}

			else if (strcmp(pcParam[i], "mask_address2") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	491b      	ldr	r1, [pc, #108]	@ (80028cc <CGIForm_Handler+0x28c>)
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fcd5 	bl	8000210 <strcmp>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d131      	bne.n	80028d0 <CGIForm_Handler+0x290>
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	4413      	add	r3, r2
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d02a      	beq.n	80028d0 <CGIForm_Handler+0x290>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4413      	add	r3, r2
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d022      	beq.n	80028d0 <CGIForm_Handler+0x290>
			{
				mask_address[2] = atoi(pcValue[i]);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	4413      	add	r3, r2
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f014 f9e7 	bl	8016c68 <atoi>
 800289a:	4603      	mov	r3, r0
 800289c:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <CGIForm_Handler+0x284>)
 800289e:	6093      	str	r3, [r2, #8]
				changed_ip_status = 1;
 80028a0:	4b03      	ldr	r3, [pc, #12]	@ (80028b0 <CGIForm_Handler+0x270>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e10e      	b.n	8002ac6 <CGIForm_Handler+0x486>
 80028a8:	08019cb4 	.word	0x08019cb4
 80028ac:	20000000 	.word	0x20000000
 80028b0:	200099a8 	.word	0x200099a8
 80028b4:	08019cc4 	.word	0x08019cc4
 80028b8:	08019cd4 	.word	0x08019cd4
 80028bc:	08019ce4 	.word	0x08019ce4
 80028c0:	08019cf4 	.word	0x08019cf4
 80028c4:	20000010 	.word	0x20000010
 80028c8:	08019d04 	.word	0x08019d04
 80028cc:	08019d14 	.word	0x08019d14
			}
			else if (strcmp(pcParam[i], "mask_address3") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4981      	ldr	r1, [pc, #516]	@ (8002ae0 <CGIForm_Handler+0x4a0>)
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fc97 	bl	8000210 <strcmp>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d11d      	bne.n	8002924 <CGIForm_Handler+0x2e4>
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <CGIForm_Handler+0x2e4>
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00e      	beq.n	8002924 <CGIForm_Handler+0x2e4>
			{
				mask_address[3] = atoi(pcValue[i]);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4413      	add	r3, r2
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f014 f9a9 	bl	8016c68 <atoi>
 8002916:	4603      	mov	r3, r0
 8002918:	4a72      	ldr	r2, [pc, #456]	@ (8002ae4 <CGIForm_Handler+0x4a4>)
 800291a:	60d3      	str	r3, [r2, #12]
				changed_ip_status = 1;
 800291c:	4b72      	ldr	r3, [pc, #456]	@ (8002ae8 <CGIForm_Handler+0x4a8>)
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e0d0      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}

			else if (strcmp(pcParam[i], "gateway_address0") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	496f      	ldr	r1, [pc, #444]	@ (8002aec <CGIForm_Handler+0x4ac>)
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fc6d 	bl	8000210 <strcmp>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d11d      	bne.n	8002978 <CGIForm_Handler+0x338>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	4413      	add	r3, r2
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <CGIForm_Handler+0x338>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	4413      	add	r3, r2
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00e      	beq.n	8002978 <CGIForm_Handler+0x338>
			{
				gateway_address[0] = atoi(pcValue[i]);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	4413      	add	r3, r2
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f014 f97f 	bl	8016c68 <atoi>
 800296a:	4603      	mov	r3, r0
 800296c:	4a60      	ldr	r2, [pc, #384]	@ (8002af0 <CGIForm_Handler+0x4b0>)
 800296e:	6013      	str	r3, [r2, #0]
				changed_ip_status = 1;
 8002970:	4b5d      	ldr	r3, [pc, #372]	@ (8002ae8 <CGIForm_Handler+0x4a8>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e0a6      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}

			else if (strcmp(pcParam[i], "gateway_address1") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	495c      	ldr	r1, [pc, #368]	@ (8002af4 <CGIForm_Handler+0x4b4>)
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fc43 	bl	8000210 <strcmp>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d11d      	bne.n	80029cc <CGIForm_Handler+0x38c>
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	4413      	add	r3, r2
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <CGIForm_Handler+0x38c>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00e      	beq.n	80029cc <CGIForm_Handler+0x38c>
			{
				gateway_address[1] = atoi(pcValue[i]);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f014 f955 	bl	8016c68 <atoi>
 80029be:	4603      	mov	r3, r0
 80029c0:	4a4b      	ldr	r2, [pc, #300]	@ (8002af0 <CGIForm_Handler+0x4b0>)
 80029c2:	6053      	str	r3, [r2, #4]
				changed_ip_status = 1;
 80029c4:	4b48      	ldr	r3, [pc, #288]	@ (8002ae8 <CGIForm_Handler+0x4a8>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e07c      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}
			else if (strcmp(pcParam[i], "gateway_address2") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4948      	ldr	r1, [pc, #288]	@ (8002af8 <CGIForm_Handler+0x4b8>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fc19 	bl	8000210 <strcmp>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11d      	bne.n	8002a20 <CGIForm_Handler+0x3e0>
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <CGIForm_Handler+0x3e0>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00e      	beq.n	8002a20 <CGIForm_Handler+0x3e0>
			{
				gateway_address[2] = atoi(pcValue[i]);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f014 f92b 	bl	8016c68 <atoi>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4a36      	ldr	r2, [pc, #216]	@ (8002af0 <CGIForm_Handler+0x4b0>)
 8002a16:	6093      	str	r3, [r2, #8]
				changed_ip_status = 1;
 8002a18:	4b33      	ldr	r3, [pc, #204]	@ (8002ae8 <CGIForm_Handler+0x4a8>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e052      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}

			else if (strcmp(pcParam[i], "gateway_address3") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4934      	ldr	r1, [pc, #208]	@ (8002afc <CGIForm_Handler+0x4bc>)
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fbef 	bl	8000210 <strcmp>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11d      	bne.n	8002a74 <CGIForm_Handler+0x434>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <CGIForm_Handler+0x434>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00e      	beq.n	8002a74 <CGIForm_Handler+0x434>
			{
				gateway_address[3] = atoi(pcValue[i]);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f014 f901 	bl	8016c68 <atoi>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4a21      	ldr	r2, [pc, #132]	@ (8002af0 <CGIForm_Handler+0x4b0>)
 8002a6a:	60d3      	str	r3, [r2, #12]
				changed_ip_status = 1;
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae8 <CGIForm_Handler+0x4a8>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e028      	b.n	8002ac6 <CGIForm_Handler+0x486>
			}

			else if (strcmp(pcParam[i], "room") == 0 && pcValue[i] != NULL && *pcValue[i] != '\0')
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4920      	ldr	r1, [pc, #128]	@ (8002b00 <CGIForm_Handler+0x4c0>)
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fbc5 	bl	8000210 <strcmp>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d11c      	bne.n	8002ac6 <CGIForm_Handler+0x486>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d015      	beq.n	8002ac6 <CGIForm_Handler+0x486>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <CGIForm_Handler+0x486>
			{
				room = atoi(pcValue[i]);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f014 f8d7 	bl	8016c68 <atoi>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a11      	ldr	r2, [pc, #68]	@ (8002b04 <CGIForm_Handler+0x4c4>)
 8002abe:	6013      	str	r3, [r2, #0]
				changed_ip_status = 1;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <CGIForm_Handler+0x4a8>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
		for (int i=0; i<iNumParams; i++)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	f6ff adc3 	blt.w	800265c <CGIForm_Handler+0x1c>
			}
		}
	}

	return "/index.html";
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <CGIForm_Handler+0x4c8>)
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	08019d24 	.word	0x08019d24
 8002ae4:	20000010 	.word	0x20000010
 8002ae8:	200099a8 	.word	0x200099a8
 8002aec:	08019d34 	.word	0x08019d34
 8002af0:	20000020 	.word	0x20000020
 8002af4:	08019d48 	.word	0x08019d48
 8002af8:	08019d5c 	.word	0x08019d5c
 8002afc:	08019d70 	.word	0x08019d70
 8002b00:	08019d84 	.word	0x08019d84
 8002b04:	200099a4 	.word	0x200099a4
 8002b08:	08019d8c 	.word	0x08019d8c

08002b0c <http_server_init>:

	return "/cgiled.html";
}*/

void http_server_init (void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	httpd_init();
 8002b10:	f008 ffd8 	bl	800bac4 <httpd_init>
	//http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);

	//CGI_TAB[0] = FORM_CGI;
	//CGI_TAB[1] = LED_CGI;

	http_set_cgi_handlers (&FORM_CGI, 1);
 8002b14:	2101      	movs	r1, #1
 8002b16:	4802      	ldr	r0, [pc, #8]	@ (8002b20 <http_server_init+0x14>)
 8002b18:	f008 fff4 	bl	800bb04 <http_set_cgi_handlers>
	//http_set_cgi_handlers (CGI_TAB, 1);
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	0801cefc 	.word	0x0801cefc

08002b24 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b28:	f3bf 8f4f 	dsb	sy
}
 8002b2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b2e:	f3bf 8f6f 	isb	sy
}
 8002b32:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002b34:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <SCB_EnableICache+0x48>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002b3c:	f3bf 8f4f 	dsb	sy
}
 8002b40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b42:	f3bf 8f6f 	isb	sy
}
 8002b46:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002b48:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <SCB_EnableICache+0x48>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	4a07      	ldr	r2, [pc, #28]	@ (8002b6c <SCB_EnableICache+0x48>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b54:	f3bf 8f4f 	dsb	sy
}
 8002b58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b5a:	f3bf 8f6f 	isb	sy
}
 8002b5e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002b76:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <SCB_EnableDCache+0x84>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002b7e:	f3bf 8f4f 	dsb	sy
}
 8002b82:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <SCB_EnableDCache+0x84>)
 8002b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b8a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0b5b      	lsrs	r3, r3, #13
 8002b90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b94:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b9e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8002ba8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002bae:	4911      	ldr	r1, [pc, #68]	@ (8002bf4 <SCB_EnableDCache+0x84>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1e5a      	subs	r2, r3, #1
 8002bba:	60ba      	str	r2, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ef      	bne.n	8002ba0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1e5a      	subs	r2, r3, #1
 8002bc4:	60fa      	str	r2, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e5      	bne.n	8002b96 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8002bca:	f3bf 8f4f 	dsb	sy
}
 8002bce:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002bd0:	4b08      	ldr	r3, [pc, #32]	@ (8002bf4 <SCB_EnableDCache+0x84>)
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	4a07      	ldr	r2, [pc, #28]	@ (8002bf4 <SCB_EnableDCache+0x84>)
 8002bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bda:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bdc:	f3bf 8f4f 	dsb	sy
}
 8002be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002be2:	f3bf 8f6f 	isb	sy
}
 8002be6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002c00:	1d39      	adds	r1, r7, #4
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	2201      	movs	r2, #1
 8002c08:	4803      	ldr	r0, [pc, #12]	@ (8002c18 <__io_putchar+0x20>)
 8002c0a:	f006 fd9b 	bl	8009744 <HAL_UART_Transmit>
  return ch;
 8002c0e:	687b      	ldr	r3, [r7, #4]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20009bd0 	.word	0x20009bd0

08002c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8002c22:	f7ff ff7f 	bl	8002b24 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8002c26:	f7ff ffa3 	bl	8002b70 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c2a:	f002 fcd5 	bl	80055d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c2e:	f000 f969 	bl	8002f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c32:	f000 fc17 	bl	8003464 <MX_GPIO_Init>
  MX_LWIP_Init();
 8002c36:	f007 fa0d 	bl	800a054 <MX_LWIP_Init>
  MX_I2C1_Init();
 8002c3a:	f000 f9d1 	bl	8002fe0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002c3e:	f000 fbe1 	bl	8003404 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002c42:	f000 fa4d 	bl	80030e0 <MX_TIM1_Init>
  MX_I2C2_Init();
 8002c46:	f000 fa0b 	bl	8003060 <MX_I2C2_Init>
  MX_TIM3_Init();
 8002c4a:	f000 faeb 	bl	8003224 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002c4e:	f000 fa9b 	bl	8003188 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002c52:	f000 fb37 	bl	80032c4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002c56:	f000 fb85 	bl	8003364 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  extern struct netif gnetif;
  http_server_init();
 8002c5a:	f7ff ff57 	bl	8002b0c <http_server_init>
  HAL_TIM_Base_Start_IT(&htim1);
 8002c5e:	488a      	ldr	r0, [pc, #552]	@ (8002e88 <main+0x26c>)
 8002c60:	f006 f8b2 	bl	8008dc8 <HAL_TIM_Base_Start_IT>


  // ----------------------- DEVICES CONFIG START -----------------------
  BME680_Initialize();
 8002c64:	f000 fe40 	bl	80038e8 <BME680_Initialize>
  RFID_PN532_Initialize();
 8002c68:	f000 fefe 	bl	8003a68 <RFID_PN532_Initialize>
  int HTML_Server_ON = 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	603b      	str	r3, [r7, #0]
  // ------------------------ DEVICES CONFIG END ------------------------

  // ------------------ IP WEBSITE CONFIG START -------------------
  if (HTML_Server_ON) {
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d063      	beq.n	8002d3e <main+0x122>
	  printf("\n\rActual board IP:");
 8002c76:	4885      	ldr	r0, [pc, #532]	@ (8002e8c <main+0x270>)
 8002c78:	f014 fe94 	bl	80179a4 <iprintf>
	  printf("\n\rIPv4: %d.%d.%d.%d",ipv4_address[0],ipv4_address[1],ipv4_address[2],ipv4_address[3]);
 8002c7c:	4b84      	ldr	r3, [pc, #528]	@ (8002e90 <main+0x274>)
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	4b83      	ldr	r3, [pc, #524]	@ (8002e90 <main+0x274>)
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4b82      	ldr	r3, [pc, #520]	@ (8002e90 <main+0x274>)
 8002c86:	6898      	ldr	r0, [r3, #8]
 8002c88:	4b81      	ldr	r3, [pc, #516]	@ (8002e90 <main+0x274>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4880      	ldr	r0, [pc, #512]	@ (8002e94 <main+0x278>)
 8002c92:	f014 fe87 	bl	80179a4 <iprintf>
	  printf("\n\rMask: %d.%d.%d.%d",mask_address[0],mask_address[1],mask_address[2],mask_address[3]);
 8002c96:	4b80      	ldr	r3, [pc, #512]	@ (8002e98 <main+0x27c>)
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e98 <main+0x27c>)
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	4b7e      	ldr	r3, [pc, #504]	@ (8002e98 <main+0x27c>)
 8002ca0:	6898      	ldr	r0, [r3, #8]
 8002ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8002e98 <main+0x27c>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4603      	mov	r3, r0
 8002caa:	487c      	ldr	r0, [pc, #496]	@ (8002e9c <main+0x280>)
 8002cac:	f014 fe7a 	bl	80179a4 <iprintf>
	  printf("\n\rGateway: %d.%d.%d.%d\n\r",gateway_address[0],gateway_address[1],gateway_address[2],gateway_address[3]);
 8002cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea0 <main+0x284>)
 8002cb2:	6819      	ldr	r1, [r3, #0]
 8002cb4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea0 <main+0x284>)
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4b79      	ldr	r3, [pc, #484]	@ (8002ea0 <main+0x284>)
 8002cba:	6898      	ldr	r0, [r3, #8]
 8002cbc:	4b78      	ldr	r3, [pc, #480]	@ (8002ea0 <main+0x284>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4877      	ldr	r0, [pc, #476]	@ (8002ea4 <main+0x288>)
 8002cc6:	f014 fe6d 	bl	80179a4 <iprintf>
	  do {
		  ethernetif_input(&gnetif);
 8002cca:	4877      	ldr	r0, [pc, #476]	@ (8002ea8 <main+0x28c>)
 8002ccc:	f007 fde6 	bl	800a89c <ethernetif_input>
		  MX_LWIP_Process();
 8002cd0:	f007 fb42 	bl	800a358 <MX_LWIP_Process>
	  } while(changed_ip_status == 0);
 8002cd4:	4b75      	ldr	r3, [pc, #468]	@ (8002eac <main+0x290>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f6      	beq.n	8002cca <main+0xae>
	  printf("\n\rNew board IP:");
 8002cdc:	4874      	ldr	r0, [pc, #464]	@ (8002eb0 <main+0x294>)
 8002cde:	f014 fe61 	bl	80179a4 <iprintf>
	  printf("\n\rIPv4: %d.%d.%d.%d",ipv4_address[0],ipv4_address[1],ipv4_address[2],ipv4_address[3]);
 8002ce2:	4b6b      	ldr	r3, [pc, #428]	@ (8002e90 <main+0x274>)
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e90 <main+0x274>)
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	4b69      	ldr	r3, [pc, #420]	@ (8002e90 <main+0x274>)
 8002cec:	6898      	ldr	r0, [r3, #8]
 8002cee:	4b68      	ldr	r3, [pc, #416]	@ (8002e90 <main+0x274>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4867      	ldr	r0, [pc, #412]	@ (8002e94 <main+0x278>)
 8002cf8:	f014 fe54 	bl	80179a4 <iprintf>
	  printf("\n\rMask: %d.%d.%d.%d",mask_address[0],mask_address[1],mask_address[2],mask_address[3]);
 8002cfc:	4b66      	ldr	r3, [pc, #408]	@ (8002e98 <main+0x27c>)
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	4b65      	ldr	r3, [pc, #404]	@ (8002e98 <main+0x27c>)
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4b64      	ldr	r3, [pc, #400]	@ (8002e98 <main+0x27c>)
 8002d06:	6898      	ldr	r0, [r3, #8]
 8002d08:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <main+0x27c>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4862      	ldr	r0, [pc, #392]	@ (8002e9c <main+0x280>)
 8002d12:	f014 fe47 	bl	80179a4 <iprintf>
	  printf("\n\rGateway: %d.%d.%d.%d\n\r",gateway_address[0],gateway_address[1],gateway_address[2],gateway_address[3]);
 8002d16:	4b62      	ldr	r3, [pc, #392]	@ (8002ea0 <main+0x284>)
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	4b61      	ldr	r3, [pc, #388]	@ (8002ea0 <main+0x284>)
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ea0 <main+0x284>)
 8002d20:	6898      	ldr	r0, [r3, #8]
 8002d22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea0 <main+0x284>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	4603      	mov	r3, r0
 8002d2a:	485e      	ldr	r0, [pc, #376]	@ (8002ea4 <main+0x288>)
 8002d2c:	f014 fe3a 	bl	80179a4 <iprintf>
	  // -------------------- IP WEBSITE CONFIG END --------------------
	  netif_remove(&gnetif);
 8002d30:	485d      	ldr	r0, [pc, #372]	@ (8002ea8 <main+0x28c>)
 8002d32:	f009 fe19 	bl	800c968 <netif_remove>
	  MX_LWIP_Init();
 8002d36:	f007 f98d 	bl	800a054 <MX_LWIP_Init>
	  udpClient_connect();
 8002d3a:	f002 f885 	bl	8004e48 <udpClient_connect>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8002d3e:	485d      	ldr	r0, [pc, #372]	@ (8002eb4 <main+0x298>)
 8002d40:	f006 f842 	bl	8008dc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002d44:	485c      	ldr	r0, [pc, #368]	@ (8002eb8 <main+0x29c>)
 8002d46:	f006 f83f 	bl	8008dc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002d4a:	485c      	ldr	r0, [pc, #368]	@ (8002ebc <main+0x2a0>)
 8002d4c:	f006 f83c 	bl	8008dc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8002d50:	485b      	ldr	r0, [pc, #364]	@ (8002ec0 <main+0x2a4>)
 8002d52:	f006 f839 	bl	8008dc8 <HAL_TIM_Base_Start_IT>
	  /*if((GPIOB->ODR & 0b1 == 0b1) && (Door_Timer_Flag == 1)) {
		  Door_Timer_Flag = Open_Door();
	  }*/


	  ethernetif_input(&gnetif);
 8002d56:	4854      	ldr	r0, [pc, #336]	@ (8002ea8 <main+0x28c>)
 8002d58:	f007 fda0 	bl	800a89c <ethernetif_input>
	  sys_check_timeouts();
 8002d5c:	f010 ff72 	bl	8013c44 <sys_check_timeouts>
	  if(RFID_Presence == 1 || client_connected == 1) {
 8002d60:	4b58      	ldr	r3, [pc, #352]	@ (8002ec4 <main+0x2a8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d003      	beq.n	8002d70 <main+0x154>
 8002d68:	4b57      	ldr	r3, [pc, #348]	@ (8002ec8 <main+0x2ac>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d1f2      	bne.n	8002d56 <main+0x13a>
		uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8002d70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d74:	2200      	movs	r2, #0
 8002d76:	4955      	ldr	r1, [pc, #340]	@ (8002ecc <main+0x2b0>)
 8002d78:	4855      	ldr	r0, [pc, #340]	@ (8002ed0 <main+0x2b4>)
 8002d7a:	f001 fa5d 	bl	8004238 <PN532_ReadPassiveTarget>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4a54      	ldr	r2, [pc, #336]	@ (8002ed4 <main+0x2b8>)
 8002d82:	6013      	str	r3, [r2, #0]
		if (uid_len != PN532_STATUS_ERROR) {
 8002d84:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <main+0x2b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d0e3      	beq.n	8002d56 <main+0x13a>
			  memset(message,0,keyLen);
			  for (uint8_t i = 0; i < uid_len; i++) {
				printf("%02x ", uid[i]);
				sprintf(message,"%s%02x",message,uid[i]);
			  }*/
		  memset(message, 0, keyLen);
 8002d8e:	2280      	movs	r2, #128	@ 0x80
 8002d90:	2100      	movs	r1, #0
 8002d92:	4851      	ldr	r0, [pc, #324]	@ (8002ed8 <main+0x2bc>)
 8002d94:	f014 ff98 	bl	8017cc8 <memset>
		  for (uint8_t block_number = 0; block_number < 1; block_number++) {
 8002d98:	2300      	movs	r3, #0
 8002d9a:	71fb      	strb	r3, [r7, #7]
 8002d9c:	e055      	b.n	8002e4a <main+0x22e>
			pn532_error = PN532_MifareClassicAuthenticateBlock(&pn532, uid, uid_len, block_number, MIFARE_CMD_AUTH_A, key_a);
 8002d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed4 <main+0x2b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	494c      	ldr	r1, [pc, #304]	@ (8002edc <main+0x2c0>)
 8002daa:	9101      	str	r1, [sp, #4]
 8002dac:	2160      	movs	r1, #96	@ 0x60
 8002dae:	9100      	str	r1, [sp, #0]
 8002db0:	4946      	ldr	r1, [pc, #280]	@ (8002ecc <main+0x2b0>)
 8002db2:	4847      	ldr	r0, [pc, #284]	@ (8002ed0 <main+0x2b4>)
 8002db4:	f001 fa9a 	bl	80042ec <PN532_MifareClassicAuthenticateBlock>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4b48      	ldr	r3, [pc, #288]	@ (8002ee0 <main+0x2c4>)
 8002dbe:	601a      	str	r2, [r3, #0]
			if (pn532_error != PN532_ERROR_NONE) break;
 8002dc0:	4b47      	ldr	r3, [pc, #284]	@ (8002ee0 <main+0x2c4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d144      	bne.n	8002e52 <main+0x236>
			pn532_error = PN532_MifareClassicReadBlock(&pn532, buff, block_number);
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4945      	ldr	r1, [pc, #276]	@ (8002ee4 <main+0x2c8>)
 8002dd0:	483f      	ldr	r0, [pc, #252]	@ (8002ed0 <main+0x2b4>)
 8002dd2:	f001 faec 	bl	80043ae <PN532_MifareClassicReadBlock>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b41      	ldr	r3, [pc, #260]	@ (8002ee0 <main+0x2c4>)
 8002ddc:	601a      	str	r2, [r3, #0]
			if (pn532_error != PN532_ERROR_NONE) break;
 8002dde:	4b40      	ldr	r3, [pc, #256]	@ (8002ee0 <main+0x2c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d137      	bne.n	8002e56 <main+0x23a>
			if ((pn532_error != 0x02) &&  (buff[0] != 0x00 && buff[1] != 0x00)) {	// Verifies if there were not any errors during the block reading
 8002de6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee0 <main+0x2c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d034      	beq.n	8002e58 <main+0x23c>
 8002dee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee4 <main+0x2c8>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d030      	beq.n	8002e58 <main+0x23c>
 8002df6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <main+0x2c8>)
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02c      	beq.n	8002e58 <main+0x23c>
				TAG_Read = 1;	// A tag is being read
 8002dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee8 <main+0x2cc>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
				printf("%d: ", block_number);
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	4619      	mov	r1, r3
 8002e08:	4838      	ldr	r0, [pc, #224]	@ (8002eec <main+0x2d0>)
 8002e0a:	f014 fdcb 	bl	80179a4 <iprintf>
			    for (uint8_t i = 0; i < 16; i++) {
 8002e0e:	2300      	movs	r3, #0
 8002e10:	71bb      	strb	r3, [r7, #6]
 8002e12:	e011      	b.n	8002e38 <main+0x21c>
				  printf("%02x ", buff[i]);
 8002e14:	79bb      	ldrb	r3, [r7, #6]
 8002e16:	4a33      	ldr	r2, [pc, #204]	@ (8002ee4 <main+0x2c8>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4834      	ldr	r0, [pc, #208]	@ (8002ef0 <main+0x2d4>)
 8002e1e:	f014 fdc1 	bl	80179a4 <iprintf>
				  sprintf(message,"%s%02x",message,buff[i]);
 8002e22:	79bb      	ldrb	r3, [r7, #6]
 8002e24:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee4 <main+0x2c8>)
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed8 <main+0x2bc>)
 8002e2a:	4932      	ldr	r1, [pc, #200]	@ (8002ef4 <main+0x2d8>)
 8002e2c:	482a      	ldr	r0, [pc, #168]	@ (8002ed8 <main+0x2bc>)
 8002e2e:	f014 fe29 	bl	8017a84 <siprintf>
			    for (uint8_t i = 0; i < 16; i++) {
 8002e32:	79bb      	ldrb	r3, [r7, #6]
 8002e34:	3301      	adds	r3, #1
 8002e36:	71bb      	strb	r3, [r7, #6]
 8002e38:	79bb      	ldrb	r3, [r7, #6]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d9ea      	bls.n	8002e14 <main+0x1f8>
			    }
			    printf("\r\n");
 8002e3e:	482e      	ldr	r0, [pc, #184]	@ (8002ef8 <main+0x2dc>)
 8002e40:	f014 fe18 	bl	8017a74 <puts>
		  for (uint8_t block_number = 0; block_number < 1; block_number++) {
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	3301      	adds	r3, #1
 8002e48:	71fb      	strb	r3, [r7, #7]
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0a6      	beq.n	8002d9e <main+0x182>
 8002e50:	e002      	b.n	8002e58 <main+0x23c>
			if (pn532_error != PN532_ERROR_NONE) break;
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <main+0x23c>
			if (pn532_error != PN532_ERROR_NONE) break;
 8002e56:	bf00      	nop
			} else {
				break;
			}
		  }
		  message_type = 1;	// Message will be sent has ID Information
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <main+0x2e0>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
		  if (TAG_Read == 1) {
 8002e5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ee8 <main+0x2cc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	f47f af77 	bne.w	8002d56 <main+0x13a>
			  if (HTML_Server_ON) udpClient_send();
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <main+0x256>
 8002e6e:	f002 f8eb 	bl	8005048 <udpClient_send>
			  RFID_Received = 0;	// It will wait for a reply from the server
 8002e72:	4b23      	ldr	r3, [pc, #140]	@ (8002f00 <main+0x2e4>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
			  HAL_Delay(1000);
 8002e78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e7c:	f002 fc0a 	bl	8005694 <HAL_Delay>
			  TAG_Read = 0;	// A new card is now ready to be read
 8002e80:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <main+0x2cc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
	  ethernetif_input(&gnetif);
 8002e86:	e766      	b.n	8002d56 <main+0x13a>
 8002e88:	20009a54 	.word	0x20009a54
 8002e8c:	08019d98 	.word	0x08019d98
 8002e90:	20000000 	.word	0x20000000
 8002e94:	08019dac 	.word	0x08019dac
 8002e98:	20000010 	.word	0x20000010
 8002e9c:	08019dc0 	.word	0x08019dc0
 8002ea0:	20000020 	.word	0x20000020
 8002ea4:	08019dd4 	.word	0x08019dd4
 8002ea8:	20009fbc 	.word	0x20009fbc
 8002eac:	200099a8 	.word	0x200099a8
 8002eb0:	08019df0 	.word	0x08019df0
 8002eb4:	20009aa0 	.word	0x20009aa0
 8002eb8:	20009aec 	.word	0x20009aec
 8002ebc:	20009b38 	.word	0x20009b38
 8002ec0:	20009b84 	.word	0x20009b84
 8002ec4:	20009dfc 	.word	0x20009dfc
 8002ec8:	20009e04 	.word	0x20009e04
 8002ecc:	20009dec 	.word	0x20009dec
 8002ed0:	20009cbc 	.word	0x20009cbc
 8002ed4:	20009de8 	.word	0x20009de8
 8002ed8:	20009e28 	.word	0x20009e28
 8002edc:	20000044 	.word	0x20000044
 8002ee0:	20009df8 	.word	0x20009df8
 8002ee4:	20009ce8 	.word	0x20009ce8
 8002ee8:	20009e00 	.word	0x20009e00
 8002eec:	08019e00 	.word	0x08019e00
 8002ef0:	08019e08 	.word	0x08019e08
 8002ef4:	08019e10 	.word	0x08019e10
 8002ef8:	08019e18 	.word	0x08019e18
 8002efc:	20009e08 	.word	0x20009e08
 8002f00:	20009fac 	.word	0x20009fac

08002f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b094      	sub	sp, #80	@ 0x50
 8002f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f0a:	f107 0320 	add.w	r3, r7, #32
 8002f0e:	2230      	movs	r2, #48	@ 0x30
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f014 fed8 	bl	8017cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f18:	f107 030c 	add.w	r3, r7, #12
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f28:	f004 fd44 	bl	80079b4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd8 <SystemClock_Config+0xd4>)
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	4a29      	ldr	r2, [pc, #164]	@ (8002fd8 <SystemClock_Config+0xd4>)
 8002f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f38:	4b27      	ldr	r3, [pc, #156]	@ (8002fd8 <SystemClock_Config+0xd4>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f44:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <SystemClock_Config+0xd8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a24      	ldr	r2, [pc, #144]	@ (8002fdc <SystemClock_Config+0xd8>)
 8002f4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b22      	ldr	r3, [pc, #136]	@ (8002fdc <SystemClock_Config+0xd8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002f60:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f66:	2302      	movs	r3, #2
 8002f68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f70:	2304      	movs	r3, #4
 8002f72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002f74:	23d8      	movs	r3, #216	@ 0xd8
 8002f76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f80:	f107 0320 	add.w	r3, r7, #32
 8002f84:	4618      	mov	r0, r3
 8002f86:	f004 fd75 	bl	8007a74 <HAL_RCC_OscConfig>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002f90:	f000 fe3c 	bl	8003c0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f94:	f004 fd1e 	bl	80079d4 <HAL_PWREx_EnableOverDrive>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002f9e:	f000 fe35 	bl	8003c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002fba:	f107 030c 	add.w	r3, r7, #12
 8002fbe:	2107      	movs	r1, #7
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 fffb 	bl	8007fbc <HAL_RCC_ClockConfig>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002fcc:	f000 fe1e 	bl	8003c0c <Error_Handler>
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	3750      	adds	r7, #80	@ 0x50
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40007000 	.word	0x40007000

08002fe0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <MX_I2C1_Init+0x74>)
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8003058 <MX_I2C1_Init+0x78>)
 8002fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8002fea:	4b1a      	ldr	r3, [pc, #104]	@ (8003054 <MX_I2C1_Init+0x74>)
 8002fec:	4a1b      	ldr	r2, [pc, #108]	@ (800305c <MX_I2C1_Init+0x7c>)
 8002fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ff0:	4b18      	ldr	r3, [pc, #96]	@ (8003054 <MX_I2C1_Init+0x74>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ff6:	4b17      	ldr	r3, [pc, #92]	@ (8003054 <MX_I2C1_Init+0x74>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ffc:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <MX_I2C1_Init+0x74>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003002:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <MX_I2C1_Init+0x74>)
 8003004:	2200      	movs	r2, #0
 8003006:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003008:	4b12      	ldr	r3, [pc, #72]	@ (8003054 <MX_I2C1_Init+0x74>)
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800300e:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <MX_I2C1_Init+0x74>)
 8003010:	2200      	movs	r2, #0
 8003012:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003014:	4b0f      	ldr	r3, [pc, #60]	@ (8003054 <MX_I2C1_Init+0x74>)
 8003016:	2200      	movs	r2, #0
 8003018:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800301a:	480e      	ldr	r0, [pc, #56]	@ (8003054 <MX_I2C1_Init+0x74>)
 800301c:	f003 ff4c 	bl	8006eb8 <HAL_I2C_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003026:	f000 fdf1 	bl	8003c0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800302a:	2100      	movs	r1, #0
 800302c:	4809      	ldr	r0, [pc, #36]	@ (8003054 <MX_I2C1_Init+0x74>)
 800302e:	f004 fc29 	bl	8007884 <HAL_I2CEx_ConfigAnalogFilter>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003038:	f000 fde8 	bl	8003c0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800303c:	2100      	movs	r1, #0
 800303e:	4805      	ldr	r0, [pc, #20]	@ (8003054 <MX_I2C1_Init+0x74>)
 8003040:	f004 fc6b 	bl	800791a <HAL_I2CEx_ConfigDigitalFilter>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800304a:	f000 fddf 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200099ac 	.word	0x200099ac
 8003058:	40005400 	.word	0x40005400
 800305c:	6000030d 	.word	0x6000030d

08003060 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003064:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <MX_I2C2_Init+0x74>)
 8003066:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <MX_I2C2_Init+0x78>)
 8003068:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 800306a:	4b1a      	ldr	r3, [pc, #104]	@ (80030d4 <MX_I2C2_Init+0x74>)
 800306c:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <MX_I2C2_Init+0x7c>)
 800306e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003070:	4b18      	ldr	r3, [pc, #96]	@ (80030d4 <MX_I2C2_Init+0x74>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003076:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <MX_I2C2_Init+0x74>)
 8003078:	2201      	movs	r2, #1
 800307a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800307c:	4b15      	ldr	r3, [pc, #84]	@ (80030d4 <MX_I2C2_Init+0x74>)
 800307e:	2200      	movs	r2, #0
 8003080:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003082:	4b14      	ldr	r3, [pc, #80]	@ (80030d4 <MX_I2C2_Init+0x74>)
 8003084:	2200      	movs	r2, #0
 8003086:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003088:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <MX_I2C2_Init+0x74>)
 800308a:	2200      	movs	r2, #0
 800308c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800308e:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <MX_I2C2_Init+0x74>)
 8003090:	2200      	movs	r2, #0
 8003092:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003094:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <MX_I2C2_Init+0x74>)
 8003096:	2200      	movs	r2, #0
 8003098:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800309a:	480e      	ldr	r0, [pc, #56]	@ (80030d4 <MX_I2C2_Init+0x74>)
 800309c:	f003 ff0c 	bl	8006eb8 <HAL_I2C_Init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80030a6:	f000 fdb1 	bl	8003c0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030aa:	2100      	movs	r1, #0
 80030ac:	4809      	ldr	r0, [pc, #36]	@ (80030d4 <MX_I2C2_Init+0x74>)
 80030ae:	f004 fbe9 	bl	8007884 <HAL_I2CEx_ConfigAnalogFilter>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80030b8:	f000 fda8 	bl	8003c0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80030bc:	2100      	movs	r1, #0
 80030be:	4805      	ldr	r0, [pc, #20]	@ (80030d4 <MX_I2C2_Init+0x74>)
 80030c0:	f004 fc2b 	bl	800791a <HAL_I2CEx_ConfigDigitalFilter>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80030ca:	f000 fd9f 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20009a00 	.word	0x20009a00
 80030d8:	40005800 	.word	0x40005800
 80030dc:	20404768 	.word	0x20404768

080030e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030e6:	f107 0310 	add.w	r3, r7, #16
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f4:	1d3b      	adds	r3, r7, #4
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <MX_TIM1_Init+0xa0>)
 8003100:	4a20      	ldr	r2, [pc, #128]	@ (8003184 <MX_TIM1_Init+0xa4>)
 8003102:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 43200-1;
 8003104:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <MX_TIM1_Init+0xa0>)
 8003106:	f64a 02bf 	movw	r2, #43199	@ 0xa8bf
 800310a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310c:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <MX_TIM1_Init+0xa0>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 8003112:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <MX_TIM1_Init+0xa0>)
 8003114:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8003118:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311a:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <MX_TIM1_Init+0xa0>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003120:	4b17      	ldr	r3, [pc, #92]	@ (8003180 <MX_TIM1_Init+0xa0>)
 8003122:	2200      	movs	r2, #0
 8003124:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003126:	4b16      	ldr	r3, [pc, #88]	@ (8003180 <MX_TIM1_Init+0xa0>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800312c:	4814      	ldr	r0, [pc, #80]	@ (8003180 <MX_TIM1_Init+0xa0>)
 800312e:	f005 fd5b 	bl	8008be8 <HAL_TIM_Base_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8003138:	f000 fd68 	bl	8003c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800313c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003140:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003142:	f107 0310 	add.w	r3, r7, #16
 8003146:	4619      	mov	r1, r3
 8003148:	480d      	ldr	r0, [pc, #52]	@ (8003180 <MX_TIM1_Init+0xa0>)
 800314a:	f005 ffd5 	bl	80090f8 <HAL_TIM_ConfigClockSource>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003154:	f000 fd5a 	bl	8003c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003158:	2300      	movs	r3, #0
 800315a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4805      	ldr	r0, [pc, #20]	@ (8003180 <MX_TIM1_Init+0xa0>)
 800316a:	f006 f9f1 	bl	8009550 <HAL_TIMEx_MasterConfigSynchronization>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003174:	f000 fd4a 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003178:	bf00      	nop
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20009a54 	.word	0x20009a54
 8003184:	40010000 	.word	0x40010000

08003188 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031a6:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <MX_TIM2_Init+0x94>)
 80031a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80031ae:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <MX_TIM2_Init+0x94>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b4:	4b19      	ldr	r3, [pc, #100]	@ (800321c <MX_TIM2_Init+0x94>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 21600000-1;
 80031ba:	4b18      	ldr	r3, [pc, #96]	@ (800321c <MX_TIM2_Init+0x94>)
 80031bc:	4a18      	ldr	r2, [pc, #96]	@ (8003220 <MX_TIM2_Init+0x98>)
 80031be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c0:	4b16      	ldr	r3, [pc, #88]	@ (800321c <MX_TIM2_Init+0x94>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031c6:	4b15      	ldr	r3, [pc, #84]	@ (800321c <MX_TIM2_Init+0x94>)
 80031c8:	2280      	movs	r2, #128	@ 0x80
 80031ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031cc:	4813      	ldr	r0, [pc, #76]	@ (800321c <MX_TIM2_Init+0x94>)
 80031ce:	f005 fd0b 	bl	8008be8 <HAL_TIM_Base_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80031d8:	f000 fd18 	bl	8003c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031e2:	f107 0310 	add.w	r3, r7, #16
 80031e6:	4619      	mov	r1, r3
 80031e8:	480c      	ldr	r0, [pc, #48]	@ (800321c <MX_TIM2_Init+0x94>)
 80031ea:	f005 ff85 	bl	80090f8 <HAL_TIM_ConfigClockSource>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80031f4:	f000 fd0a 	bl	8003c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031f8:	2300      	movs	r3, #0
 80031fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	4619      	mov	r1, r3
 8003204:	4805      	ldr	r0, [pc, #20]	@ (800321c <MX_TIM2_Init+0x94>)
 8003206:	f006 f9a3 	bl	8009550 <HAL_TIMEx_MasterConfigSynchronization>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003210:	f000 fcfc 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003214:	bf00      	nop
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20009aa0 	.word	0x20009aa0
 8003220:	014996ff 	.word	0x014996ff

08003224 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800322a:	f107 0310 	add.w	r3, r7, #16
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003242:	4b1e      	ldr	r3, [pc, #120]	@ (80032bc <MX_TIM3_Init+0x98>)
 8003244:	4a1e      	ldr	r2, [pc, #120]	@ (80032c0 <MX_TIM3_Init+0x9c>)
 8003246:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 43200-1;
 8003248:	4b1c      	ldr	r3, [pc, #112]	@ (80032bc <MX_TIM3_Init+0x98>)
 800324a:	f64a 02bf 	movw	r2, #43199	@ 0xa8bf
 800324e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003250:	4b1a      	ldr	r3, [pc, #104]	@ (80032bc <MX_TIM3_Init+0x98>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8003256:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <MX_TIM3_Init+0x98>)
 8003258:	f242 720f 	movw	r2, #9999	@ 0x270f
 800325c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325e:	4b17      	ldr	r3, [pc, #92]	@ (80032bc <MX_TIM3_Init+0x98>)
 8003260:	2200      	movs	r2, #0
 8003262:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003264:	4b15      	ldr	r3, [pc, #84]	@ (80032bc <MX_TIM3_Init+0x98>)
 8003266:	2200      	movs	r2, #0
 8003268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800326a:	4814      	ldr	r0, [pc, #80]	@ (80032bc <MX_TIM3_Init+0x98>)
 800326c:	f005 fcbc 	bl	8008be8 <HAL_TIM_Base_Init>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8003276:	f000 fcc9 	bl	8003c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800327a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800327e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003280:	f107 0310 	add.w	r3, r7, #16
 8003284:	4619      	mov	r1, r3
 8003286:	480d      	ldr	r0, [pc, #52]	@ (80032bc <MX_TIM3_Init+0x98>)
 8003288:	f005 ff36 	bl	80090f8 <HAL_TIM_ConfigClockSource>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003292:	f000 fcbb 	bl	8003c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4806      	ldr	r0, [pc, #24]	@ (80032bc <MX_TIM3_Init+0x98>)
 80032a4:	f006 f954 	bl	8009550 <HAL_TIMEx_MasterConfigSynchronization>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80032ae:	f000 fcad 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032b2:	bf00      	nop
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20009aec 	.word	0x20009aec
 80032c0:	40000400 	.word	0x40000400

080032c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ca:	f107 0310 	add.w	r3, r7, #16
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d8:	1d3b      	adds	r3, r7, #4
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032e2:	4b1e      	ldr	r3, [pc, #120]	@ (800335c <MX_TIM4_Init+0x98>)
 80032e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003360 <MX_TIM4_Init+0x9c>)
 80032e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49463-1;
 80032e8:	4b1c      	ldr	r3, [pc, #112]	@ (800335c <MX_TIM4_Init+0x98>)
 80032ea:	f24c 1236 	movw	r2, #49462	@ 0xc136
 80032ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f0:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <MX_TIM4_Init+0x98>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25500-1;
 80032f6:	4b19      	ldr	r3, [pc, #100]	@ (800335c <MX_TIM4_Init+0x98>)
 80032f8:	f246 329b 	movw	r2, #25499	@ 0x639b
 80032fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fe:	4b17      	ldr	r3, [pc, #92]	@ (800335c <MX_TIM4_Init+0x98>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003304:	4b15      	ldr	r3, [pc, #84]	@ (800335c <MX_TIM4_Init+0x98>)
 8003306:	2280      	movs	r2, #128	@ 0x80
 8003308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800330a:	4814      	ldr	r0, [pc, #80]	@ (800335c <MX_TIM4_Init+0x98>)
 800330c:	f005 fc6c 	bl	8008be8 <HAL_TIM_Base_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8003316:	f000 fc79 	bl	8003c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800331a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800331e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	4619      	mov	r1, r3
 8003326:	480d      	ldr	r0, [pc, #52]	@ (800335c <MX_TIM4_Init+0x98>)
 8003328:	f005 fee6 	bl	80090f8 <HAL_TIM_ConfigClockSource>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8003332:	f000 fc6b 	bl	8003c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4806      	ldr	r0, [pc, #24]	@ (800335c <MX_TIM4_Init+0x98>)
 8003344:	f006 f904 	bl	8009550 <HAL_TIMEx_MasterConfigSynchronization>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800334e:	f000 fc5d 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20009b38 	.word	0x20009b38
 8003360:	40000800 	.word	0x40000800

08003364 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800336a:	f107 0310 	add.w	r3, r7, #16
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003382:	4b1e      	ldr	r3, [pc, #120]	@ (80033fc <MX_TIM5_Init+0x98>)
 8003384:	4a1e      	ldr	r2, [pc, #120]	@ (8003400 <MX_TIM5_Init+0x9c>)
 8003386:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 43200-1;
 8003388:	4b1c      	ldr	r3, [pc, #112]	@ (80033fc <MX_TIM5_Init+0x98>)
 800338a:	f64a 02bf 	movw	r2, #43199	@ 0xa8bf
 800338e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003390:	4b1a      	ldr	r3, [pc, #104]	@ (80033fc <MX_TIM5_Init+0x98>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8003396:	4b19      	ldr	r3, [pc, #100]	@ (80033fc <MX_TIM5_Init+0x98>)
 8003398:	f242 720f 	movw	r2, #9999	@ 0x270f
 800339c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800339e:	4b17      	ldr	r3, [pc, #92]	@ (80033fc <MX_TIM5_Init+0x98>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a4:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <MX_TIM5_Init+0x98>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80033aa:	4814      	ldr	r0, [pc, #80]	@ (80033fc <MX_TIM5_Init+0x98>)
 80033ac:	f005 fc1c 	bl	8008be8 <HAL_TIM_Base_Init>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80033b6:	f000 fc29 	bl	8003c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80033c0:	f107 0310 	add.w	r3, r7, #16
 80033c4:	4619      	mov	r1, r3
 80033c6:	480d      	ldr	r0, [pc, #52]	@ (80033fc <MX_TIM5_Init+0x98>)
 80033c8:	f005 fe96 	bl	80090f8 <HAL_TIM_ConfigClockSource>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80033d2:	f000 fc1b 	bl	8003c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80033de:	1d3b      	adds	r3, r7, #4
 80033e0:	4619      	mov	r1, r3
 80033e2:	4806      	ldr	r0, [pc, #24]	@ (80033fc <MX_TIM5_Init+0x98>)
 80033e4:	f006 f8b4 	bl	8009550 <HAL_TIMEx_MasterConfigSynchronization>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80033ee:	f000 fc0d 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80033f2:	bf00      	nop
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20009b84 	.word	0x20009b84
 8003400:	40000c00 	.word	0x40000c00

08003404 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003408:	4b14      	ldr	r3, [pc, #80]	@ (800345c <MX_USART3_UART_Init+0x58>)
 800340a:	4a15      	ldr	r2, [pc, #84]	@ (8003460 <MX_USART3_UART_Init+0x5c>)
 800340c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800340e:	4b13      	ldr	r3, [pc, #76]	@ (800345c <MX_USART3_UART_Init+0x58>)
 8003410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003414:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003416:	4b11      	ldr	r3, [pc, #68]	@ (800345c <MX_USART3_UART_Init+0x58>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800341c:	4b0f      	ldr	r3, [pc, #60]	@ (800345c <MX_USART3_UART_Init+0x58>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003422:	4b0e      	ldr	r3, [pc, #56]	@ (800345c <MX_USART3_UART_Init+0x58>)
 8003424:	2200      	movs	r2, #0
 8003426:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003428:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <MX_USART3_UART_Init+0x58>)
 800342a:	220c      	movs	r2, #12
 800342c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342e:	4b0b      	ldr	r3, [pc, #44]	@ (800345c <MX_USART3_UART_Init+0x58>)
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003434:	4b09      	ldr	r3, [pc, #36]	@ (800345c <MX_USART3_UART_Init+0x58>)
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800343a:	4b08      	ldr	r3, [pc, #32]	@ (800345c <MX_USART3_UART_Init+0x58>)
 800343c:	2200      	movs	r2, #0
 800343e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <MX_USART3_UART_Init+0x58>)
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003446:	4805      	ldr	r0, [pc, #20]	@ (800345c <MX_USART3_UART_Init+0x58>)
 8003448:	f006 f92e 	bl	80096a8 <HAL_UART_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003452:	f000 fbdb 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20009bd0 	.word	0x20009bd0
 8003460:	40004800 	.word	0x40004800

08003464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08c      	sub	sp, #48	@ 0x30
 8003468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346a:	f107 031c 	add.w	r3, r7, #28
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	60da      	str	r2, [r3, #12]
 8003478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800347a:	4b45      	ldr	r3, [pc, #276]	@ (8003590 <MX_GPIO_Init+0x12c>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	4a44      	ldr	r2, [pc, #272]	@ (8003590 <MX_GPIO_Init+0x12c>)
 8003480:	f043 0304 	orr.w	r3, r3, #4
 8003484:	6313      	str	r3, [r2, #48]	@ 0x30
 8003486:	4b42      	ldr	r3, [pc, #264]	@ (8003590 <MX_GPIO_Init+0x12c>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003492:	4b3f      	ldr	r3, [pc, #252]	@ (8003590 <MX_GPIO_Init+0x12c>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	4a3e      	ldr	r2, [pc, #248]	@ (8003590 <MX_GPIO_Init+0x12c>)
 8003498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800349c:	6313      	str	r3, [r2, #48]	@ 0x30
 800349e:	4b3c      	ldr	r3, [pc, #240]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034aa:	4b39      	ldr	r3, [pc, #228]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	4a38      	ldr	r2, [pc, #224]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b6:	4b36      	ldr	r3, [pc, #216]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c2:	4b33      	ldr	r3, [pc, #204]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	4a32      	ldr	r2, [pc, #200]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ce:	4b30      	ldr	r3, [pc, #192]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034da:	4b2d      	ldr	r3, [pc, #180]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	4a2c      	ldr	r2, [pc, #176]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034f2:	4b27      	ldr	r3, [pc, #156]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	4a26      	ldr	r2, [pc, #152]	@ (8003590 <MX_GPIO_Init+0x12c>)
 80034f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034fe:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <MX_GPIO_Init+0x12c>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 800350a:	2200      	movs	r2, #0
 800350c:	2181      	movs	r1, #129	@ 0x81
 800350e:	4821      	ldr	r0, [pc, #132]	@ (8003594 <MX_GPIO_Init+0x130>)
 8003510:	f003 fca0 	bl	8006e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8003514:	2200      	movs	r2, #0
 8003516:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800351a:	481f      	ldr	r0, [pc, #124]	@ (8003598 <MX_GPIO_Init+0x134>)
 800351c:	f003 fc9a 	bl	8006e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003520:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003526:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800352a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003530:	f107 031c 	add.w	r3, r7, #28
 8003534:	4619      	mov	r1, r3
 8003536:	4818      	ldr	r0, [pc, #96]	@ (8003598 <MX_GPIO_Init+0x134>)
 8003538:	f003 fae0 	bl	8006afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 800353c:	2381      	movs	r3, #129	@ 0x81
 800353e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003540:	2301      	movs	r3, #1
 8003542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003548:	2300      	movs	r3, #0
 800354a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	4619      	mov	r1, r3
 8003552:	4810      	ldr	r0, [pc, #64]	@ (8003594 <MX_GPIO_Init+0x130>)
 8003554:	f003 fad2 	bl	8006afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003558:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800355c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355e:	2301      	movs	r3, #1
 8003560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356a:	f107 031c 	add.w	r3, r7, #28
 800356e:	4619      	mov	r1, r3
 8003570:	4809      	ldr	r0, [pc, #36]	@ (8003598 <MX_GPIO_Init+0x134>)
 8003572:	f003 fac3 	bl	8006afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	2028      	movs	r0, #40	@ 0x28
 800357c:	f002 f995 	bl	80058aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003580:	2028      	movs	r0, #40	@ 0x28
 8003582:	f002 f9ae 	bl	80058e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003586:	bf00      	nop
 8003588:	3730      	adds	r7, #48	@ 0x30
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800
 8003594:	40020400 	.word	0x40020400
 8003598:	40020800 	.word	0x40020800

0800359c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b087      	sub	sp, #28
 80035a0:	af04      	add	r7, sp, #16
 80035a2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback

  if (htim == &htim1 && BME_Presence == 1)	// 10 sec timer to read BME data
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a78      	ldr	r2, [pc, #480]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	f040 80a0 	bne.w	80036ee <HAL_TIM_PeriodElapsedCallback+0x152>
 80035ae:	4b77      	ldr	r3, [pc, #476]	@ (800378c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	f040 809b 	bne.w	80036ee <HAL_TIM_PeriodElapsedCallback+0x152>
  {
	// Query the sample data
	rslt = bme680_get_sensor_data(&data, &gas_sensor);
 80035b8:	4975      	ldr	r1, [pc, #468]	@ (8003790 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80035ba:	4876      	ldr	r0, [pc, #472]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80035bc:	f7fe f8b8 	bl	8001730 <bme680_get_sensor_data>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b74      	ldr	r3, [pc, #464]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80035c6:	701a      	strb	r2, [r3, #0]

	printf("\n\r----------Data read----------");
 80035c8:	4874      	ldr	r0, [pc, #464]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x200>)
 80035ca:	f014 f9eb 	bl	80179a4 <iprintf>
	printf("\n\rTemperature:    %.2fºC", data.temperature / 100.0f);
 80035ce:	4b71      	ldr	r3, [pc, #452]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80035d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035dc:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80037a0 <HAL_TIM_PeriodElapsedCallback+0x204>
 80035e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80035e4:	ee16 0a90 	vmov	r0, s13
 80035e8:	f7fc ffde 	bl	80005a8 <__aeabi_f2d>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	486c      	ldr	r0, [pc, #432]	@ (80037a4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80035f2:	f014 f9d7 	bl	80179a4 <iprintf>
	printf("\n\rAtm. Pressure:  %.2f hPa", data.pressure / 100.0f);
 80035f6:	4b67      	ldr	r3, [pc, #412]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80037a0 <HAL_TIM_PeriodElapsedCallback+0x204>
 8003606:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800360a:	ee16 0a90 	vmov	r0, s13
 800360e:	f7fc ffcb 	bl	80005a8 <__aeabi_f2d>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4864      	ldr	r0, [pc, #400]	@ (80037a8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003618:	f014 f9c4 	bl	80179a4 <iprintf>
	printf("\n\rHumidity:       %.2f %%", data.humidity / 1000.0f );
 800361c:	4b5d      	ldr	r3, [pc, #372]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	ee07 3a90 	vmov	s15, r3
 8003624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003628:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80037ac <HAL_TIM_PeriodElapsedCallback+0x210>
 800362c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003630:	ee16 0a90 	vmov	r0, s13
 8003634:	f7fc ffb8 	bl	80005a8 <__aeabi_f2d>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	485c      	ldr	r0, [pc, #368]	@ (80037b0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800363e:	f014 f9b1 	bl	80179a4 <iprintf>
	printf("\n\rGas Resistance: %ld ohms", data.gas_resistance);
 8003642:	4b54      	ldr	r3, [pc, #336]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	4619      	mov	r1, r3
 8003648:	485a      	ldr	r0, [pc, #360]	@ (80037b4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800364a:	f014 f9ab 	bl	80179a4 <iprintf>

	IAQ = CalculateIAQ(data.temperature,data.humidity,data.gas_resistance);
 800364e:	4b51      	ldr	r3, [pc, #324]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8003650:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003654:	4618      	mov	r0, r3
 8003656:	4b4f      	ldr	r3, [pc, #316]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4619      	mov	r1, r3
 800365c:	4b4d      	ldr	r3, [pc, #308]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	461a      	mov	r2, r3
 8003662:	f7fe ff25 	bl	80024b0 <CalculateIAQ>
 8003666:	4603      	mov	r3, r0
 8003668:	4a53      	ldr	r2, [pc, #332]	@ (80037b8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800366a:	6013      	str	r3, [r2, #0]

	if (IAQ <= 2 && client_connected == 1) {	// IAQ less than 3 is a bad air quality, mandatory to trigger the Emergency System
 800366c:	4b52      	ldr	r3, [pc, #328]	@ (80037b8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b02      	cmp	r3, #2
 8003672:	dc09      	bgt.n	8003688 <HAL_TIM_PeriodElapsedCallback+0xec>
 8003674:	4b51      	ldr	r3, [pc, #324]	@ (80037bc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d105      	bne.n	8003688 <HAL_TIM_PeriodElapsedCallback+0xec>
		sprintf(message,"9Emergency\0");
 800367c:	4950      	ldr	r1, [pc, #320]	@ (80037c0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800367e:	4851      	ldr	r0, [pc, #324]	@ (80037c4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003680:	f014 fa00 	bl	8017a84 <siprintf>
		udpClient_send();
 8003684:	f001 fce0 	bl	8005048 <udpClient_send>
	}

	printf("\n\rAir Quality:    %d", IAQ);
 8003688:	4b4b      	ldr	r3, [pc, #300]	@ (80037b8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4619      	mov	r1, r3
 800368e:	484e      	ldr	r0, [pc, #312]	@ (80037c8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003690:	f014 f988 	bl	80179a4 <iprintf>
	printf("\n\r-----------------------------\n\r");
 8003694:	484d      	ldr	r0, [pc, #308]	@ (80037cc <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003696:	f014 f985 	bl	80179a4 <iprintf>
	sprintf(message,"2%d %d %d %d %d \0",data.temperature,data.pressure,data.humidity,IAQ,People_Counter);
 800369a:	4b3e      	ldr	r3, [pc, #248]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800369c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036a0:	461c      	mov	r4, r3
 80036a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80036a4:	6898      	ldr	r0, [r3, #8]
 80036a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	4a43      	ldr	r2, [pc, #268]	@ (80037b8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	4948      	ldr	r1, [pc, #288]	@ (80037d0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80036b0:	6809      	ldr	r1, [r1, #0]
 80036b2:	9102      	str	r1, [sp, #8]
 80036b4:	9201      	str	r2, [sp, #4]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	4603      	mov	r3, r0
 80036ba:	4622      	mov	r2, r4
 80036bc:	4945      	ldr	r1, [pc, #276]	@ (80037d4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80036be:	4841      	ldr	r0, [pc, #260]	@ (80037c4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80036c0:	f014 f9e0 	bl	8017a84 <siprintf>
	//printf("\n\rMessage to send: %s\n\r",message);
	if (client_connected == 1) {
 80036c4:	4b3d      	ldr	r3, [pc, #244]	@ (80037bc <HAL_TIM_PeriodElapsedCallback+0x220>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d104      	bne.n	80036d6 <HAL_TIM_PeriodElapsedCallback+0x13a>
		message_type = 2;
 80036cc:	4b42      	ldr	r3, [pc, #264]	@ (80037d8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80036ce:	2202      	movs	r2, #2
 80036d0:	601a      	str	r2, [r3, #0]
		udpClient_send();
 80036d2:	f001 fcb9 	bl	8005048 <udpClient_send>
	}

	// Request the next sample
	if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 80036d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003790 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80036d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d106      	bne.n	80036ee <HAL_TIM_PeriodElapsedCallback+0x152>
	  rslt = bme680_set_sensor_mode(&gas_sensor);
 80036e0:	482b      	ldr	r0, [pc, #172]	@ (8003790 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80036e2:	f7fd ff5e 	bl	80015a2 <bme680_set_sensor_mode>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80036ec:	701a      	strb	r2, [r3, #0]
	}

  }

  if(htim == &htim2) {	// 100 msec timer to read any Emergency situation that can be sent by the server
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a3a      	ldr	r2, [pc, #232]	@ (80037dc <HAL_TIM_PeriodElapsedCallback+0x240>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_TIM_PeriodElapsedCallback+0x15e>
	  receiver();
 80036f6:	f001 fd43 	bl	8005180 <receiver>
  }

  if(htim == &htim3) {	// 5 sec timer to close the door after it has been opened
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a38      	ldr	r2, [pc, #224]	@ (80037e0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d114      	bne.n	800372c <HAL_TIM_PeriodElapsedCallback+0x190>
	  // Close door and restore the normal state
	  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
 8003702:	2200      	movs	r2, #0
 8003704:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003708:	4836      	ldr	r0, [pc, #216]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800370a:	f003 fba3 	bl	8006e54 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
 800370e:	2200      	movs	r2, #0
 8003710:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003714:	4833      	ldr	r0, [pc, #204]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003716:	f003 fb9d 	bl	8006e54 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,0);
 800371a:	2200      	movs	r2, #0
 800371c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003720:	4830      	ldr	r0, [pc, #192]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003722:	f003 fb97 	bl	8006e54 <HAL_GPIO_WritePin>
	  HAL_TIM_Base_Stop(&htim3);
 8003726:	482e      	ldr	r0, [pc, #184]	@ (80037e0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003728:	f005 fb26 	bl	8008d78 <HAL_TIM_Base_Stop>
  }

  if(htim == &htim4) {	// 15 sec timer to cancel the Emergency System
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a2e      	ldr	r2, [pc, #184]	@ (80037e8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d117      	bne.n	8003764 <HAL_TIM_PeriodElapsedCallback+0x1c8>
	  // Cancel Emergency and restore the normal state
	  emergencyFlag = 0;	// Disable Emergency Flag
 8003734:	4b2d      	ldr	r3, [pc, #180]	@ (80037ec <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
	  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
 800373a:	2200      	movs	r2, #0
 800373c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003740:	4828      	ldr	r0, [pc, #160]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003742:	f003 fb87 	bl	8006e54 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
 8003746:	2200      	movs	r2, #0
 8003748:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800374c:	4825      	ldr	r0, [pc, #148]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800374e:	f003 fb81 	bl	8006e54 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,0);
 8003752:	2200      	movs	r2, #0
 8003754:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003758:	4822      	ldr	r0, [pc, #136]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800375a:	f003 fb7b 	bl	8006e54 <HAL_GPIO_WritePin>
  	  HAL_TIM_Base_Stop(&htim4);
 800375e:	4822      	ldr	r0, [pc, #136]	@ (80037e8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003760:	f005 fb0a 	bl	8008d78 <HAL_TIM_Base_Stop>
  }

  if(htim == &htim5) {	// 5 sec timer to turn off the Not Access Led
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a22      	ldr	r2, [pc, #136]	@ (80037f0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d108      	bne.n	800377e <HAL_TIM_PeriodElapsedCallback+0x1e2>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,0);
 800376c:	2200      	movs	r2, #0
 800376e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003772:	481c      	ldr	r0, [pc, #112]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003774:	f003 fb6e 	bl	8006e54 <HAL_GPIO_WritePin>
	  HAL_TIM_Base_Stop(&htim5);
 8003778:	481d      	ldr	r0, [pc, #116]	@ (80037f0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800377a:	f005 fafd 	bl	8008d78 <HAL_TIM_Base_Stop>
  }
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	bd90      	pop	{r4, r7, pc}
 8003786:	bf00      	nop
 8003788:	20009a54 	.word	0x20009a54
 800378c:	20009cb8 	.word	0x20009cb8
 8003790:	20009c60 	.word	0x20009c60
 8003794:	20009cd4 	.word	0x20009cd4
 8003798:	20009c58 	.word	0x20009c58
 800379c:	08019e1c 	.word	0x08019e1c
 80037a0:	42c80000 	.word	0x42c80000
 80037a4:	08019e3c 	.word	0x08019e3c
 80037a8:	08019e58 	.word	0x08019e58
 80037ac:	447a0000 	.word	0x447a0000
 80037b0:	08019e74 	.word	0x08019e74
 80037b4:	08019e90 	.word	0x08019e90
 80037b8:	20009c5c 	.word	0x20009c5c
 80037bc:	20009e04 	.word	0x20009e04
 80037c0:	08019eac 	.word	0x08019eac
 80037c4:	20009e28 	.word	0x20009e28
 80037c8:	08019eb8 	.word	0x08019eb8
 80037cc:	08019ed0 	.word	0x08019ed0
 80037d0:	20009e14 	.word	0x20009e14
 80037d4:	08019ef4 	.word	0x08019ef4
 80037d8:	20009e08 	.word	0x20009e08
 80037dc:	20009aa0 	.word	0x20009aa0
 80037e0:	20009aec 	.word	0x20009aec
 80037e4:	40020800 	.word	0x40020800
 80037e8:	20009b38 	.word	0x20009b38
 80037ec:	20009e10 	.word	0x20009e10
 80037f0:	20009b84 	.word	0x20009b84

080037f4 <bme680I2cRead>:

int8_t bme680I2cRead(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	603a      	str	r2, [r7, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
 8003802:	460b      	mov	r3, r1
 8003804:	71bb      	strb	r3, [r7, #6]
 8003806:	4613      	mov	r3, r2
 8003808:	80bb      	strh	r3, [r7, #4]
  int8_t result;

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	b29b      	uxth	r3, r3
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	b299      	uxth	r1, r3
 8003812:	1dba      	adds	r2, r7, #6
 8003814:	f04f 33ff 	mov.w	r3, #4294967295
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2301      	movs	r3, #1
 800381c:	4812      	ldr	r0, [pc, #72]	@ (8003868 <bme680I2cRead+0x74>)
 800381e:	f003 fbdb 	bl	8006fd8 <HAL_I2C_Master_Transmit>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <bme680I2cRead+0x3a>
	result = -1;
 8003828:	23ff      	movs	r3, #255	@ 0xff
 800382a:	73fb      	strb	r3, [r7, #15]
 800382c:	e016      	b.n	800385c <bme680I2cRead+0x68>
  } else if (HAL_I2C_Master_Receive (&hi2c1, (dev_id << 1) | 0x01, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	b21b      	sxth	r3, r3
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	b21b      	sxth	r3, r3
 800383a:	b299      	uxth	r1, r3
 800383c:	88bb      	ldrh	r3, [r7, #4]
 800383e:	f04f 32ff 	mov.w	r2, #4294967295
 8003842:	9200      	str	r2, [sp, #0]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4808      	ldr	r0, [pc, #32]	@ (8003868 <bme680I2cRead+0x74>)
 8003848:	f003 fcba 	bl	80071c0 <HAL_I2C_Master_Receive>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <bme680I2cRead+0x64>
	result = -1;
 8003852:	23ff      	movs	r3, #255	@ 0xff
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e001      	b.n	800385c <bme680I2cRead+0x68>
  } else {
	result = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
  }

  return result;
 800385c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200099ac 	.word	0x200099ac

0800386c <bme680I2cWrite>:

int8_t bme680I2cWrite(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af02      	add	r7, sp, #8
 8003872:	603a      	str	r2, [r7, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
 800387a:	460b      	mov	r3, r1
 800387c:	71bb      	strb	r3, [r7, #6]
 800387e:	4613      	mov	r3, r2
 8003880:	80bb      	strh	r3, [r7, #4]
  int8_t result;
  int8_t *buf;

  // Allocate and load I2C transmit buffer
  buf = malloc(len + 1);
 8003882:	88bb      	ldrh	r3, [r7, #4]
 8003884:	3301      	adds	r3, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f013 f9f2 	bl	8016c70 <malloc>
 800388c:	4603      	mov	r3, r0
 800388e:	60bb      	str	r3, [r7, #8]
  buf[0] = reg_addr;
 8003890:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	701a      	strb	r2, [r3, #0]
  memcpy(buf + 1, reg_data, len);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	3301      	adds	r3, #1
 800389c:	88ba      	ldrh	r2, [r7, #4]
 800389e:	6839      	ldr	r1, [r7, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f014 fada 	bl	8017e5a <memcpy>

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	b299      	uxth	r1, r3
 80038ae:	88bb      	ldrh	r3, [r7, #4]
 80038b0:	3301      	adds	r3, #1
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	f04f 32ff 	mov.w	r2, #4294967295
 80038b8:	9200      	str	r2, [sp, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4809      	ldr	r0, [pc, #36]	@ (80038e4 <bme680I2cWrite+0x78>)
 80038be:	f003 fb8b 	bl	8006fd8 <HAL_I2C_Master_Transmit>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <bme680I2cWrite+0x62>
	result = -1;
 80038c8:	23ff      	movs	r3, #255	@ 0xff
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	e001      	b.n	80038d2 <bme680I2cWrite+0x66>
  } else {
	result = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  }

  free(buf);
 80038d2:	68b8      	ldr	r0, [r7, #8]
 80038d4:	f013 f9d4 	bl	8016c80 <free>
  return result;
 80038d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	200099ac 	.word	0x200099ac

080038e8 <BME680_Initialize>:

void BME680_Initialize() {
 80038e8:	b5b0      	push	{r4, r5, r7, lr}
 80038ea:	b090      	sub	sp, #64	@ 0x40
 80038ec:	af00      	add	r7, sp, #0
  // Configure the BME680 driver
  gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 80038ee:	4b50      	ldr	r3, [pc, #320]	@ (8003a30 <BME680_Initialize+0x148>)
 80038f0:	2276      	movs	r2, #118	@ 0x76
 80038f2:	705a      	strb	r2, [r3, #1]
  gas_sensor.intf = BME680_I2C_INTF;
 80038f4:	4b4e      	ldr	r3, [pc, #312]	@ (8003a30 <BME680_Initialize+0x148>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	709a      	strb	r2, [r3, #2]
  gas_sensor.read = bme680I2cRead;
 80038fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003a30 <BME680_Initialize+0x148>)
 80038fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003a34 <BME680_Initialize+0x14c>)
 80038fe:	649a      	str	r2, [r3, #72]	@ 0x48
  gas_sensor.write = bme680I2cWrite;
 8003900:	4b4b      	ldr	r3, [pc, #300]	@ (8003a30 <BME680_Initialize+0x148>)
 8003902:	4a4d      	ldr	r2, [pc, #308]	@ (8003a38 <BME680_Initialize+0x150>)
 8003904:	64da      	str	r2, [r3, #76]	@ 0x4c
  gas_sensor.delay_ms = HAL_Delay;
 8003906:	4b4a      	ldr	r3, [pc, #296]	@ (8003a30 <BME680_Initialize+0x148>)
 8003908:	4a4c      	ldr	r2, [pc, #304]	@ (8003a3c <BME680_Initialize+0x154>)
 800390a:	651a      	str	r2, [r3, #80]	@ 0x50
  gas_sensor.amb_temp = 25;
 800390c:	4b48      	ldr	r3, [pc, #288]	@ (8003a30 <BME680_Initialize+0x148>)
 800390e:	2219      	movs	r2, #25
 8003910:	711a      	strb	r2, [r3, #4]

  // Initialize the driver
  if (bme680_init(&gas_sensor) != BME680_OK) {
 8003912:	4847      	ldr	r0, [pc, #284]	@ (8003a30 <BME680_Initialize+0x148>)
 8003914:	f7fd fb40 	bl	8000f98 <bme680_init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00e      	beq.n	800393c <BME680_Initialize+0x54>
	char bme_msg[] = "\n\rBME680 Initialization Error\r\n";
 800391e:	4b48      	ldr	r3, [pc, #288]	@ (8003a40 <BME680_Initialize+0x158>)
 8003920:	463c      	mov	r4, r7
 8003922:	461d      	mov	r5, r3
 8003924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003928:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800392c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printf("%s", bme_msg);
 8003930:	463b      	mov	r3, r7
 8003932:	4619      	mov	r1, r3
 8003934:	4843      	ldr	r0, [pc, #268]	@ (8003a44 <BME680_Initialize+0x15c>)
 8003936:	f014 f835 	bl	80179a4 <iprintf>
 800393a:	e012      	b.n	8003962 <BME680_Initialize+0x7a>
  } else {
	char bme_msg[] = "\n\rBME680 Initialized and Ready\r\nCalibration Startup\r\n";
 800393c:	4b42      	ldr	r3, [pc, #264]	@ (8003a48 <BME680_Initialize+0x160>)
 800393e:	463c      	mov	r4, r7
 8003940:	461d      	mov	r5, r3
 8003942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800394a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800394c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800394e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003952:	6020      	str	r0, [r4, #0]
 8003954:	3404      	adds	r4, #4
 8003956:	8021      	strh	r1, [r4, #0]
	printf("%s", bme_msg);
 8003958:	463b      	mov	r3, r7
 800395a:	4619      	mov	r1, r3
 800395c:	4839      	ldr	r0, [pc, #228]	@ (8003a44 <BME680_Initialize+0x15c>)
 800395e:	f014 f821 	bl	80179a4 <iprintf>
  }

  // Select desired oversampling rates
  gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8003962:	4b33      	ldr	r3, [pc, #204]	@ (8003a30 <BME680_Initialize+0x148>)
 8003964:	2202      	movs	r2, #2
 8003966:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 800396a:	4b31      	ldr	r3, [pc, #196]	@ (8003a30 <BME680_Initialize+0x148>)
 800396c:	2203      	movs	r2, #3
 800396e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 8003972:	4b2f      	ldr	r3, [pc, #188]	@ (8003a30 <BME680_Initialize+0x148>)
 8003974:	2204      	movs	r2, #4
 8003976:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
 800397a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a30 <BME680_Initialize+0x148>)
 800397c:	2202      	movs	r2, #2
 800397e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

  gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8003982:	4b2b      	ldr	r3, [pc, #172]	@ (8003a30 <BME680_Initialize+0x148>)
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  gas_sensor.gas_sett.heatr_temp = 320;
 800398a:	4b29      	ldr	r3, [pc, #164]	@ (8003a30 <BME680_Initialize+0x148>)
 800398c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003990:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  gas_sensor.gas_sett.heatr_dur = 150;
 8003994:	4b26      	ldr	r3, [pc, #152]	@ (8003a30 <BME680_Initialize+0x148>)
 8003996:	2296      	movs	r2, #150	@ 0x96
 8003998:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  // Set sensor to "always on"
  gas_sensor.power_mode = BME680_FORCED_MODE;
 800399c:	4b24      	ldr	r3, [pc, #144]	@ (8003a30 <BME680_Initialize+0x148>)
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  // Set oversampling settings
  static uint8_t required_settings = (BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL);
  rslt = bme680_set_sensor_settings(required_settings, &gas_sensor);
 80039a4:	4b29      	ldr	r3, [pc, #164]	@ (8003a4c <BME680_Initialize+0x164>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4921      	ldr	r1, [pc, #132]	@ (8003a30 <BME680_Initialize+0x148>)
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fc31 	bl	8001212 <bme680_set_sensor_settings>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b26      	ldr	r3, [pc, #152]	@ (8003a50 <BME680_Initialize+0x168>)
 80039b6:	701a      	strb	r2, [r3, #0]

  // Set sensor mode
  rslt = bme680_set_sensor_mode(&gas_sensor);
 80039b8:	481d      	ldr	r0, [pc, #116]	@ (8003a30 <BME680_Initialize+0x148>)
 80039ba:	f7fd fdf2 	bl	80015a2 <bme680_set_sensor_mode>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b23      	ldr	r3, [pc, #140]	@ (8003a50 <BME680_Initialize+0x168>)
 80039c4:	701a      	strb	r2, [r3, #0]

  // Query minimum sampling period
  static uint16_t min_sampling_period;
  bme680_get_profile_dur(&min_sampling_period, &gas_sensor);
 80039c6:	491a      	ldr	r1, [pc, #104]	@ (8003a30 <BME680_Initialize+0x148>)
 80039c8:	4822      	ldr	r0, [pc, #136]	@ (8003a54 <BME680_Initialize+0x16c>)
 80039ca:	f7fd fe4f 	bl	800166c <bme680_get_profile_dur>

  // BME preparation and calibration in order to heat up the module to read the right values
  int readings = 100;
 80039ce:	2364      	movs	r3, #100	@ 0x64
 80039d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (int i = 1; i <= readings + 3; i++) {
 80039d2:	2301      	movs	r3, #1
 80039d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039d6:	e01a      	b.n	8003a0e <BME680_Initialize+0x126>
	if (gas_sensor.power_mode == BME680_FORCED_MODE) bme680_set_sensor_mode(&gas_sensor);
 80039d8:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <BME680_Initialize+0x148>)
 80039da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <BME680_Initialize+0x100>
 80039e2:	4813      	ldr	r0, [pc, #76]	@ (8003a30 <BME680_Initialize+0x148>)
 80039e4:	f7fd fddd 	bl	80015a2 <bme680_set_sensor_mode>
	bme680_get_sensor_data(&data, &gas_sensor);
 80039e8:	4911      	ldr	r1, [pc, #68]	@ (8003a30 <BME680_Initialize+0x148>)
 80039ea:	481b      	ldr	r0, [pc, #108]	@ (8003a58 <BME680_Initialize+0x170>)
 80039ec:	f7fd fea0 	bl	8001730 <bme680_get_sensor_data>
	//printf("\r\nValue %d : %ld",i,data.gas_resistance);
	if(i > 3 && data.gas_resistance > gas_target) {
 80039f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	dd05      	ble.n	8003a02 <BME680_Initialize+0x11a>
 80039f6:	4b18      	ldr	r3, [pc, #96]	@ (8003a58 <BME680_Initialize+0x170>)
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	4a18      	ldr	r2, [pc, #96]	@ (8003a5c <BME680_Initialize+0x174>)
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d80b      	bhi.n	8003a1a <BME680_Initialize+0x132>
		break;
	}
	HAL_Delay(100);
 8003a02:	2064      	movs	r0, #100	@ 0x64
 8003a04:	f001 fe46 	bl	8005694 <HAL_Delay>
  for (int i = 1; i <= readings + 3; i++) {
 8003a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a10:	3303      	adds	r3, #3
 8003a12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a14:	429a      	cmp	r2, r3
 8003a16:	dddf      	ble.n	80039d8 <BME680_Initialize+0xf0>
 8003a18:	e000      	b.n	8003a1c <BME680_Initialize+0x134>
		break;
 8003a1a:	bf00      	nop
  }
  printf("\n\rBME Initialized\n\r");
 8003a1c:	4810      	ldr	r0, [pc, #64]	@ (8003a60 <BME680_Initialize+0x178>)
 8003a1e:	f013 ffc1 	bl	80179a4 <iprintf>
  BME_Presence = 1;
 8003a22:	4b10      	ldr	r3, [pc, #64]	@ (8003a64 <BME680_Initialize+0x17c>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	3740      	adds	r7, #64	@ 0x40
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a30:	20009c60 	.word	0x20009c60
 8003a34:	080037f5 	.word	0x080037f5
 8003a38:	0800386d 	.word	0x0800386d
 8003a3c:	08005695 	.word	0x08005695
 8003a40:	08019f20 	.word	0x08019f20
 8003a44:	08019f08 	.word	0x08019f08
 8003a48:	08019f40 	.word	0x08019f40
 8003a4c:	2000004a 	.word	0x2000004a
 8003a50:	20009c58 	.word	0x20009c58
 8003a54:	20009e18 	.word	0x20009e18
 8003a58:	20009cd4 	.word	0x20009cd4
 8003a5c:	20000040 	.word	0x20000040
 8003a60:	08019f0c 	.word	0x08019f0c
 8003a64:	20009cb8 	.word	0x20009cb8

08003a68 <RFID_PN532_Initialize>:

void RFID_PN532_Initialize() {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  // Configure RFID Driver
  PN532_I2C_Init(&pn532);
 8003a6c:	4812      	ldr	r0, [pc, #72]	@ (8003ab8 <RFID_PN532_Initialize+0x50>)
 8003a6e:	f000 fdef 	bl	8004650 <PN532_I2C_Init>
  PN532_GetFirmwareVersion(&pn532, buff);
 8003a72:	4912      	ldr	r1, [pc, #72]	@ (8003abc <RFID_PN532_Initialize+0x54>)
 8003a74:	4810      	ldr	r0, [pc, #64]	@ (8003ab8 <RFID_PN532_Initialize+0x50>)
 8003a76:	f000 fb99 	bl	80041ac <PN532_GetFirmwareVersion>
  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 8003a7a:	4910      	ldr	r1, [pc, #64]	@ (8003abc <RFID_PN532_Initialize+0x54>)
 8003a7c:	480e      	ldr	r0, [pc, #56]	@ (8003ab8 <RFID_PN532_Initialize+0x50>)
 8003a7e:	f000 fb95 	bl	80041ac <PN532_GetFirmwareVersion>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d115      	bne.n	8003ab4 <RFID_PN532_Initialize+0x4c>
	printf("\n\rFound PN532 with firmware version: %d.%d", buff[1], buff[2]);
 8003a88:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <RFID_PN532_Initialize+0x54>)
 8003a8a:	785b      	ldrb	r3, [r3, #1]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <RFID_PN532_Initialize+0x54>)
 8003a90:	789b      	ldrb	r3, [r3, #2]
 8003a92:	461a      	mov	r2, r3
 8003a94:	480a      	ldr	r0, [pc, #40]	@ (8003ac0 <RFID_PN532_Initialize+0x58>)
 8003a96:	f013 ff85 	bl	80179a4 <iprintf>
  } else {
	return;
  }
  PN532_SamConfiguration(&pn532);
 8003a9a:	4807      	ldr	r0, [pc, #28]	@ (8003ab8 <RFID_PN532_Initialize+0x50>)
 8003a9c:	f000 fbaa 	bl	80041f4 <PN532_SamConfiguration>
  printf("\n\rPN532 Initialized");
 8003aa0:	4808      	ldr	r0, [pc, #32]	@ (8003ac4 <RFID_PN532_Initialize+0x5c>)
 8003aa2:	f013 ff7f 	bl	80179a4 <iprintf>
  printf("\n\rWaiting for RFID/NFC card...\r\n");
 8003aa6:	4808      	ldr	r0, [pc, #32]	@ (8003ac8 <RFID_PN532_Initialize+0x60>)
 8003aa8:	f013 ffe4 	bl	8017a74 <puts>
  RFID_Presence = 1;
 8003aac:	4b07      	ldr	r3, [pc, #28]	@ (8003acc <RFID_PN532_Initialize+0x64>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e000      	b.n	8003ab6 <RFID_PN532_Initialize+0x4e>
	return;
 8003ab4:	bf00      	nop
}
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20009cbc 	.word	0x20009cbc
 8003abc:	20009ce8 	.word	0x20009ce8
 8003ac0:	08019f78 	.word	0x08019f78
 8003ac4:	08019fa4 	.word	0x08019fa4
 8003ac8:	08019fb8 	.word	0x08019fb8
 8003acc:	20009dfc 	.word	0x20009dfc

08003ad0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)	// Interrupt for when C13 button is pressed
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae0:	d103      	bne.n	8003aea <HAL_GPIO_EXTI_Callback+0x1a>
	  Open_Door(0,1);	// Meaning it is exiting the room (no emergency)
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f000 f805 	bl	8003af4 <Open_Door>
    }
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <Open_Door>:

void Open_Door(int emergency, int InOut) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
	// Open the door
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,1);
 8003afe:	2201      	movs	r2, #1
 8003b00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b04:	483a      	ldr	r0, [pc, #232]	@ (8003bf0 <Open_Door+0xfc>)
 8003b06:	f003 f9a5 	bl	8006e54 <HAL_GPIO_WritePin>

	if(emergency == 0 && emergencyFlag == 0 && InOut == 0) {	// Normal opening of door from outside to inside
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11f      	bne.n	8003b50 <Open_Door+0x5c>
 8003b10:	4b38      	ldr	r3, [pc, #224]	@ (8003bf4 <Open_Door+0x100>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d11b      	bne.n	8003b50 <Open_Door+0x5c>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d118      	bne.n	8003b50 <Open_Door+0x5c>
		TIM3 -> CNT = 0;
 8003b1e:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <Open_Door+0x104>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(&htim3);
 8003b24:	4835      	ldr	r0, [pc, #212]	@ (8003bfc <Open_Door+0x108>)
 8003b26:	f005 f8b7 	bl	8008c98 <HAL_TIM_Base_Start>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,1);
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b30:	482f      	ldr	r0, [pc, #188]	@ (8003bf0 <Open_Door+0xfc>)
 8003b32:	f003 f98f 	bl	8006e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b3c:	482c      	ldr	r0, [pc, #176]	@ (8003bf0 <Open_Door+0xfc>)
 8003b3e:	f003 f989 	bl	8006e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,0);
 8003b42:	2200      	movs	r2, #0
 8003b44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b48:	4829      	ldr	r0, [pc, #164]	@ (8003bf0 <Open_Door+0xfc>)
 8003b4a:	f003 f983 	bl	8006e54 <HAL_GPIO_WritePin>
 8003b4e:	e01d      	b.n	8003b8c <Open_Door+0x98>
		// Turn on outside Green LED meaning the person can enter the room
	}
	else if (emergency == 1) {	// Emergency opening of door
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d11a      	bne.n	8003b8c <Open_Door+0x98>
		emergencyFlag = 1;
 8003b56:	4b27      	ldr	r3, [pc, #156]	@ (8003bf4 <Open_Door+0x100>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
		TIM4 -> CNT = 0;
 8003b5c:	4b28      	ldr	r3, [pc, #160]	@ (8003c00 <Open_Door+0x10c>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(&htim4);
 8003b62:	4828      	ldr	r0, [pc, #160]	@ (8003c04 <Open_Door+0x110>)
 8003b64:	f005 f898 	bl	8008c98 <HAL_TIM_Base_Start>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,1);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b6e:	4820      	ldr	r0, [pc, #128]	@ (8003bf0 <Open_Door+0xfc>)
 8003b70:	f003 f970 	bl	8006e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b7a:	481d      	ldr	r0, [pc, #116]	@ (8003bf0 <Open_Door+0xfc>)
 8003b7c:	f003 f96a 	bl	8006e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,0);
 8003b80:	2200      	movs	r2, #0
 8003b82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b86:	481a      	ldr	r0, [pc, #104]	@ (8003bf0 <Open_Door+0xfc>)
 8003b88:	f003 f964 	bl	8006e54 <HAL_GPIO_WritePin>
		// Turn on outside Green LED meaning the person can enter the room
	}

	if (InOut == 0) { 			// 0 - In
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <Open_Door+0xaa>
		People_Counter++;
 8003b92:	4b1d      	ldr	r3, [pc, #116]	@ (8003c08 <Open_Door+0x114>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3301      	adds	r3, #1
 8003b98:	4a1b      	ldr	r2, [pc, #108]	@ (8003c08 <Open_Door+0x114>)
 8003b9a:	6013      	str	r3, [r2, #0]
		// Turn on inside Green LED meaning the person will exit the room
	} else {
		People_Counter = 0;		// 2 - Emergency (all people exit the room)
	}
	//printf("\n\rPeople Counter: %d\n\r", People_Counter);
}
 8003b9c:	e023      	b.n	8003be6 <Open_Door+0xf2>
	} else if (InOut == 1) { 	// 1 - Out
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d11d      	bne.n	8003be0 <Open_Door+0xec>
		People_Counter--;
 8003ba4:	4b18      	ldr	r3, [pc, #96]	@ (8003c08 <Open_Door+0x114>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <Open_Door+0x114>)
 8003bac:	6013      	str	r3, [r2, #0]
		TIM3 -> CNT = 0;
 8003bae:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <Open_Door+0x104>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(&htim3);
 8003bb4:	4811      	ldr	r0, [pc, #68]	@ (8003bfc <Open_Door+0x108>)
 8003bb6:	f005 f86f 	bl	8008c98 <HAL_TIM_Base_Start>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bc0:	480b      	ldr	r0, [pc, #44]	@ (8003bf0 <Open_Door+0xfc>)
 8003bc2:	f003 f947 	bl	8006e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,1);
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003bcc:	4808      	ldr	r0, [pc, #32]	@ (8003bf0 <Open_Door+0xfc>)
 8003bce:	f003 f941 	bl	8006e54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,0);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003bd8:	4805      	ldr	r0, [pc, #20]	@ (8003bf0 <Open_Door+0xfc>)
 8003bda:	f003 f93b 	bl	8006e54 <HAL_GPIO_WritePin>
}
 8003bde:	e002      	b.n	8003be6 <Open_Door+0xf2>
		People_Counter = 0;		// 2 - Emergency (all people exit the room)
 8003be0:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <Open_Door+0x114>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40020800 	.word	0x40020800
 8003bf4:	20009e10 	.word	0x20009e10
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	20009aec 	.word	0x20009aec
 8003c00:	40000800 	.word	0x40000800
 8003c04:	20009b38 	.word	0x20009b38
 8003c08:	20009e14 	.word	0x20009e14

08003c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c10:	b672      	cpsid	i
}
 8003c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c14:	bf00      	nop
 8003c16:	e7fd      	b.n	8003c14 <Error_Handler+0x8>

08003c18 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b0c8      	sub	sp, #288	@ 0x120
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c26:	6018      	str	r0, [r3, #0]
 8003c28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c2c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c30:	6019      	str	r1, [r3, #0]
 8003c32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c36:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003c3a:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8003c3c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c40:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	2bff      	cmp	r3, #255	@ 0xff
 8003c48:	d806      	bhi.n	8003c58 <PN532_WriteFrame+0x40>
 8003c4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c4e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	e0aa      	b.n	8003db4 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 8003c64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8003c70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c78:	2200      	movs	r2, #0
 8003c7a:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8003c7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c84:	22ff      	movs	r2, #255	@ 0xff
 8003c86:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003c8e:	e010      	b.n	8003cb2 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8003c90:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003c94:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003c98:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003c9c:	5cd2      	ldrb	r2, [r2, r3]
 8003c9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8003ca8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003cac:	3301      	adds	r3, #1
 8003cae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003cb2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d9ea      	bls.n	8003c90 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 8003cba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003cbe:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003cca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003cce:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8003cd0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003cd4:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	425b      	negs	r3, r3
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ce4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003ce8:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8003cea:	2300      	movs	r3, #0
 8003cec:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8003cf0:	e023      	b.n	8003d3a <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8003cf2:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8003cf6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003cfa:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	441a      	add	r2, r3
 8003d02:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8003d06:	3305      	adds	r3, #5
 8003d08:	7811      	ldrb	r1, [r2, #0]
 8003d0a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003d0e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003d12:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8003d14:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8003d18:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003d1c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8003d30:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8003d34:	3301      	adds	r3, #1
 8003d36:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8003d3a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003d44:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8003d48:	8812      	ldrh	r2, [r2, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d8d1      	bhi.n	8003cf2 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8003d4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003d52:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	3305      	adds	r3, #5
 8003d5a:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8003d5e:	43d2      	mvns	r2, r2
 8003d60:	b2d1      	uxtb	r1, r2
 8003d62:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003d66:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003d6a:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8003d6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003d70:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	3306      	adds	r3, #6
 8003d78:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003d7c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003d80:	2100      	movs	r1, #0
 8003d82:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8003d84:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003d88:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003d94:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8003d98:	8812      	ldrh	r2, [r2, #0]
 8003d9a:	3207      	adds	r2, #7
 8003d9c:	b291      	uxth	r1, r2
 8003d9e:	f107 0214 	add.w	r2, r7, #20
 8003da2:	4610      	mov	r0, r2
 8003da4:	4798      	blx	r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8003dac:	f04f 33ff 	mov.w	r3, #4294967295
 8003db0:	e000      	b.n	8003db4 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b0c8      	sub	sp, #288	@ 0x120
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003dca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003dce:	6018      	str	r0, [r3, #0]
 8003dd0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003dd4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003dd8:	6019      	str	r1, [r3, #0]
 8003dda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003dde:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003de2:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8003dea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003dee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003dfa:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8003dfe:	8812      	ldrh	r2, [r2, #0]
 8003e00:	3207      	adds	r2, #7
 8003e02:	b291      	uxth	r1, r2
 8003e04:	f107 0214 	add.w	r2, r7, #20
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8003e12:	e019      	b.n	8003e48 <PN532_ReadFrame+0x88>
        offset += 1;
 8003e14:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 8003e1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e22:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	1dda      	adds	r2, r3, #7
 8003e2a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	da0a      	bge.n	8003e48 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8003e32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	4853      	ldr	r0, [pc, #332]	@ (8003f8c <PN532_ReadFrame+0x1cc>)
 8003e40:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	e09c      	b.n	8003f82 <PN532_ReadFrame+0x1c2>
    while (buff[offset] == 0x00) {
 8003e48:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003e4c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003e50:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003e54:	5cd3      	ldrb	r3, [r2, r3]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0dc      	beq.n	8003e14 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8003e5a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003e5e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003e62:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003e66:	5cd3      	ldrb	r3, [r2, r3]
 8003e68:	2bff      	cmp	r3, #255	@ 0xff
 8003e6a:	d00a      	beq.n	8003e82 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8003e6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e70:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	4844      	ldr	r0, [pc, #272]	@ (8003f8c <PN532_ReadFrame+0x1cc>)
 8003e7a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e07f      	b.n	8003f82 <PN532_ReadFrame+0x1c2>
    }
    offset += 1;
 8003e82:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003e86:	3301      	adds	r3, #1
 8003e88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8003e8c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e90:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	1dda      	adds	r2, r3, #7
 8003e98:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	da0a      	bge.n	8003eb6 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8003ea0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ea4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	4838      	ldr	r0, [pc, #224]	@ (8003f90 <PN532_ReadFrame+0x1d0>)
 8003eae:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	e065      	b.n	8003f82 <PN532_ReadFrame+0x1c2>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8003eb6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003eba:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003ebe:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003ec2:	5cd3      	ldrb	r3, [r2, r3]
 8003ec4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8003ec8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003ecc:	3301      	adds	r3, #1
 8003ece:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003ed2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003ed6:	5cd2      	ldrb	r2, [r2, r3]
 8003ed8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003edc:	4413      	add	r3, r2
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8003ee4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ee8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	4828      	ldr	r0, [pc, #160]	@ (8003f94 <PN532_ReadFrame+0x1d4>)
 8003ef2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef8:	e043      	b.n	8003f82 <PN532_ReadFrame+0x1c2>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8003f00:	e014      	b.n	8003f2c <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8003f02:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003f06:	1c9a      	adds	r2, r3, #2
 8003f08:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8003f12:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003f16:	5cd2      	ldrb	r2, [r2, r3]
 8003f18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8003f22:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8003f26:	3301      	adds	r3, #1
 8003f28:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8003f2c:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8003f30:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d2e4      	bcs.n	8003f02 <PN532_ReadFrame+0x142>
    /*if (checksum != 0) {
        pn532->log("Response checksum did not match expected checksum");
        return PN532_STATUS_ERROR;
    }*/
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8003f3e:	e018      	b.n	8003f72 <PN532_ReadFrame+0x1b2>
        response[i] = buff[offset + 2 + i];
 8003f40:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003f44:	1c9a      	adds	r2, r3, #2
 8003f46:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8003f4a:	441a      	add	r2, r3
 8003f4c:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8003f50:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8003f54:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8003f58:	6809      	ldr	r1, [r1, #0]
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8003f60:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8003f64:	5c8a      	ldrb	r2, [r1, r2]
 8003f66:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8003f68:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8003f72:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8003f76:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d3e0      	bcc.n	8003f40 <PN532_ReadFrame+0x180>
    }
    return frame_len;
 8003f7e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	08019fd8 	.word	0x08019fd8
 8003f90:	0801a00c 	.word	0x0801a00c
 8003f94:	0801a028 	.word	0x0801a028

08003f98 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b0c7      	sub	sp, #284	@ 0x11c
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8003fa2:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8003fa6:	6020      	str	r0, [r4, #0]
 8003fa8:	4608      	mov	r0, r1
 8003faa:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8003fae:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8003fb2:	600a      	str	r2, [r1, #0]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003fba:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003fc6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003fca:	460a      	mov	r2, r1
 8003fcc:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8003fce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fd6:	22d4      	movs	r2, #212	@ 0xd4
 8003fd8:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8003fda:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003fde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fe2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8003fe6:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 8003fea:	7812      	ldrb	r2, [r2, #0]
 8003fec:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8003ff4:	e012      	b.n	800401c <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8003ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ffa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8003ffe:	441a      	add	r2, r3
 8004000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004004:	3302      	adds	r3, #2
 8004006:	7811      	ldrb	r1, [r2, #0]
 8004008:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800400c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8004010:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8004012:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004016:	3301      	adds	r3, #1
 8004018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800401c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004020:	b29b      	uxth	r3, r3
 8004022:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8004026:	429a      	cmp	r2, r3
 8004028:	d8e5      	bhi.n	8003ff6 <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 800402a:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 800402e:	3302      	adds	r3, #2
 8004030:	b29a      	uxth	r2, r3
 8004032:	f107 0110 	add.w	r1, r7, #16
 8004036:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800403a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	f7ff fdea 	bl	8003c18 <PN532_WriteFrame>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <PN532_CallFunction+0xd6>
        pn532->wakeup();
 800404a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800404e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8004058:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800405c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	484e      	ldr	r0, [pc, #312]	@ (80041a0 <PN532_CallFunction+0x208>)
 8004066:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295
 800406c:	e092      	b.n	8004194 <PN532_CallFunction+0x1fc>
    }
    if (!pn532->wait_ready(timeout)) {
 800406e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004072:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800407e:	4798      	blx	r3
 8004080:	4603      	mov	r3, r0
 8004082:	f083 0301 	eor.w	r3, r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	e080      	b.n	8004194 <PN532_CallFunction+0x1fc>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8004092:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004096:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f107 0210 	add.w	r2, r7, #16
 80040a2:	2106      	movs	r1, #6
 80040a4:	4610      	mov	r0, r2
 80040a6:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80040ae:	e01c      	b.n	80040ea <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 80040b0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80040b4:	4a3b      	ldr	r2, [pc, #236]	@ (80041a4 <PN532_CallFunction+0x20c>)
 80040b6:	5cd2      	ldrb	r2, [r2, r3]
 80040b8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80040bc:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80040c0:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80040c4:	5ccb      	ldrb	r3, [r1, r3]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d00a      	beq.n	80040e0 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 80040ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80040ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4834      	ldr	r0, [pc, #208]	@ (80041a8 <PN532_CallFunction+0x210>)
 80040d8:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	e059      	b.n	8004194 <PN532_CallFunction+0x1fc>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80040e0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80040e4:	3301      	adds	r3, #1
 80040e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80040ea:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d9de      	bls.n	80040b0 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 80040f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80040f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8004102:	4798      	blx	r3
 8004104:	4603      	mov	r3, r0
 8004106:	f083 0301 	eor.w	r3, r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	e03e      	b.n	8004194 <PN532_CallFunction+0x1fc>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8004116:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800411a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	3302      	adds	r3, #2
 8004122:	b29a      	uxth	r2, r3
 8004124:	f107 0110 	add.w	r1, r7, #16
 8004128:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800412c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	f7ff fe45 	bl	8003dc0 <PN532_ReadFrame>
 8004136:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 800413a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800413e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2bd5      	cmp	r3, #213	@ 0xd5
        //pn532->log("Received unexpected command response!");
        //return PN532_STATUS_ERROR;
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8004146:	2300      	movs	r3, #0
 8004148:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 800414c:	e015      	b.n	800417a <PN532_CallFunction+0x1e2>
        response[i] = buff[i + 2];
 800414e:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8004152:	1c9a      	adds	r2, r3, #2
 8004154:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8004158:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800415c:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8004160:	6809      	ldr	r1, [r1, #0]
 8004162:	440b      	add	r3, r1
 8004164:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8004168:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800416c:	5c8a      	ldrb	r2, [r1, r2]
 800416e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8004170:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8004174:	3301      	adds	r3, #1
 8004176:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 800417a:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800417e:	b29b      	uxth	r3, r3
 8004180:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8004184:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004188:	8812      	ldrh	r2, [r2, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d8df      	bhi.n	800414e <PN532_CallFunction+0x1b6>
    }
    // The the number of bytes read
    return frame_len - 2;
 800418e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004192:	3b02      	subs	r3, #2
}
 8004194:	4618      	mov	r0, r3
 8004196:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800419a:	46bd      	mov	sp, r7
 800419c:	bd90      	pop	{r4, r7, pc}
 800419e:	bf00      	nop
 80041a0:	0801a058 	.word	0x0801a058
 80041a4:	0801cf04 	.word	0x0801cf04
 80041a8:	0801a06c 	.word	0x0801a06c

080041ac <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af04      	add	r7, sp, #16
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 80041b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	2300      	movs	r3, #0
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2304      	movs	r3, #4
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	2102      	movs	r1, #2
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fee4 	bl	8003f98 <PN532_CallFunction>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d106      	bne.n	80041e6 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	4804      	ldr	r0, [pc, #16]	@ (80041f0 <PN532_GetFirmwareVersion+0x44>)
 80041de:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80041e0:	f04f 33ff 	mov.w	r3, #4294967295
 80041e4:	e000      	b.n	80041e8 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	0801a098 	.word	0x0801a098

080041f4 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af04      	add	r7, sp, #16
 80041fa:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 80041fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004234 <PN532_SamConfiguration+0x40>)
 80041fe:	f107 030c 	add.w	r3, r7, #12
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	4611      	mov	r1, r2
 8004206:	8019      	strh	r1, [r3, #0]
 8004208:	3302      	adds	r3, #2
 800420a:	0c12      	lsrs	r2, r2, #16
 800420c:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 800420e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004212:	9302      	str	r3, [sp, #8]
 8004214:	2303      	movs	r3, #3
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	f107 030c 	add.w	r3, r7, #12
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2300      	movs	r3, #0
 8004220:	2200      	movs	r2, #0
 8004222:	2114      	movs	r1, #20
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff feb7 	bl	8003f98 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	0801a0b4 	.word	0x0801a0b4

08004238 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b090      	sub	sp, #64	@ 0x40
 800423c:	af04      	add	r7, sp, #16
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8004254:	f107 0210 	add.w	r2, r7, #16
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	9302      	str	r3, [sp, #8]
 800425c:	2302      	movs	r3, #2
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	2313      	movs	r3, #19
 8004268:	214a      	movs	r1, #74	@ 0x4a
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff fe94 	bl	8003f98 <PN532_CallFunction>
 8004270:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8004272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	da02      	bge.n	800427e <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	e02e      	b.n	80042dc <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 800427e:	7c3b      	ldrb	r3, [r7, #16]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d006      	beq.n	8004292 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	4816      	ldr	r0, [pc, #88]	@ (80042e4 <PN532_ReadPassiveTarget+0xac>)
 800428a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800428c:	f04f 33ff 	mov.w	r3, #4294967295
 8004290:	e024      	b.n	80042dc <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8004292:	7d7b      	ldrb	r3, [r7, #21]
 8004294:	2b07      	cmp	r3, #7
 8004296:	d906      	bls.n	80042a6 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	4812      	ldr	r0, [pc, #72]	@ (80042e8 <PN532_ReadPassiveTarget+0xb0>)
 800429e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	e01a      	b.n	80042dc <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80042ac:	e010      	b.n	80042d0 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 80042ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80042b2:	1d9a      	adds	r2, r3, #6
 80042b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	440b      	add	r3, r1
 80042bc:	3230      	adds	r2, #48	@ 0x30
 80042be:	443a      	add	r2, r7
 80042c0:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80042c4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 80042c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80042ca:	3301      	adds	r3, #1
 80042cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80042d0:	7d7b      	ldrb	r3, [r7, #21]
 80042d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d3e9      	bcc.n	80042ae <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 80042da:	7d7b      	ldrb	r3, [r7, #21]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3730      	adds	r7, #48	@ 0x30
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	0801a0b8 	.word	0x0801a0b8
 80042e8:	0801a0d8 	.word	0x0801a0d8

080042ec <PN532_MifareClassicAuthenticateBlock>:
    uint8_t* uid,
    uint8_t uid_length,
    uint16_t block_number,
    uint16_t key_number,
    uint8_t* key
) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08e      	sub	sp, #56	@ 0x38
 80042f0:	af04      	add	r7, sp, #16
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	4611      	mov	r1, r2
 80042f8:	461a      	mov	r2, r3
 80042fa:	460b      	mov	r3, r1
 80042fc:	71fb      	strb	r3, [r7, #7]
 80042fe:	4613      	mov	r3, r2
 8004300:	80bb      	strh	r3, [r7, #4]
    // Build parameters for InDataExchange command to authenticate MiFare card.
    uint8_t response[1] = {0xFF};
 8004302:	23ff      	movs	r3, #255	@ 0xff
 8004304:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t params[3 + MIFARE_UID_MAX_LENGTH + MIFARE_KEY_LENGTH];
    params[0] = 0x01;
 8004308:	2301      	movs	r3, #1
 800430a:	743b      	strb	r3, [r7, #16]
    params[1] = key_number & 0xFF;
 800430c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800430e:	b2db      	uxtb	r3, r3
 8004310:	747b      	strb	r3, [r7, #17]
    params[2] = block_number & 0xFF;
 8004312:	88bb      	ldrh	r3, [r7, #4]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	74bb      	strb	r3, [r7, #18]
    // params[3:3+keylen] = key
    for (uint8_t i = 0; i < MIFARE_KEY_LENGTH; i++) {
 8004318:	2300      	movs	r3, #0
 800431a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800431e:	e010      	b.n	8004342 <PN532_MifareClassicAuthenticateBlock+0x56>
        params[3 + i] = key[i];
 8004320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004324:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004326:	441a      	add	r2, r3
 8004328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800432c:	3303      	adds	r3, #3
 800432e:	7812      	ldrb	r2, [r2, #0]
 8004330:	3328      	adds	r3, #40	@ 0x28
 8004332:	443b      	add	r3, r7
 8004334:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (uint8_t i = 0; i < MIFARE_KEY_LENGTH; i++) {
 8004338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800433c:	3301      	adds	r3, #1
 800433e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004346:	2b05      	cmp	r3, #5
 8004348:	d9ea      	bls.n	8004320 <PN532_MifareClassicAuthenticateBlock+0x34>
    }
    // params[3+keylen:] = uid
    for (uint8_t i = 0; i < uid_length; i++) {
 800434a:	2300      	movs	r3, #0
 800434c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004350:	e010      	b.n	8004374 <PN532_MifareClassicAuthenticateBlock+0x88>
        params[3 + MIFARE_KEY_LENGTH + i] = uid[i];
 8004352:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	441a      	add	r2, r3
 800435a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800435e:	3309      	adds	r3, #9
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	3328      	adds	r3, #40	@ 0x28
 8004364:	443b      	add	r3, r7
 8004366:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (uint8_t i = 0; i < uid_length; i++) {
 800436a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800436e:	3301      	adds	r3, #1
 8004370:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004374:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	429a      	cmp	r2, r3
 800437c:	d3e9      	bcc.n	8004352 <PN532_MifareClassicAuthenticateBlock+0x66>
    }
    // Send InDataExchange request
    PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response),
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	b29b      	uxth	r3, r3
 8004382:	3309      	adds	r3, #9
 8004384:	b29b      	uxth	r3, r3
 8004386:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800438a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800438e:	9102      	str	r1, [sp, #8]
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	f107 0310 	add.w	r3, r7, #16
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2301      	movs	r3, #1
 800439a:	2140      	movs	r1, #64	@ 0x40
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fdfb 	bl	8003f98 <PN532_CallFunction>
                       params, 3 + MIFARE_KEY_LENGTH + uid_length, PN532_DEFAULT_TIMEOUT);
    return response[0];
 80043a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3728      	adds	r7, #40	@ 0x28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <PN532_MifareClassicReadBlock>:
  *     to read.
  * @param response: buffer of length 16 returned if the block is successfully read.
  * @param block_number: specify a block to read.
  * @retval: PN532 error code.
  */
int PN532_MifareClassicReadBlock(PN532* pn532, uint8_t* response, uint16_t block_number) {
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b08e      	sub	sp, #56	@ 0x38
 80043b2:	af04      	add	r7, sp, #16
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80fb      	strh	r3, [r7, #6]
    uint8_t params[] = {0x01, MIFARE_CMD_READ, block_number & 0xFF};
 80043bc:	2301      	movs	r3, #1
 80043be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80043c2:	2330      	movs	r3, #48	@ 0x30
 80043c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t buff[MIFARE_BLOCK_LENGTH + 1];
    // Send InDataExchange request to read block of MiFare data.
    PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, buff, sizeof(buff),
 80043d0:	f107 0210 	add.w	r2, r7, #16
 80043d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043d8:	9302      	str	r3, [sp, #8]
 80043da:	2303      	movs	r3, #3
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	2311      	movs	r3, #17
 80043e6:	2140      	movs	r1, #64	@ 0x40
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff fdd5 	bl	8003f98 <PN532_CallFunction>
                       params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    // Check first response is 0x00 to show success.
    if (buff[0] != PN532_ERROR_NONE) {
 80043ee:	7c3b      	ldrb	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <PN532_MifareClassicReadBlock+0x4a>
        return buff[0];
 80043f4:	7c3b      	ldrb	r3, [r7, #16]
 80043f6:	e019      	b.n	800442c <PN532_MifareClassicReadBlock+0x7e>
    }
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80043fe:	e010      	b.n	8004422 <PN532_MifareClassicReadBlock+0x74>
        response[i] = buff[i + 1];
 8004400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	440b      	add	r3, r1
 800440e:	3228      	adds	r2, #40	@ 0x28
 8004410:	443a      	add	r2, r7
 8004412:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8004416:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 8004418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800441c:	3301      	adds	r3, #1
 800441e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004426:	2b0f      	cmp	r3, #15
 8004428:	d9ea      	bls.n	8004400 <PN532_MifareClassicReadBlock+0x52>
    }
    return buff[0];
 800442a:	7c3b      	ldrb	r3, [r7, #16]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3728      	adds	r7, #40	@ 0x28
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <PN532_Reset>:
extern I2C_HandleTypeDef hi2c2;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8004438:	2201      	movs	r2, #1
 800443a:	2120      	movs	r1, #32
 800443c:	480c      	ldr	r0, [pc, #48]	@ (8004470 <PN532_Reset+0x3c>)
 800443e:	f002 fd09 	bl	8006e54 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004442:	2064      	movs	r0, #100	@ 0x64
 8004444:	f001 f926 	bl	8005694 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004448:	2200      	movs	r2, #0
 800444a:	2120      	movs	r1, #32
 800444c:	4808      	ldr	r0, [pc, #32]	@ (8004470 <PN532_Reset+0x3c>)
 800444e:	f002 fd01 	bl	8006e54 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8004452:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004456:	f001 f91d 	bl	8005694 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800445a:	2201      	movs	r2, #1
 800445c:	2120      	movs	r1, #32
 800445e:	4804      	ldr	r0, [pc, #16]	@ (8004470 <PN532_Reset+0x3c>)
 8004460:	f002 fcf8 	bl	8006e54 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004464:	2064      	movs	r0, #100	@ 0x64
 8004466:	f001 f915 	bl	8005694 <HAL_Delay>
    return PN532_STATUS_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40020000 	.word	0x40020000

08004474 <PN532_Log>:

void PN532_Log(const char* log) {
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4803      	ldr	r0, [pc, #12]	@ (800448c <PN532_Log+0x18>)
 8004480:	f013 fa90 	bl	80179a4 <iprintf>
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	0801a100 	.word	0x0801a100

08004490 <i2c_read>:
 * End: SPI
 **************************************************************************/
/**************************************************************************
 * I2C
 **************************************************************************/
void i2c_read(uint8_t* data, uint16_t count) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af02      	add	r7, sp, #8
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c2, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 800449c:	887b      	ldrh	r3, [r7, #2]
 800449e:	220a      	movs	r2, #10
 80044a0:	9200      	str	r2, [sp, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	2148      	movs	r1, #72	@ 0x48
 80044a6:	4803      	ldr	r0, [pc, #12]	@ (80044b4 <i2c_read+0x24>)
 80044a8:	f002 fe8a 	bl	80071c0 <HAL_I2C_Master_Receive>
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20009a00 	.word	0x20009a00

080044b8 <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af02      	add	r7, sp, #8
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c2, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 80044c4:	887b      	ldrh	r3, [r7, #2]
 80044c6:	220a      	movs	r2, #10
 80044c8:	9200      	str	r2, [sp, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	2148      	movs	r1, #72	@ 0x48
 80044ce:	4803      	ldr	r0, [pc, #12]	@ (80044dc <i2c_write+0x24>)
 80044d0:	f002 fd82 	bl	8006fd8 <HAL_I2C_Master_Transmit>
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20009a00 	.word	0x20009a00

080044e0 <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 80044e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044e4:	b087      	sub	sp, #28
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	807b      	strh	r3, [r7, #2]
 80044ee:	466b      	mov	r3, sp
 80044f0:	461e      	mov	r6, r3
    uint8_t status[] = {0x00};
 80044f2:	2300      	movs	r3, #0
 80044f4:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 80044f6:	887b      	ldrh	r3, [r7, #2]
 80044f8:	1c59      	adds	r1, r3, #1
 80044fa:	1e4b      	subs	r3, r1, #1
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	460a      	mov	r2, r1
 8004500:	2300      	movs	r3, #0
 8004502:	4690      	mov	r8, r2
 8004504:	4699      	mov	r9, r3
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800451a:	460a      	mov	r2, r1
 800451c:	2300      	movs	r3, #0
 800451e:	4614      	mov	r4, r2
 8004520:	461d      	mov	r5, r3
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	00eb      	lsls	r3, r5, #3
 800452c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004530:	00e2      	lsls	r2, r4, #3
 8004532:	460b      	mov	r3, r1
 8004534:	3307      	adds	r3, #7
 8004536:	08db      	lsrs	r3, r3, #3
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	ebad 0d03 	sub.w	sp, sp, r3
 800453e:	466b      	mov	r3, sp
 8004540:	3300      	adds	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 8004544:	f107 0308 	add.w	r3, r7, #8
 8004548:	2101      	movs	r1, #1
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff ffa0 	bl	8004490 <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 8004550:	7a3b      	ldrb	r3, [r7, #8]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d002      	beq.n	800455c <PN532_I2C_ReadData+0x7c>
        return PN532_STATUS_ERROR;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295
 800455a:	e01a      	b.n	8004592 <PN532_I2C_ReadData+0xb2>
    }
    i2c_read(frame, count + 1);
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	3301      	adds	r3, #1
 8004560:	b29b      	uxth	r3, r3
 8004562:	4619      	mov	r1, r3
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff ff93 	bl	8004490 <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
 800456e:	e00a      	b.n	8004586 <PN532_I2C_ReadData+0xa6>
        data[i] = frame[i + 1];
 8004570:	7dfb      	ldrb	r3, [r7, #23]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	440b      	add	r3, r1
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	5c8a      	ldrb	r2, [r1, r2]
 800457e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	3301      	adds	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
 8004586:	7dfb      	ldrb	r3, [r7, #23]
 8004588:	b29b      	uxth	r3, r3
 800458a:	887a      	ldrh	r2, [r7, #2]
 800458c:	429a      	cmp	r2, r3
 800458e:	d8ef      	bhi.n	8004570 <PN532_I2C_ReadData+0x90>
    }
    return PN532_STATUS_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	46b5      	mov	sp, r6
}
 8004594:	4618      	mov	r0, r3
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800459e <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 80045aa:	887b      	ldrh	r3, [r7, #2]
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff ff82 	bl	80044b8 <i2c_write>
    return PN532_STATUS_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 80045c6:	2300      	movs	r3, #0
 80045c8:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 80045ca:	f001 f857 	bl	800567c <HAL_GetTick>
 80045ce:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 80045d0:	e00d      	b.n	80045ee <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 80045d2:	f107 0308 	add.w	r3, r7, #8
 80045d6:	2101      	movs	r1, #1
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff ff59 	bl	8004490 <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 80045de:	7a3b      	ldrb	r3, [r7, #8]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <PN532_I2C_WaitReady+0x2a>
            return true;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e00b      	b.n	8004600 <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 80045e8:	2005      	movs	r0, #5
 80045ea:	f001 f853 	bl	8005694 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 80045ee:	f001 f845 	bl	800567c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d8e9      	bhi.n	80045d2 <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
    // TODO
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800460c:	2201      	movs	r2, #1
 800460e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004612:	480e      	ldr	r0, [pc, #56]	@ (800464c <PN532_I2C_Wakeup+0x44>)
 8004614:	f002 fc1e 	bl	8006e54 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004618:	2064      	movs	r0, #100	@ 0x64
 800461a:	f001 f83b 	bl	8005694 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800461e:	2200      	movs	r2, #0
 8004620:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004624:	4809      	ldr	r0, [pc, #36]	@ (800464c <PN532_I2C_Wakeup+0x44>)
 8004626:	f002 fc15 	bl	8006e54 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800462a:	2064      	movs	r0, #100	@ 0x64
 800462c:	f001 f832 	bl	8005694 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8004630:	2201      	movs	r2, #1
 8004632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004636:	4805      	ldr	r0, [pc, #20]	@ (800464c <PN532_I2C_Wakeup+0x44>)
 8004638:	f002 fc0c 	bl	8006e54 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800463c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004640:	f001 f828 	bl	8005694 <HAL_Delay>
    return PN532_STATUS_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40020400 	.word	0x40020400

08004650 <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a0c      	ldr	r2, [pc, #48]	@ (800468c <PN532_I2C_Init+0x3c>)
 800465c:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a0b      	ldr	r2, [pc, #44]	@ (8004690 <PN532_I2C_Init+0x40>)
 8004662:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0b      	ldr	r2, [pc, #44]	@ (8004694 <PN532_I2C_Init+0x44>)
 8004668:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a0a      	ldr	r2, [pc, #40]	@ (8004698 <PN532_I2C_Init+0x48>)
 800466e:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a0a      	ldr	r2, [pc, #40]	@ (800469c <PN532_I2C_Init+0x4c>)
 8004674:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a09      	ldr	r2, [pc, #36]	@ (80046a0 <PN532_I2C_Init+0x50>)
 800467a:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	4798      	blx	r3
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	08004435 	.word	0x08004435
 8004690:	080044e1 	.word	0x080044e1
 8004694:	0800459f 	.word	0x0800459f
 8004698:	080045bf 	.word	0x080045bf
 800469c:	08004609 	.word	0x08004609
 80046a0:	08004475 	.word	0x08004475

080046a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80046aa:	4b0f      	ldr	r3, [pc, #60]	@ (80046e8 <HAL_MspInit+0x44>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	4a0e      	ldr	r2, [pc, #56]	@ (80046e8 <HAL_MspInit+0x44>)
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80046b6:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <HAL_MspInit+0x44>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c2:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_MspInit+0x44>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c6:	4a08      	ldr	r2, [pc, #32]	@ (80046e8 <HAL_MspInit+0x44>)
 80046c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <HAL_MspInit+0x44>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800

080046ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b0ac      	sub	sp, #176	@ 0xb0
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004704:	f107 0318 	add.w	r3, r7, #24
 8004708:	2284      	movs	r2, #132	@ 0x84
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f013 fadb 	bl	8017cc8 <memset>
  if(hi2c->Instance==I2C1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a44      	ldr	r2, [pc, #272]	@ (8004828 <HAL_I2C_MspInit+0x13c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d13d      	bne.n	8004798 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800471c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004720:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004722:	2300      	movs	r3, #0
 8004724:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004726:	f107 0318 	add.w	r3, r7, #24
 800472a:	4618      	mov	r0, r3
 800472c:	f003 fe6c 	bl	8008408 <HAL_RCCEx_PeriphCLKConfig>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004736:	f7ff fa69 	bl	8003c0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800473a:	4b3c      	ldr	r3, [pc, #240]	@ (800482c <HAL_I2C_MspInit+0x140>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473e:	4a3b      	ldr	r2, [pc, #236]	@ (800482c <HAL_I2C_MspInit+0x140>)
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	6313      	str	r3, [r2, #48]	@ 0x30
 8004746:	4b39      	ldr	r3, [pc, #228]	@ (800482c <HAL_I2C_MspInit+0x140>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004752:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004756:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800475a:	2312      	movs	r3, #18
 800475c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004766:	2303      	movs	r3, #3
 8004768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800476c:	2304      	movs	r3, #4
 800476e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004772:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004776:	4619      	mov	r1, r3
 8004778:	482d      	ldr	r0, [pc, #180]	@ (8004830 <HAL_I2C_MspInit+0x144>)
 800477a:	f002 f9bf 	bl	8006afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800477e:	4b2b      	ldr	r3, [pc, #172]	@ (800482c <HAL_I2C_MspInit+0x140>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	4a2a      	ldr	r2, [pc, #168]	@ (800482c <HAL_I2C_MspInit+0x140>)
 8004784:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004788:	6413      	str	r3, [r2, #64]	@ 0x40
 800478a:	4b28      	ldr	r3, [pc, #160]	@ (800482c <HAL_I2C_MspInit+0x140>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004796:	e042      	b.n	800481e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a25      	ldr	r2, [pc, #148]	@ (8004834 <HAL_I2C_MspInit+0x148>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d13d      	bne.n	800481e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80047a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047ae:	f107 0318 	add.w	r3, r7, #24
 80047b2:	4618      	mov	r0, r3
 80047b4:	f003 fe28 	bl	8008408 <HAL_RCCEx_PeriphCLKConfig>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80047be:	f7ff fa25 	bl	8003c0c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c2:	4b1a      	ldr	r3, [pc, #104]	@ (800482c <HAL_I2C_MspInit+0x140>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	4a19      	ldr	r2, [pc, #100]	@ (800482c <HAL_I2C_MspInit+0x140>)
 80047c8:	f043 0302 	orr.w	r3, r3, #2
 80047cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ce:	4b17      	ldr	r3, [pc, #92]	@ (800482c <HAL_I2C_MspInit+0x140>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80047da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80047de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047e2:	2312      	movs	r3, #18
 80047e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ee:	2303      	movs	r3, #3
 80047f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80047f4:	2304      	movs	r3, #4
 80047f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80047fe:	4619      	mov	r1, r3
 8004800:	480b      	ldr	r0, [pc, #44]	@ (8004830 <HAL_I2C_MspInit+0x144>)
 8004802:	f002 f97b 	bl	8006afc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004806:	4b09      	ldr	r3, [pc, #36]	@ (800482c <HAL_I2C_MspInit+0x140>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	4a08      	ldr	r2, [pc, #32]	@ (800482c <HAL_I2C_MspInit+0x140>)
 800480c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004810:	6413      	str	r3, [r2, #64]	@ 0x40
 8004812:	4b06      	ldr	r3, [pc, #24]	@ (800482c <HAL_I2C_MspInit+0x140>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
}
 800481e:	bf00      	nop
 8004820:	37b0      	adds	r7, #176	@ 0xb0
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40005400 	.word	0x40005400
 800482c:	40023800 	.word	0x40023800
 8004830:	40020400 	.word	0x40020400
 8004834:	40005800 	.word	0x40005800

08004838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a41      	ldr	r2, [pc, #260]	@ (800494c <HAL_TIM_Base_MspInit+0x114>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d114      	bne.n	8004874 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800484a:	4b41      	ldr	r3, [pc, #260]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484e:	4a40      	ldr	r2, [pc, #256]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	6453      	str	r3, [r2, #68]	@ 0x44
 8004856:	4b3e      	ldr	r3, [pc, #248]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 8004858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004862:	2200      	movs	r2, #0
 8004864:	2100      	movs	r1, #0
 8004866:	2019      	movs	r0, #25
 8004868:	f001 f81f 	bl	80058aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800486c:	2019      	movs	r0, #25
 800486e:	f001 f838 	bl	80058e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004872:	e066      	b.n	8004942 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487c:	d114      	bne.n	80048a8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800487e:	4b34      	ldr	r3, [pc, #208]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	4a33      	ldr	r2, [pc, #204]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	6413      	str	r3, [r2, #64]	@ 0x40
 800488a:	4b31      	ldr	r3, [pc, #196]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004896:	2200      	movs	r2, #0
 8004898:	2100      	movs	r1, #0
 800489a:	201c      	movs	r0, #28
 800489c:	f001 f805 	bl	80058aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048a0:	201c      	movs	r0, #28
 80048a2:	f001 f81e 	bl	80058e2 <HAL_NVIC_EnableIRQ>
}
 80048a6:	e04c      	b.n	8004942 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM3)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a29      	ldr	r2, [pc, #164]	@ (8004954 <HAL_TIM_Base_MspInit+0x11c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d114      	bne.n	80048dc <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048b2:	4b27      	ldr	r3, [pc, #156]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	4a26      	ldr	r2, [pc, #152]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80048be:	4b24      	ldr	r3, [pc, #144]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80048ca:	2200      	movs	r2, #0
 80048cc:	2100      	movs	r1, #0
 80048ce:	201d      	movs	r0, #29
 80048d0:	f000 ffeb 	bl	80058aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048d4:	201d      	movs	r0, #29
 80048d6:	f001 f804 	bl	80058e2 <HAL_NVIC_EnableIRQ>
}
 80048da:	e032      	b.n	8004942 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM4)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004958 <HAL_TIM_Base_MspInit+0x120>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d114      	bne.n	8004910 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	4a19      	ldr	r2, [pc, #100]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048f2:	4b17      	ldr	r3, [pc, #92]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80048fe:	2200      	movs	r2, #0
 8004900:	2100      	movs	r1, #0
 8004902:	201e      	movs	r0, #30
 8004904:	f000 ffd1 	bl	80058aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004908:	201e      	movs	r0, #30
 800490a:	f000 ffea 	bl	80058e2 <HAL_NVIC_EnableIRQ>
}
 800490e:	e018      	b.n	8004942 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM5)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a11      	ldr	r2, [pc, #68]	@ (800495c <HAL_TIM_Base_MspInit+0x124>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d113      	bne.n	8004942 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800491a:	4b0d      	ldr	r3, [pc, #52]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	4a0c      	ldr	r2, [pc, #48]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	6413      	str	r3, [r2, #64]	@ 0x40
 8004926:	4b0a      	ldr	r3, [pc, #40]	@ (8004950 <HAL_TIM_Base_MspInit+0x118>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004932:	2200      	movs	r2, #0
 8004934:	2100      	movs	r1, #0
 8004936:	2032      	movs	r0, #50	@ 0x32
 8004938:	f000 ffb7 	bl	80058aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800493c:	2032      	movs	r0, #50	@ 0x32
 800493e:	f000 ffd0 	bl	80058e2 <HAL_NVIC_EnableIRQ>
}
 8004942:	bf00      	nop
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40023800 	.word	0x40023800
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00

08004960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b0aa      	sub	sp, #168	@ 0xa8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004968:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004978:	f107 0310 	add.w	r3, r7, #16
 800497c:	2284      	movs	r2, #132	@ 0x84
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f013 f9a1 	bl	8017cc8 <memset>
  if(huart->Instance==USART3)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a22      	ldr	r2, [pc, #136]	@ (8004a14 <HAL_UART_MspInit+0xb4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d13c      	bne.n	8004a0a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004990:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004994:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004996:	2300      	movs	r3, #0
 8004998:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800499a:	f107 0310 	add.w	r3, r7, #16
 800499e:	4618      	mov	r0, r3
 80049a0:	f003 fd32 	bl	8008408 <HAL_RCCEx_PeriphCLKConfig>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80049aa:	f7ff f92f 	bl	8003c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80049ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <HAL_UART_MspInit+0xb8>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <HAL_UART_MspInit+0xb8>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ba:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <HAL_UART_MspInit+0xb8>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049c6:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <HAL_UART_MspInit+0xb8>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ca:	4a13      	ldr	r2, [pc, #76]	@ (8004a18 <HAL_UART_MspInit+0xb8>)
 80049cc:	f043 0308 	orr.w	r3, r3, #8
 80049d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80049d2:	4b11      	ldr	r3, [pc, #68]	@ (8004a18 <HAL_UART_MspInit+0xb8>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80049de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80049e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e6:	2302      	movs	r3, #2
 80049e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f2:	2303      	movs	r3, #3
 80049f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049f8:	2307      	movs	r3, #7
 80049fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004a02:	4619      	mov	r1, r3
 8004a04:	4805      	ldr	r0, [pc, #20]	@ (8004a1c <HAL_UART_MspInit+0xbc>)
 8004a06:	f002 f879 	bl	8006afc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a0a:	bf00      	nop
 8004a0c:	37a8      	adds	r7, #168	@ 0xa8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40004800 	.word	0x40004800
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	40020c00 	.word	0x40020c00

08004a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <NMI_Handler+0x4>

08004a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <HardFault_Handler+0x4>

08004a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <MemManage_Handler+0x4>

08004a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a3c:	bf00      	nop
 8004a3e:	e7fd      	b.n	8004a3c <BusFault_Handler+0x4>

08004a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a44:	bf00      	nop
 8004a46:	e7fd      	b.n	8004a44 <UsageFault_Handler+0x4>

08004a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a76:	f000 fded 	bl	8005654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a84:	4802      	ldr	r0, [pc, #8]	@ (8004a90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a86:	f004 fa17 	bl	8008eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20009a54 	.word	0x20009a54

08004a94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a98:	4802      	ldr	r0, [pc, #8]	@ (8004aa4 <TIM2_IRQHandler+0x10>)
 8004a9a:	f004 fa0d 	bl	8008eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20009aa0 	.word	0x20009aa0

08004aa8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004aac:	4802      	ldr	r0, [pc, #8]	@ (8004ab8 <TIM3_IRQHandler+0x10>)
 8004aae:	f004 fa03 	bl	8008eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20009aec 	.word	0x20009aec

08004abc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004ac0:	4802      	ldr	r0, [pc, #8]	@ (8004acc <TIM4_IRQHandler+0x10>)
 8004ac2:	f004 f9f9 	bl	8008eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20009b38 	.word	0x20009b38

08004ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ad4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004ad8:	f002 f9d6 	bl	8006e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004adc:	bf00      	nop
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004ae4:	4802      	ldr	r0, [pc, #8]	@ (8004af0 <TIM5_IRQHandler+0x10>)
 8004ae6:	f004 f9e7 	bl	8008eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20009b84 	.word	0x20009b84

08004af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return 1;
 8004af8:	2301      	movs	r3, #1
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <_kill>:

int _kill(int pid, int sig)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b0e:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <_kill+0x20>)
 8004b10:	2216      	movs	r2, #22
 8004b12:	601a      	str	r2, [r3, #0]
  return -1;
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	200148b8 	.word	0x200148b8

08004b28 <_exit>:

void _exit (int status)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b30:	f04f 31ff 	mov.w	r1, #4294967295
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff ffe5 	bl	8004b04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <_exit+0x12>

08004b3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b086      	sub	sp, #24
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e00a      	b.n	8004b66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b50:	f3af 8000 	nop.w
 8004b54:	4601      	mov	r1, r0
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	60ba      	str	r2, [r7, #8]
 8004b5c:	b2ca      	uxtb	r2, r1
 8004b5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3301      	adds	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	dbf0      	blt.n	8004b50 <_read+0x12>
  }

  return len;
 8004b6e:	687b      	ldr	r3, [r7, #4]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e009      	b.n	8004b9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	60ba      	str	r2, [r7, #8]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe f830 	bl	8002bf8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	dbf1      	blt.n	8004b8a <_write+0x12>
  }
  return len;
 8004ba6:	687b      	ldr	r3, [r7, #4]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <_close>:

int _close(int file)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bd8:	605a      	str	r2, [r3, #4]
  return 0;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <_isatty>:

int _isatty(int file)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004bf0:	2301      	movs	r3, #1
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c20:	4a14      	ldr	r2, [pc, #80]	@ (8004c74 <_sbrk+0x5c>)
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <_sbrk+0x60>)
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c2c:	4b13      	ldr	r3, [pc, #76]	@ (8004c7c <_sbrk+0x64>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c34:	4b11      	ldr	r3, [pc, #68]	@ (8004c7c <_sbrk+0x64>)
 8004c36:	4a12      	ldr	r2, [pc, #72]	@ (8004c80 <_sbrk+0x68>)
 8004c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c3a:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <_sbrk+0x64>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d205      	bcs.n	8004c54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004c48:	4b0e      	ldr	r3, [pc, #56]	@ (8004c84 <_sbrk+0x6c>)
 8004c4a:	220c      	movs	r2, #12
 8004c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	e009      	b.n	8004c68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c54:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <_sbrk+0x64>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c5a:	4b08      	ldr	r3, [pc, #32]	@ (8004c7c <_sbrk+0x64>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4413      	add	r3, r2
 8004c62:	4a06      	ldr	r2, [pc, #24]	@ (8004c7c <_sbrk+0x64>)
 8004c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c66:	68fb      	ldr	r3, [r7, #12]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	20050000 	.word	0x20050000
 8004c78:	00000400 	.word	0x00000400
 8004c7c:	20009e1c 	.word	0x20009e1c
 8004c80:	200148c0 	.word	0x200148c0
 8004c84:	200148b8 	.word	0x200148b8

08004c88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <SystemInit+0x20>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	4a05      	ldr	r2, [pc, #20]	@ (8004ca8 <SystemInit+0x20>)
 8004c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	e000ed00 	.word	0xe000ed00

08004cac <fill_dummy>:
uint32_t board_serial_number;

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim5;

void fill_dummy(int start) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
    for(int i=start;i<keyLen-1;i++) {message_cipher[i] = rand()%126;}
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e017      	b.n	8004cea <fill_dummy+0x3e>
 8004cba:	f012 f897 	bl	8016dec <rand>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d00 <fill_dummy+0x54>)
 8004cc2:	fb83 1302 	smull	r1, r3, r3, r2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	1199      	asrs	r1, r3, #6
 8004cca:	17d3      	asrs	r3, r2, #31
 8004ccc:	1ac9      	subs	r1, r1, r3
 8004cce:	460b      	mov	r3, r1
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	1a5b      	subs	r3, r3, r1
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	1ad1      	subs	r1, r2, r3
 8004cd8:	b2c9      	uxtb	r1, r1
 8004cda:	4a0a      	ldr	r2, [pc, #40]	@ (8004d04 <fill_dummy+0x58>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b7e      	cmp	r3, #126	@ 0x7e
 8004cee:	dde4      	ble.n	8004cba <fill_dummy+0xe>
    message_cipher[keyLen-1]='\0';
 8004cf0:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <fill_dummy+0x58>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	82082083 	.word	0x82082083
 8004d04:	20009f28 	.word	0x20009f28

08004d08 <XORCipher>:


void XORCipher(char* data, bool send, char type) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70fb      	strb	r3, [r7, #3]
 8004d14:	4613      	mov	r3, r2
 8004d16:	70bb      	strb	r3, [r7, #2]
    if(send == true){
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d045      	beq.n	8004daa <XORCipher+0xa2>
        message_cipher[0] = type;
 8004d1e:	4a47      	ldr	r2, [pc, #284]	@ (8004e3c <XORCipher+0x134>)
 8004d20:	78bb      	ldrb	r3, [r7, #2]
 8004d22:	7013      	strb	r3, [r2, #0]
        for(int i=0;i<strlen(data);i++) {message_cipher[i+1]=data[i];}
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e00a      	b.n	8004d40 <XORCipher+0x38>
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	441a      	add	r2, r3
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	3301      	adds	r3, #1
 8004d34:	7811      	ldrb	r1, [r2, #0]
 8004d36:	4a41      	ldr	r2, [pc, #260]	@ (8004e3c <XORCipher+0x134>)
 8004d38:	54d1      	strb	r1, [r2, r3]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fb fac5 	bl	80002d0 <strlen>
 8004d46:	4602      	mov	r2, r0
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d8ed      	bhi.n	8004d2a <XORCipher+0x22>
        message_cipher[strlen(data)+1]='\0';
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fb fabe 	bl	80002d0 <strlen>
 8004d54:	4603      	mov	r3, r0
 8004d56:	3301      	adds	r3, #1
 8004d58:	4a38      	ldr	r2, [pc, #224]	@ (8004e3c <XORCipher+0x134>)
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	54d1      	strb	r1, [r2, r3]
        fill_dummy(strlen(data)+2);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fb fab6 	bl	80002d0 <strlen>
 8004d64:	4603      	mov	r3, r0
 8004d66:	3302      	adds	r3, #2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff ff9f 	bl	8004cac <fill_dummy>
        for (int i=1;i<keyLen-1;i++) {
 8004d6e:	2301      	movs	r3, #1
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	e016      	b.n	8004da2 <XORCipher+0x9a>
            message_cipher[i] = message_cipher[i] ^ key[counter_UDP][i-1];
 8004d74:	4a31      	ldr	r2, [pc, #196]	@ (8004e3c <XORCipher+0x134>)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	4b30      	ldr	r3, [pc, #192]	@ (8004e40 <XORCipher+0x138>)
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	482f      	ldr	r0, [pc, #188]	@ (8004e44 <XORCipher+0x13c>)
 8004d86:	01c9      	lsls	r1, r1, #7
 8004d88:	4401      	add	r1, r0
 8004d8a:	440b      	add	r3, r1
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	4053      	eors	r3, r2
 8004d90:	b2d9      	uxtb	r1, r3
 8004d92:	4a2a      	ldr	r2, [pc, #168]	@ (8004e3c <XORCipher+0x134>)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	460a      	mov	r2, r1
 8004d9a:	701a      	strb	r2, [r3, #0]
        for (int i=1;i<keyLen-1;i++) {
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b7e      	cmp	r3, #126	@ 0x7e
 8004da6:	dde5      	ble.n	8004d74 <XORCipher+0x6c>
 8004da8:	e034      	b.n	8004e14 <XORCipher+0x10c>
        }
    }
    else {
    	for(int i=1;i<keyLen;i++) {message_cipher[i-1]=data[i];}
 8004daa:	2301      	movs	r3, #1
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e00a      	b.n	8004dc6 <XORCipher+0xbe>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	441a      	add	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	7811      	ldrb	r1, [r2, #0]
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e3c <XORCipher+0x134>)
 8004dbe:	54d1      	strb	r1, [r2, r3]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dca:	ddf1      	ble.n	8004db0 <XORCipher+0xa8>
		for (int i=0;i<keyLen-1;i++) {
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	e01b      	b.n	8004e0a <XORCipher+0x102>
			message_cipher[i] = message_cipher[i] ^ key[counter_UDP][i];
 8004dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e3c <XORCipher+0x134>)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	781a      	ldrb	r2, [r3, #0]
 8004dda:	4b19      	ldr	r3, [pc, #100]	@ (8004e40 <XORCipher+0x138>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4919      	ldr	r1, [pc, #100]	@ (8004e44 <XORCipher+0x13c>)
 8004de0:	01db      	lsls	r3, r3, #7
 8004de2:	4419      	add	r1, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	440b      	add	r3, r1
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	4053      	eors	r3, r2
 8004dec:	b2d9      	uxtb	r1, r3
 8004dee:	4a13      	ldr	r2, [pc, #76]	@ (8004e3c <XORCipher+0x134>)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4413      	add	r3, r2
 8004df4:	460a      	mov	r2, r1
 8004df6:	701a      	strb	r2, [r3, #0]
			if(message_cipher[i]=='\0') {break;}
 8004df8:	4a10      	ldr	r2, [pc, #64]	@ (8004e3c <XORCipher+0x134>)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <XORCipher+0x10a>
		for (int i=0;i<keyLen-1;i++) {
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3301      	adds	r3, #1
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b7e      	cmp	r3, #126	@ 0x7e
 8004e0e:	dde0      	ble.n	8004dd2 <XORCipher+0xca>
 8004e10:	e000      	b.n	8004e14 <XORCipher+0x10c>
			if(message_cipher[i]=='\0') {break;}
 8004e12:	bf00      	nop
		}
    }

    if(counter_UDP == numkeys-1){counter_UDP = 0;}
 8004e14:	4b0a      	ldr	r3, [pc, #40]	@ (8004e40 <XORCipher+0x138>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f240 122b 	movw	r2, #299	@ 0x12b
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d103      	bne.n	8004e28 <XORCipher+0x120>
 8004e20:	4b07      	ldr	r3, [pc, #28]	@ (8004e40 <XORCipher+0x138>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
    else {counter_UDP++;}
}
 8004e26:	e004      	b.n	8004e32 <XORCipher+0x12a>
    else {counter_UDP++;}
 8004e28:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <XORCipher+0x138>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	4a04      	ldr	r2, [pc, #16]	@ (8004e40 <XORCipher+0x138>)
 8004e30:	6013      	str	r3, [r2, #0]
}
 8004e32:	bf00      	nop
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20009f28 	.word	0x20009f28
 8004e40:	20009fa8 	.word	0x20009fa8
 8004e44:	20000050 	.word	0x20000050

08004e48 <udpClient_connect>:


void udpClient_connect(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
	err_t err;

	upcb = udp_new();
 8004e4e:	f00f fbfd 	bl	801464c <udp_new>
 8004e52:	4603      	mov	r3, r0
 8004e54:	4a73      	ldr	r2, [pc, #460]	@ (8005024 <udpClient_connect+0x1dc>)
 8004e56:	6013      	str	r3, [r2, #0]

	// Bind the updb block to module's IP and port */
	ip_addr_t myIPaddr;
	//IP_ADDR4(&myIPaddr, A, B, C, D);
	printf("\n\rClient IP %d.%d.%d.%d\n\r", ipv4_address[0],ipv4_address[1],ipv4_address[2],ipv4_address[3]);
 8004e58:	4b73      	ldr	r3, [pc, #460]	@ (8005028 <udpClient_connect+0x1e0>)
 8004e5a:	6819      	ldr	r1, [r3, #0]
 8004e5c:	4b72      	ldr	r3, [pc, #456]	@ (8005028 <udpClient_connect+0x1e0>)
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	4b71      	ldr	r3, [pc, #452]	@ (8005028 <udpClient_connect+0x1e0>)
 8004e62:	6898      	ldr	r0, [r3, #8]
 8004e64:	4b70      	ldr	r3, [pc, #448]	@ (8005028 <udpClient_connect+0x1e0>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	486f      	ldr	r0, [pc, #444]	@ (800502c <udpClient_connect+0x1e4>)
 8004e6e:	f012 fd99 	bl	80179a4 <iprintf>
	IP_ADDR4(&myIPaddr, ipv4_address[0],ipv4_address[1],ipv4_address[2],ipv4_address[3]);
 8004e72:	4b6d      	ldr	r3, [pc, #436]	@ (8005028 <udpClient_connect+0x1e0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	061a      	lsls	r2, r3, #24
 8004e78:	4b6b      	ldr	r3, [pc, #428]	@ (8005028 <udpClient_connect+0x1e0>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e82:	431a      	orrs	r2, r3
 8004e84:	4b68      	ldr	r3, [pc, #416]	@ (8005028 <udpClient_connect+0x1e0>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	4b66      	ldr	r3, [pc, #408]	@ (8005028 <udpClient_connect+0x1e0>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	4313      	orrs	r3, r2
 8004e96:	061a      	lsls	r2, r3, #24
 8004e98:	4b63      	ldr	r3, [pc, #396]	@ (8005028 <udpClient_connect+0x1e0>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	0619      	lsls	r1, r3, #24
 8004e9e:	4b62      	ldr	r3, [pc, #392]	@ (8005028 <udpClient_connect+0x1e0>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	041b      	lsls	r3, r3, #16
 8004ea4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ea8:	4319      	orrs	r1, r3
 8004eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8005028 <udpClient_connect+0x1e0>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	4319      	orrs	r1, r3
 8004eb4:	4b5c      	ldr	r3, [pc, #368]	@ (8005028 <udpClient_connect+0x1e0>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	4b58      	ldr	r3, [pc, #352]	@ (8005028 <udpClient_connect+0x1e0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	0619      	lsls	r1, r3, #24
 8004eca:	4b57      	ldr	r3, [pc, #348]	@ (8005028 <udpClient_connect+0x1e0>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	041b      	lsls	r3, r3, #16
 8004ed0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ed4:	4319      	orrs	r1, r3
 8004ed6:	4b54      	ldr	r3, [pc, #336]	@ (8005028 <udpClient_connect+0x1e0>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	4319      	orrs	r1, r3
 8004ee0:	4b51      	ldr	r3, [pc, #324]	@ (8005028 <udpClient_connect+0x1e0>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	0a1b      	lsrs	r3, r3, #8
 8004eea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8005028 <udpClient_connect+0x1e0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	0619      	lsls	r1, r3, #24
 8004ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8005028 <udpClient_connect+0x1e0>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	041b      	lsls	r3, r3, #16
 8004efc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f00:	4319      	orrs	r1, r3
 8004f02:	4b49      	ldr	r3, [pc, #292]	@ (8005028 <udpClient_connect+0x1e0>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	4319      	orrs	r1, r3
 8004f0c:	4b46      	ldr	r3, [pc, #280]	@ (8005028 <udpClient_connect+0x1e0>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	430b      	orrs	r3, r1
 8004f14:	0e1b      	lsrs	r3, r3, #24
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 8);	// UDP Port 8
 8004f1a:	4b42      	ldr	r3, [pc, #264]	@ (8005024 <udpClient_connect+0x1dc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f107 0108 	add.w	r1, r7, #8
 8004f22:	2208      	movs	r2, #8
 8004f24:	4618      	mov	r0, r3
 8004f26:	f00f fa7b 	bl	8014420 <udp_bind>

	ip_addr_t DestIPaddr;
	//IP_ADDR4(&DestIPaddr, A, B, C, D);
	IP_ADDR4(&DestIPaddr, server_address[0],server_address[1],server_address[2],server_address[3]);
 8004f2a:	4b41      	ldr	r3, [pc, #260]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	061a      	lsls	r2, r3, #24
 8004f30:	4b3f      	ldr	r3, [pc, #252]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	041b      	lsls	r3, r3, #16
 8004f36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	431a      	orrs	r2, r3
 8004f46:	4b3a      	ldr	r3, [pc, #232]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	061a      	lsls	r2, r3, #24
 8004f50:	4b37      	ldr	r3, [pc, #220]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	0619      	lsls	r1, r3, #24
 8004f56:	4b36      	ldr	r3, [pc, #216]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f60:	4319      	orrs	r1, r3
 8004f62:	4b33      	ldr	r3, [pc, #204]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	4319      	orrs	r1, r3
 8004f6c:	4b30      	ldr	r3, [pc, #192]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	430b      	orrs	r3, r1
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	0619      	lsls	r1, r3, #24
 8004f82:	4b2b      	ldr	r3, [pc, #172]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f8c:	4319      	orrs	r1, r3
 8004f8e:	4b28      	ldr	r3, [pc, #160]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	4319      	orrs	r1, r3
 8004f98:	4b25      	ldr	r3, [pc, #148]	@ (8005030 <udpClient_connect+0x1e8>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	0a1b      	lsrs	r3, r3, #8
 8004fa2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	4b21      	ldr	r3, [pc, #132]	@ (8005030 <udpClient_connect+0x1e8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	0619      	lsls	r1, r3, #24
 8004fae:	4b20      	ldr	r3, [pc, #128]	@ (8005030 <udpClient_connect+0x1e8>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	041b      	lsls	r3, r3, #16
 8004fb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004fb8:	4319      	orrs	r1, r3
 8004fba:	4b1d      	ldr	r3, [pc, #116]	@ (8005030 <udpClient_connect+0x1e8>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	4319      	orrs	r1, r3
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005030 <udpClient_connect+0x1e8>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	0e1b      	lsrs	r3, r3, #24
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	607b      	str	r3, [r7, #4]
	err = udp_connect(upcb, &DestIPaddr, 5005);		// UDP Port 5005
 8004fd2:	4b14      	ldr	r3, [pc, #80]	@ (8005024 <udpClient_connect+0x1dc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	1d39      	adds	r1, r7, #4
 8004fd8:	f241 328d 	movw	r2, #5005	@ 0x138d
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f00f faa7 	bl	8014530 <udp_connect>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK) {
 8004fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d112      	bne.n	8005014 <udpClient_connect+0x1cc>
		message_type = 0;	// Initialize message
 8004fee:	4b11      	ldr	r3, [pc, #68]	@ (8005034 <udpClient_connect+0x1ec>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
		while(UDP_Init <= 1){
 8004ff4:	e007      	b.n	8005006 <udpClient_connect+0x1be>
			HAL_Delay(200);
 8004ff6:	20c8      	movs	r0, #200	@ 0xc8
 8004ff8:	f000 fb4c 	bl	8005694 <HAL_Delay>
			ethernetif_input(&gnetif);
 8004ffc:	480e      	ldr	r0, [pc, #56]	@ (8005038 <udpClient_connect+0x1f0>)
 8004ffe:	f005 fc4d 	bl	800a89c <ethernetif_input>
			udpClient_send();
 8005002:	f000 f821 	bl	8005048 <udpClient_send>
		while(UDP_Init <= 1){
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <udpClient_connect+0x1f4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b01      	cmp	r3, #1
 800500c:	ddf3      	ble.n	8004ff6 <udpClient_connect+0x1ae>
		}
		client_connected = 1;
 800500e:	4b0c      	ldr	r3, [pc, #48]	@ (8005040 <udpClient_connect+0x1f8>)
 8005010:	2201      	movs	r2, #1
 8005012:	601a      	str	r2, [r3, #0]
	}
	printf("\n\rClient connected to the server\n\n\n\r");
 8005014:	480b      	ldr	r0, [pc, #44]	@ (8005044 <udpClient_connect+0x1fc>)
 8005016:	f012 fcc5 	bl	80179a4 <iprintf>

}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20009e0c 	.word	0x20009e0c
 8005028:	20000000 	.word	0x20000000
 800502c:	0801a200 	.word	0x0801a200
 8005030:	20000030 	.word	0x20000030
 8005034:	20009e08 	.word	0x20009e08
 8005038:	20009fbc 	.word	0x20009fbc
 800503c:	20009e24 	.word	0x20009e24
 8005040:	20009e04 	.word	0x20009e04
 8005044:	0801a21c 	.word	0x0801a21c

08005048 <udpClient_send>:

void udpClient_send(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af02      	add	r7, sp, #8
  memset(buffer, 0, keyLen);
 800504e:	2280      	movs	r2, #128	@ 0x80
 8005050:	2100      	movs	r1, #0
 8005052:	483e      	ldr	r0, [pc, #248]	@ (800514c <udpClient_send+0x104>)
 8005054:	f012 fe38 	bl	8017cc8 <memset>
  memset(message_cipher, 0, keyLen);
 8005058:	2280      	movs	r2, #128	@ 0x80
 800505a:	2100      	movs	r1, #0
 800505c:	483c      	ldr	r0, [pc, #240]	@ (8005150 <udpClient_send+0x108>)
 800505e:	f012 fe33 	bl	8017cc8 <memset>
  struct pbuf *txBuf;
  int len;
  if(UDP_Init == 0) {
 8005062:	4b3c      	ldr	r3, [pc, #240]	@ (8005154 <udpClient_send+0x10c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <udpClient_send+0x2e>
	  UDP_Init++;
 800506a:	4b3a      	ldr	r3, [pc, #232]	@ (8005154 <udpClient_send+0x10c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3301      	adds	r3, #1
 8005070:	4a38      	ldr	r2, [pc, #224]	@ (8005154 <udpClient_send+0x10c>)
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	e03b      	b.n	80050ee <udpClient_send+0xa6>
  } else if(UDP_Init <= 2) {
 8005076:	4b37      	ldr	r3, [pc, #220]	@ (8005154 <udpClient_send+0x10c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b02      	cmp	r3, #2
 800507c:	dc1e      	bgt.n	80050bc <udpClient_send+0x74>
	  message_type = 0;
 800507e:	4b36      	ldr	r3, [pc, #216]	@ (8005158 <udpClient_send+0x110>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
	  board_serial_number = HAL_GetUIDw0();		// Get STM32 Serial Number
 8005084:	f000 fb2a 	bl	80056dc <HAL_GetUIDw0>
 8005088:	4603      	mov	r3, r0
 800508a:	4a34      	ldr	r2, [pc, #208]	@ (800515c <udpClient_send+0x114>)
 800508c:	6013      	str	r3, [r2, #0]
	  len = sprintf(message_cipher,"0%x%d%s",board_serial_number,room,message_init);
 800508e:	4b33      	ldr	r3, [pc, #204]	@ (800515c <udpClient_send+0x114>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b33      	ldr	r3, [pc, #204]	@ (8005160 <udpClient_send+0x118>)
 8005094:	6819      	ldr	r1, [r3, #0]
 8005096:	4b33      	ldr	r3, [pc, #204]	@ (8005164 <udpClient_send+0x11c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	460b      	mov	r3, r1
 800509e:	4932      	ldr	r1, [pc, #200]	@ (8005168 <udpClient_send+0x120>)
 80050a0:	482b      	ldr	r0, [pc, #172]	@ (8005150 <udpClient_send+0x108>)
 80050a2:	f012 fcef 	bl	8017a84 <siprintf>
 80050a6:	6078      	str	r0, [r7, #4]
	  printf("\n\r[%d] Initializing...\r",counter++);
 80050a8:	4b30      	ldr	r3, [pc, #192]	@ (800516c <udpClient_send+0x124>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	492f      	ldr	r1, [pc, #188]	@ (800516c <udpClient_send+0x124>)
 80050b0:	600a      	str	r2, [r1, #0]
 80050b2:	4619      	mov	r1, r3
 80050b4:	482e      	ldr	r0, [pc, #184]	@ (8005170 <udpClient_send+0x128>)
 80050b6:	f012 fc75 	bl	80179a4 <iprintf>
 80050ba:	e018      	b.n	80050ee <udpClient_send+0xa6>
	  //printf("\n\r%s\n\r",message_cipher);
	  //printf("\n\rClient %d.%d.%d.%d trying to connect the server\n\r", ipv4_address[0],ipv4_address[1],ipv4_address[2],ipv4_address[3]);
	  //printf("\n\rGate:  %d.%d.%d.%d trying to connect the server\n\r", gateway_address[0],gateway_address[1],gateway_address[2],gateway_address[3]);
	  //printf("\n\rServer:  %d.%d.%d.%d trying to connect the server\n\r", server_address[0],server_address[1],server_address[2],server_address[3]);
  } else {
	  if (message_type == 1){	// If message contains UID information, send it encrypted
 80050bc:	4b26      	ldr	r3, [pc, #152]	@ (8005158 <udpClient_send+0x110>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d107      	bne.n	80050d4 <udpClient_send+0x8c>
		  XORCipher(message,true,'1');
 80050c4:	2231      	movs	r2, #49	@ 0x31
 80050c6:	2101      	movs	r1, #1
 80050c8:	482a      	ldr	r0, [pc, #168]	@ (8005174 <udpClient_send+0x12c>)
 80050ca:	f7ff fe1d 	bl	8004d08 <XORCipher>
		  len = keyLen;
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	e00c      	b.n	80050ee <udpClient_send+0xa6>
	  }
	  else if (message_type == 2) {		// If message contains BME information, send it not encrypted
 80050d4:	4b20      	ldr	r3, [pc, #128]	@ (8005158 <udpClient_send+0x110>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d108      	bne.n	80050ee <udpClient_send+0xa6>
		  strcpy(message_cipher,message);
 80050dc:	4925      	ldr	r1, [pc, #148]	@ (8005174 <udpClient_send+0x12c>)
 80050de:	481c      	ldr	r0, [pc, #112]	@ (8005150 <udpClient_send+0x108>)
 80050e0:	f012 feb3 	bl	8017e4a <strcpy>
		  len = strlen(message_cipher);
 80050e4:	481a      	ldr	r0, [pc, #104]	@ (8005150 <udpClient_send+0x108>)
 80050e6:	f7fb f8f3 	bl	80002d0 <strlen>
 80050ea:	4603      	mov	r3, r0
 80050ec:	607b      	str	r3, [r7, #4]
	  }
  }
  // Allocate pbuf from pool
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80050f6:	4619      	mov	r1, r3
 80050f8:	2036      	movs	r0, #54	@ 0x36
 80050fa:	f007 fe31 	bl	800cd60 <pbuf_alloc>
 80050fe:	6038      	str	r0, [r7, #0]

  // Copy data to pbuf, send and clear the pbuf
  if (txBuf != NULL)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00f      	beq.n	8005126 <udpClient_send+0xde>
  {
    pbuf_take(txBuf, message_cipher, len);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	b29b      	uxth	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	4910      	ldr	r1, [pc, #64]	@ (8005150 <udpClient_send+0x108>)
 800510e:	6838      	ldr	r0, [r7, #0]
 8005110:	f008 fb76 	bl	800d800 <pbuf_take>
    udp_send(upcb, txBuf);
 8005114:	4b18      	ldr	r3, [pc, #96]	@ (8005178 <udpClient_send+0x130>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f00e ff96 	bl	801404c <udp_send>
    pbuf_free(txBuf);
 8005120:	6838      	ldr	r0, [r7, #0]
 8005122:	f008 f901 	bl	800d328 <pbuf_free>
  }

  if(message_type!=2 && UDP_Init <= 2) {
 8005126:	4b0c      	ldr	r3, [pc, #48]	@ (8005158 <udpClient_send+0x110>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d00a      	beq.n	8005144 <udpClient_send+0xfc>
 800512e:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <udpClient_send+0x10c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b02      	cmp	r3, #2
 8005134:	dc06      	bgt.n	8005144 <udpClient_send+0xfc>
  		udp_recv(upcb, udp_receive_callback, NULL);
 8005136:	4b10      	ldr	r3, [pc, #64]	@ (8005178 <udpClient_send+0x130>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2200      	movs	r2, #0
 800513c:	490f      	ldr	r1, [pc, #60]	@ (800517c <udpClient_send+0x134>)
 800513e:	4618      	mov	r0, r3
 8005140:	f00f fa64 	bl	801460c <udp_recv>
  }

}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20009ea8 	.word	0x20009ea8
 8005150:	20009f28 	.word	0x20009f28
 8005154:	20009e24 	.word	0x20009e24
 8005158:	20009e08 	.word	0x20009e08
 800515c:	20009fb0 	.word	0x20009fb0
 8005160:	200099a4 	.word	0x200099a4
 8005164:	20009650 	.word	0x20009650
 8005168:	0801a244 	.word	0x0801a244
 800516c:	20009e20 	.word	0x20009e20
 8005170:	0801a24c 	.word	0x0801a24c
 8005174:	20009e28 	.word	0x20009e28
 8005178:	20009e0c 	.word	0x20009e0c
 800517c:	080051ad 	.word	0x080051ad

08005180 <receiver>:

void receiver() {
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
	if(UDP_Init > 2) {
 8005184:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <receiver+0x20>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b02      	cmp	r3, #2
 800518a:	dd06      	ble.n	800519a <receiver+0x1a>
		udp_recv(upcb, udp_receive_callback, NULL);
 800518c:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <receiver+0x24>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2200      	movs	r2, #0
 8005192:	4905      	ldr	r1, [pc, #20]	@ (80051a8 <receiver+0x28>)
 8005194:	4618      	mov	r0, r3
 8005196:	f00f fa39 	bl	801460c <udp_recv>
	}
}
 800519a:	bf00      	nop
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20009e24 	.word	0x20009e24
 80051a4:	20009e0c 	.word	0x20009e0c
 80051a8:	080051ad 	.word	0x080051ad

080051ac <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
	// Copy the data from the pbuf to buffer
	strncpy (buffer, (char *)p->payload, p->len);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6859      	ldr	r1, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	895b      	ldrh	r3, [r3, #10]
 80051c2:	461a      	mov	r2, r3
 80051c4:	4832      	ldr	r0, [pc, #200]	@ (8005290 <udp_receive_callback+0xe4>)
 80051c6:	f012 fda6 	bl	8017d16 <strncpy>

	// Manage receive messages from the server
	if (UDP_Init >= 3) {
 80051ca:	4b32      	ldr	r3, [pc, #200]	@ (8005294 <udp_receive_callback+0xe8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	dd48      	ble.n	8005264 <udp_receive_callback+0xb8>
		if (buffer[0] == '9') {		// First bit is 9: Emergency System
 80051d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005290 <udp_receive_callback+0xe4>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b39      	cmp	r3, #57	@ 0x39
 80051d8:	d107      	bne.n	80051ea <udp_receive_callback+0x3e>
			printf("\n\rEmergency!\n\r");
 80051da:	482f      	ldr	r0, [pc, #188]	@ (8005298 <udp_receive_callback+0xec>)
 80051dc:	f012 fbe2 	bl	80179a4 <iprintf>
			Open_Door(1,2);
 80051e0:	2102      	movs	r1, #2
 80051e2:	2001      	movs	r0, #1
 80051e4:	f7fe fc86 	bl	8003af4 <Open_Door>
 80051e8:	e03c      	b.n	8005264 <udp_receive_callback+0xb8>
		} else {	// All other options are the reply from UID message sent by the client
			RFID_Received = 1;	// Client received an acknowledge from the server
 80051ea:	4b2c      	ldr	r3, [pc, #176]	@ (800529c <udp_receive_callback+0xf0>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
			XORCipher(buffer,false,'1');	// Decipher message
 80051f0:	2231      	movs	r2, #49	@ 0x31
 80051f2:	2100      	movs	r1, #0
 80051f4:	4826      	ldr	r0, [pc, #152]	@ (8005290 <udp_receive_callback+0xe4>)
 80051f6:	f7ff fd87 	bl	8004d08 <XORCipher>
			if (!strcmp(message_cipher,confirmation)) {
 80051fa:	4b29      	ldr	r3, [pc, #164]	@ (80052a0 <udp_receive_callback+0xf4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4619      	mov	r1, r3
 8005200:	4828      	ldr	r0, [pc, #160]	@ (80052a4 <udp_receive_callback+0xf8>)
 8005202:	f7fb f805 	bl	8000210 <strcmp>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d107      	bne.n	800521c <udp_receive_callback+0x70>
				printf("\n\rUID accepted\r\n");
 800520c:	4826      	ldr	r0, [pc, #152]	@ (80052a8 <udp_receive_callback+0xfc>)
 800520e:	f012 fc31 	bl	8017a74 <puts>
				Open_Door(0,0);		// Meaning it is entering the room (no emergency)
 8005212:	2100      	movs	r1, #0
 8005214:	2000      	movs	r0, #0
 8005216:	f7fe fc6d 	bl	8003af4 <Open_Door>
 800521a:	e020      	b.n	800525e <udp_receive_callback+0xb2>
			} else {
				// In case of no access, the Red LED will turn on
				printf("\n\rUID not accepted\r\n");
 800521c:	4823      	ldr	r0, [pc, #140]	@ (80052ac <udp_receive_callback+0x100>)
 800521e:	f012 fc29 	bl	8017a74 <puts>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
 8005222:	2200      	movs	r2, #0
 8005224:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005228:	4821      	ldr	r0, [pc, #132]	@ (80052b0 <udp_receive_callback+0x104>)
 800522a:	f001 fe13 	bl	8006e54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
 800522e:	2200      	movs	r2, #0
 8005230:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005234:	481e      	ldr	r0, [pc, #120]	@ (80052b0 <udp_receive_callback+0x104>)
 8005236:	f001 fe0d 	bl	8006e54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,1);
 800523a:	2201      	movs	r2, #1
 800523c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005240:	481b      	ldr	r0, [pc, #108]	@ (80052b0 <udp_receive_callback+0x104>)
 8005242:	f001 fe07 	bl	8006e54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,0);
 8005246:	2200      	movs	r2, #0
 8005248:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800524c:	4818      	ldr	r0, [pc, #96]	@ (80052b0 <udp_receive_callback+0x104>)
 800524e:	f001 fe01 	bl	8006e54 <HAL_GPIO_WritePin>
				TIM5 -> CNT = 0;
 8005252:	4b18      	ldr	r3, [pc, #96]	@ (80052b4 <udp_receive_callback+0x108>)
 8005254:	2200      	movs	r2, #0
 8005256:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Base_Start_IT(&htim5);
 8005258:	4817      	ldr	r0, [pc, #92]	@ (80052b8 <udp_receive_callback+0x10c>)
 800525a:	f003 fdb5 	bl	8008dc8 <HAL_TIM_Base_Start_IT>
			}
			printf("\r---------------END-OF-REPLY-MESSAGE---------------\n\n\n\r");
 800525e:	4817      	ldr	r0, [pc, #92]	@ (80052bc <udp_receive_callback+0x110>)
 8005260:	f012 fba0 	bl	80179a4 <iprintf>
		}
	}

	// Initial synchronization
	if (strcmp(buffer,message_init) == 0) {
 8005264:	4b16      	ldr	r3, [pc, #88]	@ (80052c0 <udp_receive_callback+0x114>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4619      	mov	r1, r3
 800526a:	4809      	ldr	r0, [pc, #36]	@ (8005290 <udp_receive_callback+0xe4>)
 800526c:	f7fa ffd0 	bl	8000210 <strcmp>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d104      	bne.n	8005280 <udp_receive_callback+0xd4>
		UDP_Init++;
 8005276:	4b07      	ldr	r3, [pc, #28]	@ (8005294 <udp_receive_callback+0xe8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3301      	adds	r3, #1
 800527c:	4a05      	ldr	r2, [pc, #20]	@ (8005294 <udp_receive_callback+0xe8>)
 800527e:	6013      	str	r3, [r2, #0]
	}

	// Free receive pbuf
	pbuf_free(p);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f008 f851 	bl	800d328 <pbuf_free>
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20009ea8 	.word	0x20009ea8
 8005294:	20009e24 	.word	0x20009e24
 8005298:	0801a264 	.word	0x0801a264
 800529c:	20009fac 	.word	0x20009fac
 80052a0:	20009654 	.word	0x20009654
 80052a4:	20009f28 	.word	0x20009f28
 80052a8:	0801a274 	.word	0x0801a274
 80052ac:	0801a284 	.word	0x0801a284
 80052b0:	40020800 	.word	0x40020800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	20009b84 	.word	0x20009b84
 80052bc:	0801a298 	.word	0x0801a298
 80052c0:	20009650 	.word	0x20009650

080052c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80052c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80052fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052c8:	480d      	ldr	r0, [pc, #52]	@ (8005300 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052ca:	490e      	ldr	r1, [pc, #56]	@ (8005304 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052d0:	e002      	b.n	80052d8 <LoopCopyDataInit>

080052d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052d6:	3304      	adds	r3, #4

080052d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052dc:	d3f9      	bcc.n	80052d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052de:	4a0b      	ldr	r2, [pc, #44]	@ (800530c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005310 <LoopFillZerobss+0x26>)
  movs r3, #0
 80052e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052e4:	e001      	b.n	80052ea <LoopFillZerobss>

080052e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052e8:	3204      	adds	r2, #4

080052ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052ec:	d3fb      	bcc.n	80052e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80052ee:	f7ff fccb 	bl	8004c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052f2:	f012 fd83 	bl	8017dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052f6:	f7fd fc91 	bl	8002c1c <main>
  bx  lr    
 80052fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80052fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005304:	20009848 	.word	0x20009848
  ldr r2, =_sidata
 8005308:	08054ecc 	.word	0x08054ecc
  ldr r2, =_sbss
 800530c:	20009988 	.word	0x20009988
  ldr r4, =_ebss
 8005310:	200148c0 	.word	0x200148c0

08005314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005314:	e7fe      	b.n	8005314 <ADC_IRQHandler>

08005316 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <LAN8742_RegisterBusIO+0x28>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <LAN8742_RegisterBusIO+0x28>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <LAN8742_RegisterBusIO+0x28>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800533e:	f04f 33ff 	mov.w	r3, #4294967295
 8005342:	e014      	b.n	800536e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800537a:	b580      	push	{r7, lr}
 800537c:	b086      	sub	sp, #24
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d17c      	bne.n	8005494 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	e01c      	b.n	80053ee <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f107 0208 	add.w	r2, r7, #8
 80053bc:	2112      	movs	r1, #18
 80053be:	6978      	ldr	r0, [r7, #20]
 80053c0:	4798      	blx	r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	da03      	bge.n	80053d0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80053c8:	f06f 0304 	mvn.w	r3, #4
 80053cc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80053ce:	e00b      	b.n	80053e8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d105      	bne.n	80053e8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	613b      	str	r3, [r7, #16]
         break;
 80053e6:	e005      	b.n	80053f4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	3301      	adds	r3, #1
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b1f      	cmp	r3, #31
 80053f2:	d9df      	bls.n	80053b4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b1f      	cmp	r3, #31
 80053fa:	d902      	bls.n	8005402 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80053fc:	f06f 0302 	mvn.w	r3, #2
 8005400:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d145      	bne.n	8005494 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6810      	ldr	r0, [r2, #0]
 8005410:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005414:	2100      	movs	r1, #0
 8005416:	4798      	blx	r3
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	db37      	blt.n	800548e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6810      	ldr	r0, [r2, #0]
 8005426:	f107 0208 	add.w	r2, r7, #8
 800542a:	2100      	movs	r1, #0
 800542c:	4798      	blx	r3
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	db28      	blt.n	8005486 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	4798      	blx	r3
 800543a:	4603      	mov	r3, r0
 800543c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800543e:	e01c      	b.n	800547a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	4798      	blx	r3
 8005446:	4603      	mov	r3, r0
 8005448:	461a      	mov	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005452:	d80e      	bhi.n	8005472 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6810      	ldr	r0, [r2, #0]
 800545c:	f107 0208 	add.w	r2, r7, #8
 8005460:	2100      	movs	r1, #0
 8005462:	4798      	blx	r3
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	da07      	bge.n	800547a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800546a:	f06f 0304 	mvn.w	r3, #4
 800546e:	613b      	str	r3, [r7, #16]
                 break;
 8005470:	e010      	b.n	8005494 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8005472:	f06f 0301 	mvn.w	r3, #1
 8005476:	613b      	str	r3, [r7, #16]
               break;
 8005478:	e00c      	b.n	8005494 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1dd      	bne.n	8005440 <LAN8742_Init+0xc6>
 8005484:	e006      	b.n	8005494 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8005486:	f06f 0304 	mvn.w	r3, #4
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e002      	b.n	8005494 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800548e:	f06f 0303 	mvn.w	r3, #3
 8005492:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d112      	bne.n	80054c0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	4798      	blx	r3
 80054a0:	4603      	mov	r3, r0
 80054a2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80054a4:	bf00      	nop
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	4798      	blx	r3
 80054ac:	4603      	mov	r3, r0
 80054ae:	461a      	mov	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80054b8:	d9f5      	bls.n	80054a6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80054c0:	693b      	ldr	r3, [r7, #16]
 }
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6810      	ldr	r0, [r2, #0]
 80054de:	f107 020c 	add.w	r2, r7, #12
 80054e2:	2101      	movs	r1, #1
 80054e4:	4798      	blx	r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	da02      	bge.n	80054f2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80054ec:	f06f 0304 	mvn.w	r3, #4
 80054f0:	e06e      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6810      	ldr	r0, [r2, #0]
 80054fa:	f107 020c 	add.w	r2, r7, #12
 80054fe:	2101      	movs	r1, #1
 8005500:	4798      	blx	r3
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	da02      	bge.n	800550e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8005508:	f06f 0304 	mvn.w	r3, #4
 800550c:	e060      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8005518:	2301      	movs	r3, #1
 800551a:	e059      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6810      	ldr	r0, [r2, #0]
 8005524:	f107 020c 	add.w	r2, r7, #12
 8005528:	2100      	movs	r1, #0
 800552a:	4798      	blx	r3
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	da02      	bge.n	8005538 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8005532:	f06f 0304 	mvn.w	r3, #4
 8005536:	e04b      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d11b      	bne.n	800557a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d006      	beq.n	800555a <LAN8742_GetLinkState+0x90>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8005556:	2302      	movs	r3, #2
 8005558:	e03a      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8005564:	2303      	movs	r3, #3
 8005566:	e033      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8005572:	2304      	movs	r3, #4
 8005574:	e02c      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8005576:	2305      	movs	r3, #5
 8005578:	e02a      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6810      	ldr	r0, [r2, #0]
 8005582:	f107 020c 	add.w	r2, r7, #12
 8005586:	211f      	movs	r1, #31
 8005588:	4798      	blx	r3
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	da02      	bge.n	8005596 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8005590:	f06f 0304 	mvn.w	r3, #4
 8005594:	e01c      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80055a0:	2306      	movs	r3, #6
 80055a2:	e015      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 031c 	and.w	r3, r3, #28
 80055aa:	2b18      	cmp	r3, #24
 80055ac:	d101      	bne.n	80055b2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80055ae:	2302      	movs	r3, #2
 80055b0:	e00e      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 031c 	and.w	r3, r3, #28
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d101      	bne.n	80055c0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80055bc:	2303      	movs	r3, #3
 80055be:	e007      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 031c 	and.w	r3, r3, #28
 80055c6:	2b14      	cmp	r3, #20
 80055c8:	d101      	bne.n	80055ce <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80055ca:	2304      	movs	r3, #4
 80055cc:	e000      	b.n	80055d0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80055ce:	2305      	movs	r3, #5
    }				
  }
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055dc:	2003      	movs	r0, #3
 80055de:	f000 f959 	bl	8005894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055e2:	2000      	movs	r0, #0
 80055e4:	f000 f806 	bl	80055f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055e8:	f7ff f85c 	bl	80046a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055fc:	4b12      	ldr	r3, [pc, #72]	@ (8005648 <HAL_InitTick+0x54>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4b12      	ldr	r3, [pc, #72]	@ (800564c <HAL_InitTick+0x58>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	4619      	mov	r1, r3
 8005606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800560a:	fbb3 f3f1 	udiv	r3, r3, r1
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f973 	bl	80058fe <HAL_SYSTICK_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e00e      	b.n	8005640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b0f      	cmp	r3, #15
 8005626:	d80a      	bhi.n	800563e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005628:	2200      	movs	r2, #0
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	f000 f93b 	bl	80058aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005634:	4a06      	ldr	r2, [pc, #24]	@ (8005650 <HAL_InitTick+0x5c>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e000      	b.n	8005640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	2000004c 	.word	0x2000004c
 800564c:	2000965c 	.word	0x2000965c
 8005650:	20009658 	.word	0x20009658

08005654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005658:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <HAL_IncTick+0x20>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	4b06      	ldr	r3, [pc, #24]	@ (8005678 <HAL_IncTick+0x24>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4413      	add	r3, r2
 8005664:	4a04      	ldr	r2, [pc, #16]	@ (8005678 <HAL_IncTick+0x24>)
 8005666:	6013      	str	r3, [r2, #0]
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	2000965c 	.word	0x2000965c
 8005678:	20009fb4 	.word	0x20009fb4

0800567c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  return uwTick;
 8005680:	4b03      	ldr	r3, [pc, #12]	@ (8005690 <HAL_GetTick+0x14>)
 8005682:	681b      	ldr	r3, [r3, #0]
}
 8005684:	4618      	mov	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20009fb4 	.word	0x20009fb4

08005694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800569c:	f7ff ffee 	bl	800567c <HAL_GetTick>
 80056a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d005      	beq.n	80056ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056ae:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <HAL_Delay+0x44>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056ba:	bf00      	nop
 80056bc:	f7ff ffde 	bl	800567c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d8f7      	bhi.n	80056bc <HAL_Delay+0x28>
  {
  }
}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	2000965c 	.word	0x2000965c

080056dc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80056e0:	4b03      	ldr	r3, [pc, #12]	@ (80056f0 <HAL_GetUIDw0+0x14>)
 80056e2:	681b      	ldr	r3, [r3, #0]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	1ff0f420 	.word	0x1ff0f420

080056f4 <__NVIC_SetPriorityGrouping>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005704:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <__NVIC_SetPriorityGrouping+0x40>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005710:	4013      	ands	r3, r2
 8005712:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800571c:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <__NVIC_SetPriorityGrouping+0x44>)
 800571e:	4313      	orrs	r3, r2
 8005720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005722:	4a04      	ldr	r2, [pc, #16]	@ (8005734 <__NVIC_SetPriorityGrouping+0x40>)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	60d3      	str	r3, [r2, #12]
}
 8005728:	bf00      	nop
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	e000ed00 	.word	0xe000ed00
 8005738:	05fa0000 	.word	0x05fa0000

0800573c <__NVIC_GetPriorityGrouping>:
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005740:	4b04      	ldr	r3, [pc, #16]	@ (8005754 <__NVIC_GetPriorityGrouping+0x18>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	0a1b      	lsrs	r3, r3, #8
 8005746:	f003 0307 	and.w	r3, r3, #7
}
 800574a:	4618      	mov	r0, r3
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	e000ed00 	.word	0xe000ed00

08005758 <__NVIC_EnableIRQ>:
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005766:	2b00      	cmp	r3, #0
 8005768:	db0b      	blt.n	8005782 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	f003 021f 	and.w	r2, r3, #31
 8005770:	4907      	ldr	r1, [pc, #28]	@ (8005790 <__NVIC_EnableIRQ+0x38>)
 8005772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	2001      	movs	r0, #1
 800577a:	fa00 f202 	lsl.w	r2, r0, r2
 800577e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	e000e100 	.word	0xe000e100

08005794 <__NVIC_SetPriority>:
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	6039      	str	r1, [r7, #0]
 800579e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	db0a      	blt.n	80057be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	490c      	ldr	r1, [pc, #48]	@ (80057e0 <__NVIC_SetPriority+0x4c>)
 80057ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b2:	0112      	lsls	r2, r2, #4
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	440b      	add	r3, r1
 80057b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80057bc:	e00a      	b.n	80057d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	4908      	ldr	r1, [pc, #32]	@ (80057e4 <__NVIC_SetPriority+0x50>)
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	3b04      	subs	r3, #4
 80057cc:	0112      	lsls	r2, r2, #4
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	440b      	add	r3, r1
 80057d2:	761a      	strb	r2, [r3, #24]
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	e000e100 	.word	0xe000e100
 80057e4:	e000ed00 	.word	0xe000ed00

080057e8 <NVIC_EncodePriority>:
{
 80057e8:	b480      	push	{r7}
 80057ea:	b089      	sub	sp, #36	@ 0x24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f1c3 0307 	rsb	r3, r3, #7
 8005802:	2b04      	cmp	r3, #4
 8005804:	bf28      	it	cs
 8005806:	2304      	movcs	r3, #4
 8005808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	3304      	adds	r3, #4
 800580e:	2b06      	cmp	r3, #6
 8005810:	d902      	bls.n	8005818 <NVIC_EncodePriority+0x30>
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	3b03      	subs	r3, #3
 8005816:	e000      	b.n	800581a <NVIC_EncodePriority+0x32>
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800581c:	f04f 32ff 	mov.w	r2, #4294967295
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43da      	mvns	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	401a      	ands	r2, r3
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005830:	f04f 31ff 	mov.w	r1, #4294967295
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	fa01 f303 	lsl.w	r3, r1, r3
 800583a:	43d9      	mvns	r1, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005840:	4313      	orrs	r3, r2
}
 8005842:	4618      	mov	r0, r3
 8005844:	3724      	adds	r7, #36	@ 0x24
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3b01      	subs	r3, #1
 800585c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005860:	d301      	bcc.n	8005866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005862:	2301      	movs	r3, #1
 8005864:	e00f      	b.n	8005886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005866:	4a0a      	ldr	r2, [pc, #40]	@ (8005890 <SysTick_Config+0x40>)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3b01      	subs	r3, #1
 800586c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800586e:	210f      	movs	r1, #15
 8005870:	f04f 30ff 	mov.w	r0, #4294967295
 8005874:	f7ff ff8e 	bl	8005794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005878:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <SysTick_Config+0x40>)
 800587a:	2200      	movs	r2, #0
 800587c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800587e:	4b04      	ldr	r3, [pc, #16]	@ (8005890 <SysTick_Config+0x40>)
 8005880:	2207      	movs	r2, #7
 8005882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	e000e010 	.word	0xe000e010

08005894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff29 	bl	80056f4 <__NVIC_SetPriorityGrouping>
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b086      	sub	sp, #24
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	4603      	mov	r3, r0
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058bc:	f7ff ff3e 	bl	800573c <__NVIC_GetPriorityGrouping>
 80058c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	6978      	ldr	r0, [r7, #20]
 80058c8:	f7ff ff8e 	bl	80057e8 <NVIC_EncodePriority>
 80058cc:	4602      	mov	r2, r0
 80058ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d2:	4611      	mov	r1, r2
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff ff5d 	bl	8005794 <__NVIC_SetPriority>
}
 80058da:	bf00      	nop
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	4603      	mov	r3, r0
 80058ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff ff31 	bl	8005758 <__NVIC_EnableIRQ>
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff ffa2 	bl	8005850 <SysTick_Config>
 800590c:	4603      	mov	r3, r0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e06a      	b.n	8005a00 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2223      	movs	r2, #35	@ 0x23
 8005938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f005 f81d 	bl	800a97c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005942:	4b31      	ldr	r3, [pc, #196]	@ (8005a08 <HAL_ETH_Init+0xf0>)
 8005944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005946:	4a30      	ldr	r2, [pc, #192]	@ (8005a08 <HAL_ETH_Init+0xf0>)
 8005948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800594c:	6453      	str	r3, [r2, #68]	@ 0x44
 800594e:	4b2e      	ldr	r3, [pc, #184]	@ (8005a08 <HAL_ETH_Init+0xf0>)
 8005950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800595a:	4b2c      	ldr	r3, [pc, #176]	@ (8005a0c <HAL_ETH_Init+0xf4>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a0c <HAL_ETH_Init+0xf4>)
 8005960:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005964:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005966:	4b29      	ldr	r3, [pc, #164]	@ (8005a0c <HAL_ETH_Init+0xf4>)
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	4927      	ldr	r1, [pc, #156]	@ (8005a0c <HAL_ETH_Init+0xf4>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8005974:	4b25      	ldr	r3, [pc, #148]	@ (8005a0c <HAL_ETH_Init+0xf4>)
 8005976:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800598e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005990:	f7ff fe74 	bl	800567c <HAL_GetTick>
 8005994:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005996:	e011      	b.n	80059bc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005998:	f7ff fe70 	bl	800567c <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80059a6:	d909      	bls.n	80059bc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2204      	movs	r2, #4
 80059ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	22e0      	movs	r2, #224	@ 0xe0
 80059b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e021      	b.n	8005a00 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e4      	bne.n	8005998 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fdf0 	bl	80065b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fe97 	bl	8006708 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 feed 	bl	80067ba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	461a      	mov	r2, r3
 80059e6:	2100      	movs	r1, #0
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fe55 	bl	8006698 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2210      	movs	r2, #16
 80059fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40013800 	.word	0x40013800

08005a10 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d150      	bne.n	8005ac4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2223      	movs	r2, #35	@ 0x23
 8005a26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2204      	movs	r2, #4
 8005a2e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f9fd 	bl	8005e30 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0208 	orr.w	r2, r2, #8
 8005a44:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a4e:	2001      	movs	r0, #1
 8005a50:	f7ff fe20 	bl	8005694 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0204 	orr.w	r2, r2, #4
 8005a6a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a74:	2001      	movs	r0, #1
 8005a76:	f7ff fe0d 	bl	8005694 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fc36 	bl	80062f4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a9e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	f043 0302 	orr.w	r3, r3, #2
 8005ab2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ab6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2223      	movs	r2, #35	@ 0x23
 8005abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e000      	b.n	8005ac6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
  }
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005adc:	2b23      	cmp	r3, #35	@ 0x23
 8005ade:	d14a      	bne.n	8005b76 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2223      	movs	r2, #35	@ 0x23
 8005ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005afa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005afe:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	f023 0302 	bic.w	r3, r3, #2
 8005b12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b16:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0204 	bic.w	r2, r2, #4
 8005b26:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b30:	2001      	movs	r0, #1
 8005b32:	f7ff fdaf 	bl	8005694 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fbd8 	bl	80062f4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0208 	bic.w	r2, r2, #8
 8005b52:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b5c:	2001      	movs	r0, #1
 8005b5e:	f7ff fd99 	bl	8005694 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2210      	movs	r2, #16
 8005b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e000      	b.n	8005b78 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
  }
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d109      	bne.n	8005ba6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b98:	f043 0201 	orr.w	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e07c      	b.n	8005ca0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bac:	2b23      	cmp	r3, #35	@ 0x23
 8005bae:	d176      	bne.n	8005c9e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fe6d 	bl	8006894 <ETH_Prepare_Tx_Descriptors>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc6:	f043 0202 	orr.w	r2, r3, #2
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e065      	b.n	8005ca0 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8005bd4:	f3bf 8f4f 	dsb	sy
}
 8005bd8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3206      	adds	r2, #6
 8005be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d904      	bls.n	8005c04 <HAL_ETH_Transmit+0x84>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfe:	1f1a      	subs	r2, r3, #4
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3106      	adds	r1, #6
 8005c10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c18:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8005c1a:	f7ff fd2f 	bl	800567c <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005c20:	e037      	b.n	8005c92 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d011      	beq.n	8005c58 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3a:	f043 0208 	orr.w	r2, r3, #8
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c4c:	695a      	ldr	r2, [r3, #20]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e023      	b.n	8005ca0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d018      	beq.n	8005c92 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c60:	f7ff fd0c 	bl	800567c <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d302      	bcc.n	8005c76 <HAL_ETH_Transmit+0xf6>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10d      	bne.n	8005c92 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7c:	f043 0204 	orr.w	r2, r3, #4
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8005c8c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e006      	b.n	8005ca0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dbc3      	blt.n	8005c22 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e000      	b.n	8005ca0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
  }
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc6:	f043 0201 	orr.w	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0a8      	b.n	8005e26 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cda:	2b23      	cmp	r3, #35	@ 0x23
 8005cdc:	d001      	beq.n	8005ce2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e0a1      	b.n	8005e26 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	3212      	adds	r2, #18
 8005cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cf8:	f1c3 0304 	rsb	r3, r3, #4
 8005cfc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005cfe:	e06a      	b.n	8005dd6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	69da      	ldr	r2, [r3, #28]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d103      	bne.n	8005d30 <HAL_ETH_ReadData+0x88>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d040      	beq.n	8005db2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00c      	beq.n	8005d74 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	0c1b      	lsrs	r3, r3, #16
 8005d60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005d64:	3b04      	subs	r3, #4
 8005d66:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	f004 ffb5 	bl	800ad00 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	441a      	add	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	2200      	movs	r2, #0
 8005db0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	3301      	adds	r3, #1
 8005db6:	61fb      	str	r3, [r7, #28]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d902      	bls.n	8005dc4 <HAL_ETH_ReadData+0x11c>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3b04      	subs	r3, #4
 8005dc2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	3212      	adds	r2, #18
 8005dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	db06      	blt.n	8005dec <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d202      	bcs.n	8005dec <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d089      	beq.n	8005d00 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	441a      	add	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f815 	bl	8005e30 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d108      	bne.n	8005e24 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	e000      	b.n	8005e26 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e44:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	3212      	adds	r2, #18
 8005e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e50:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e56:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8005e58:	e040      	b.n	8005edc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d112      	bne.n	8005e88 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005e62:	f107 030c 	add.w	r3, r7, #12
 8005e66:	4618      	mov	r0, r3
 8005e68:	f004 ff1a 	bl	800aca0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	74fb      	strb	r3, [r7, #19]
 8005e76:	e007      	b.n	8005e88 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	461a      	mov	r2, r3
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8005e88:	7cfb      	ldrb	r3, [r7, #19]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d026      	beq.n	8005edc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4a1e      	ldr	r2, [pc, #120]	@ (8005f14 <ETH_UpdateDescriptor+0xe4>)
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	e003      	b.n	8005ea6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8005ea4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005ea6:	f3bf 8f5f 	dmb	sy
}
 8005eaa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d902      	bls.n	8005eca <ETH_UpdateDescriptor+0x9a>
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	3b04      	subs	r3, #4
 8005ec8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	3212      	adds	r2, #18
 8005ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed4:	617b      	str	r3, [r7, #20]
      desccount--;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <ETH_UpdateDescriptor+0xb8>
 8005ee2:	7cfb      	ldrb	r3, [r7, #19]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1b8      	bne.n	8005e5a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d00c      	beq.n	8005f0c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005efa:	461a      	mov	r2, r3
 8005efc:	2300      	movs	r3, #0
 8005efe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	80004600 	.word	0x80004600

08005f18 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f003 031c 	and.w	r3, r3, #28
 8005f34:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	02db      	lsls	r3, r3, #11
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	019b      	lsls	r3, r3, #6
 8005f46:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0302 	bic.w	r3, r3, #2
 8005f56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005f68:	f7ff fb88 	bl	800567c <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005f6e:	e00d      	b.n	8005f8c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005f70:	f7ff fb84 	bl	800567c <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f7e:	d301      	bcc.n	8005f84 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e010      	b.n	8005fa6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1ec      	bne.n	8005f70 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b086      	sub	sp, #24
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
 8005fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f003 031c 	and.w	r3, r3, #28
 8005fca:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	02db      	lsls	r3, r3, #11
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	019b      	lsls	r3, r3, #6
 8005fdc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f043 0302 	orr.w	r3, r3, #2
 8005fec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f043 0301 	orr.w	r3, r3, #1
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006008:	f7ff fb38 	bl	800567c <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800600e:	e00d      	b.n	800602c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8006010:	f7ff fb34 	bl	800567c <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800601e:	d301      	bcc.n	8006024 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e009      	b.n	8006038 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1ec      	bne.n	8006010 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0d9      	b.n	8006208 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf14      	ite	ne
 8006062:	2301      	movne	r3, #1
 8006064:	2300      	moveq	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006088:	2b00      	cmp	r3, #0
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	bf0c      	ite	eq
 80060c2:	2301      	moveq	r3, #1
 80060c4:	2300      	movne	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bf14      	ite	ne
 80060dc:	2301      	movne	r3, #1
 80060de:	2300      	moveq	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800610e:	2b00      	cmp	r3, #0
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006142:	2b00      	cmp	r3, #0
 8006144:	bf14      	ite	ne
 8006146:	2301      	movne	r3, #1
 8006148:	2300      	moveq	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	461a      	mov	r2, r3
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800616a:	2b00      	cmp	r3, #0
 800616c:	bf14      	ite	ne
 800616e:	2301      	movne	r3, #1
 8006170:	2300      	moveq	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	bf14      	ite	ne
 8006188:	2301      	movne	r3, #1
 800618a:	2300      	moveq	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bf0c      	ite	eq
 80061a4:	2301      	moveq	r3, #1
 80061a6:	2300      	movne	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	461a      	mov	r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	0c1b      	lsrs	r3, r3, #16
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bf14      	ite	ne
 80061f8:	2301      	movne	r3, #1
 80061fa:	2300      	moveq	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e00b      	b.n	8006240 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800622e:	2b10      	cmp	r3, #16
 8006230:	d105      	bne.n	800623e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f883 	bl	8006340 <ETH_SetMACConfig>

    return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e000      	b.n	8006240 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 031c 	bic.w	r3, r3, #28
 800625e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006260:	f002 f89e 	bl	80083a0 <HAL_RCC_GetHCLKFreq>
 8006264:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4a1d      	ldr	r2, [pc, #116]	@ (80062e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d908      	bls.n	8006280 <HAL_ETH_SetMDIOClockRange+0x38>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a1c      	ldr	r2, [pc, #112]	@ (80062e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d804      	bhi.n	8006280 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f043 0308 	orr.w	r3, r3, #8
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e027      	b.n	80062d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4a18      	ldr	r2, [pc, #96]	@ (80062e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d908      	bls.n	800629a <HAL_ETH_SetMDIOClockRange+0x52>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4a17      	ldr	r2, [pc, #92]	@ (80062e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d204      	bcs.n	800629a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f043 030c 	orr.w	r3, r3, #12
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e01a      	b.n	80062d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a12      	ldr	r2, [pc, #72]	@ (80062e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d303      	bcc.n	80062aa <HAL_ETH_SetMDIOClockRange+0x62>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4a11      	ldr	r2, [pc, #68]	@ (80062ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d911      	bls.n	80062ce <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4a0f      	ldr	r2, [pc, #60]	@ (80062ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d908      	bls.n	80062c4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4a0e      	ldr	r2, [pc, #56]	@ (80062f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d804      	bhi.n	80062c4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f043 0304 	orr.w	r3, r3, #4
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e005      	b.n	80062d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f043 0310 	orr.w	r3, r3, #16
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	e000      	b.n	80062d0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80062ce:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	611a      	str	r2, [r3, #16]
}
 80062d8:	bf00      	nop
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	01312cff 	.word	0x01312cff
 80062e4:	02160ebf 	.word	0x02160ebf
 80062e8:	03938700 	.word	0x03938700
 80062ec:	05f5e0ff 	.word	0x05f5e0ff
 80062f0:	08f0d17f 	.word	0x08f0d17f

080062f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006312:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006316:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006324:	2001      	movs	r0, #1
 8006326:	f7ff f9b5 	bl	8005694 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006334:	6193      	str	r3, [r2, #24]
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4b51      	ldr	r3, [pc, #324]	@ (800649c <ETH_SetMACConfig+0x15c>)
 8006356:	4013      	ands	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	7c1b      	ldrb	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d102      	bne.n	8006368 <ETH_SetMACConfig+0x28>
 8006362:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006366:	e000      	b.n	800636a <ETH_SetMACConfig+0x2a>
 8006368:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	7c5b      	ldrb	r3, [r3, #17]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <ETH_SetMACConfig+0x38>
 8006372:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006376:	e000      	b.n	800637a <ETH_SetMACConfig+0x3a>
 8006378:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800637a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006380:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	7fdb      	ldrb	r3, [r3, #31]
 8006386:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006388:	431a      	orrs	r2, r3
                        macconf->Speed |
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800638e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	7f92      	ldrb	r2, [r2, #30]
 8006394:	2a00      	cmp	r2, #0
 8006396:	d102      	bne.n	800639e <ETH_SetMACConfig+0x5e>
 8006398:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800639c:	e000      	b.n	80063a0 <ETH_SetMACConfig+0x60>
 800639e:	2200      	movs	r2, #0
                        macconf->Speed |
 80063a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	7f1b      	ldrb	r3, [r3, #28]
 80063a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80063a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80063ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	791b      	ldrb	r3, [r3, #4]
 80063b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80063b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80063be:	2a00      	cmp	r2, #0
 80063c0:	d102      	bne.n	80063c8 <ETH_SetMACConfig+0x88>
 80063c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063c6:	e000      	b.n	80063ca <ETH_SetMACConfig+0x8a>
 80063c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80063ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	7bdb      	ldrb	r3, [r3, #15]
 80063d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80063d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80063d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80063e2:	4313      	orrs	r3, r2
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80063fa:	2001      	movs	r0, #1
 80063fc:	f7ff f94a 	bl	8005694 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006416:	4013      	ands	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8006426:	2a00      	cmp	r2, #0
 8006428:	d101      	bne.n	800642e <ETH_SetMACConfig+0xee>
 800642a:	2280      	movs	r2, #128	@ 0x80
 800642c:	e000      	b.n	8006430 <ETH_SetMACConfig+0xf0>
 800642e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006430:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006436:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800643e:	2a01      	cmp	r2, #1
 8006440:	d101      	bne.n	8006446 <ETH_SetMACConfig+0x106>
 8006442:	2208      	movs	r2, #8
 8006444:	e000      	b.n	8006448 <ETH_SetMACConfig+0x108>
 8006446:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006448:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8006450:	2a01      	cmp	r2, #1
 8006452:	d101      	bne.n	8006458 <ETH_SetMACConfig+0x118>
 8006454:	2204      	movs	r2, #4
 8006456:	e000      	b.n	800645a <ETH_SetMACConfig+0x11a>
 8006458:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800645a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8006462:	2a01      	cmp	r2, #1
 8006464:	d101      	bne.n	800646a <ETH_SetMACConfig+0x12a>
 8006466:	2202      	movs	r2, #2
 8006468:	e000      	b.n	800646c <ETH_SetMACConfig+0x12c>
 800646a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800646c:	4313      	orrs	r3, r2
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006484:	2001      	movs	r0, #1
 8006486:	f7ff f905 	bl	8005694 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	619a      	str	r2, [r3, #24]
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	ff20810f 	.word	0xff20810f

080064a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4b3d      	ldr	r3, [pc, #244]	@ (80065b0 <ETH_SetDMAConfig+0x110>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	7b1b      	ldrb	r3, [r3, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <ETH_SetDMAConfig+0x2c>
 80064c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80064ca:	e000      	b.n	80064ce <ETH_SetDMAConfig+0x2e>
 80064cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	7b5b      	ldrb	r3, [r3, #13]
 80064d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80064d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	7f52      	ldrb	r2, [r2, #29]
 80064da:	2a00      	cmp	r2, #0
 80064dc:	d102      	bne.n	80064e4 <ETH_SetDMAConfig+0x44>
 80064de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80064e2:	e000      	b.n	80064e6 <ETH_SetDMAConfig+0x46>
 80064e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80064e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	7b9b      	ldrb	r3, [r3, #14]
 80064ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80064ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80064f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	7f1b      	ldrb	r3, [r3, #28]
 80064fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80064fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	7f9b      	ldrb	r3, [r3, #30]
 8006502:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006504:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800650a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006512:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006514:	4313      	orrs	r3, r2
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006524:	461a      	mov	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006536:	2001      	movs	r0, #1
 8006538:	f7ff f8ac 	bl	8005694 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006544:	461a      	mov	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	791b      	ldrb	r3, [r3, #4]
 800654e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006554:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800655a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006560:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006568:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800656a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006570:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006572:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006578:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006582:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006586:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006594:	2001      	movs	r0, #1
 8006596:	f7ff f87d 	bl	8005694 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6013      	str	r3, [r2, #0]
}
 80065a8:	bf00      	nop
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	f8de3f23 	.word	0xf8de3f23

080065b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b0a6      	sub	sp, #152	@ 0x98
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80065c8:	2300      	movs	r3, #0
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80065d2:	2301      	movs	r3, #1
 80065d4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80065d8:	2300      	movs	r3, #0
 80065da:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80065f0:	2300      	movs	r3, #0
 80065f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80065fe:	2300      	movs	r3, #0
 8006600:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006604:	2300      	movs	r3, #0
 8006606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800660a:	2300      	movs	r3, #0
 800660c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006610:	2300      	movs	r3, #0
 8006612:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006616:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800661a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800661c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006620:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006622:	2300      	movs	r3, #0
 8006624:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006628:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fe86 	bl	8006340 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006634:	2301      	movs	r3, #1
 8006636:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006638:	2301      	movs	r3, #1
 800663a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006642:	2301      	movs	r3, #1
 8006644:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006646:	2300      	movs	r3, #0
 8006648:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800664a:	2300      	movs	r3, #0
 800664c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006650:	2300      	movs	r3, #0
 8006652:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006656:	2300      	movs	r3, #0
 8006658:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800665a:	2301      	movs	r3, #1
 800665c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006660:	2301      	movs	r3, #1
 8006662:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006668:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800666a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800666e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006670:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006674:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800667c:	2300      	movs	r3, #0
 800667e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006680:	2300      	movs	r3, #0
 8006682:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006684:	f107 0308 	add.w	r3, r7, #8
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ff08 	bl	80064a0 <ETH_SetDMAConfig>
}
 8006690:	bf00      	nop
 8006692:	3798      	adds	r7, #152	@ 0x98
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3305      	adds	r3, #5
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	3204      	adds	r2, #4
 80066b0:	7812      	ldrb	r2, [r2, #0]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4b11      	ldr	r3, [pc, #68]	@ (8006700 <ETH_MACAddressConfig+0x68>)
 80066ba:	4413      	add	r3, r2
 80066bc:	461a      	mov	r2, r3
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3303      	adds	r3, #3
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	061a      	lsls	r2, r3, #24
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3302      	adds	r3, #2
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3301      	adds	r3, #1
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	021b      	lsls	r3, r3, #8
 80066dc:	4313      	orrs	r3, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	7812      	ldrb	r2, [r2, #0]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	4b06      	ldr	r3, [pc, #24]	@ (8006704 <ETH_MACAddressConfig+0x6c>)
 80066ea:	4413      	add	r3, r2
 80066ec:	461a      	mov	r2, r3
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	6013      	str	r3, [r2, #0]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40028040 	.word	0x40028040
 8006704:	40028044 	.word	0x40028044

08006708 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e03e      	b.n	8006794 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68d9      	ldr	r1, [r3, #12]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	440b      	add	r3, r1
 8006726:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2200      	movs	r2, #0
 8006732:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2200      	movs	r2, #0
 8006738:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	3206      	adds	r2, #6
 8006748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d80c      	bhi.n	8006778 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68d9      	ldr	r1, [r3, #12]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	440b      	add	r3, r1
 8006770:	461a      	mov	r2, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	60da      	str	r2, [r3, #12]
 8006776:	e004      	b.n	8006782 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	461a      	mov	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b03      	cmp	r3, #3
 8006798:	d9bd      	bls.n	8006716 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ac:	611a      	str	r2, [r3, #16]
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	e046      	b.n	8006856 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6919      	ldr	r1, [r3, #16]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	440b      	add	r3, r1
 80067d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2200      	movs	r2, #0
 80067e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2200      	movs	r2, #0
 80067ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2200      	movs	r2, #0
 80067f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2200      	movs	r2, #0
 80067f6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2200      	movs	r2, #0
 80067fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006804:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 800680c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	3212      	adds	r2, #18
 8006822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d80c      	bhi.n	8006846 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6919      	ldr	r1, [r3, #16]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	4613      	mov	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	440b      	add	r3, r1
 800683e:	461a      	mov	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	60da      	str	r2, [r3, #12]
 8006844:	e004      	b.n	8006850 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	461a      	mov	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d9b5      	bls.n	80067c8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006886:	60da      	str	r2, [r3, #12]
}
 8006888:	bf00      	nop
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8006894:	b480      	push	{r7}
 8006896:	b08d      	sub	sp, #52	@ 0x34
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3318      	adds	r3, #24
 80068a4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068be:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068d6:	d007      	beq.n	80068e8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068dc:	3304      	adds	r3, #4
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80068e8:	2302      	movs	r3, #2
 80068ea:	e0ff      	b.n	8006aec <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	3301      	adds	r3, #1
 80068f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	4b7d      	ldr	r3, [pc, #500]	@ (8006af8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8006902:	4013      	ands	r3, r2
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	6852      	ldr	r2, [r2, #4]
 8006908:	431a      	orrs	r2, r3
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d008      	beq.n	800692c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	431a      	orrs	r2, r3
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	431a      	orrs	r2, r3
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800696e:	f3bf 8f5f 	dmb	sy
}
 8006972:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006980:	e082      	b.n	8006a88 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	e005      	b.n	80069ae <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80069ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b0:	3301      	adds	r3, #1
 80069b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d902      	bls.n	80069c0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80069ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069bc:	3b04      	subs	r3, #4
 80069be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069e2:	d007      	beq.n	80069f4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e8:	3304      	adds	r3, #4
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d029      	beq.n	8006a48 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a00:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006a02:	2300      	movs	r3, #0
 8006a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a06:	e019      	b.n	8006a3c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8006a08:	f3bf 8f5f 	dmb	sy
}
 8006a0c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8006a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d902      	bls.n	8006a2c <ETH_Prepare_Tx_Descriptors+0x198>
 8006a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a28:	3b04      	subs	r3, #4
 8006a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a34:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	3301      	adds	r3, #1
 8006a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d3e1      	bcc.n	8006a08 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8006a44:	2302      	movs	r3, #2
 8006a46:	e051      	b.n	8006aec <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	4b25      	ldr	r3, [pc, #148]	@ (8006af8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	6852      	ldr	r2, [r2, #4]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	3301      	adds	r3, #1
 8006a74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8006a76:	f3bf 8f5f 	dmb	sy
}
 8006a7a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f47f af78 	bne.w	8006982 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d006      	beq.n	8006aa6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e005      	b.n	8006ab2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ac2:	6979      	ldr	r1, [r7, #20]
 8006ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ad2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ad4:	b672      	cpsid	i
}
 8006ad6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	4413      	add	r3, r2
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8006ae6:	b662      	cpsie	i
}
 8006ae8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3734      	adds	r7, #52	@ 0x34
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	ffffe000 	.word	0xffffe000

08006afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b089      	sub	sp, #36	@ 0x24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	e175      	b.n	8006e08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	f040 8164 	bne.w	8006e02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d005      	beq.n	8006b52 <HAL_GPIO_Init+0x56>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d130      	bne.n	8006bb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	43db      	mvns	r3, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4013      	ands	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b88:	2201      	movs	r2, #1
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	43db      	mvns	r3, r3
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	4013      	ands	r3, r2
 8006b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	091b      	lsrs	r3, r3, #4
 8006b9e:	f003 0201 	and.w	r2, r3, #1
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d017      	beq.n	8006bf0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	2203      	movs	r2, #3
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f003 0303 	and.w	r3, r3, #3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d123      	bne.n	8006c44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	08da      	lsrs	r2, r3, #3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3208      	adds	r2, #8
 8006c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	220f      	movs	r2, #15
 8006c14:	fa02 f303 	lsl.w	r3, r2, r3
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	08da      	lsrs	r2, r3, #3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3208      	adds	r2, #8
 8006c3e:	69b9      	ldr	r1, [r7, #24]
 8006c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	2203      	movs	r2, #3
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	43db      	mvns	r3, r3
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f003 0203 	and.w	r2, r3, #3
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80be 	beq.w	8006e02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c86:	4b66      	ldr	r3, [pc, #408]	@ (8006e20 <HAL_GPIO_Init+0x324>)
 8006c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c8a:	4a65      	ldr	r2, [pc, #404]	@ (8006e20 <HAL_GPIO_Init+0x324>)
 8006c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c92:	4b63      	ldr	r3, [pc, #396]	@ (8006e20 <HAL_GPIO_Init+0x324>)
 8006c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006c9e:	4a61      	ldr	r2, [pc, #388]	@ (8006e24 <HAL_GPIO_Init+0x328>)
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	089b      	lsrs	r3, r3, #2
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	220f      	movs	r2, #15
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	43db      	mvns	r3, r3
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a58      	ldr	r2, [pc, #352]	@ (8006e28 <HAL_GPIO_Init+0x32c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d037      	beq.n	8006d3a <HAL_GPIO_Init+0x23e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a57      	ldr	r2, [pc, #348]	@ (8006e2c <HAL_GPIO_Init+0x330>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d031      	beq.n	8006d36 <HAL_GPIO_Init+0x23a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a56      	ldr	r2, [pc, #344]	@ (8006e30 <HAL_GPIO_Init+0x334>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d02b      	beq.n	8006d32 <HAL_GPIO_Init+0x236>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a55      	ldr	r2, [pc, #340]	@ (8006e34 <HAL_GPIO_Init+0x338>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d025      	beq.n	8006d2e <HAL_GPIO_Init+0x232>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a54      	ldr	r2, [pc, #336]	@ (8006e38 <HAL_GPIO_Init+0x33c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01f      	beq.n	8006d2a <HAL_GPIO_Init+0x22e>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a53      	ldr	r2, [pc, #332]	@ (8006e3c <HAL_GPIO_Init+0x340>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d019      	beq.n	8006d26 <HAL_GPIO_Init+0x22a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a52      	ldr	r2, [pc, #328]	@ (8006e40 <HAL_GPIO_Init+0x344>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <HAL_GPIO_Init+0x226>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a51      	ldr	r2, [pc, #324]	@ (8006e44 <HAL_GPIO_Init+0x348>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00d      	beq.n	8006d1e <HAL_GPIO_Init+0x222>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a50      	ldr	r2, [pc, #320]	@ (8006e48 <HAL_GPIO_Init+0x34c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d007      	beq.n	8006d1a <HAL_GPIO_Init+0x21e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8006e4c <HAL_GPIO_Init+0x350>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d101      	bne.n	8006d16 <HAL_GPIO_Init+0x21a>
 8006d12:	2309      	movs	r3, #9
 8006d14:	e012      	b.n	8006d3c <HAL_GPIO_Init+0x240>
 8006d16:	230a      	movs	r3, #10
 8006d18:	e010      	b.n	8006d3c <HAL_GPIO_Init+0x240>
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	e00e      	b.n	8006d3c <HAL_GPIO_Init+0x240>
 8006d1e:	2307      	movs	r3, #7
 8006d20:	e00c      	b.n	8006d3c <HAL_GPIO_Init+0x240>
 8006d22:	2306      	movs	r3, #6
 8006d24:	e00a      	b.n	8006d3c <HAL_GPIO_Init+0x240>
 8006d26:	2305      	movs	r3, #5
 8006d28:	e008      	b.n	8006d3c <HAL_GPIO_Init+0x240>
 8006d2a:	2304      	movs	r3, #4
 8006d2c:	e006      	b.n	8006d3c <HAL_GPIO_Init+0x240>
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e004      	b.n	8006d3c <HAL_GPIO_Init+0x240>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e002      	b.n	8006d3c <HAL_GPIO_Init+0x240>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <HAL_GPIO_Init+0x240>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	f002 0203 	and.w	r2, r2, #3
 8006d42:	0092      	lsls	r2, r2, #2
 8006d44:	4093      	lsls	r3, r2
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006d4c:	4935      	ldr	r1, [pc, #212]	@ (8006e24 <HAL_GPIO_Init+0x328>)
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	089b      	lsrs	r3, r3, #2
 8006d52:	3302      	adds	r3, #2
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e50 <HAL_GPIO_Init+0x354>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	43db      	mvns	r3, r3
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	4013      	ands	r3, r2
 8006d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d7e:	4a34      	ldr	r2, [pc, #208]	@ (8006e50 <HAL_GPIO_Init+0x354>)
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d84:	4b32      	ldr	r3, [pc, #200]	@ (8006e50 <HAL_GPIO_Init+0x354>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4013      	ands	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006da8:	4a29      	ldr	r2, [pc, #164]	@ (8006e50 <HAL_GPIO_Init+0x354>)
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006dae:	4b28      	ldr	r3, [pc, #160]	@ (8006e50 <HAL_GPIO_Init+0x354>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	43db      	mvns	r3, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8006e50 <HAL_GPIO_Init+0x354>)
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e50 <HAL_GPIO_Init+0x354>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	4013      	ands	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006dfc:	4a14      	ldr	r2, [pc, #80]	@ (8006e50 <HAL_GPIO_Init+0x354>)
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	3301      	adds	r3, #1
 8006e06:	61fb      	str	r3, [r7, #28]
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	2b0f      	cmp	r3, #15
 8006e0c:	f67f ae86 	bls.w	8006b1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006e10:	bf00      	nop
 8006e12:	bf00      	nop
 8006e14:	3724      	adds	r7, #36	@ 0x24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40023800 	.word	0x40023800
 8006e24:	40013800 	.word	0x40013800
 8006e28:	40020000 	.word	0x40020000
 8006e2c:	40020400 	.word	0x40020400
 8006e30:	40020800 	.word	0x40020800
 8006e34:	40020c00 	.word	0x40020c00
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	40021400 	.word	0x40021400
 8006e40:	40021800 	.word	0x40021800
 8006e44:	40021c00 	.word	0x40021c00
 8006e48:	40022000 	.word	0x40022000
 8006e4c:	40022400 	.word	0x40022400
 8006e50:	40013c00 	.word	0x40013c00

08006e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	807b      	strh	r3, [r7, #2]
 8006e60:	4613      	mov	r3, r2
 8006e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e64:	787b      	ldrb	r3, [r7, #1]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e6a:	887a      	ldrh	r2, [r7, #2]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006e70:	e003      	b.n	8006e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006e72:	887b      	ldrh	r3, [r7, #2]
 8006e74:	041a      	lsls	r2, r3, #16
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	619a      	str	r2, [r3, #24]
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e92:	4b08      	ldr	r3, [pc, #32]	@ (8006eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d006      	beq.n	8006eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e9e:	4a05      	ldr	r2, [pc, #20]	@ (8006eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ea4:	88fb      	ldrh	r3, [r7, #6]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fc fe12 	bl	8003ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	40013c00 	.word	0x40013c00

08006eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e07f      	b.n	8006fca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fd fc04 	bl	80046ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2224      	movs	r2, #36	@ 0x24
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d107      	bne.n	8006f32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f2e:	609a      	str	r2, [r3, #8]
 8006f30:	e006      	b.n	8006f40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006f3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d104      	bne.n	8006f52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6859      	ldr	r1, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006fd4 <HAL_I2C_Init+0x11c>)
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	69d9      	ldr	r1, [r3, #28]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1a      	ldr	r2, [r3, #32]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0201 	orr.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	02008000 	.word	0x02008000

08006fd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	817b      	strh	r3, [r7, #10]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	f040 80da 	bne.w	80071ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_I2C_Master_Transmit+0x30>
 8007004:	2302      	movs	r3, #2
 8007006:	e0d3      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007010:	f7fe fb34 	bl	800567c <HAL_GetTick>
 8007014:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	2319      	movs	r3, #25
 800701c:	2201      	movs	r2, #1
 800701e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f9e6 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e0be      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2221      	movs	r2, #33	@ 0x21
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2210      	movs	r2, #16
 800703e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	893a      	ldrh	r2, [r7, #8]
 8007052:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800705e:	b29b      	uxth	r3, r3
 8007060:	2bff      	cmp	r3, #255	@ 0xff
 8007062:	d90e      	bls.n	8007082 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	22ff      	movs	r2, #255	@ 0xff
 8007068:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800706e:	b2da      	uxtb	r2, r3
 8007070:	8979      	ldrh	r1, [r7, #10]
 8007072:	4b51      	ldr	r3, [pc, #324]	@ (80071b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 fbd0 	bl	8007820 <I2C_TransferConfig>
 8007080:	e06c      	b.n	800715c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007086:	b29a      	uxth	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007090:	b2da      	uxtb	r2, r3
 8007092:	8979      	ldrh	r1, [r7, #10]
 8007094:	4b48      	ldr	r3, [pc, #288]	@ (80071b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fbbf 	bl	8007820 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80070a2:	e05b      	b.n	800715c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	6a39      	ldr	r1, [r7, #32]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f9e3 	bl	8007474 <I2C_WaitOnTXISFlagUntilTimeout>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e07b      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070bc:	781a      	ldrb	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d034      	beq.n	800715c <HAL_I2C_Master_Transmit+0x184>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d130      	bne.n	800715c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	2200      	movs	r2, #0
 8007102:	2180      	movs	r1, #128	@ 0x80
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 f975 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e04d      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	2bff      	cmp	r3, #255	@ 0xff
 800711c:	d90e      	bls.n	800713c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	22ff      	movs	r2, #255	@ 0xff
 8007122:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007128:	b2da      	uxtb	r2, r3
 800712a:	8979      	ldrh	r1, [r7, #10]
 800712c:	2300      	movs	r3, #0
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fb73 	bl	8007820 <I2C_TransferConfig>
 800713a:	e00f      	b.n	800715c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800714a:	b2da      	uxtb	r2, r3
 800714c:	8979      	ldrh	r1, [r7, #10]
 800714e:	2300      	movs	r3, #0
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fb62 	bl	8007820 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d19e      	bne.n	80070a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	6a39      	ldr	r1, [r7, #32]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 f9c2 	bl	80074f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e01a      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2220      	movs	r2, #32
 8007180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6859      	ldr	r1, [r3, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4b0b      	ldr	r3, [pc, #44]	@ (80071bc <HAL_I2C_Master_Transmit+0x1e4>)
 800718e:	400b      	ands	r3, r1
 8007190:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2220      	movs	r2, #32
 8007196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e000      	b.n	80071b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80071ae:	2302      	movs	r3, #2
  }
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	80002000 	.word	0x80002000
 80071bc:	fe00e800 	.word	0xfe00e800

080071c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	461a      	mov	r2, r3
 80071cc:	460b      	mov	r3, r1
 80071ce:	817b      	strh	r3, [r7, #10]
 80071d0:	4613      	mov	r3, r2
 80071d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b20      	cmp	r3, #32
 80071de:	f040 80db 	bne.w	8007398 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_I2C_Master_Receive+0x30>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e0d4      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071f8:	f7fe fa40 	bl	800567c <HAL_GetTick>
 80071fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	2319      	movs	r3, #25
 8007204:	2201      	movs	r2, #1
 8007206:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 f8f2 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e0bf      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2222      	movs	r2, #34	@ 0x22
 800721e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2210      	movs	r2, #16
 8007226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	893a      	ldrh	r2, [r7, #8]
 800723a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007246:	b29b      	uxth	r3, r3
 8007248:	2bff      	cmp	r3, #255	@ 0xff
 800724a:	d90e      	bls.n	800726a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	22ff      	movs	r2, #255	@ 0xff
 8007250:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007256:	b2da      	uxtb	r2, r3
 8007258:	8979      	ldrh	r1, [r7, #10]
 800725a:	4b52      	ldr	r3, [pc, #328]	@ (80073a4 <HAL_I2C_Master_Receive+0x1e4>)
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 fadc 	bl	8007820 <I2C_TransferConfig>
 8007268:	e06d      	b.n	8007346 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007278:	b2da      	uxtb	r2, r3
 800727a:	8979      	ldrh	r1, [r7, #10]
 800727c:	4b49      	ldr	r3, [pc, #292]	@ (80073a4 <HAL_I2C_Master_Receive+0x1e4>)
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 facb 	bl	8007820 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800728a:	e05c      	b.n	8007346 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	6a39      	ldr	r1, [r7, #32]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f96b 	bl	800756c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e07c      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072bc:	3b01      	subs	r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d034      	beq.n	8007346 <HAL_I2C_Master_Receive+0x186>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d130      	bne.n	8007346 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	2200      	movs	r2, #0
 80072ec:	2180      	movs	r1, #128	@ 0x80
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f880 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e04d      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	2bff      	cmp	r3, #255	@ 0xff
 8007306:	d90e      	bls.n	8007326 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	22ff      	movs	r2, #255	@ 0xff
 800730c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007312:	b2da      	uxtb	r2, r3
 8007314:	8979      	ldrh	r1, [r7, #10]
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 fa7e 	bl	8007820 <I2C_TransferConfig>
 8007324:	e00f      	b.n	8007346 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800732a:	b29a      	uxth	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007334:	b2da      	uxtb	r2, r3
 8007336:	8979      	ldrh	r1, [r7, #10]
 8007338:	2300      	movs	r3, #0
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 fa6d 	bl	8007820 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800734a:	b29b      	uxth	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d19d      	bne.n	800728c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	6a39      	ldr	r1, [r7, #32]
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f8cd 	bl	80074f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e01a      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2220      	movs	r2, #32
 800736a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6859      	ldr	r1, [r3, #4]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <HAL_I2C_Master_Receive+0x1e8>)
 8007378:	400b      	ands	r3, r1
 800737a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007398:	2302      	movs	r3, #2
  }
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	80002400 	.word	0x80002400
 80073a8:	fe00e800 	.word	0xfe00e800

080073ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d103      	bne.n	80073ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d007      	beq.n	80073e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0201 	orr.w	r2, r2, #1
 80073e6:	619a      	str	r2, [r3, #24]
  }
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007404:	e022      	b.n	800744c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740c:	d01e      	beq.n	800744c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740e:	f7fe f935 	bl	800567c <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d302      	bcc.n	8007424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d113      	bne.n	800744c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007428:	f043 0220 	orr.w	r2, r3, #32
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2220      	movs	r2, #32
 8007434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e00f      	b.n	800746c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	4013      	ands	r3, r2
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	429a      	cmp	r2, r3
 800745a:	bf0c      	ite	eq
 800745c:	2301      	moveq	r3, #1
 800745e:	2300      	movne	r3, #0
 8007460:	b2db      	uxtb	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	429a      	cmp	r2, r3
 8007468:	d0cd      	beq.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007480:	e02c      	b.n	80074dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f8ea 	bl	8007660 <I2C_IsErrorOccurred>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e02a      	b.n	80074ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d01e      	beq.n	80074dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749e:	f7fe f8ed 	bl	800567c <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d302      	bcc.n	80074b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d113      	bne.n	80074dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b8:	f043 0220 	orr.w	r2, r3, #32
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e007      	b.n	80074ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d1cb      	bne.n	8007482 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007500:	e028      	b.n	8007554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f8aa 	bl	8007660 <I2C_IsErrorOccurred>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e026      	b.n	8007564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007516:	f7fe f8b1 	bl	800567c <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	429a      	cmp	r2, r3
 8007524:	d302      	bcc.n	800752c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d113      	bne.n	8007554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007530:	f043 0220 	orr.w	r2, r3, #32
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e007      	b.n	8007564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b20      	cmp	r3, #32
 8007560:	d1cf      	bne.n	8007502 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007578:	e064      	b.n	8007644 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 f86e 	bl	8007660 <I2C_IsErrorOccurred>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e062      	b.n	8007654 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b20      	cmp	r3, #32
 800759a:	d138      	bne.n	800760e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	d105      	bne.n	80075b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	e04e      	b.n	8007654 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b10      	cmp	r3, #16
 80075c2:	d107      	bne.n	80075d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2210      	movs	r2, #16
 80075ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2204      	movs	r2, #4
 80075d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80075d2:	e002      	b.n	80075da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2220      	movs	r2, #32
 80075e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6859      	ldr	r1, [r3, #4]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	4b1b      	ldr	r3, [pc, #108]	@ (800765c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80075ee:	400b      	ands	r3, r1
 80075f0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e022      	b.n	8007654 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800760e:	f7fe f835 	bl	800567c <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	429a      	cmp	r2, r3
 800761c:	d302      	bcc.n	8007624 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10f      	bne.n	8007644 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007628:	f043 0220 	orr.w	r2, r3, #32
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e007      	b.n	8007654 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	f003 0304 	and.w	r3, r3, #4
 800764e:	2b04      	cmp	r3, #4
 8007650:	d193      	bne.n	800757a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	fe00e800 	.word	0xfe00e800

08007660 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08a      	sub	sp, #40	@ 0x28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	d068      	beq.n	800775e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2210      	movs	r2, #16
 8007692:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007694:	e049      	b.n	800772a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d045      	beq.n	800772a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800769e:	f7fd ffed 	bl	800567c <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d302      	bcc.n	80076b4 <I2C_IsErrorOccurred+0x54>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d13a      	bne.n	800772a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076d6:	d121      	bne.n	800771c <I2C_IsErrorOccurred+0xbc>
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076de:	d01d      	beq.n	800771c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80076e0:	7cfb      	ldrb	r3, [r7, #19]
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d01a      	beq.n	800771c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80076f6:	f7fd ffc1 	bl	800567c <HAL_GetTick>
 80076fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076fc:	e00e      	b.n	800771c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80076fe:	f7fd ffbd 	bl	800567c <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b19      	cmp	r3, #25
 800770a:	d907      	bls.n	800771c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	f043 0320 	orr.w	r3, r3, #32
 8007712:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800771a:	e006      	b.n	800772a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b20      	cmp	r3, #32
 8007728:	d1e9      	bne.n	80076fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b20      	cmp	r3, #32
 8007736:	d003      	beq.n	8007740 <I2C_IsErrorOccurred+0xe0>
 8007738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0aa      	beq.n	8007696 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007744:	2b00      	cmp	r3, #0
 8007746:	d103      	bne.n	8007750 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2220      	movs	r2, #32
 800774e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	f043 0304 	orr.w	r3, r3, #4
 8007756:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	f043 0308 	orr.w	r3, r3, #8
 8007798:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80077a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	f043 0302 	orr.w	r3, r3, #2
 80077ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80077cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01c      	beq.n	800780e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff fde9 	bl	80073ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6859      	ldr	r1, [r3, #4]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	4b0d      	ldr	r3, [pc, #52]	@ (800781c <I2C_IsErrorOccurred+0x1bc>)
 80077e6:	400b      	ands	r3, r1
 80077e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800780e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007812:	4618      	mov	r0, r3
 8007814:	3728      	adds	r7, #40	@ 0x28
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	fe00e800 	.word	0xfe00e800

08007820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	607b      	str	r3, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	817b      	strh	r3, [r7, #10]
 800782e:	4613      	mov	r3, r2
 8007830:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007832:	897b      	ldrh	r3, [r7, #10]
 8007834:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007838:	7a7b      	ldrb	r3, [r7, #9]
 800783a:	041b      	lsls	r3, r3, #16
 800783c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007840:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	4313      	orrs	r3, r2
 800784a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800784e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	0d5b      	lsrs	r3, r3, #21
 800785a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800785e:	4b08      	ldr	r3, [pc, #32]	@ (8007880 <I2C_TransferConfig+0x60>)
 8007860:	430b      	orrs	r3, r1
 8007862:	43db      	mvns	r3, r3
 8007864:	ea02 0103 	and.w	r1, r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	430a      	orrs	r2, r1
 8007870:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007872:	bf00      	nop
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	03ff63ff 	.word	0x03ff63ff

08007884 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b20      	cmp	r3, #32
 8007898:	d138      	bne.n	800790c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e032      	b.n	800790e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2224      	movs	r2, #36	@ 0x24
 80078b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0201 	bic.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6819      	ldr	r1, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0201 	orr.w	r2, r2, #1
 80078f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	e000      	b.n	800790e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800790c:	2302      	movs	r3, #2
  }
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800791a:	b480      	push	{r7}
 800791c:	b085      	sub	sp, #20
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b20      	cmp	r3, #32
 800792e:	d139      	bne.n	80079a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800793a:	2302      	movs	r3, #2
 800793c:	e033      	b.n	80079a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2224      	movs	r2, #36	@ 0x24
 800794a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0201 	bic.w	r2, r2, #1
 800795c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800796c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	e000      	b.n	80079a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079a4:	2302      	movs	r3, #2
  }
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
	...

080079b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079b8:	4b05      	ldr	r3, [pc, #20]	@ (80079d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a04      	ldr	r2, [pc, #16]	@ (80079d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079c2:	6013      	str	r3, [r2, #0]
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40007000 	.word	0x40007000

080079d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80079de:	4b23      	ldr	r3, [pc, #140]	@ (8007a6c <HAL_PWREx_EnableOverDrive+0x98>)
 80079e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e2:	4a22      	ldr	r2, [pc, #136]	@ (8007a6c <HAL_PWREx_EnableOverDrive+0x98>)
 80079e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80079ea:	4b20      	ldr	r3, [pc, #128]	@ (8007a6c <HAL_PWREx_EnableOverDrive+0x98>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80079f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a02:	f7fd fe3b 	bl	800567c <HAL_GetTick>
 8007a06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a08:	e009      	b.n	8007a1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a0a:	f7fd fe37 	bl	800567c <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a18:	d901      	bls.n	8007a1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e022      	b.n	8007a64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a1e:	4b14      	ldr	r3, [pc, #80]	@ (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a2a:	d1ee      	bne.n	8007a0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007a2c:	4b10      	ldr	r3, [pc, #64]	@ (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0f      	ldr	r2, [pc, #60]	@ (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a38:	f7fd fe20 	bl	800567c <HAL_GetTick>
 8007a3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a3e:	e009      	b.n	8007a54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a40:	f7fd fe1c 	bl	800567c <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a4e:	d901      	bls.n	8007a54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e007      	b.n	8007a64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a54:	4b06      	ldr	r3, [pc, #24]	@ (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a60:	d1ee      	bne.n	8007a40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40023800 	.word	0x40023800
 8007a70:	40007000 	.word	0x40007000

08007a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e291      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8087 	beq.w	8007ba6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a98:	4b96      	ldr	r3, [pc, #600]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f003 030c 	and.w	r3, r3, #12
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d00c      	beq.n	8007abe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007aa4:	4b93      	ldr	r3, [pc, #588]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f003 030c 	and.w	r3, r3, #12
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d112      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x62>
 8007ab0:	4b90      	ldr	r3, [pc, #576]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ab8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007abc:	d10b      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007abe:	4b8d      	ldr	r3, [pc, #564]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d06c      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x130>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d168      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e26b      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ade:	d106      	bne.n	8007aee <HAL_RCC_OscConfig+0x7a>
 8007ae0:	4b84      	ldr	r3, [pc, #528]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a83      	ldr	r2, [pc, #524]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	e02e      	b.n	8007b4c <HAL_RCC_OscConfig+0xd8>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10c      	bne.n	8007b10 <HAL_RCC_OscConfig+0x9c>
 8007af6:	4b7f      	ldr	r3, [pc, #508]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a7e      	ldr	r2, [pc, #504]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	4b7c      	ldr	r3, [pc, #496]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a7b      	ldr	r2, [pc, #492]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	e01d      	b.n	8007b4c <HAL_RCC_OscConfig+0xd8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b18:	d10c      	bne.n	8007b34 <HAL_RCC_OscConfig+0xc0>
 8007b1a:	4b76      	ldr	r3, [pc, #472]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a75      	ldr	r2, [pc, #468]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	4b73      	ldr	r3, [pc, #460]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a72      	ldr	r2, [pc, #456]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	e00b      	b.n	8007b4c <HAL_RCC_OscConfig+0xd8>
 8007b34:	4b6f      	ldr	r3, [pc, #444]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a6e      	ldr	r2, [pc, #440]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	4b6c      	ldr	r3, [pc, #432]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a6b      	ldr	r2, [pc, #428]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d013      	beq.n	8007b7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b54:	f7fd fd92 	bl	800567c <HAL_GetTick>
 8007b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b5a:	e008      	b.n	8007b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b5c:	f7fd fd8e 	bl	800567c <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b64      	cmp	r3, #100	@ 0x64
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e21f      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b6e:	4b61      	ldr	r3, [pc, #388]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0f0      	beq.n	8007b5c <HAL_RCC_OscConfig+0xe8>
 8007b7a:	e014      	b.n	8007ba6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b7c:	f7fd fd7e 	bl	800567c <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b84:	f7fd fd7a 	bl	800567c <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b64      	cmp	r3, #100	@ 0x64
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e20b      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b96:	4b57      	ldr	r3, [pc, #348]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f0      	bne.n	8007b84 <HAL_RCC_OscConfig+0x110>
 8007ba2:	e000      	b.n	8007ba6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d069      	beq.n	8007c86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007bb2:	4b50      	ldr	r3, [pc, #320]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 030c 	and.w	r3, r3, #12
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00b      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bbe:	4b4d      	ldr	r3, [pc, #308]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 030c 	and.w	r3, r3, #12
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d11c      	bne.n	8007c04 <HAL_RCC_OscConfig+0x190>
 8007bca:	4b4a      	ldr	r3, [pc, #296]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d116      	bne.n	8007c04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bd6:	4b47      	ldr	r3, [pc, #284]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <HAL_RCC_OscConfig+0x17a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d001      	beq.n	8007bee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e1df      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bee:	4b41      	ldr	r3, [pc, #260]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	493d      	ldr	r1, [pc, #244]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c02:	e040      	b.n	8007c86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d023      	beq.n	8007c54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c0c:	4b39      	ldr	r3, [pc, #228]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a38      	ldr	r2, [pc, #224]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c18:	f7fd fd30 	bl	800567c <HAL_GetTick>
 8007c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c1e:	e008      	b.n	8007c32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c20:	f7fd fd2c 	bl	800567c <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e1bd      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c32:	4b30      	ldr	r3, [pc, #192]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0f0      	beq.n	8007c20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	4929      	ldr	r1, [pc, #164]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	600b      	str	r3, [r1, #0]
 8007c52:	e018      	b.n	8007c86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c54:	4b27      	ldr	r3, [pc, #156]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a26      	ldr	r2, [pc, #152]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c60:	f7fd fd0c 	bl	800567c <HAL_GetTick>
 8007c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c66:	e008      	b.n	8007c7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c68:	f7fd fd08 	bl	800567c <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e199      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1f0      	bne.n	8007c68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0308 	and.w	r3, r3, #8
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d038      	beq.n	8007d04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d019      	beq.n	8007cce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c9a:	4b16      	ldr	r3, [pc, #88]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c9e:	4a15      	ldr	r2, [pc, #84]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca6:	f7fd fce9 	bl	800567c <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cae:	f7fd fce5 	bl	800567c <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e176      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0f0      	beq.n	8007cae <HAL_RCC_OscConfig+0x23a>
 8007ccc:	e01a      	b.n	8007d04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cce:	4b09      	ldr	r3, [pc, #36]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cd2:	4a08      	ldr	r2, [pc, #32]	@ (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007cd4:	f023 0301 	bic.w	r3, r3, #1
 8007cd8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cda:	f7fd fccf 	bl	800567c <HAL_GetTick>
 8007cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ce0:	e00a      	b.n	8007cf8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ce2:	f7fd fccb 	bl	800567c <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d903      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e15c      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
 8007cf4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cf8:	4b91      	ldr	r3, [pc, #580]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1ee      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80a4 	beq.w	8007e5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d12:	4b8b      	ldr	r3, [pc, #556]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10d      	bne.n	8007d3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d1e:	4b88      	ldr	r3, [pc, #544]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d22:	4a87      	ldr	r2, [pc, #540]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d2a:	4b85      	ldr	r3, [pc, #532]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d32:	60bb      	str	r3, [r7, #8]
 8007d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d36:	2301      	movs	r3, #1
 8007d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d3a:	4b82      	ldr	r3, [pc, #520]	@ (8007f44 <HAL_RCC_OscConfig+0x4d0>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d118      	bne.n	8007d78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007d46:	4b7f      	ldr	r3, [pc, #508]	@ (8007f44 <HAL_RCC_OscConfig+0x4d0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8007f44 <HAL_RCC_OscConfig+0x4d0>)
 8007d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d52:	f7fd fc93 	bl	800567c <HAL_GetTick>
 8007d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d58:	e008      	b.n	8007d6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d5a:	f7fd fc8f 	bl	800567c <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b64      	cmp	r3, #100	@ 0x64
 8007d66:	d901      	bls.n	8007d6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e120      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d6c:	4b75      	ldr	r3, [pc, #468]	@ (8007f44 <HAL_RCC_OscConfig+0x4d0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0f0      	beq.n	8007d5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d106      	bne.n	8007d8e <HAL_RCC_OscConfig+0x31a>
 8007d80:	4b6f      	ldr	r3, [pc, #444]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d84:	4a6e      	ldr	r2, [pc, #440]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d8c:	e02d      	b.n	8007dea <HAL_RCC_OscConfig+0x376>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10c      	bne.n	8007db0 <HAL_RCC_OscConfig+0x33c>
 8007d96:	4b6a      	ldr	r3, [pc, #424]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d9a:	4a69      	ldr	r2, [pc, #420]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d9c:	f023 0301 	bic.w	r3, r3, #1
 8007da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007da2:	4b67      	ldr	r3, [pc, #412]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da6:	4a66      	ldr	r2, [pc, #408]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007da8:	f023 0304 	bic.w	r3, r3, #4
 8007dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dae:	e01c      	b.n	8007dea <HAL_RCC_OscConfig+0x376>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2b05      	cmp	r3, #5
 8007db6:	d10c      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x35e>
 8007db8:	4b61      	ldr	r3, [pc, #388]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dbc:	4a60      	ldr	r2, [pc, #384]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dbe:	f043 0304 	orr.w	r3, r3, #4
 8007dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dc4:	4b5e      	ldr	r3, [pc, #376]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dca:	f043 0301 	orr.w	r3, r3, #1
 8007dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dd0:	e00b      	b.n	8007dea <HAL_RCC_OscConfig+0x376>
 8007dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dde:	4b58      	ldr	r3, [pc, #352]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007de2:	4a57      	ldr	r2, [pc, #348]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007de4:	f023 0304 	bic.w	r3, r3, #4
 8007de8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d015      	beq.n	8007e1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df2:	f7fd fc43 	bl	800567c <HAL_GetTick>
 8007df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007df8:	e00a      	b.n	8007e10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dfa:	f7fd fc3f 	bl	800567c <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d901      	bls.n	8007e10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e0ce      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e10:	4b4b      	ldr	r3, [pc, #300]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d0ee      	beq.n	8007dfa <HAL_RCC_OscConfig+0x386>
 8007e1c:	e014      	b.n	8007e48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e1e:	f7fd fc2d 	bl	800567c <HAL_GetTick>
 8007e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e24:	e00a      	b.n	8007e3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e26:	f7fd fc29 	bl	800567c <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d901      	bls.n	8007e3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e0b8      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e3c:	4b40      	ldr	r3, [pc, #256]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1ee      	bne.n	8007e26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d105      	bne.n	8007e5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e52:	4a3b      	ldr	r2, [pc, #236]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e58:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 80a4 	beq.w	8007fac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e64:	4b36      	ldr	r3, [pc, #216]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 030c 	and.w	r3, r3, #12
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d06b      	beq.n	8007f48 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d149      	bne.n	8007f0c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e78:	4b31      	ldr	r3, [pc, #196]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a30      	ldr	r2, [pc, #192]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e84:	f7fd fbfa 	bl	800567c <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e8c:	f7fd fbf6 	bl	800567c <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e087      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e9e:	4b28      	ldr	r3, [pc, #160]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1f0      	bne.n	8007e8c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69da      	ldr	r2, [r3, #28]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb8:	019b      	lsls	r3, r3, #6
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec0:	085b      	lsrs	r3, r3, #1
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	041b      	lsls	r3, r3, #16
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ecc:	061b      	lsls	r3, r3, #24
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007ed2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ed6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ed8:	4b19      	ldr	r3, [pc, #100]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a18      	ldr	r2, [pc, #96]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fd fbca 	bl	800567c <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eec:	f7fd fbc6 	bl	800567c <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e057      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007efe:	4b10      	ldr	r3, [pc, #64]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0x478>
 8007f0a:	e04f      	b.n	8007fac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0b      	ldr	r2, [pc, #44]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f18:	f7fd fbb0 	bl	800567c <HAL_GetTick>
 8007f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f1e:	e008      	b.n	8007f32 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f20:	f7fd fbac 	bl	800567c <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d901      	bls.n	8007f32 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e03d      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f32:	4b03      	ldr	r3, [pc, #12]	@ (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1f0      	bne.n	8007f20 <HAL_RCC_OscConfig+0x4ac>
 8007f3e:	e035      	b.n	8007fac <HAL_RCC_OscConfig+0x538>
 8007f40:	40023800 	.word	0x40023800
 8007f44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007f48:	4b1b      	ldr	r3, [pc, #108]	@ (8007fb8 <HAL_RCC_OscConfig+0x544>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d028      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d121      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d11a      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007f78:	4013      	ands	r3, r2
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d111      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	3b01      	subs	r3, #1
 8007f92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d001      	beq.n	8007fac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	40023800 	.word	0x40023800

08007fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e0d0      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d910      	bls.n	8008004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fe2:	4b67      	ldr	r3, [pc, #412]	@ (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f023 020f 	bic.w	r2, r3, #15
 8007fea:	4965      	ldr	r1, [pc, #404]	@ (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ff2:	4b63      	ldr	r3, [pc, #396]	@ (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d001      	beq.n	8008004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e0b8      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d020      	beq.n	8008052 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800801c:	4b59      	ldr	r3, [pc, #356]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	4a58      	ldr	r2, [pc, #352]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008034:	4b53      	ldr	r3, [pc, #332]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	4a52      	ldr	r2, [pc, #328]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800803a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800803e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008040:	4b50      	ldr	r3, [pc, #320]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	494d      	ldr	r1, [pc, #308]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800804e:	4313      	orrs	r3, r2
 8008050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d040      	beq.n	80080e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d107      	bne.n	8008076 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008066:	4b47      	ldr	r3, [pc, #284]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d115      	bne.n	800809e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e07f      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d107      	bne.n	800808e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800807e:	4b41      	ldr	r3, [pc, #260]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e073      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800808e:	4b3d      	ldr	r3, [pc, #244]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e06b      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800809e:	4b39      	ldr	r3, [pc, #228]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f023 0203 	bic.w	r2, r3, #3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	4936      	ldr	r1, [pc, #216]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b0:	f7fd fae4 	bl	800567c <HAL_GetTick>
 80080b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080b6:	e00a      	b.n	80080ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080b8:	f7fd fae0 	bl	800567c <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d901      	bls.n	80080ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e053      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ce:	4b2d      	ldr	r3, [pc, #180]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 020c 	and.w	r2, r3, #12
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	429a      	cmp	r2, r3
 80080de:	d1eb      	bne.n	80080b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080e0:	4b27      	ldr	r3, [pc, #156]	@ (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d210      	bcs.n	8008110 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ee:	4b24      	ldr	r3, [pc, #144]	@ (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f023 020f 	bic.w	r2, r3, #15
 80080f6:	4922      	ldr	r1, [pc, #136]	@ (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080fe:	4b20      	ldr	r3, [pc, #128]	@ (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d001      	beq.n	8008110 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e032      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d008      	beq.n	800812e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800811c:	4b19      	ldr	r3, [pc, #100]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	4916      	ldr	r1, [pc, #88]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800812a:	4313      	orrs	r3, r2
 800812c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800813a:	4b12      	ldr	r3, [pc, #72]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	490e      	ldr	r1, [pc, #56]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800814a:	4313      	orrs	r3, r2
 800814c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800814e:	f000 f821 	bl	8008194 <HAL_RCC_GetSysClockFreq>
 8008152:	4602      	mov	r2, r0
 8008154:	4b0b      	ldr	r3, [pc, #44]	@ (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	091b      	lsrs	r3, r3, #4
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	490a      	ldr	r1, [pc, #40]	@ (8008188 <HAL_RCC_ClockConfig+0x1cc>)
 8008160:	5ccb      	ldrb	r3, [r1, r3]
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	4a09      	ldr	r2, [pc, #36]	@ (800818c <HAL_RCC_ClockConfig+0x1d0>)
 8008168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800816a:	4b09      	ldr	r3, [pc, #36]	@ (8008190 <HAL_RCC_ClockConfig+0x1d4>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f7fd fa40 	bl	80055f4 <HAL_InitTick>

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40023c00 	.word	0x40023c00
 8008184:	40023800 	.word	0x40023800
 8008188:	0801cf0c 	.word	0x0801cf0c
 800818c:	2000004c 	.word	0x2000004c
 8008190:	20009658 	.word	0x20009658

08008194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008198:	b094      	sub	sp, #80	@ 0x50
 800819a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	647b      	str	r3, [r7, #68]	@ 0x44
 80081a0:	2300      	movs	r3, #0
 80081a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081a4:	2300      	movs	r3, #0
 80081a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081ac:	4b79      	ldr	r3, [pc, #484]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f003 030c 	and.w	r3, r3, #12
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d00d      	beq.n	80081d4 <HAL_RCC_GetSysClockFreq+0x40>
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	f200 80e1 	bhi.w	8008380 <HAL_RCC_GetSysClockFreq+0x1ec>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <HAL_RCC_GetSysClockFreq+0x34>
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d003      	beq.n	80081ce <HAL_RCC_GetSysClockFreq+0x3a>
 80081c6:	e0db      	b.n	8008380 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081c8:	4b73      	ldr	r3, [pc, #460]	@ (8008398 <HAL_RCC_GetSysClockFreq+0x204>)
 80081ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081cc:	e0db      	b.n	8008386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081ce:	4b73      	ldr	r3, [pc, #460]	@ (800839c <HAL_RCC_GetSysClockFreq+0x208>)
 80081d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081d2:	e0d8      	b.n	8008386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081d4:	4b6f      	ldr	r3, [pc, #444]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80081de:	4b6d      	ldr	r3, [pc, #436]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d063      	beq.n	80082b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	099b      	lsrs	r3, r3, #6
 80081f0:	2200      	movs	r2, #0
 80081f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80081f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80081fe:	2300      	movs	r3, #0
 8008200:	637b      	str	r3, [r7, #52]	@ 0x34
 8008202:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008206:	4622      	mov	r2, r4
 8008208:	462b      	mov	r3, r5
 800820a:	f04f 0000 	mov.w	r0, #0
 800820e:	f04f 0100 	mov.w	r1, #0
 8008212:	0159      	lsls	r1, r3, #5
 8008214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008218:	0150      	lsls	r0, r2, #5
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4621      	mov	r1, r4
 8008220:	1a51      	subs	r1, r2, r1
 8008222:	6139      	str	r1, [r7, #16]
 8008224:	4629      	mov	r1, r5
 8008226:	eb63 0301 	sbc.w	r3, r3, r1
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	f04f 0200 	mov.w	r2, #0
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008238:	4659      	mov	r1, fp
 800823a:	018b      	lsls	r3, r1, #6
 800823c:	4651      	mov	r1, sl
 800823e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008242:	4651      	mov	r1, sl
 8008244:	018a      	lsls	r2, r1, #6
 8008246:	4651      	mov	r1, sl
 8008248:	ebb2 0801 	subs.w	r8, r2, r1
 800824c:	4659      	mov	r1, fp
 800824e:	eb63 0901 	sbc.w	r9, r3, r1
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800825e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008266:	4690      	mov	r8, r2
 8008268:	4699      	mov	r9, r3
 800826a:	4623      	mov	r3, r4
 800826c:	eb18 0303 	adds.w	r3, r8, r3
 8008270:	60bb      	str	r3, [r7, #8]
 8008272:	462b      	mov	r3, r5
 8008274:	eb49 0303 	adc.w	r3, r9, r3
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	f04f 0200 	mov.w	r2, #0
 800827e:	f04f 0300 	mov.w	r3, #0
 8008282:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008286:	4629      	mov	r1, r5
 8008288:	024b      	lsls	r3, r1, #9
 800828a:	4621      	mov	r1, r4
 800828c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008290:	4621      	mov	r1, r4
 8008292:	024a      	lsls	r2, r1, #9
 8008294:	4610      	mov	r0, r2
 8008296:	4619      	mov	r1, r3
 8008298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800829a:	2200      	movs	r2, #0
 800829c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800829e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80082a4:	f7f8 fd00 	bl	8000ca8 <__aeabi_uldivmod>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4613      	mov	r3, r2
 80082ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082b0:	e058      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082b2:	4b38      	ldr	r3, [pc, #224]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	099b      	lsrs	r3, r3, #6
 80082b8:	2200      	movs	r2, #0
 80082ba:	4618      	mov	r0, r3
 80082bc:	4611      	mov	r1, r2
 80082be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80082c2:	623b      	str	r3, [r7, #32]
 80082c4:	2300      	movs	r3, #0
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80082c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80082cc:	4642      	mov	r2, r8
 80082ce:	464b      	mov	r3, r9
 80082d0:	f04f 0000 	mov.w	r0, #0
 80082d4:	f04f 0100 	mov.w	r1, #0
 80082d8:	0159      	lsls	r1, r3, #5
 80082da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082de:	0150      	lsls	r0, r2, #5
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4641      	mov	r1, r8
 80082e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80082ea:	4649      	mov	r1, r9
 80082ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80082fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008304:	ebb2 040a 	subs.w	r4, r2, sl
 8008308:	eb63 050b 	sbc.w	r5, r3, fp
 800830c:	f04f 0200 	mov.w	r2, #0
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	00eb      	lsls	r3, r5, #3
 8008316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800831a:	00e2      	lsls	r2, r4, #3
 800831c:	4614      	mov	r4, r2
 800831e:	461d      	mov	r5, r3
 8008320:	4643      	mov	r3, r8
 8008322:	18e3      	adds	r3, r4, r3
 8008324:	603b      	str	r3, [r7, #0]
 8008326:	464b      	mov	r3, r9
 8008328:	eb45 0303 	adc.w	r3, r5, r3
 800832c:	607b      	str	r3, [r7, #4]
 800832e:	f04f 0200 	mov.w	r2, #0
 8008332:	f04f 0300 	mov.w	r3, #0
 8008336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800833a:	4629      	mov	r1, r5
 800833c:	028b      	lsls	r3, r1, #10
 800833e:	4621      	mov	r1, r4
 8008340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008344:	4621      	mov	r1, r4
 8008346:	028a      	lsls	r2, r1, #10
 8008348:	4610      	mov	r0, r2
 800834a:	4619      	mov	r1, r3
 800834c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800834e:	2200      	movs	r2, #0
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	61fa      	str	r2, [r7, #28]
 8008354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008358:	f7f8 fca6 	bl	8000ca8 <__aeabi_uldivmod>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4613      	mov	r3, r2
 8008362:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008364:	4b0b      	ldr	r3, [pc, #44]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	0c1b      	lsrs	r3, r3, #16
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	3301      	adds	r3, #1
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008374:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008378:	fbb2 f3f3 	udiv	r3, r2, r3
 800837c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800837e:	e002      	b.n	8008386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008380:	4b05      	ldr	r3, [pc, #20]	@ (8008398 <HAL_RCC_GetSysClockFreq+0x204>)
 8008382:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008388:	4618      	mov	r0, r3
 800838a:	3750      	adds	r7, #80	@ 0x50
 800838c:	46bd      	mov	sp, r7
 800838e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008392:	bf00      	nop
 8008394:	40023800 	.word	0x40023800
 8008398:	00f42400 	.word	0x00f42400
 800839c:	007a1200 	.word	0x007a1200

080083a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083a4:	4b03      	ldr	r3, [pc, #12]	@ (80083b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80083a6:	681b      	ldr	r3, [r3, #0]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	2000004c 	.word	0x2000004c

080083b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083bc:	f7ff fff0 	bl	80083a0 <HAL_RCC_GetHCLKFreq>
 80083c0:	4602      	mov	r2, r0
 80083c2:	4b05      	ldr	r3, [pc, #20]	@ (80083d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	0a9b      	lsrs	r3, r3, #10
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	4903      	ldr	r1, [pc, #12]	@ (80083dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80083ce:	5ccb      	ldrb	r3, [r1, r3]
 80083d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40023800 	.word	0x40023800
 80083dc:	0801cf1c 	.word	0x0801cf1c

080083e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083e4:	f7ff ffdc 	bl	80083a0 <HAL_RCC_GetHCLKFreq>
 80083e8:	4602      	mov	r2, r0
 80083ea:	4b05      	ldr	r3, [pc, #20]	@ (8008400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	0b5b      	lsrs	r3, r3, #13
 80083f0:	f003 0307 	and.w	r3, r3, #7
 80083f4:	4903      	ldr	r1, [pc, #12]	@ (8008404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083f6:	5ccb      	ldrb	r3, [r1, r3]
 80083f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40023800 	.word	0x40023800
 8008404:	0801cf1c 	.word	0x0801cf1c

08008408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d012      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008430:	4b69      	ldr	r3, [pc, #420]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	4a68      	ldr	r2, [pc, #416]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008436:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800843a:	6093      	str	r3, [r2, #8]
 800843c:	4b66      	ldr	r3, [pc, #408]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008444:	4964      	ldr	r1, [pc, #400]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008446:	4313      	orrs	r3, r2
 8008448:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008452:	2301      	movs	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d017      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008462:	4b5d      	ldr	r3, [pc, #372]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008468:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008470:	4959      	ldr	r1, [pc, #356]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008472:	4313      	orrs	r3, r2
 8008474:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008480:	d101      	bne.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008482:	2301      	movs	r3, #1
 8008484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800848e:	2301      	movs	r3, #1
 8008490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d017      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800849e:	4b4e      	ldr	r3, [pc, #312]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ac:	494a      	ldr	r1, [pc, #296]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084bc:	d101      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80084be:	2301      	movs	r3, #1
 80084c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80084ca:	2301      	movs	r3, #1
 80084cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80084da:	2301      	movs	r3, #1
 80084dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 808b 	beq.w	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084ec:	4b3a      	ldr	r3, [pc, #232]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f0:	4a39      	ldr	r2, [pc, #228]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80084f8:	4b37      	ldr	r3, [pc, #220]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008500:	60bb      	str	r3, [r7, #8]
 8008502:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008504:	4b35      	ldr	r3, [pc, #212]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a34      	ldr	r2, [pc, #208]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800850a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800850e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008510:	f7fd f8b4 	bl	800567c <HAL_GetTick>
 8008514:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008516:	e008      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008518:	f7fd f8b0 	bl	800567c <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b64      	cmp	r3, #100	@ 0x64
 8008524:	d901      	bls.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e357      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800852a:	4b2c      	ldr	r3, [pc, #176]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0f0      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008536:	4b28      	ldr	r3, [pc, #160]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800853a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800853e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d035      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	429a      	cmp	r2, r3
 8008552:	d02e      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008554:	4b20      	ldr	r3, [pc, #128]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800855c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800855e:	4b1e      	ldr	r3, [pc, #120]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008562:	4a1d      	ldr	r2, [pc, #116]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008568:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800856a:	4b1b      	ldr	r3, [pc, #108]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800856c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800856e:	4a1a      	ldr	r2, [pc, #104]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008574:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008576:	4a18      	ldr	r2, [pc, #96]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800857c:	4b16      	ldr	r3, [pc, #88]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800857e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b01      	cmp	r3, #1
 8008586:	d114      	bne.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008588:	f7fd f878 	bl	800567c <HAL_GetTick>
 800858c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800858e:	e00a      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008590:	f7fd f874 	bl	800567c <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800859e:	4293      	cmp	r3, r2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e319      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085a6:	4b0c      	ldr	r3, [pc, #48]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0ee      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085be:	d111      	bne.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80085c0:	4b05      	ldr	r3, [pc, #20]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80085cc:	4b04      	ldr	r3, [pc, #16]	@ (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085ce:	400b      	ands	r3, r1
 80085d0:	4901      	ldr	r1, [pc, #4]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	608b      	str	r3, [r1, #8]
 80085d6:	e00b      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80085d8:	40023800 	.word	0x40023800
 80085dc:	40007000 	.word	0x40007000
 80085e0:	0ffffcff 	.word	0x0ffffcff
 80085e4:	4baa      	ldr	r3, [pc, #680]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4aa9      	ldr	r2, [pc, #676]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80085ee:	6093      	str	r3, [r2, #8]
 80085f0:	4ba7      	ldr	r3, [pc, #668]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085fc:	49a4      	ldr	r1, [pc, #656]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0310 	and.w	r3, r3, #16
 800860a:	2b00      	cmp	r3, #0
 800860c:	d010      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800860e:	4ba0      	ldr	r3, [pc, #640]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008614:	4a9e      	ldr	r2, [pc, #632]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800861a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800861e:	4b9c      	ldr	r3, [pc, #624]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008620:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008628:	4999      	ldr	r1, [pc, #612]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800862a:	4313      	orrs	r3, r2
 800862c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00a      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800863c:	4b94      	ldr	r3, [pc, #592]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008642:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800864a:	4991      	ldr	r1, [pc, #580]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800864c:	4313      	orrs	r3, r2
 800864e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800865e:	4b8c      	ldr	r3, [pc, #560]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008664:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800866c:	4988      	ldr	r1, [pc, #544]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800866e:	4313      	orrs	r3, r2
 8008670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00a      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008680:	4b83      	ldr	r3, [pc, #524]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008686:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800868e:	4980      	ldr	r1, [pc, #512]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008690:	4313      	orrs	r3, r2
 8008692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00a      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086a2:	4b7b      	ldr	r3, [pc, #492]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b0:	4977      	ldr	r1, [pc, #476]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00a      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086c4:	4b72      	ldr	r3, [pc, #456]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ca:	f023 0203 	bic.w	r2, r3, #3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d2:	496f      	ldr	r1, [pc, #444]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086e6:	4b6a      	ldr	r3, [pc, #424]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ec:	f023 020c 	bic.w	r2, r3, #12
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086f4:	4966      	ldr	r1, [pc, #408]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00a      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008708:	4b61      	ldr	r3, [pc, #388]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800870a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800870e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008716:	495e      	ldr	r1, [pc, #376]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008718:	4313      	orrs	r3, r2
 800871a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800872a:	4b59      	ldr	r3, [pc, #356]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800872c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008730:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008738:	4955      	ldr	r1, [pc, #340]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800873a:	4313      	orrs	r3, r2
 800873c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800874c:	4b50      	ldr	r3, [pc, #320]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800874e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008752:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800875a:	494d      	ldr	r1, [pc, #308]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800875c:	4313      	orrs	r3, r2
 800875e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800876e:	4b48      	ldr	r3, [pc, #288]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008774:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800877c:	4944      	ldr	r1, [pc, #272]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800877e:	4313      	orrs	r3, r2
 8008780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00a      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008790:	4b3f      	ldr	r3, [pc, #252]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008796:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800879e:	493c      	ldr	r1, [pc, #240]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80087b2:	4b37      	ldr	r3, [pc, #220]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087c0:	4933      	ldr	r1, [pc, #204]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80087d4:	4b2e      	ldr	r3, [pc, #184]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087e2:	492b      	ldr	r1, [pc, #172]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d011      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80087f6:	4b26      	ldr	r3, [pc, #152]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008804:	4922      	ldr	r1, [pc, #136]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008806:	4313      	orrs	r3, r2
 8008808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008814:	d101      	bne.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008816:	2301      	movs	r3, #1
 8008818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0308 	and.w	r3, r3, #8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008826:	2301      	movs	r3, #1
 8008828:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008836:	4b16      	ldr	r3, [pc, #88]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800883c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008844:	4912      	ldr	r1, [pc, #72]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008846:	4313      	orrs	r3, r2
 8008848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00b      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008858:	4b0d      	ldr	r3, [pc, #52]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800885a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800885e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008868:	4909      	ldr	r1, [pc, #36]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800886a:	4313      	orrs	r3, r2
 800886c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d006      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 80d9 	beq.w	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008884:	4b02      	ldr	r3, [pc, #8]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a01      	ldr	r2, [pc, #4]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800888a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800888e:	e001      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008890:	40023800 	.word	0x40023800
 8008894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008896:	f7fc fef1 	bl	800567c <HAL_GetTick>
 800889a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800889c:	e008      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800889e:	f7fc feed 	bl	800567c <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	2b64      	cmp	r3, #100	@ 0x64
 80088aa:	d901      	bls.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e194      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f0      	bne.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d021      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d11d      	bne.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088d0:	4b64      	ldr	r3, [pc, #400]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088d6:	0c1b      	lsrs	r3, r3, #16
 80088d8:	f003 0303 	and.w	r3, r3, #3
 80088dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80088de:	4b61      	ldr	r3, [pc, #388]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088e4:	0e1b      	lsrs	r3, r3, #24
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	019a      	lsls	r2, r3, #6
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	041b      	lsls	r3, r3, #16
 80088f6:	431a      	orrs	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	061b      	lsls	r3, r3, #24
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	071b      	lsls	r3, r3, #28
 8008904:	4957      	ldr	r1, [pc, #348]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008906:	4313      	orrs	r3, r2
 8008908:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008920:	d00a      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800892a:	2b00      	cmp	r3, #0
 800892c:	d02e      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008932:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008936:	d129      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008938:	4b4a      	ldr	r3, [pc, #296]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800893a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800893e:	0c1b      	lsrs	r3, r3, #16
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008946:	4b47      	ldr	r3, [pc, #284]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800894c:	0f1b      	lsrs	r3, r3, #28
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	019a      	lsls	r2, r3, #6
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	041b      	lsls	r3, r3, #16
 800895e:	431a      	orrs	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	061b      	lsls	r3, r3, #24
 8008966:	431a      	orrs	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	071b      	lsls	r3, r3, #28
 800896c:	493d      	ldr	r1, [pc, #244]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800896e:	4313      	orrs	r3, r2
 8008970:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008974:	4b3b      	ldr	r3, [pc, #236]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800897a:	f023 021f 	bic.w	r2, r3, #31
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008982:	3b01      	subs	r3, #1
 8008984:	4937      	ldr	r1, [pc, #220]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008986:	4313      	orrs	r3, r2
 8008988:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01d      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008998:	4b32      	ldr	r3, [pc, #200]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800899a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800899e:	0e1b      	lsrs	r3, r3, #24
 80089a0:	f003 030f 	and.w	r3, r3, #15
 80089a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80089a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ac:	0f1b      	lsrs	r3, r3, #28
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	019a      	lsls	r2, r3, #6
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	041b      	lsls	r3, r3, #16
 80089c0:	431a      	orrs	r2, r3
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	061b      	lsls	r3, r3, #24
 80089c6:	431a      	orrs	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	071b      	lsls	r3, r3, #28
 80089cc:	4925      	ldr	r1, [pc, #148]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d011      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	019a      	lsls	r2, r3, #6
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	041b      	lsls	r3, r3, #16
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	061b      	lsls	r3, r3, #24
 80089f4:	431a      	orrs	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	071b      	lsls	r3, r3, #28
 80089fc:	4919      	ldr	r1, [pc, #100]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008a04:	4b17      	ldr	r3, [pc, #92]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a16      	ldr	r2, [pc, #88]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a10:	f7fc fe34 	bl	800567c <HAL_GetTick>
 8008a14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a16:	e008      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a18:	f7fc fe30 	bl	800567c <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	2b64      	cmp	r3, #100	@ 0x64
 8008a24:	d901      	bls.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e0d7      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f0      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	f040 80cd 	bne.w	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008a3e:	4b09      	ldr	r3, [pc, #36]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a08      	ldr	r2, [pc, #32]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a4a:	f7fc fe17 	bl	800567c <HAL_GetTick>
 8008a4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a50:	e00a      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a52:	f7fc fe13 	bl	800567c <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b64      	cmp	r3, #100	@ 0x64
 8008a5e:	d903      	bls.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e0ba      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008a64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a68:	4b5e      	ldr	r3, [pc, #376]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a74:	d0ed      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d02e      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d12a      	bne.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a9e:	4b51      	ldr	r3, [pc, #324]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa4:	0c1b      	lsrs	r3, r3, #16
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008aac:	4b4d      	ldr	r3, [pc, #308]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab2:	0f1b      	lsrs	r3, r3, #28
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	019a      	lsls	r2, r3, #6
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	041b      	lsls	r3, r3, #16
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	061b      	lsls	r3, r3, #24
 8008acc:	431a      	orrs	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	071b      	lsls	r3, r3, #28
 8008ad2:	4944      	ldr	r1, [pc, #272]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008ada:	4b42      	ldr	r3, [pc, #264]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ae0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	021b      	lsls	r3, r3, #8
 8008aec:	493d      	ldr	r1, [pc, #244]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d022      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b08:	d11d      	bne.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b0a:	4b36      	ldr	r3, [pc, #216]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b10:	0e1b      	lsrs	r3, r3, #24
 8008b12:	f003 030f 	and.w	r3, r3, #15
 8008b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b18:	4b32      	ldr	r3, [pc, #200]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b1e:	0f1b      	lsrs	r3, r3, #28
 8008b20:	f003 0307 	and.w	r3, r3, #7
 8008b24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	019a      	lsls	r2, r3, #6
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	431a      	orrs	r2, r3
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	061b      	lsls	r3, r3, #24
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	071b      	lsls	r3, r3, #28
 8008b3e:	4929      	ldr	r1, [pc, #164]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0308 	and.w	r3, r3, #8
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d028      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b52:	4b24      	ldr	r3, [pc, #144]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b58:	0e1b      	lsrs	r3, r3, #24
 8008b5a:	f003 030f 	and.w	r3, r3, #15
 8008b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b60:	4b20      	ldr	r3, [pc, #128]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b66:	0c1b      	lsrs	r3, r3, #16
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	019a      	lsls	r2, r3, #6
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	041b      	lsls	r3, r3, #16
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	061b      	lsls	r3, r3, #24
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	071b      	lsls	r3, r3, #28
 8008b86:	4917      	ldr	r1, [pc, #92]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008b8e:	4b15      	ldr	r3, [pc, #84]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9c:	4911      	ldr	r1, [pc, #68]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bb0:	f7fc fd64 	bl	800567c <HAL_GetTick>
 8008bb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008bb6:	e008      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008bb8:	f7fc fd60 	bl	800567c <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	2b64      	cmp	r3, #100	@ 0x64
 8008bc4:	d901      	bls.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e007      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008bca:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bd6:	d1ef      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3720      	adds	r7, #32
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	40023800 	.word	0x40023800

08008be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e049      	b.n	8008c8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d106      	bne.n	8008c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fb fe12 	bl	8004838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f000 fb58 	bl	80092dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d001      	beq.n	8008cb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e04c      	b.n	8008d4a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a26      	ldr	r2, [pc, #152]	@ (8008d58 <HAL_TIM_Base_Start+0xc0>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d022      	beq.n	8008d08 <HAL_TIM_Base_Start+0x70>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cca:	d01d      	beq.n	8008d08 <HAL_TIM_Base_Start+0x70>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a22      	ldr	r2, [pc, #136]	@ (8008d5c <HAL_TIM_Base_Start+0xc4>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d018      	beq.n	8008d08 <HAL_TIM_Base_Start+0x70>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a21      	ldr	r2, [pc, #132]	@ (8008d60 <HAL_TIM_Base_Start+0xc8>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d013      	beq.n	8008d08 <HAL_TIM_Base_Start+0x70>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8008d64 <HAL_TIM_Base_Start+0xcc>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d00e      	beq.n	8008d08 <HAL_TIM_Base_Start+0x70>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a1e      	ldr	r2, [pc, #120]	@ (8008d68 <HAL_TIM_Base_Start+0xd0>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d009      	beq.n	8008d08 <HAL_TIM_Base_Start+0x70>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d6c <HAL_TIM_Base_Start+0xd4>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d004      	beq.n	8008d08 <HAL_TIM_Base_Start+0x70>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a1b      	ldr	r2, [pc, #108]	@ (8008d70 <HAL_TIM_Base_Start+0xd8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d115      	bne.n	8008d34 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689a      	ldr	r2, [r3, #8]
 8008d0e:	4b19      	ldr	r3, [pc, #100]	@ (8008d74 <HAL_TIM_Base_Start+0xdc>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b06      	cmp	r3, #6
 8008d18:	d015      	beq.n	8008d46 <HAL_TIM_Base_Start+0xae>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d20:	d011      	beq.n	8008d46 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f042 0201 	orr.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d32:	e008      	b.n	8008d46 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 0201 	orr.w	r2, r2, #1
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e000      	b.n	8008d48 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40010000 	.word	0x40010000
 8008d5c:	40000400 	.word	0x40000400
 8008d60:	40000800 	.word	0x40000800
 8008d64:	40000c00 	.word	0x40000c00
 8008d68:	40010400 	.word	0x40010400
 8008d6c:	40014000 	.word	0x40014000
 8008d70:	40001800 	.word	0x40001800
 8008d74:	00010007 	.word	0x00010007

08008d78 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6a1a      	ldr	r2, [r3, #32]
 8008d86:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10f      	bne.n	8008db0 <HAL_TIM_Base_Stop+0x38>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6a1a      	ldr	r2, [r3, #32]
 8008d96:	f240 4344 	movw	r3, #1092	@ 0x444
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d107      	bne.n	8008db0 <HAL_TIM_Base_Stop+0x38>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
	...

08008dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d001      	beq.n	8008de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e054      	b.n	8008e8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0201 	orr.w	r2, r2, #1
 8008df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a26      	ldr	r2, [pc, #152]	@ (8008e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d022      	beq.n	8008e48 <HAL_TIM_Base_Start_IT+0x80>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e0a:	d01d      	beq.n	8008e48 <HAL_TIM_Base_Start_IT+0x80>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a22      	ldr	r2, [pc, #136]	@ (8008e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d018      	beq.n	8008e48 <HAL_TIM_Base_Start_IT+0x80>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a21      	ldr	r2, [pc, #132]	@ (8008ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d013      	beq.n	8008e48 <HAL_TIM_Base_Start_IT+0x80>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a1f      	ldr	r2, [pc, #124]	@ (8008ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d00e      	beq.n	8008e48 <HAL_TIM_Base_Start_IT+0x80>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ea8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d009      	beq.n	8008e48 <HAL_TIM_Base_Start_IT+0x80>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a1c      	ldr	r2, [pc, #112]	@ (8008eac <HAL_TIM_Base_Start_IT+0xe4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d004      	beq.n	8008e48 <HAL_TIM_Base_Start_IT+0x80>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d115      	bne.n	8008e74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689a      	ldr	r2, [r3, #8]
 8008e4e:	4b19      	ldr	r3, [pc, #100]	@ (8008eb4 <HAL_TIM_Base_Start_IT+0xec>)
 8008e50:	4013      	ands	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2b06      	cmp	r3, #6
 8008e58:	d015      	beq.n	8008e86 <HAL_TIM_Base_Start_IT+0xbe>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e60:	d011      	beq.n	8008e86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f042 0201 	orr.w	r2, r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e72:	e008      	b.n	8008e86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0201 	orr.w	r2, r2, #1
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e000      	b.n	8008e88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	40010000 	.word	0x40010000
 8008e9c:	40000400 	.word	0x40000400
 8008ea0:	40000800 	.word	0x40000800
 8008ea4:	40000c00 	.word	0x40000c00
 8008ea8:	40010400 	.word	0x40010400
 8008eac:	40014000 	.word	0x40014000
 8008eb0:	40001800 	.word	0x40001800
 8008eb4:	00010007 	.word	0x00010007

08008eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d122      	bne.n	8008f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d11b      	bne.n	8008f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f06f 0202 	mvn.w	r2, #2
 8008ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f9d0 	bl	80092a0 <HAL_TIM_IC_CaptureCallback>
 8008f00:	e005      	b.n	8008f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9c2 	bl	800928c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f9d3 	bl	80092b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f003 0304 	and.w	r3, r3, #4
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d122      	bne.n	8008f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	d11b      	bne.n	8008f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f06f 0204 	mvn.w	r2, #4
 8008f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f9a6 	bl	80092a0 <HAL_TIM_IC_CaptureCallback>
 8008f54:	e005      	b.n	8008f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f998 	bl	800928c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f9a9 	bl	80092b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	f003 0308 	and.w	r3, r3, #8
 8008f72:	2b08      	cmp	r3, #8
 8008f74:	d122      	bne.n	8008fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f003 0308 	and.w	r3, r3, #8
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d11b      	bne.n	8008fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f06f 0208 	mvn.w	r2, #8
 8008f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2204      	movs	r2, #4
 8008f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f97c 	bl	80092a0 <HAL_TIM_IC_CaptureCallback>
 8008fa8:	e005      	b.n	8008fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f96e 	bl	800928c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f97f 	bl	80092b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f003 0310 	and.w	r3, r3, #16
 8008fc6:	2b10      	cmp	r3, #16
 8008fc8:	d122      	bne.n	8009010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f003 0310 	and.w	r3, r3, #16
 8008fd4:	2b10      	cmp	r3, #16
 8008fd6:	d11b      	bne.n	8009010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f06f 0210 	mvn.w	r2, #16
 8008fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f952 	bl	80092a0 <HAL_TIM_IC_CaptureCallback>
 8008ffc:	e005      	b.n	800900a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f944 	bl	800928c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f955 	bl	80092b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b01      	cmp	r3, #1
 800901c:	d10e      	bne.n	800903c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b01      	cmp	r3, #1
 800902a:	d107      	bne.n	800903c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f06f 0201 	mvn.w	r2, #1
 8009034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7fa fab0 	bl	800359c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009046:	2b80      	cmp	r3, #128	@ 0x80
 8009048:	d10e      	bne.n	8009068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009054:	2b80      	cmp	r3, #128	@ 0x80
 8009056:	d107      	bne.n	8009068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fb0c 	bl	8009680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009076:	d10e      	bne.n	8009096 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009082:	2b80      	cmp	r3, #128	@ 0x80
 8009084:	d107      	bne.n	8009096 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800908e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 faff 	bl	8009694 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a0:	2b40      	cmp	r3, #64	@ 0x40
 80090a2:	d10e      	bne.n	80090c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ae:	2b40      	cmp	r3, #64	@ 0x40
 80090b0:	d107      	bne.n	80090c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f903 	bl	80092c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	f003 0320 	and.w	r3, r3, #32
 80090cc:	2b20      	cmp	r3, #32
 80090ce:	d10e      	bne.n	80090ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	2b20      	cmp	r3, #32
 80090dc:	d107      	bne.n	80090ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f06f 0220 	mvn.w	r2, #32
 80090e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fabf 	bl	800966c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
	...

080090f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_TIM_ConfigClockSource+0x1c>
 8009110:	2302      	movs	r3, #2
 8009112:	e0b4      	b.n	800927e <HAL_TIM_ConfigClockSource+0x186>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2202      	movs	r2, #2
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	4b56      	ldr	r3, [pc, #344]	@ (8009288 <HAL_TIM_ConfigClockSource+0x190>)
 8009130:	4013      	ands	r3, r2
 8009132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800913a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800914c:	d03e      	beq.n	80091cc <HAL_TIM_ConfigClockSource+0xd4>
 800914e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009152:	f200 8087 	bhi.w	8009264 <HAL_TIM_ConfigClockSource+0x16c>
 8009156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800915a:	f000 8086 	beq.w	800926a <HAL_TIM_ConfigClockSource+0x172>
 800915e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009162:	d87f      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x16c>
 8009164:	2b70      	cmp	r3, #112	@ 0x70
 8009166:	d01a      	beq.n	800919e <HAL_TIM_ConfigClockSource+0xa6>
 8009168:	2b70      	cmp	r3, #112	@ 0x70
 800916a:	d87b      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x16c>
 800916c:	2b60      	cmp	r3, #96	@ 0x60
 800916e:	d050      	beq.n	8009212 <HAL_TIM_ConfigClockSource+0x11a>
 8009170:	2b60      	cmp	r3, #96	@ 0x60
 8009172:	d877      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x16c>
 8009174:	2b50      	cmp	r3, #80	@ 0x50
 8009176:	d03c      	beq.n	80091f2 <HAL_TIM_ConfigClockSource+0xfa>
 8009178:	2b50      	cmp	r3, #80	@ 0x50
 800917a:	d873      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x16c>
 800917c:	2b40      	cmp	r3, #64	@ 0x40
 800917e:	d058      	beq.n	8009232 <HAL_TIM_ConfigClockSource+0x13a>
 8009180:	2b40      	cmp	r3, #64	@ 0x40
 8009182:	d86f      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x16c>
 8009184:	2b30      	cmp	r3, #48	@ 0x30
 8009186:	d064      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x15a>
 8009188:	2b30      	cmp	r3, #48	@ 0x30
 800918a:	d86b      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x16c>
 800918c:	2b20      	cmp	r3, #32
 800918e:	d060      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x15a>
 8009190:	2b20      	cmp	r3, #32
 8009192:	d867      	bhi.n	8009264 <HAL_TIM_ConfigClockSource+0x16c>
 8009194:	2b00      	cmp	r3, #0
 8009196:	d05c      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x15a>
 8009198:	2b10      	cmp	r3, #16
 800919a:	d05a      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x15a>
 800919c:	e062      	b.n	8009264 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091ae:	f000 f9af 	bl	8009510 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80091c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	609a      	str	r2, [r3, #8]
      break;
 80091ca:	e04f      	b.n	800926c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091dc:	f000 f998 	bl	8009510 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689a      	ldr	r2, [r3, #8]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091ee:	609a      	str	r2, [r3, #8]
      break;
 80091f0:	e03c      	b.n	800926c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091fe:	461a      	mov	r2, r3
 8009200:	f000 f90c 	bl	800941c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2150      	movs	r1, #80	@ 0x50
 800920a:	4618      	mov	r0, r3
 800920c:	f000 f965 	bl	80094da <TIM_ITRx_SetConfig>
      break;
 8009210:	e02c      	b.n	800926c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800921e:	461a      	mov	r2, r3
 8009220:	f000 f92b 	bl	800947a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2160      	movs	r1, #96	@ 0x60
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f955 	bl	80094da <TIM_ITRx_SetConfig>
      break;
 8009230:	e01c      	b.n	800926c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800923e:	461a      	mov	r2, r3
 8009240:	f000 f8ec 	bl	800941c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2140      	movs	r1, #64	@ 0x40
 800924a:	4618      	mov	r0, r3
 800924c:	f000 f945 	bl	80094da <TIM_ITRx_SetConfig>
      break;
 8009250:	e00c      	b.n	800926c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4619      	mov	r1, r3
 800925c:	4610      	mov	r0, r2
 800925e:	f000 f93c 	bl	80094da <TIM_ITRx_SetConfig>
      break;
 8009262:	e003      	b.n	800926c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	73fb      	strb	r3, [r7, #15]
      break;
 8009268:	e000      	b.n	800926c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800926a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	fffeff88 	.word	0xfffeff88

0800928c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a40      	ldr	r2, [pc, #256]	@ (80093f0 <TIM_Base_SetConfig+0x114>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d013      	beq.n	800931c <TIM_Base_SetConfig+0x40>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092fa:	d00f      	beq.n	800931c <TIM_Base_SetConfig+0x40>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a3d      	ldr	r2, [pc, #244]	@ (80093f4 <TIM_Base_SetConfig+0x118>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d00b      	beq.n	800931c <TIM_Base_SetConfig+0x40>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a3c      	ldr	r2, [pc, #240]	@ (80093f8 <TIM_Base_SetConfig+0x11c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d007      	beq.n	800931c <TIM_Base_SetConfig+0x40>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a3b      	ldr	r2, [pc, #236]	@ (80093fc <TIM_Base_SetConfig+0x120>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d003      	beq.n	800931c <TIM_Base_SetConfig+0x40>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a3a      	ldr	r2, [pc, #232]	@ (8009400 <TIM_Base_SetConfig+0x124>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d108      	bne.n	800932e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	4313      	orrs	r3, r2
 800932c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a2f      	ldr	r2, [pc, #188]	@ (80093f0 <TIM_Base_SetConfig+0x114>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d02b      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800933c:	d027      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a2c      	ldr	r2, [pc, #176]	@ (80093f4 <TIM_Base_SetConfig+0x118>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d023      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a2b      	ldr	r2, [pc, #172]	@ (80093f8 <TIM_Base_SetConfig+0x11c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d01f      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a2a      	ldr	r2, [pc, #168]	@ (80093fc <TIM_Base_SetConfig+0x120>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d01b      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a29      	ldr	r2, [pc, #164]	@ (8009400 <TIM_Base_SetConfig+0x124>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d017      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a28      	ldr	r2, [pc, #160]	@ (8009404 <TIM_Base_SetConfig+0x128>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d013      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a27      	ldr	r2, [pc, #156]	@ (8009408 <TIM_Base_SetConfig+0x12c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d00f      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a26      	ldr	r2, [pc, #152]	@ (800940c <TIM_Base_SetConfig+0x130>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d00b      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a25      	ldr	r2, [pc, #148]	@ (8009410 <TIM_Base_SetConfig+0x134>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d007      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a24      	ldr	r2, [pc, #144]	@ (8009414 <TIM_Base_SetConfig+0x138>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d003      	beq.n	800938e <TIM_Base_SetConfig+0xb2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a23      	ldr	r2, [pc, #140]	@ (8009418 <TIM_Base_SetConfig+0x13c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d108      	bne.n	80093a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	4313      	orrs	r3, r2
 800939e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a0a      	ldr	r2, [pc, #40]	@ (80093f0 <TIM_Base_SetConfig+0x114>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d003      	beq.n	80093d4 <TIM_Base_SetConfig+0xf8>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009400 <TIM_Base_SetConfig+0x124>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d103      	bne.n	80093dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	691a      	ldr	r2, [r3, #16]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	615a      	str	r2, [r3, #20]
}
 80093e2:	bf00      	nop
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	40010000 	.word	0x40010000
 80093f4:	40000400 	.word	0x40000400
 80093f8:	40000800 	.word	0x40000800
 80093fc:	40000c00 	.word	0x40000c00
 8009400:	40010400 	.word	0x40010400
 8009404:	40014000 	.word	0x40014000
 8009408:	40014400 	.word	0x40014400
 800940c:	40014800 	.word	0x40014800
 8009410:	40001800 	.word	0x40001800
 8009414:	40001c00 	.word	0x40001c00
 8009418:	40002000 	.word	0x40002000

0800941c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6a1b      	ldr	r3, [r3, #32]
 800942c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	f023 0201 	bic.w	r2, r3, #1
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	4313      	orrs	r3, r2
 8009450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f023 030a 	bic.w	r3, r3, #10
 8009458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	4313      	orrs	r3, r2
 8009460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	621a      	str	r2, [r3, #32]
}
 800946e:	bf00      	nop
 8009470:	371c      	adds	r7, #28
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800947a:	b480      	push	{r7}
 800947c:	b087      	sub	sp, #28
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	f023 0210 	bic.w	r2, r3, #16
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80094a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	031b      	lsls	r3, r3, #12
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80094b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4313      	orrs	r3, r2
 80094c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	621a      	str	r2, [r3, #32]
}
 80094ce:	bf00      	nop
 80094d0:	371c      	adds	r7, #28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094da:	b480      	push	{r7}
 80094dc:	b085      	sub	sp, #20
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f043 0307 	orr.w	r3, r3, #7
 80094fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	609a      	str	r2, [r3, #8]
}
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800952a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	021a      	lsls	r2, r3, #8
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	431a      	orrs	r2, r3
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	4313      	orrs	r3, r2
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	4313      	orrs	r3, r2
 800953c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	609a      	str	r2, [r3, #8]
}
 8009544:	bf00      	nop
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009560:	2b01      	cmp	r3, #1
 8009562:	d101      	bne.n	8009568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009564:	2302      	movs	r3, #2
 8009566:	e06d      	b.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a30      	ldr	r2, [pc, #192]	@ (8009650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d004      	beq.n	800959c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a2f      	ldr	r2, [pc, #188]	@ (8009654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d108      	bne.n	80095ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a20      	ldr	r2, [pc, #128]	@ (8009650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d022      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095da:	d01d      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009658 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d018      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a1c      	ldr	r2, [pc, #112]	@ (800965c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d013      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a1a      	ldr	r2, [pc, #104]	@ (8009660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d00e      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a15      	ldr	r2, [pc, #84]	@ (8009654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d009      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a16      	ldr	r2, [pc, #88]	@ (8009664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d004      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a15      	ldr	r2, [pc, #84]	@ (8009668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d10c      	bne.n	8009632 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800961e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	4313      	orrs	r3, r2
 8009628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	40010000 	.word	0x40010000
 8009654:	40010400 	.word	0x40010400
 8009658:	40000400 	.word	0x40000400
 800965c:	40000800 	.word	0x40000800
 8009660:	40000c00 	.word	0x40000c00
 8009664:	40014000 	.word	0x40014000
 8009668:	40001800 	.word	0x40001800

0800966c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e040      	b.n	800973c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d106      	bne.n	80096d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7fb f948 	bl	8004960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2224      	movs	r2, #36	@ 0x24
 80096d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0201 	bic.w	r2, r2, #1
 80096e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f8b0 	bl	800984c <UART_SetConfig>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d101      	bne.n	80096f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e022      	b.n	800973c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fb08 	bl	8009d14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689a      	ldr	r2, [r3, #8]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0201 	orr.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fb8f 	bl	8009e58 <UART_CheckIdleState>
 800973a:	4603      	mov	r3, r0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08a      	sub	sp, #40	@ 0x28
 8009748:	af02      	add	r7, sp, #8
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	4613      	mov	r3, r2
 8009752:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009758:	2b20      	cmp	r3, #32
 800975a:	d171      	bne.n	8009840 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <HAL_UART_Transmit+0x24>
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e06a      	b.n	8009842 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2221      	movs	r2, #33	@ 0x21
 8009778:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800977a:	f7fb ff7f 	bl	800567c <HAL_GetTick>
 800977e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	88fa      	ldrh	r2, [r7, #6]
 8009784:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	88fa      	ldrh	r2, [r7, #6]
 800978c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009798:	d108      	bne.n	80097ac <HAL_UART_Transmit+0x68>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d104      	bne.n	80097ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	61bb      	str	r3, [r7, #24]
 80097aa:	e003      	b.n	80097b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097b4:	e02c      	b.n	8009810 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2200      	movs	r2, #0
 80097be:	2180      	movs	r1, #128	@ 0x80
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 fb80 	bl	8009ec6 <UART_WaitOnFlagUntilTimeout>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e038      	b.n	8009842 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10b      	bne.n	80097ee <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	3302      	adds	r3, #2
 80097ea:	61bb      	str	r3, [r7, #24]
 80097ec:	e007      	b.n	80097fe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	781a      	ldrb	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	3301      	adds	r3, #1
 80097fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009816:	b29b      	uxth	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1cc      	bne.n	80097b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2200      	movs	r2, #0
 8009824:	2140      	movs	r1, #64	@ 0x40
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 fb4d 	bl	8009ec6 <UART_WaitOnFlagUntilTimeout>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e005      	b.n	8009842 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2220      	movs	r2, #32
 800983a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	e000      	b.n	8009842 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009840:	2302      	movs	r3, #2
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	3720      	adds	r7, #32
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	431a      	orrs	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	4313      	orrs	r3, r2
 800986e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	4ba6      	ldr	r3, [pc, #664]	@ (8009b10 <UART_SetConfig+0x2c4>)
 8009878:	4013      	ands	r3, r2
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	6812      	ldr	r2, [r2, #0]
 800987e:	6979      	ldr	r1, [r7, #20]
 8009880:	430b      	orrs	r3, r1
 8009882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	430a      	orrs	r2, r1
 8009898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a94      	ldr	r2, [pc, #592]	@ (8009b14 <UART_SetConfig+0x2c8>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d120      	bne.n	800990a <UART_SetConfig+0xbe>
 80098c8:	4b93      	ldr	r3, [pc, #588]	@ (8009b18 <UART_SetConfig+0x2cc>)
 80098ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ce:	f003 0303 	and.w	r3, r3, #3
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	d816      	bhi.n	8009904 <UART_SetConfig+0xb8>
 80098d6:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <UART_SetConfig+0x90>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	080098ed 	.word	0x080098ed
 80098e0:	080098f9 	.word	0x080098f9
 80098e4:	080098f3 	.word	0x080098f3
 80098e8:	080098ff 	.word	0x080098ff
 80098ec:	2301      	movs	r3, #1
 80098ee:	77fb      	strb	r3, [r7, #31]
 80098f0:	e150      	b.n	8009b94 <UART_SetConfig+0x348>
 80098f2:	2302      	movs	r3, #2
 80098f4:	77fb      	strb	r3, [r7, #31]
 80098f6:	e14d      	b.n	8009b94 <UART_SetConfig+0x348>
 80098f8:	2304      	movs	r3, #4
 80098fa:	77fb      	strb	r3, [r7, #31]
 80098fc:	e14a      	b.n	8009b94 <UART_SetConfig+0x348>
 80098fe:	2308      	movs	r3, #8
 8009900:	77fb      	strb	r3, [r7, #31]
 8009902:	e147      	b.n	8009b94 <UART_SetConfig+0x348>
 8009904:	2310      	movs	r3, #16
 8009906:	77fb      	strb	r3, [r7, #31]
 8009908:	e144      	b.n	8009b94 <UART_SetConfig+0x348>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a83      	ldr	r2, [pc, #524]	@ (8009b1c <UART_SetConfig+0x2d0>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d132      	bne.n	800997a <UART_SetConfig+0x12e>
 8009914:	4b80      	ldr	r3, [pc, #512]	@ (8009b18 <UART_SetConfig+0x2cc>)
 8009916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991a:	f003 030c 	and.w	r3, r3, #12
 800991e:	2b0c      	cmp	r3, #12
 8009920:	d828      	bhi.n	8009974 <UART_SetConfig+0x128>
 8009922:	a201      	add	r2, pc, #4	@ (adr r2, 8009928 <UART_SetConfig+0xdc>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	0800995d 	.word	0x0800995d
 800992c:	08009975 	.word	0x08009975
 8009930:	08009975 	.word	0x08009975
 8009934:	08009975 	.word	0x08009975
 8009938:	08009969 	.word	0x08009969
 800993c:	08009975 	.word	0x08009975
 8009940:	08009975 	.word	0x08009975
 8009944:	08009975 	.word	0x08009975
 8009948:	08009963 	.word	0x08009963
 800994c:	08009975 	.word	0x08009975
 8009950:	08009975 	.word	0x08009975
 8009954:	08009975 	.word	0x08009975
 8009958:	0800996f 	.word	0x0800996f
 800995c:	2300      	movs	r3, #0
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	e118      	b.n	8009b94 <UART_SetConfig+0x348>
 8009962:	2302      	movs	r3, #2
 8009964:	77fb      	strb	r3, [r7, #31]
 8009966:	e115      	b.n	8009b94 <UART_SetConfig+0x348>
 8009968:	2304      	movs	r3, #4
 800996a:	77fb      	strb	r3, [r7, #31]
 800996c:	e112      	b.n	8009b94 <UART_SetConfig+0x348>
 800996e:	2308      	movs	r3, #8
 8009970:	77fb      	strb	r3, [r7, #31]
 8009972:	e10f      	b.n	8009b94 <UART_SetConfig+0x348>
 8009974:	2310      	movs	r3, #16
 8009976:	77fb      	strb	r3, [r7, #31]
 8009978:	e10c      	b.n	8009b94 <UART_SetConfig+0x348>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a68      	ldr	r2, [pc, #416]	@ (8009b20 <UART_SetConfig+0x2d4>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d120      	bne.n	80099c6 <UART_SetConfig+0x17a>
 8009984:	4b64      	ldr	r3, [pc, #400]	@ (8009b18 <UART_SetConfig+0x2cc>)
 8009986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800998a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800998e:	2b30      	cmp	r3, #48	@ 0x30
 8009990:	d013      	beq.n	80099ba <UART_SetConfig+0x16e>
 8009992:	2b30      	cmp	r3, #48	@ 0x30
 8009994:	d814      	bhi.n	80099c0 <UART_SetConfig+0x174>
 8009996:	2b20      	cmp	r3, #32
 8009998:	d009      	beq.n	80099ae <UART_SetConfig+0x162>
 800999a:	2b20      	cmp	r3, #32
 800999c:	d810      	bhi.n	80099c0 <UART_SetConfig+0x174>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <UART_SetConfig+0x15c>
 80099a2:	2b10      	cmp	r3, #16
 80099a4:	d006      	beq.n	80099b4 <UART_SetConfig+0x168>
 80099a6:	e00b      	b.n	80099c0 <UART_SetConfig+0x174>
 80099a8:	2300      	movs	r3, #0
 80099aa:	77fb      	strb	r3, [r7, #31]
 80099ac:	e0f2      	b.n	8009b94 <UART_SetConfig+0x348>
 80099ae:	2302      	movs	r3, #2
 80099b0:	77fb      	strb	r3, [r7, #31]
 80099b2:	e0ef      	b.n	8009b94 <UART_SetConfig+0x348>
 80099b4:	2304      	movs	r3, #4
 80099b6:	77fb      	strb	r3, [r7, #31]
 80099b8:	e0ec      	b.n	8009b94 <UART_SetConfig+0x348>
 80099ba:	2308      	movs	r3, #8
 80099bc:	77fb      	strb	r3, [r7, #31]
 80099be:	e0e9      	b.n	8009b94 <UART_SetConfig+0x348>
 80099c0:	2310      	movs	r3, #16
 80099c2:	77fb      	strb	r3, [r7, #31]
 80099c4:	e0e6      	b.n	8009b94 <UART_SetConfig+0x348>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a56      	ldr	r2, [pc, #344]	@ (8009b24 <UART_SetConfig+0x2d8>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d120      	bne.n	8009a12 <UART_SetConfig+0x1c6>
 80099d0:	4b51      	ldr	r3, [pc, #324]	@ (8009b18 <UART_SetConfig+0x2cc>)
 80099d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80099da:	2bc0      	cmp	r3, #192	@ 0xc0
 80099dc:	d013      	beq.n	8009a06 <UART_SetConfig+0x1ba>
 80099de:	2bc0      	cmp	r3, #192	@ 0xc0
 80099e0:	d814      	bhi.n	8009a0c <UART_SetConfig+0x1c0>
 80099e2:	2b80      	cmp	r3, #128	@ 0x80
 80099e4:	d009      	beq.n	80099fa <UART_SetConfig+0x1ae>
 80099e6:	2b80      	cmp	r3, #128	@ 0x80
 80099e8:	d810      	bhi.n	8009a0c <UART_SetConfig+0x1c0>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <UART_SetConfig+0x1a8>
 80099ee:	2b40      	cmp	r3, #64	@ 0x40
 80099f0:	d006      	beq.n	8009a00 <UART_SetConfig+0x1b4>
 80099f2:	e00b      	b.n	8009a0c <UART_SetConfig+0x1c0>
 80099f4:	2300      	movs	r3, #0
 80099f6:	77fb      	strb	r3, [r7, #31]
 80099f8:	e0cc      	b.n	8009b94 <UART_SetConfig+0x348>
 80099fa:	2302      	movs	r3, #2
 80099fc:	77fb      	strb	r3, [r7, #31]
 80099fe:	e0c9      	b.n	8009b94 <UART_SetConfig+0x348>
 8009a00:	2304      	movs	r3, #4
 8009a02:	77fb      	strb	r3, [r7, #31]
 8009a04:	e0c6      	b.n	8009b94 <UART_SetConfig+0x348>
 8009a06:	2308      	movs	r3, #8
 8009a08:	77fb      	strb	r3, [r7, #31]
 8009a0a:	e0c3      	b.n	8009b94 <UART_SetConfig+0x348>
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	77fb      	strb	r3, [r7, #31]
 8009a10:	e0c0      	b.n	8009b94 <UART_SetConfig+0x348>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a44      	ldr	r2, [pc, #272]	@ (8009b28 <UART_SetConfig+0x2dc>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d125      	bne.n	8009a68 <UART_SetConfig+0x21c>
 8009a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8009b18 <UART_SetConfig+0x2cc>)
 8009a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a2a:	d017      	beq.n	8009a5c <UART_SetConfig+0x210>
 8009a2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a30:	d817      	bhi.n	8009a62 <UART_SetConfig+0x216>
 8009a32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a36:	d00b      	beq.n	8009a50 <UART_SetConfig+0x204>
 8009a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a3c:	d811      	bhi.n	8009a62 <UART_SetConfig+0x216>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <UART_SetConfig+0x1fe>
 8009a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a46:	d006      	beq.n	8009a56 <UART_SetConfig+0x20a>
 8009a48:	e00b      	b.n	8009a62 <UART_SetConfig+0x216>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	77fb      	strb	r3, [r7, #31]
 8009a4e:	e0a1      	b.n	8009b94 <UART_SetConfig+0x348>
 8009a50:	2302      	movs	r3, #2
 8009a52:	77fb      	strb	r3, [r7, #31]
 8009a54:	e09e      	b.n	8009b94 <UART_SetConfig+0x348>
 8009a56:	2304      	movs	r3, #4
 8009a58:	77fb      	strb	r3, [r7, #31]
 8009a5a:	e09b      	b.n	8009b94 <UART_SetConfig+0x348>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	77fb      	strb	r3, [r7, #31]
 8009a60:	e098      	b.n	8009b94 <UART_SetConfig+0x348>
 8009a62:	2310      	movs	r3, #16
 8009a64:	77fb      	strb	r3, [r7, #31]
 8009a66:	e095      	b.n	8009b94 <UART_SetConfig+0x348>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8009b2c <UART_SetConfig+0x2e0>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d125      	bne.n	8009abe <UART_SetConfig+0x272>
 8009a72:	4b29      	ldr	r3, [pc, #164]	@ (8009b18 <UART_SetConfig+0x2cc>)
 8009a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a80:	d017      	beq.n	8009ab2 <UART_SetConfig+0x266>
 8009a82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a86:	d817      	bhi.n	8009ab8 <UART_SetConfig+0x26c>
 8009a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a8c:	d00b      	beq.n	8009aa6 <UART_SetConfig+0x25a>
 8009a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a92:	d811      	bhi.n	8009ab8 <UART_SetConfig+0x26c>
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d003      	beq.n	8009aa0 <UART_SetConfig+0x254>
 8009a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a9c:	d006      	beq.n	8009aac <UART_SetConfig+0x260>
 8009a9e:	e00b      	b.n	8009ab8 <UART_SetConfig+0x26c>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	77fb      	strb	r3, [r7, #31]
 8009aa4:	e076      	b.n	8009b94 <UART_SetConfig+0x348>
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	77fb      	strb	r3, [r7, #31]
 8009aaa:	e073      	b.n	8009b94 <UART_SetConfig+0x348>
 8009aac:	2304      	movs	r3, #4
 8009aae:	77fb      	strb	r3, [r7, #31]
 8009ab0:	e070      	b.n	8009b94 <UART_SetConfig+0x348>
 8009ab2:	2308      	movs	r3, #8
 8009ab4:	77fb      	strb	r3, [r7, #31]
 8009ab6:	e06d      	b.n	8009b94 <UART_SetConfig+0x348>
 8009ab8:	2310      	movs	r3, #16
 8009aba:	77fb      	strb	r3, [r7, #31]
 8009abc:	e06a      	b.n	8009b94 <UART_SetConfig+0x348>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8009b30 <UART_SetConfig+0x2e4>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d138      	bne.n	8009b3a <UART_SetConfig+0x2ee>
 8009ac8:	4b13      	ldr	r3, [pc, #76]	@ (8009b18 <UART_SetConfig+0x2cc>)
 8009aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ace:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009ad2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ad6:	d017      	beq.n	8009b08 <UART_SetConfig+0x2bc>
 8009ad8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009adc:	d82a      	bhi.n	8009b34 <UART_SetConfig+0x2e8>
 8009ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ae2:	d00b      	beq.n	8009afc <UART_SetConfig+0x2b0>
 8009ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ae8:	d824      	bhi.n	8009b34 <UART_SetConfig+0x2e8>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <UART_SetConfig+0x2aa>
 8009aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009af2:	d006      	beq.n	8009b02 <UART_SetConfig+0x2b6>
 8009af4:	e01e      	b.n	8009b34 <UART_SetConfig+0x2e8>
 8009af6:	2300      	movs	r3, #0
 8009af8:	77fb      	strb	r3, [r7, #31]
 8009afa:	e04b      	b.n	8009b94 <UART_SetConfig+0x348>
 8009afc:	2302      	movs	r3, #2
 8009afe:	77fb      	strb	r3, [r7, #31]
 8009b00:	e048      	b.n	8009b94 <UART_SetConfig+0x348>
 8009b02:	2304      	movs	r3, #4
 8009b04:	77fb      	strb	r3, [r7, #31]
 8009b06:	e045      	b.n	8009b94 <UART_SetConfig+0x348>
 8009b08:	2308      	movs	r3, #8
 8009b0a:	77fb      	strb	r3, [r7, #31]
 8009b0c:	e042      	b.n	8009b94 <UART_SetConfig+0x348>
 8009b0e:	bf00      	nop
 8009b10:	efff69f3 	.word	0xefff69f3
 8009b14:	40011000 	.word	0x40011000
 8009b18:	40023800 	.word	0x40023800
 8009b1c:	40004400 	.word	0x40004400
 8009b20:	40004800 	.word	0x40004800
 8009b24:	40004c00 	.word	0x40004c00
 8009b28:	40005000 	.word	0x40005000
 8009b2c:	40011400 	.word	0x40011400
 8009b30:	40007800 	.word	0x40007800
 8009b34:	2310      	movs	r3, #16
 8009b36:	77fb      	strb	r3, [r7, #31]
 8009b38:	e02c      	b.n	8009b94 <UART_SetConfig+0x348>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a72      	ldr	r2, [pc, #456]	@ (8009d08 <UART_SetConfig+0x4bc>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d125      	bne.n	8009b90 <UART_SetConfig+0x344>
 8009b44:	4b71      	ldr	r3, [pc, #452]	@ (8009d0c <UART_SetConfig+0x4c0>)
 8009b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009b4e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009b52:	d017      	beq.n	8009b84 <UART_SetConfig+0x338>
 8009b54:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009b58:	d817      	bhi.n	8009b8a <UART_SetConfig+0x33e>
 8009b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b5e:	d00b      	beq.n	8009b78 <UART_SetConfig+0x32c>
 8009b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b64:	d811      	bhi.n	8009b8a <UART_SetConfig+0x33e>
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d003      	beq.n	8009b72 <UART_SetConfig+0x326>
 8009b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b6e:	d006      	beq.n	8009b7e <UART_SetConfig+0x332>
 8009b70:	e00b      	b.n	8009b8a <UART_SetConfig+0x33e>
 8009b72:	2300      	movs	r3, #0
 8009b74:	77fb      	strb	r3, [r7, #31]
 8009b76:	e00d      	b.n	8009b94 <UART_SetConfig+0x348>
 8009b78:	2302      	movs	r3, #2
 8009b7a:	77fb      	strb	r3, [r7, #31]
 8009b7c:	e00a      	b.n	8009b94 <UART_SetConfig+0x348>
 8009b7e:	2304      	movs	r3, #4
 8009b80:	77fb      	strb	r3, [r7, #31]
 8009b82:	e007      	b.n	8009b94 <UART_SetConfig+0x348>
 8009b84:	2308      	movs	r3, #8
 8009b86:	77fb      	strb	r3, [r7, #31]
 8009b88:	e004      	b.n	8009b94 <UART_SetConfig+0x348>
 8009b8a:	2310      	movs	r3, #16
 8009b8c:	77fb      	strb	r3, [r7, #31]
 8009b8e:	e001      	b.n	8009b94 <UART_SetConfig+0x348>
 8009b90:	2310      	movs	r3, #16
 8009b92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b9c:	d15b      	bne.n	8009c56 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009b9e:	7ffb      	ldrb	r3, [r7, #31]
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d828      	bhi.n	8009bf6 <UART_SetConfig+0x3aa>
 8009ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8009bac <UART_SetConfig+0x360>)
 8009ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009baa:	bf00      	nop
 8009bac:	08009bd1 	.word	0x08009bd1
 8009bb0:	08009bd9 	.word	0x08009bd9
 8009bb4:	08009be1 	.word	0x08009be1
 8009bb8:	08009bf7 	.word	0x08009bf7
 8009bbc:	08009be7 	.word	0x08009be7
 8009bc0:	08009bf7 	.word	0x08009bf7
 8009bc4:	08009bf7 	.word	0x08009bf7
 8009bc8:	08009bf7 	.word	0x08009bf7
 8009bcc:	08009bef 	.word	0x08009bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bd0:	f7fe fbf2 	bl	80083b8 <HAL_RCC_GetPCLK1Freq>
 8009bd4:	61b8      	str	r0, [r7, #24]
        break;
 8009bd6:	e013      	b.n	8009c00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bd8:	f7fe fc02 	bl	80083e0 <HAL_RCC_GetPCLK2Freq>
 8009bdc:	61b8      	str	r0, [r7, #24]
        break;
 8009bde:	e00f      	b.n	8009c00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009be0:	4b4b      	ldr	r3, [pc, #300]	@ (8009d10 <UART_SetConfig+0x4c4>)
 8009be2:	61bb      	str	r3, [r7, #24]
        break;
 8009be4:	e00c      	b.n	8009c00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009be6:	f7fe fad5 	bl	8008194 <HAL_RCC_GetSysClockFreq>
 8009bea:	61b8      	str	r0, [r7, #24]
        break;
 8009bec:	e008      	b.n	8009c00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bf2:	61bb      	str	r3, [r7, #24]
        break;
 8009bf4:	e004      	b.n	8009c00 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	77bb      	strb	r3, [r7, #30]
        break;
 8009bfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d074      	beq.n	8009cf0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	005a      	lsls	r2, r3, #1
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	085b      	lsrs	r3, r3, #1
 8009c10:	441a      	add	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2b0f      	cmp	r3, #15
 8009c20:	d916      	bls.n	8009c50 <UART_SetConfig+0x404>
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c28:	d212      	bcs.n	8009c50 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	f023 030f 	bic.w	r3, r3, #15
 8009c32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	085b      	lsrs	r3, r3, #1
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	89fb      	ldrh	r3, [r7, #14]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	89fa      	ldrh	r2, [r7, #14]
 8009c4c:	60da      	str	r2, [r3, #12]
 8009c4e:	e04f      	b.n	8009cf0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	77bb      	strb	r3, [r7, #30]
 8009c54:	e04c      	b.n	8009cf0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c56:	7ffb      	ldrb	r3, [r7, #31]
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d828      	bhi.n	8009cae <UART_SetConfig+0x462>
 8009c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c64 <UART_SetConfig+0x418>)
 8009c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c62:	bf00      	nop
 8009c64:	08009c89 	.word	0x08009c89
 8009c68:	08009c91 	.word	0x08009c91
 8009c6c:	08009c99 	.word	0x08009c99
 8009c70:	08009caf 	.word	0x08009caf
 8009c74:	08009c9f 	.word	0x08009c9f
 8009c78:	08009caf 	.word	0x08009caf
 8009c7c:	08009caf 	.word	0x08009caf
 8009c80:	08009caf 	.word	0x08009caf
 8009c84:	08009ca7 	.word	0x08009ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c88:	f7fe fb96 	bl	80083b8 <HAL_RCC_GetPCLK1Freq>
 8009c8c:	61b8      	str	r0, [r7, #24]
        break;
 8009c8e:	e013      	b.n	8009cb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c90:	f7fe fba6 	bl	80083e0 <HAL_RCC_GetPCLK2Freq>
 8009c94:	61b8      	str	r0, [r7, #24]
        break;
 8009c96:	e00f      	b.n	8009cb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c98:	4b1d      	ldr	r3, [pc, #116]	@ (8009d10 <UART_SetConfig+0x4c4>)
 8009c9a:	61bb      	str	r3, [r7, #24]
        break;
 8009c9c:	e00c      	b.n	8009cb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c9e:	f7fe fa79 	bl	8008194 <HAL_RCC_GetSysClockFreq>
 8009ca2:	61b8      	str	r0, [r7, #24]
        break;
 8009ca4:	e008      	b.n	8009cb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009caa:	61bb      	str	r3, [r7, #24]
        break;
 8009cac:	e004      	b.n	8009cb8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	77bb      	strb	r3, [r7, #30]
        break;
 8009cb6:	bf00      	nop
    }

    if (pclk != 0U)
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d018      	beq.n	8009cf0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	085a      	lsrs	r2, r3, #1
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	441a      	add	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2b0f      	cmp	r3, #15
 8009cd6:	d909      	bls.n	8009cec <UART_SetConfig+0x4a0>
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cde:	d205      	bcs.n	8009cec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	60da      	str	r2, [r3, #12]
 8009cea:	e001      	b.n	8009cf0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009cfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3720      	adds	r7, #32
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	40007c00 	.word	0x40007c00
 8009d0c:	40023800 	.word	0x40023800
 8009d10:	00f42400 	.word	0x00f42400

08009d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00a      	beq.n	8009d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d42:	f003 0302 	and.w	r3, r3, #2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	430a      	orrs	r2, r1
 8009d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d64:	f003 0304 	and.w	r3, r3, #4
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00a      	beq.n	8009d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d86:	f003 0308 	and.w	r3, r3, #8
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da8:	f003 0310 	and.w	r3, r3, #16
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dca:	f003 0320 	and.w	r3, r3, #32
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d01a      	beq.n	8009e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e12:	d10a      	bne.n	8009e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00a      	beq.n	8009e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	605a      	str	r2, [r3, #4]
  }
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af02      	add	r7, sp, #8
 8009e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e68:	f7fb fc08 	bl	800567c <HAL_GetTick>
 8009e6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0308 	and.w	r3, r3, #8
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d10e      	bne.n	8009e9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f81b 	bl	8009ec6 <UART_WaitOnFlagUntilTimeout>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e011      	b.n	8009ebe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b09c      	sub	sp, #112	@ 0x70
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	603b      	str	r3, [r7, #0]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ed6:	e0a7      	b.n	800a028 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ede:	f000 80a3 	beq.w	800a028 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ee2:	f7fb fbcb 	bl	800567c <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d302      	bcc.n	8009ef8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009ef2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d13f      	bne.n	8009f78 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f00:	e853 3f00 	ldrex	r3, [r3]
 8009f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009f06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f08:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009f0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f18:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e6      	bne.n	8009ef8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3308      	adds	r3, #8
 8009f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3c:	f023 0301 	bic.w	r3, r3, #1
 8009f40:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3308      	adds	r3, #8
 8009f48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009f4a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009f4c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f52:	e841 2300 	strex	r3, r2, [r1]
 8009f56:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1e5      	bne.n	8009f2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2220      	movs	r2, #32
 8009f62:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e068      	b.n	800a04a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 0304 	and.w	r3, r3, #4
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d050      	beq.n	800a028 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f94:	d148      	bne.n	800a028 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009fb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fc0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fc6:	e841 2300 	strex	r3, r2, [r1]
 8009fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1e6      	bne.n	8009fa0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	e853 3f00 	ldrex	r3, [r3]
 8009fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	f023 0301 	bic.w	r3, r3, #1
 8009fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3308      	adds	r3, #8
 8009ff0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009ff2:	623a      	str	r2, [r7, #32]
 8009ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff6:	69f9      	ldr	r1, [r7, #28]
 8009ff8:	6a3a      	ldr	r2, [r7, #32]
 8009ffa:	e841 2300 	strex	r3, r2, [r1]
 8009ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1e5      	bne.n	8009fd2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2220      	movs	r2, #32
 800a00a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2220      	movs	r2, #32
 800a010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2220      	movs	r2, #32
 800a018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a024:	2303      	movs	r3, #3
 800a026:	e010      	b.n	800a04a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	69da      	ldr	r2, [r3, #28]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	4013      	ands	r3, r2
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	429a      	cmp	r2, r3
 800a036:	bf0c      	ite	eq
 800a038:	2301      	moveq	r3, #1
 800a03a:	2300      	movne	r3, #0
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	429a      	cmp	r2, r3
 800a044:	f43f af48 	beq.w	8009ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3770      	adds	r7, #112	@ 0x70
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800a05a:	4ba5      	ldr	r3, [pc, #660]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a05c:	220a      	movs	r2, #10
 800a05e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800a060:	4ba3      	ldr	r3, [pc, #652]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a062:	2200      	movs	r2, #0
 800a064:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 800a066:	4ba2      	ldr	r3, [pc, #648]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a068:	2202      	movs	r2, #2
 800a06a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800a06c:	4ba0      	ldr	r3, [pc, #640]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a06e:	220a      	movs	r2, #10
 800a070:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a072:	4ba0      	ldr	r3, [pc, #640]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a074:	22ff      	movs	r2, #255	@ 0xff
 800a076:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a078:	4b9e      	ldr	r3, [pc, #632]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a07a:	22ff      	movs	r2, #255	@ 0xff
 800a07c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a07e:	4b9d      	ldr	r3, [pc, #628]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a080:	22ff      	movs	r2, #255	@ 0xff
 800a082:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a084:	4b9b      	ldr	r3, [pc, #620]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a086:	2200      	movs	r2, #0
 800a088:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800a08a:	4b9b      	ldr	r3, [pc, #620]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a08c:	220a      	movs	r2, #10
 800a08e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800a090:	4b99      	ldr	r3, [pc, #612]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a092:	2200      	movs	r2, #0
 800a094:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 800a096:	4b98      	ldr	r3, [pc, #608]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a098:	2202      	movs	r2, #2
 800a09a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 15;
 800a09c:	4b96      	ldr	r3, [pc, #600]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a09e:	220f      	movs	r2, #15
 800a0a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  IP_ADDRESS[0] = ipv4_address[0];
 800a0a2:	4b96      	ldr	r3, [pc, #600]	@ (800a2fc <MX_LWIP_Init+0x2a8>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	4b91      	ldr	r3, [pc, #580]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a0aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = ipv4_address[1];
 800a0ac:	4b93      	ldr	r3, [pc, #588]	@ (800a2fc <MX_LWIP_Init+0x2a8>)
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	4b8f      	ldr	r3, [pc, #572]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a0b4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = ipv4_address[2];
 800a0b6:	4b91      	ldr	r3, [pc, #580]	@ (800a2fc <MX_LWIP_Init+0x2a8>)
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	4b8c      	ldr	r3, [pc, #560]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a0be:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = ipv4_address[3];
 800a0c0:	4b8e      	ldr	r3, [pc, #568]	@ (800a2fc <MX_LWIP_Init+0x2a8>)
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	4b8a      	ldr	r3, [pc, #552]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a0c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = mask_address[0];
 800a0ca:	4b8d      	ldr	r3, [pc, #564]	@ (800a300 <MX_LWIP_Init+0x2ac>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	4b88      	ldr	r3, [pc, #544]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a0d2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = mask_address[1];
 800a0d4:	4b8a      	ldr	r3, [pc, #552]	@ (800a300 <MX_LWIP_Init+0x2ac>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	4b86      	ldr	r3, [pc, #536]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a0dc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = mask_address[2];
 800a0de:	4b88      	ldr	r3, [pc, #544]	@ (800a300 <MX_LWIP_Init+0x2ac>)
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	4b83      	ldr	r3, [pc, #524]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a0e6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = mask_address[3];
 800a0e8:	4b85      	ldr	r3, [pc, #532]	@ (800a300 <MX_LWIP_Init+0x2ac>)
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	4b81      	ldr	r3, [pc, #516]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a0f0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = gateway_address[0];
 800a0f2:	4b84      	ldr	r3, [pc, #528]	@ (800a304 <MX_LWIP_Init+0x2b0>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	4b7f      	ldr	r3, [pc, #508]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a0fa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = gateway_address[1];
 800a0fc:	4b81      	ldr	r3, [pc, #516]	@ (800a304 <MX_LWIP_Init+0x2b0>)
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	b2da      	uxtb	r2, r3
 800a102:	4b7d      	ldr	r3, [pc, #500]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a104:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = gateway_address[2];
 800a106:	4b7f      	ldr	r3, [pc, #508]	@ (800a304 <MX_LWIP_Init+0x2b0>)
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	4b7a      	ldr	r3, [pc, #488]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a10e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = gateway_address[3];
 800a110:	4b7c      	ldr	r3, [pc, #496]	@ (800a304 <MX_LWIP_Init+0x2b0>)
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	b2da      	uxtb	r2, r3
 800a116:	4b78      	ldr	r3, [pc, #480]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a118:	70da      	strb	r2, [r3, #3]
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800a11a:	f001 fd87 	bl	800bc2c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a11e:	4b74      	ldr	r3, [pc, #464]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	061a      	lsls	r2, r3, #24
 800a124:	4b72      	ldr	r3, [pc, #456]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a126:	785b      	ldrb	r3, [r3, #1]
 800a128:	041b      	lsls	r3, r3, #16
 800a12a:	431a      	orrs	r2, r3
 800a12c:	4b70      	ldr	r3, [pc, #448]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a12e:	789b      	ldrb	r3, [r3, #2]
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	4313      	orrs	r3, r2
 800a134:	4a6e      	ldr	r2, [pc, #440]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a136:	78d2      	ldrb	r2, [r2, #3]
 800a138:	4313      	orrs	r3, r2
 800a13a:	061a      	lsls	r2, r3, #24
 800a13c:	4b6c      	ldr	r3, [pc, #432]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	0619      	lsls	r1, r3, #24
 800a142:	4b6b      	ldr	r3, [pc, #428]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a144:	785b      	ldrb	r3, [r3, #1]
 800a146:	041b      	lsls	r3, r3, #16
 800a148:	4319      	orrs	r1, r3
 800a14a:	4b69      	ldr	r3, [pc, #420]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a14c:	789b      	ldrb	r3, [r3, #2]
 800a14e:	021b      	lsls	r3, r3, #8
 800a150:	430b      	orrs	r3, r1
 800a152:	4967      	ldr	r1, [pc, #412]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a154:	78c9      	ldrb	r1, [r1, #3]
 800a156:	430b      	orrs	r3, r1
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a15e:	431a      	orrs	r2, r3
 800a160:	4b63      	ldr	r3, [pc, #396]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	0619      	lsls	r1, r3, #24
 800a166:	4b62      	ldr	r3, [pc, #392]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	041b      	lsls	r3, r3, #16
 800a16c:	4319      	orrs	r1, r3
 800a16e:	4b60      	ldr	r3, [pc, #384]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a170:	789b      	ldrb	r3, [r3, #2]
 800a172:	021b      	lsls	r3, r3, #8
 800a174:	430b      	orrs	r3, r1
 800a176:	495e      	ldr	r1, [pc, #376]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a178:	78c9      	ldrb	r1, [r1, #3]
 800a17a:	430b      	orrs	r3, r1
 800a17c:	0a1b      	lsrs	r3, r3, #8
 800a17e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a182:	431a      	orrs	r2, r3
 800a184:	4b5a      	ldr	r3, [pc, #360]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	0619      	lsls	r1, r3, #24
 800a18a:	4b59      	ldr	r3, [pc, #356]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a18c:	785b      	ldrb	r3, [r3, #1]
 800a18e:	041b      	lsls	r3, r3, #16
 800a190:	4319      	orrs	r1, r3
 800a192:	4b57      	ldr	r3, [pc, #348]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a194:	789b      	ldrb	r3, [r3, #2]
 800a196:	021b      	lsls	r3, r3, #8
 800a198:	430b      	orrs	r3, r1
 800a19a:	4955      	ldr	r1, [pc, #340]	@ (800a2f0 <MX_LWIP_Init+0x29c>)
 800a19c:	78c9      	ldrb	r1, [r1, #3]
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	0e1b      	lsrs	r3, r3, #24
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	4a58      	ldr	r2, [pc, #352]	@ (800a308 <MX_LWIP_Init+0x2b4>)
 800a1a6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a1a8:	4b52      	ldr	r3, [pc, #328]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	061a      	lsls	r2, r3, #24
 800a1ae:	4b51      	ldr	r3, [pc, #324]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1b0:	785b      	ldrb	r3, [r3, #1]
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	4b4f      	ldr	r3, [pc, #316]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1b8:	789b      	ldrb	r3, [r3, #2]
 800a1ba:	021b      	lsls	r3, r3, #8
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	4a4d      	ldr	r2, [pc, #308]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1c0:	78d2      	ldrb	r2, [r2, #3]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	061a      	lsls	r2, r3, #24
 800a1c6:	4b4b      	ldr	r3, [pc, #300]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	0619      	lsls	r1, r3, #24
 800a1cc:	4b49      	ldr	r3, [pc, #292]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1ce:	785b      	ldrb	r3, [r3, #1]
 800a1d0:	041b      	lsls	r3, r3, #16
 800a1d2:	4319      	orrs	r1, r3
 800a1d4:	4b47      	ldr	r3, [pc, #284]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1d6:	789b      	ldrb	r3, [r3, #2]
 800a1d8:	021b      	lsls	r3, r3, #8
 800a1da:	430b      	orrs	r3, r1
 800a1dc:	4945      	ldr	r1, [pc, #276]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1de:	78c9      	ldrb	r1, [r1, #3]
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	021b      	lsls	r3, r3, #8
 800a1e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a1e8:	431a      	orrs	r2, r3
 800a1ea:	4b42      	ldr	r3, [pc, #264]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	0619      	lsls	r1, r3, #24
 800a1f0:	4b40      	ldr	r3, [pc, #256]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1f2:	785b      	ldrb	r3, [r3, #1]
 800a1f4:	041b      	lsls	r3, r3, #16
 800a1f6:	4319      	orrs	r1, r3
 800a1f8:	4b3e      	ldr	r3, [pc, #248]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a1fa:	789b      	ldrb	r3, [r3, #2]
 800a1fc:	021b      	lsls	r3, r3, #8
 800a1fe:	430b      	orrs	r3, r1
 800a200:	493c      	ldr	r1, [pc, #240]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a202:	78c9      	ldrb	r1, [r1, #3]
 800a204:	430b      	orrs	r3, r1
 800a206:	0a1b      	lsrs	r3, r3, #8
 800a208:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a20c:	431a      	orrs	r2, r3
 800a20e:	4b39      	ldr	r3, [pc, #228]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	0619      	lsls	r1, r3, #24
 800a214:	4b37      	ldr	r3, [pc, #220]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a216:	785b      	ldrb	r3, [r3, #1]
 800a218:	041b      	lsls	r3, r3, #16
 800a21a:	4319      	orrs	r1, r3
 800a21c:	4b35      	ldr	r3, [pc, #212]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a21e:	789b      	ldrb	r3, [r3, #2]
 800a220:	021b      	lsls	r3, r3, #8
 800a222:	430b      	orrs	r3, r1
 800a224:	4933      	ldr	r1, [pc, #204]	@ (800a2f4 <MX_LWIP_Init+0x2a0>)
 800a226:	78c9      	ldrb	r1, [r1, #3]
 800a228:	430b      	orrs	r3, r1
 800a22a:	0e1b      	lsrs	r3, r3, #24
 800a22c:	4313      	orrs	r3, r2
 800a22e:	4a37      	ldr	r2, [pc, #220]	@ (800a30c <MX_LWIP_Init+0x2b8>)
 800a230:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a232:	4b31      	ldr	r3, [pc, #196]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	061a      	lsls	r2, r3, #24
 800a238:	4b2f      	ldr	r3, [pc, #188]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a23a:	785b      	ldrb	r3, [r3, #1]
 800a23c:	041b      	lsls	r3, r3, #16
 800a23e:	431a      	orrs	r2, r3
 800a240:	4b2d      	ldr	r3, [pc, #180]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a242:	789b      	ldrb	r3, [r3, #2]
 800a244:	021b      	lsls	r3, r3, #8
 800a246:	4313      	orrs	r3, r2
 800a248:	4a2b      	ldr	r2, [pc, #172]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a24a:	78d2      	ldrb	r2, [r2, #3]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	061a      	lsls	r2, r3, #24
 800a250:	4b29      	ldr	r3, [pc, #164]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	0619      	lsls	r1, r3, #24
 800a256:	4b28      	ldr	r3, [pc, #160]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a258:	785b      	ldrb	r3, [r3, #1]
 800a25a:	041b      	lsls	r3, r3, #16
 800a25c:	4319      	orrs	r1, r3
 800a25e:	4b26      	ldr	r3, [pc, #152]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a260:	789b      	ldrb	r3, [r3, #2]
 800a262:	021b      	lsls	r3, r3, #8
 800a264:	430b      	orrs	r3, r1
 800a266:	4924      	ldr	r1, [pc, #144]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a268:	78c9      	ldrb	r1, [r1, #3]
 800a26a:	430b      	orrs	r3, r1
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a272:	431a      	orrs	r2, r3
 800a274:	4b20      	ldr	r3, [pc, #128]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	0619      	lsls	r1, r3, #24
 800a27a:	4b1f      	ldr	r3, [pc, #124]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	041b      	lsls	r3, r3, #16
 800a280:	4319      	orrs	r1, r3
 800a282:	4b1d      	ldr	r3, [pc, #116]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a284:	789b      	ldrb	r3, [r3, #2]
 800a286:	021b      	lsls	r3, r3, #8
 800a288:	430b      	orrs	r3, r1
 800a28a:	491b      	ldr	r1, [pc, #108]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a28c:	78c9      	ldrb	r1, [r1, #3]
 800a28e:	430b      	orrs	r3, r1
 800a290:	0a1b      	lsrs	r3, r3, #8
 800a292:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a296:	431a      	orrs	r2, r3
 800a298:	4b17      	ldr	r3, [pc, #92]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	0619      	lsls	r1, r3, #24
 800a29e:	4b16      	ldr	r3, [pc, #88]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a2a0:	785b      	ldrb	r3, [r3, #1]
 800a2a2:	041b      	lsls	r3, r3, #16
 800a2a4:	4319      	orrs	r1, r3
 800a2a6:	4b14      	ldr	r3, [pc, #80]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a2a8:	789b      	ldrb	r3, [r3, #2]
 800a2aa:	021b      	lsls	r3, r3, #8
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	4912      	ldr	r1, [pc, #72]	@ (800a2f8 <MX_LWIP_Init+0x2a4>)
 800a2b0:	78c9      	ldrb	r1, [r1, #3]
 800a2b2:	430b      	orrs	r3, r1
 800a2b4:	0e1b      	lsrs	r3, r3, #24
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	4a15      	ldr	r2, [pc, #84]	@ (800a310 <MX_LWIP_Init+0x2bc>)
 800a2ba:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a2bc:	4b15      	ldr	r3, [pc, #84]	@ (800a314 <MX_LWIP_Init+0x2c0>)
 800a2be:	9302      	str	r3, [sp, #8]
 800a2c0:	4b15      	ldr	r3, [pc, #84]	@ (800a318 <MX_LWIP_Init+0x2c4>)
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	4b11      	ldr	r3, [pc, #68]	@ (800a310 <MX_LWIP_Init+0x2bc>)
 800a2ca:	4a10      	ldr	r2, [pc, #64]	@ (800a30c <MX_LWIP_Init+0x2b8>)
 800a2cc:	490e      	ldr	r1, [pc, #56]	@ (800a308 <MX_LWIP_Init+0x2b4>)
 800a2ce:	4813      	ldr	r0, [pc, #76]	@ (800a31c <MX_LWIP_Init+0x2c8>)
 800a2d0:	f002 f998 	bl	800c604 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a2d4:	4811      	ldr	r0, [pc, #68]	@ (800a31c <MX_LWIP_Init+0x2c8>)
 800a2d6:	f002 fb95 	bl	800ca04 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800a2da:	4810      	ldr	r0, [pc, #64]	@ (800a31c <MX_LWIP_Init+0x2c8>)
 800a2dc:	f002 fba2 	bl	800ca24 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a2e0:	490f      	ldr	r1, [pc, #60]	@ (800a320 <MX_LWIP_Init+0x2cc>)
 800a2e2:	480e      	ldr	r0, [pc, #56]	@ (800a31c <MX_LWIP_Init+0x2c8>)
 800a2e4:	f002 fca0 	bl	800cc28 <netif_set_link_callback>
/* USER CODE BEGIN 3 */

  

/* USER CODE END 3 */
}
 800a2e8:	bf00      	nop
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20009ffc 	.word	0x20009ffc
 800a2f4:	2000a000 	.word	0x2000a000
 800a2f8:	2000a004 	.word	0x2000a004
 800a2fc:	20000000 	.word	0x20000000
 800a300:	20000010 	.word	0x20000010
 800a304:	20000020 	.word	0x20000020
 800a308:	20009ff0 	.word	0x20009ff0
 800a30c:	20009ff4 	.word	0x20009ff4
 800a310:	20009ff8 	.word	0x20009ff8
 800a314:	08016abd 	.word	0x08016abd
 800a318:	0800a8dd 	.word	0x0800a8dd
 800a31c:	20009fbc 	.word	0x20009fbc
 800a320:	0800a5c9 	.word	0x0800a5c9

0800a324 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800a32c:	f7fb f9a6 	bl	800567c <HAL_GetTick>
 800a330:	4602      	mov	r2, r0
 800a332:	4b08      	ldr	r3, [pc, #32]	@ (800a354 <Ethernet_Link_Periodic_Handle+0x30>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	2b63      	cmp	r3, #99	@ 0x63
 800a33a:	d907      	bls.n	800a34c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800a33c:	f7fb f99e 	bl	800567c <HAL_GetTick>
 800a340:	4603      	mov	r3, r0
 800a342:	4a04      	ldr	r2, [pc, #16]	@ (800a354 <Ethernet_Link_Periodic_Handle+0x30>)
 800a344:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 fc1e 	bl	800ab88 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800a34c:	bf00      	nop
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20009fb8 	.word	0x20009fb8

0800a358 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
  IP_ADDRESS[0] = ipv4_address[0];
 800a35c:	4b8f      	ldr	r3, [pc, #572]	@ (800a59c <MX_LWIP_Process+0x244>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	b2da      	uxtb	r2, r3
 800a362:	4b8f      	ldr	r3, [pc, #572]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a364:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = ipv4_address[1];
 800a366:	4b8d      	ldr	r3, [pc, #564]	@ (800a59c <MX_LWIP_Process+0x244>)
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	4b8c      	ldr	r3, [pc, #560]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a36e:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = ipv4_address[2];
 800a370:	4b8a      	ldr	r3, [pc, #552]	@ (800a59c <MX_LWIP_Process+0x244>)
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	b2da      	uxtb	r2, r3
 800a376:	4b8a      	ldr	r3, [pc, #552]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a378:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = ipv4_address[3];
 800a37a:	4b88      	ldr	r3, [pc, #544]	@ (800a59c <MX_LWIP_Process+0x244>)
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	4b87      	ldr	r3, [pc, #540]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a382:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = mask_address[0];
 800a384:	4b87      	ldr	r3, [pc, #540]	@ (800a5a4 <MX_LWIP_Process+0x24c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	4b87      	ldr	r3, [pc, #540]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a38c:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = mask_address[1];
 800a38e:	4b85      	ldr	r3, [pc, #532]	@ (800a5a4 <MX_LWIP_Process+0x24c>)
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	b2da      	uxtb	r2, r3
 800a394:	4b84      	ldr	r3, [pc, #528]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a396:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = mask_address[2];
 800a398:	4b82      	ldr	r3, [pc, #520]	@ (800a5a4 <MX_LWIP_Process+0x24c>)
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	4b82      	ldr	r3, [pc, #520]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a3a0:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = mask_address[3];
 800a3a2:	4b80      	ldr	r3, [pc, #512]	@ (800a5a4 <MX_LWIP_Process+0x24c>)
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	4b7f      	ldr	r3, [pc, #508]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a3aa:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = gateway_address[0];
 800a3ac:	4b7f      	ldr	r3, [pc, #508]	@ (800a5ac <MX_LWIP_Process+0x254>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	4b7f      	ldr	r3, [pc, #508]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a3b4:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = gateway_address[1];
 800a3b6:	4b7d      	ldr	r3, [pc, #500]	@ (800a5ac <MX_LWIP_Process+0x254>)
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	4b7c      	ldr	r3, [pc, #496]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a3be:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = gateway_address[2];
 800a3c0:	4b7a      	ldr	r3, [pc, #488]	@ (800a5ac <MX_LWIP_Process+0x254>)
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	4b7a      	ldr	r3, [pc, #488]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a3c8:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = gateway_address[3];
 800a3ca:	4b78      	ldr	r3, [pc, #480]	@ (800a5ac <MX_LWIP_Process+0x254>)
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	4b77      	ldr	r3, [pc, #476]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a3d2:	70da      	strb	r2, [r3, #3]

  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a3d4:	4b72      	ldr	r3, [pc, #456]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	061a      	lsls	r2, r3, #24
 800a3da:	4b71      	ldr	r3, [pc, #452]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a3dc:	785b      	ldrb	r3, [r3, #1]
 800a3de:	041b      	lsls	r3, r3, #16
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	4b6f      	ldr	r3, [pc, #444]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a3e4:	789b      	ldrb	r3, [r3, #2]
 800a3e6:	021b      	lsls	r3, r3, #8
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	4a6d      	ldr	r2, [pc, #436]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a3ec:	78d2      	ldrb	r2, [r2, #3]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	061a      	lsls	r2, r3, #24
 800a3f2:	4b6b      	ldr	r3, [pc, #428]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	0619      	lsls	r1, r3, #24
 800a3f8:	4b69      	ldr	r3, [pc, #420]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a3fa:	785b      	ldrb	r3, [r3, #1]
 800a3fc:	041b      	lsls	r3, r3, #16
 800a3fe:	4319      	orrs	r1, r3
 800a400:	4b67      	ldr	r3, [pc, #412]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a402:	789b      	ldrb	r3, [r3, #2]
 800a404:	021b      	lsls	r3, r3, #8
 800a406:	430b      	orrs	r3, r1
 800a408:	4965      	ldr	r1, [pc, #404]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a40a:	78c9      	ldrb	r1, [r1, #3]
 800a40c:	430b      	orrs	r3, r1
 800a40e:	021b      	lsls	r3, r3, #8
 800a410:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a414:	431a      	orrs	r2, r3
 800a416:	4b62      	ldr	r3, [pc, #392]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	0619      	lsls	r1, r3, #24
 800a41c:	4b60      	ldr	r3, [pc, #384]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a41e:	785b      	ldrb	r3, [r3, #1]
 800a420:	041b      	lsls	r3, r3, #16
 800a422:	4319      	orrs	r1, r3
 800a424:	4b5e      	ldr	r3, [pc, #376]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a426:	789b      	ldrb	r3, [r3, #2]
 800a428:	021b      	lsls	r3, r3, #8
 800a42a:	430b      	orrs	r3, r1
 800a42c:	495c      	ldr	r1, [pc, #368]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a42e:	78c9      	ldrb	r1, [r1, #3]
 800a430:	430b      	orrs	r3, r1
 800a432:	0a1b      	lsrs	r3, r3, #8
 800a434:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a438:	431a      	orrs	r2, r3
 800a43a:	4b59      	ldr	r3, [pc, #356]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	0619      	lsls	r1, r3, #24
 800a440:	4b57      	ldr	r3, [pc, #348]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a442:	785b      	ldrb	r3, [r3, #1]
 800a444:	041b      	lsls	r3, r3, #16
 800a446:	4319      	orrs	r1, r3
 800a448:	4b55      	ldr	r3, [pc, #340]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a44a:	789b      	ldrb	r3, [r3, #2]
 800a44c:	021b      	lsls	r3, r3, #8
 800a44e:	430b      	orrs	r3, r1
 800a450:	4953      	ldr	r1, [pc, #332]	@ (800a5a0 <MX_LWIP_Process+0x248>)
 800a452:	78c9      	ldrb	r1, [r1, #3]
 800a454:	430b      	orrs	r3, r1
 800a456:	0e1b      	lsrs	r3, r3, #24
 800a458:	4313      	orrs	r3, r2
 800a45a:	4a56      	ldr	r2, [pc, #344]	@ (800a5b4 <MX_LWIP_Process+0x25c>)
 800a45c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a45e:	4b52      	ldr	r3, [pc, #328]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	061a      	lsls	r2, r3, #24
 800a464:	4b50      	ldr	r3, [pc, #320]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	041b      	lsls	r3, r3, #16
 800a46a:	431a      	orrs	r2, r3
 800a46c:	4b4e      	ldr	r3, [pc, #312]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a46e:	789b      	ldrb	r3, [r3, #2]
 800a470:	021b      	lsls	r3, r3, #8
 800a472:	4313      	orrs	r3, r2
 800a474:	4a4c      	ldr	r2, [pc, #304]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a476:	78d2      	ldrb	r2, [r2, #3]
 800a478:	4313      	orrs	r3, r2
 800a47a:	061a      	lsls	r2, r3, #24
 800a47c:	4b4a      	ldr	r3, [pc, #296]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	0619      	lsls	r1, r3, #24
 800a482:	4b49      	ldr	r3, [pc, #292]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a484:	785b      	ldrb	r3, [r3, #1]
 800a486:	041b      	lsls	r3, r3, #16
 800a488:	4319      	orrs	r1, r3
 800a48a:	4b47      	ldr	r3, [pc, #284]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a48c:	789b      	ldrb	r3, [r3, #2]
 800a48e:	021b      	lsls	r3, r3, #8
 800a490:	430b      	orrs	r3, r1
 800a492:	4945      	ldr	r1, [pc, #276]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a494:	78c9      	ldrb	r1, [r1, #3]
 800a496:	430b      	orrs	r3, r1
 800a498:	021b      	lsls	r3, r3, #8
 800a49a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	4b41      	ldr	r3, [pc, #260]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	0619      	lsls	r1, r3, #24
 800a4a6:	4b40      	ldr	r3, [pc, #256]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a4a8:	785b      	ldrb	r3, [r3, #1]
 800a4aa:	041b      	lsls	r3, r3, #16
 800a4ac:	4319      	orrs	r1, r3
 800a4ae:	4b3e      	ldr	r3, [pc, #248]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a4b0:	789b      	ldrb	r3, [r3, #2]
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	430b      	orrs	r3, r1
 800a4b6:	493c      	ldr	r1, [pc, #240]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a4b8:	78c9      	ldrb	r1, [r1, #3]
 800a4ba:	430b      	orrs	r3, r1
 800a4bc:	0a1b      	lsrs	r3, r3, #8
 800a4be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	4b38      	ldr	r3, [pc, #224]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	0619      	lsls	r1, r3, #24
 800a4ca:	4b37      	ldr	r3, [pc, #220]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a4cc:	785b      	ldrb	r3, [r3, #1]
 800a4ce:	041b      	lsls	r3, r3, #16
 800a4d0:	4319      	orrs	r1, r3
 800a4d2:	4b35      	ldr	r3, [pc, #212]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a4d4:	789b      	ldrb	r3, [r3, #2]
 800a4d6:	021b      	lsls	r3, r3, #8
 800a4d8:	430b      	orrs	r3, r1
 800a4da:	4933      	ldr	r1, [pc, #204]	@ (800a5a8 <MX_LWIP_Process+0x250>)
 800a4dc:	78c9      	ldrb	r1, [r1, #3]
 800a4de:	430b      	orrs	r3, r1
 800a4e0:	0e1b      	lsrs	r3, r3, #24
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	4a34      	ldr	r2, [pc, #208]	@ (800a5b8 <MX_LWIP_Process+0x260>)
 800a4e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a4e8:	4b31      	ldr	r3, [pc, #196]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	061a      	lsls	r2, r3, #24
 800a4ee:	4b30      	ldr	r3, [pc, #192]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a4f0:	785b      	ldrb	r3, [r3, #1]
 800a4f2:	041b      	lsls	r3, r3, #16
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	4b2e      	ldr	r3, [pc, #184]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a4f8:	789b      	ldrb	r3, [r3, #2]
 800a4fa:	021b      	lsls	r3, r3, #8
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	4a2c      	ldr	r2, [pc, #176]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a500:	78d2      	ldrb	r2, [r2, #3]
 800a502:	4313      	orrs	r3, r2
 800a504:	061a      	lsls	r2, r3, #24
 800a506:	4b2a      	ldr	r3, [pc, #168]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	0619      	lsls	r1, r3, #24
 800a50c:	4b28      	ldr	r3, [pc, #160]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a50e:	785b      	ldrb	r3, [r3, #1]
 800a510:	041b      	lsls	r3, r3, #16
 800a512:	4319      	orrs	r1, r3
 800a514:	4b26      	ldr	r3, [pc, #152]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a516:	789b      	ldrb	r3, [r3, #2]
 800a518:	021b      	lsls	r3, r3, #8
 800a51a:	430b      	orrs	r3, r1
 800a51c:	4924      	ldr	r1, [pc, #144]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a51e:	78c9      	ldrb	r1, [r1, #3]
 800a520:	430b      	orrs	r3, r1
 800a522:	021b      	lsls	r3, r3, #8
 800a524:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a528:	431a      	orrs	r2, r3
 800a52a:	4b21      	ldr	r3, [pc, #132]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	0619      	lsls	r1, r3, #24
 800a530:	4b1f      	ldr	r3, [pc, #124]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a532:	785b      	ldrb	r3, [r3, #1]
 800a534:	041b      	lsls	r3, r3, #16
 800a536:	4319      	orrs	r1, r3
 800a538:	4b1d      	ldr	r3, [pc, #116]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a53a:	789b      	ldrb	r3, [r3, #2]
 800a53c:	021b      	lsls	r3, r3, #8
 800a53e:	430b      	orrs	r3, r1
 800a540:	491b      	ldr	r1, [pc, #108]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a542:	78c9      	ldrb	r1, [r1, #3]
 800a544:	430b      	orrs	r3, r1
 800a546:	0a1b      	lsrs	r3, r3, #8
 800a548:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a54c:	431a      	orrs	r2, r3
 800a54e:	4b18      	ldr	r3, [pc, #96]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	0619      	lsls	r1, r3, #24
 800a554:	4b16      	ldr	r3, [pc, #88]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	041b      	lsls	r3, r3, #16
 800a55a:	4319      	orrs	r1, r3
 800a55c:	4b14      	ldr	r3, [pc, #80]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a55e:	789b      	ldrb	r3, [r3, #2]
 800a560:	021b      	lsls	r3, r3, #8
 800a562:	430b      	orrs	r3, r1
 800a564:	4912      	ldr	r1, [pc, #72]	@ (800a5b0 <MX_LWIP_Process+0x258>)
 800a566:	78c9      	ldrb	r1, [r1, #3]
 800a568:	430b      	orrs	r3, r1
 800a56a:	0e1b      	lsrs	r3, r3, #24
 800a56c:	4313      	orrs	r3, r2
 800a56e:	4a13      	ldr	r2, [pc, #76]	@ (800a5bc <MX_LWIP_Process+0x264>)
 800a570:	6013      	str	r3, [r2, #0]

  netif_set_addr(&gnetif, &ipaddr, &netmask, &gw);
 800a572:	4b12      	ldr	r3, [pc, #72]	@ (800a5bc <MX_LWIP_Process+0x264>)
 800a574:	4a10      	ldr	r2, [pc, #64]	@ (800a5b8 <MX_LWIP_Process+0x260>)
 800a576:	490f      	ldr	r1, [pc, #60]	@ (800a5b4 <MX_LWIP_Process+0x25c>)
 800a578:	4811      	ldr	r0, [pc, #68]	@ (800a5c0 <MX_LWIP_Process+0x268>)
 800a57a:	f002 f9ab 	bl	800c8d4 <netif_set_addr>
  //ethernetif_update_config(&gnetif);
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a57e:	4911      	ldr	r1, [pc, #68]	@ (800a5c4 <MX_LWIP_Process+0x26c>)
 800a580:	480f      	ldr	r0, [pc, #60]	@ (800a5c0 <MX_LWIP_Process+0x268>)
 800a582:	f002 fb51 	bl	800cc28 <netif_set_link_callback>

/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800a586:	480e      	ldr	r0, [pc, #56]	@ (800a5c0 <MX_LWIP_Process+0x268>)
 800a588:	f000 f988 	bl	800a89c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800a58c:	f009 fb5a 	bl	8013c44 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800a590:	480b      	ldr	r0, [pc, #44]	@ (800a5c0 <MX_LWIP_Process+0x268>)
 800a592:	f7ff fec7 	bl	800a324 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800a596:	bf00      	nop
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	20000000 	.word	0x20000000
 800a5a0:	20009ffc 	.word	0x20009ffc
 800a5a4:	20000010 	.word	0x20000010
 800a5a8:	2000a000 	.word	0x2000a000
 800a5ac:	20000020 	.word	0x20000020
 800a5b0:	2000a004 	.word	0x2000a004
 800a5b4:	20009ff0 	.word	0x20009ff0
 800a5b8:	20009ff4 	.word	0x20009ff4
 800a5bc:	20009ff8 	.word	0x20009ff8
 800a5c0:	20009fbc 	.word	0x20009fbc
 800a5c4:	0800a5c9 	.word	0x0800a5c9

0800a5c8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <SCB_InvalidateDCache_by_Addr>:
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a5ee:	2320      	movs	r3, #32
 800a5f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a5f2:	f3bf 8f4f 	dsb	sy
}
 800a5f6:	bf00      	nop
    while (op_size > 0) {
 800a5f8:	e00b      	b.n	800a612 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a5fa:	4a0d      	ldr	r2, [pc, #52]	@ (800a630 <SCB_InvalidateDCache_by_Addr+0x54>)
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	4413      	add	r3, r2
 800a608:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2b00      	cmp	r3, #0
 800a616:	dcf0      	bgt.n	800a5fa <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a618:	f3bf 8f4f 	dsb	sy
}
 800a61c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a61e:	f3bf 8f6f 	isb	sy
}
 800a622:	bf00      	nop
}
 800a624:	bf00      	nop
 800a626:	371c      	adds	r7, #28
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	e000ed00 	.word	0xe000ed00

0800a634 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a640:	4b40      	ldr	r3, [pc, #256]	@ (800a744 <low_level_init+0x110>)
 800a642:	4a41      	ldr	r2, [pc, #260]	@ (800a748 <low_level_init+0x114>)
 800a644:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a646:	2300      	movs	r3, #0
 800a648:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a64a:	2380      	movs	r3, #128	@ 0x80
 800a64c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a64e:	23e1      	movs	r3, #225	@ 0xe1
 800a650:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a652:	2300      	movs	r3, #0
 800a654:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a656:	2300      	movs	r3, #0
 800a658:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a65a:	2300      	movs	r3, #0
 800a65c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a65e:	4a39      	ldr	r2, [pc, #228]	@ (800a744 <low_level_init+0x110>)
 800a660:	f107 0308 	add.w	r3, r7, #8
 800a664:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a666:	4b37      	ldr	r3, [pc, #220]	@ (800a744 <low_level_init+0x110>)
 800a668:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a66c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a66e:	4b35      	ldr	r3, [pc, #212]	@ (800a744 <low_level_init+0x110>)
 800a670:	4a36      	ldr	r2, [pc, #216]	@ (800a74c <low_level_init+0x118>)
 800a672:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a674:	4b33      	ldr	r3, [pc, #204]	@ (800a744 <low_level_init+0x110>)
 800a676:	4a36      	ldr	r2, [pc, #216]	@ (800a750 <low_level_init+0x11c>)
 800a678:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a67a:	4b32      	ldr	r3, [pc, #200]	@ (800a744 <low_level_init+0x110>)
 800a67c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a680:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a682:	4830      	ldr	r0, [pc, #192]	@ (800a744 <low_level_init+0x110>)
 800a684:	f7fb f948 	bl	8005918 <HAL_ETH_Init>
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a68c:	2238      	movs	r2, #56	@ 0x38
 800a68e:	2100      	movs	r1, #0
 800a690:	4830      	ldr	r0, [pc, #192]	@ (800a754 <low_level_init+0x120>)
 800a692:	f00d fb19 	bl	8017cc8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a696:	4b2f      	ldr	r3, [pc, #188]	@ (800a754 <low_level_init+0x120>)
 800a698:	2221      	movs	r2, #33	@ 0x21
 800a69a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a69c:	4b2d      	ldr	r3, [pc, #180]	@ (800a754 <low_level_init+0x120>)
 800a69e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a6a2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a6a4:	4b2b      	ldr	r3, [pc, #172]	@ (800a754 <low_level_init+0x120>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a6aa:	482b      	ldr	r0, [pc, #172]	@ (800a758 <low_level_init+0x124>)
 800a6ac:	f001 fe72 	bl	800c394 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2206      	movs	r2, #6
 800a6b4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a6b8:	4b22      	ldr	r3, [pc, #136]	@ (800a744 <low_level_init+0x110>)
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	781a      	ldrb	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a6c4:	4b1f      	ldr	r3, [pc, #124]	@ (800a744 <low_level_init+0x110>)
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	785a      	ldrb	r2, [r3, #1]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a6d0:	4b1c      	ldr	r3, [pc, #112]	@ (800a744 <low_level_init+0x110>)
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	789a      	ldrb	r2, [r3, #2]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a6dc:	4b19      	ldr	r3, [pc, #100]	@ (800a744 <low_level_init+0x110>)
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	78da      	ldrb	r2, [r3, #3]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a6e8:	4b16      	ldr	r3, [pc, #88]	@ (800a744 <low_level_init+0x110>)
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	791a      	ldrb	r2, [r3, #4]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a6f4:	4b13      	ldr	r3, [pc, #76]	@ (800a744 <low_level_init+0x110>)
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	795a      	ldrb	r2, [r3, #5]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a706:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a70e:	f043 030a 	orr.w	r3, r3, #10
 800a712:	b2da      	uxtb	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a71a:	4910      	ldr	r1, [pc, #64]	@ (800a75c <low_level_init+0x128>)
 800a71c:	4810      	ldr	r0, [pc, #64]	@ (800a760 <low_level_init+0x12c>)
 800a71e:	f7fa fdfa 	bl	8005316 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a722:	480f      	ldr	r0, [pc, #60]	@ (800a760 <low_level_init+0x12c>)
 800a724:	f7fa fe29 	bl	800537a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d103      	bne.n	800a736 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fa2a 	bl	800ab88 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800a734:	e001      	b.n	800a73a <low_level_init+0x106>
    Error_Handler();
 800a736:	f7f9 fa69 	bl	8003c0c <Error_Handler>
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	2000e994 	.word	0x2000e994
 800a748:	40028000 	.word	0x40028000
 800a74c:	200098e8 	.word	0x200098e8
 800a750:	20009848 	.word	0x20009848
 800a754:	2000ea44 	.word	0x2000ea44
 800a758:	0801cf24 	.word	0x0801cf24
 800a75c:	20009660 	.word	0x20009660
 800a760:	2000ea7c 	.word	0x2000ea7c

0800a764 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b092      	sub	sp, #72	@ 0x48
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a76e:	2300      	movs	r3, #0
 800a770:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a77c:	f107 030c 	add.w	r3, r7, #12
 800a780:	2230      	movs	r2, #48	@ 0x30
 800a782:	2100      	movs	r1, #0
 800a784:	4618      	mov	r0, r3
 800a786:	f00d fa9f 	bl	8017cc8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a78a:	f107 030c 	add.w	r3, r7, #12
 800a78e:	2230      	movs	r2, #48	@ 0x30
 800a790:	2100      	movs	r1, #0
 800a792:	4618      	mov	r0, r3
 800a794:	f00d fa98 	bl	8017cc8 <memset>

  for(q = p; q != NULL; q = q->next)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a79c:	e045      	b.n	800a82a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a79e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d902      	bls.n	800a7aa <low_level_output+0x46>
      return ERR_IF;
 800a7a4:	f06f 030b 	mvn.w	r3, #11
 800a7a8:	e055      	b.n	800a856 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800a7aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ac:	6859      	ldr	r1, [r3, #4]
 800a7ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	4413      	add	r3, r2
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	3348      	adds	r3, #72	@ 0x48
 800a7ba:	443b      	add	r3, r7
 800a7bc:	3b3c      	subs	r3, #60	@ 0x3c
 800a7be:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a7c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c2:	895b      	ldrh	r3, [r3, #10]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	005b      	lsls	r3, r3, #1
 800a7cc:	4413      	add	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	3348      	adds	r3, #72	@ 0x48
 800a7d2:	443b      	add	r3, r7
 800a7d4:	3b38      	subs	r3, #56	@ 0x38
 800a7d6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a7d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d011      	beq.n	800a802 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a7de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7e0:	1e5a      	subs	r2, r3, #1
 800a7e2:	f107 000c 	add.w	r0, r7, #12
 800a7e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	005b      	lsls	r3, r3, #1
 800a7ec:	440b      	add	r3, r1
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	18c1      	adds	r1, r0, r3
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	4413      	add	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	3348      	adds	r3, #72	@ 0x48
 800a7fc:	443b      	add	r3, r7
 800a7fe:	3b34      	subs	r3, #52	@ 0x34
 800a800:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d109      	bne.n	800a81e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a80a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a80c:	4613      	mov	r3, r2
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	3348      	adds	r3, #72	@ 0x48
 800a816:	443b      	add	r3, r7
 800a818:	3b34      	subs	r3, #52	@ 0x34
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a81e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a820:	3301      	adds	r3, #1
 800a822:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	643b      	str	r3, [r7, #64]	@ 0x40
 800a82a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1b6      	bne.n	800a79e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	891b      	ldrh	r3, [r3, #8]
 800a834:	461a      	mov	r2, r3
 800a836:	4b0a      	ldr	r3, [pc, #40]	@ (800a860 <low_level_output+0xfc>)
 800a838:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a83a:	4a09      	ldr	r2, [pc, #36]	@ (800a860 <low_level_output+0xfc>)
 800a83c:	f107 030c 	add.w	r3, r7, #12
 800a840:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a842:	4a07      	ldr	r2, [pc, #28]	@ (800a860 <low_level_output+0xfc>)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a848:	2214      	movs	r2, #20
 800a84a:	4905      	ldr	r1, [pc, #20]	@ (800a860 <low_level_output+0xfc>)
 800a84c:	4805      	ldr	r0, [pc, #20]	@ (800a864 <low_level_output+0x100>)
 800a84e:	f7fb f997 	bl	8005b80 <HAL_ETH_Transmit>

  return errval;
 800a852:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a856:	4618      	mov	r0, r3
 800a858:	3748      	adds	r7, #72	@ 0x48
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	2000ea44 	.word	0x2000ea44
 800a864:	2000e994 	.word	0x2000e994

0800a868 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a874:	4b07      	ldr	r3, [pc, #28]	@ (800a894 <low_level_input+0x2c>)
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d105      	bne.n	800a888 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a87c:	f107 030c 	add.w	r3, r7, #12
 800a880:	4619      	mov	r1, r3
 800a882:	4805      	ldr	r0, [pc, #20]	@ (800a898 <low_level_input+0x30>)
 800a884:	f7fb fa10 	bl	8005ca8 <HAL_ETH_ReadData>
  }

  return p;
 800a888:	68fb      	ldr	r3, [r7, #12]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	2000e990 	.word	0x2000e990
 800a898:	2000e994 	.word	0x2000e994

0800a89c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff ffdd 	bl	800a868 <low_level_input>
 800a8ae:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	4798      	blx	r3
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f002 fd2e 	bl	800d328 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1ea      	bne.n	800a8a8 <ethernetif_input+0xc>
}
 800a8d2:	bf00      	nop
 800a8d4:	bf00      	nop
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <ethernetif_init+0x1c>
 800a8ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a924 <ethernetif_init+0x48>)
 800a8ec:	f240 127b 	movw	r2, #379	@ 0x17b
 800a8f0:	490d      	ldr	r1, [pc, #52]	@ (800a928 <ethernetif_init+0x4c>)
 800a8f2:	480e      	ldr	r0, [pc, #56]	@ (800a92c <ethernetif_init+0x50>)
 800a8f4:	f00d f856 	bl	80179a4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2273      	movs	r2, #115	@ 0x73
 800a8fc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2274      	movs	r2, #116	@ 0x74
 800a904:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a09      	ldr	r2, [pc, #36]	@ (800a930 <ethernetif_init+0x54>)
 800a90c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a08      	ldr	r2, [pc, #32]	@ (800a934 <ethernetif_init+0x58>)
 800a912:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7ff fe8d 	bl	800a634 <low_level_init>

  return ERR_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	0801a2d0 	.word	0x0801a2d0
 800a928:	0801a2ec 	.word	0x0801a2ec
 800a92c:	0801a2fc 	.word	0x0801a2fc
 800a930:	08014f75 	.word	0x08014f75
 800a934:	0800a765 	.word	0x0800a765

0800a938 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a944:	68f9      	ldr	r1, [r7, #12]
 800a946:	4807      	ldr	r0, [pc, #28]	@ (800a964 <pbuf_free_custom+0x2c>)
 800a948:	f001 fe06 	bl	800c558 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a94c:	4b06      	ldr	r3, [pc, #24]	@ (800a968 <pbuf_free_custom+0x30>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d102      	bne.n	800a95a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a954:	4b04      	ldr	r3, [pc, #16]	@ (800a968 <pbuf_free_custom+0x30>)
 800a956:	2200      	movs	r2, #0
 800a958:	701a      	strb	r2, [r3, #0]
  }
}
 800a95a:	bf00      	nop
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	0801cf24 	.word	0x0801cf24
 800a968:	2000e990 	.word	0x2000e990

0800a96c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a970:	f7fa fe84 	bl	800567c <HAL_GetTick>
 800a974:	4603      	mov	r3, r0
}
 800a976:	4618      	mov	r0, r3
 800a978:	bd80      	pop	{r7, pc}
	...

0800a97c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08e      	sub	sp, #56	@ 0x38
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	605a      	str	r2, [r3, #4]
 800a98e:	609a      	str	r2, [r3, #8]
 800a990:	60da      	str	r2, [r3, #12]
 800a992:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a4e      	ldr	r2, [pc, #312]	@ (800aad4 <HAL_ETH_MspInit+0x158>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	f040 8096 	bne.w	800aacc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a9a0:	4b4d      	ldr	r3, [pc, #308]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9a4:	4a4c      	ldr	r2, [pc, #304]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a9aa:	6313      	str	r3, [r2, #48]	@ 0x30
 800a9ac:	4b4a      	ldr	r3, [pc, #296]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9b4:	623b      	str	r3, [r7, #32]
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	4b47      	ldr	r3, [pc, #284]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9bc:	4a46      	ldr	r2, [pc, #280]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a9c2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a9c4:	4b44      	ldr	r3, [pc, #272]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a9cc:	61fb      	str	r3, [r7, #28]
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	4b41      	ldr	r3, [pc, #260]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9d4:	4a40      	ldr	r2, [pc, #256]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a9da:	6313      	str	r3, [r2, #48]	@ 0x30
 800a9dc:	4b3e      	ldr	r3, [pc, #248]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9e4:	61bb      	str	r3, [r7, #24]
 800a9e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9e8:	4b3b      	ldr	r3, [pc, #236]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9ec:	4a3a      	ldr	r2, [pc, #232]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9ee:	f043 0304 	orr.w	r3, r3, #4
 800a9f2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a9f4:	4b38      	ldr	r3, [pc, #224]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800a9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f8:	f003 0304 	and.w	r3, r3, #4
 800a9fc:	617b      	str	r3, [r7, #20]
 800a9fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa00:	4b35      	ldr	r3, [pc, #212]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800aa02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa04:	4a34      	ldr	r2, [pc, #208]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800aa06:	f043 0301 	orr.w	r3, r3, #1
 800aa0a:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa0c:	4b32      	ldr	r3, [pc, #200]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800aa0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	613b      	str	r3, [r7, #16]
 800aa16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa18:	4b2f      	ldr	r3, [pc, #188]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800aa1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa1c:	4a2e      	ldr	r2, [pc, #184]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800aa1e:	f043 0302 	orr.w	r3, r3, #2
 800aa22:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa24:	4b2c      	ldr	r3, [pc, #176]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800aa26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa28:	f003 0302 	and.w	r3, r3, #2
 800aa2c:	60fb      	str	r3, [r7, #12]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800aa30:	4b29      	ldr	r3, [pc, #164]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800aa32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa34:	4a28      	ldr	r2, [pc, #160]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800aa36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa3a:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa3c:	4b26      	ldr	r3, [pc, #152]	@ (800aad8 <HAL_ETH_MspInit+0x15c>)
 800aa3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa44:	60bb      	str	r3, [r7, #8]
 800aa46:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800aa48:	2332      	movs	r3, #50	@ 0x32
 800aa4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa50:	2300      	movs	r3, #0
 800aa52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa54:	2303      	movs	r3, #3
 800aa56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aa58:	230b      	movs	r3, #11
 800aa5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa60:	4619      	mov	r1, r3
 800aa62:	481e      	ldr	r0, [pc, #120]	@ (800aadc <HAL_ETH_MspInit+0x160>)
 800aa64:	f7fc f84a 	bl	8006afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800aa68:	2386      	movs	r3, #134	@ 0x86
 800aa6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa70:	2300      	movs	r3, #0
 800aa72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa74:	2303      	movs	r3, #3
 800aa76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aa78:	230b      	movs	r3, #11
 800aa7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa80:	4619      	mov	r1, r3
 800aa82:	4817      	ldr	r0, [pc, #92]	@ (800aae0 <HAL_ETH_MspInit+0x164>)
 800aa84:	f7fc f83a 	bl	8006afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800aa88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aa8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa8e:	2302      	movs	r3, #2
 800aa90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa96:	2303      	movs	r3, #3
 800aa98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aa9a:	230b      	movs	r3, #11
 800aa9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	480f      	ldr	r0, [pc, #60]	@ (800aae4 <HAL_ETH_MspInit+0x168>)
 800aaa6:	f7fc f829 	bl	8006afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800aaaa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800aaae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aab0:	2302      	movs	r3, #2
 800aab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aab4:	2300      	movs	r3, #0
 800aab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aab8:	2303      	movs	r3, #3
 800aaba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aabc:	230b      	movs	r3, #11
 800aabe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800aac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aac4:	4619      	mov	r1, r3
 800aac6:	4808      	ldr	r0, [pc, #32]	@ (800aae8 <HAL_ETH_MspInit+0x16c>)
 800aac8:	f7fc f818 	bl	8006afc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800aacc:	bf00      	nop
 800aace:	3738      	adds	r7, #56	@ 0x38
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	40028000 	.word	0x40028000
 800aad8:	40023800 	.word	0x40023800
 800aadc:	40020800 	.word	0x40020800
 800aae0:	40020000 	.word	0x40020000
 800aae4:	40020400 	.word	0x40020400
 800aae8:	40021800 	.word	0x40021800

0800aaec <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800aaf0:	4802      	ldr	r0, [pc, #8]	@ (800aafc <ETH_PHY_IO_Init+0x10>)
 800aaf2:	f7fb fba9 	bl	8006248 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	2000e994 	.word	0x2000e994

0800ab00 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ab00:	b480      	push	{r7}
 800ab02:	af00      	add	r7, sp, #0
  return 0;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	68f9      	ldr	r1, [r7, #12]
 800ab22:	4807      	ldr	r0, [pc, #28]	@ (800ab40 <ETH_PHY_IO_ReadReg+0x30>)
 800ab24:	f7fb f9f8 	bl	8005f18 <HAL_ETH_ReadPHYRegister>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d002      	beq.n	800ab34 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ab2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab32:	e000      	b.n	800ab36 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	2000e994 	.word	0x2000e994

0800ab44 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	68f9      	ldr	r1, [r7, #12]
 800ab56:	4807      	ldr	r0, [pc, #28]	@ (800ab74 <ETH_PHY_IO_WriteReg+0x30>)
 800ab58:	f7fb fa29 	bl	8005fae <HAL_ETH_WritePHYRegister>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d002      	beq.n	800ab68 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ab62:	f04f 33ff 	mov.w	r3, #4294967295
 800ab66:	e000      	b.n	800ab6a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	2000e994 	.word	0x2000e994

0800ab78 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ab7c:	f7fa fd7e 	bl	800567c <HAL_GetTick>
 800ab80:	4603      	mov	r3, r0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b0a0      	sub	sp, #128	@ 0x80
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800ab90:	f107 030c 	add.w	r3, r7, #12
 800ab94:	2264      	movs	r2, #100	@ 0x64
 800ab96:	2100      	movs	r1, #0
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f00d f895 	bl	8017cc8 <memset>
  int32_t PHYLinkState = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800aba2:	2300      	movs	r3, #0
 800aba4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aba6:	2300      	movs	r3, #0
 800aba8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800abaa:	2300      	movs	r3, #0
 800abac:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800abae:	483a      	ldr	r0, [pc, #232]	@ (800ac98 <ethernet_link_check_state+0x110>)
 800abb0:	f7fa fc8b 	bl	80054ca <LAN8742_GetLinkState>
 800abb4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800abbc:	089b      	lsrs	r3, r3, #2
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00c      	beq.n	800abe2 <ethernet_link_check_state+0x5a>
 800abc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abca:	2b01      	cmp	r3, #1
 800abcc:	dc09      	bgt.n	800abe2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800abce:	4833      	ldr	r0, [pc, #204]	@ (800ac9c <ethernet_link_check_state+0x114>)
 800abd0:	f7fa ff7d 	bl	8005ace <HAL_ETH_Stop>
    netif_set_down(netif);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f001 ff91 	bl	800cafc <netif_set_down>
    netif_set_link_down(netif);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f001 fff4 	bl	800cbc8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800abe0:	e055      	b.n	800ac8e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d14e      	bne.n	800ac8e <ethernet_link_check_state+0x106>
 800abf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	dd4b      	ble.n	800ac8e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800abf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abf8:	3b02      	subs	r3, #2
 800abfa:	2b03      	cmp	r3, #3
 800abfc:	d82a      	bhi.n	800ac54 <ethernet_link_check_state+0xcc>
 800abfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ac04 <ethernet_link_check_state+0x7c>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac15 	.word	0x0800ac15
 800ac08:	0800ac27 	.word	0x0800ac27
 800ac0c:	0800ac37 	.word	0x0800ac37
 800ac10:	0800ac47 	.word	0x0800ac47
      duplex = ETH_FULLDUPLEX_MODE;
 800ac14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ac18:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ac1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ac1e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ac20:	2301      	movs	r3, #1
 800ac22:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ac24:	e017      	b.n	800ac56 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800ac26:	2300      	movs	r3, #0
 800ac28:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ac2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ac2e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ac30:	2301      	movs	r3, #1
 800ac32:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ac34:	e00f      	b.n	800ac56 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800ac36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ac3a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ac40:	2301      	movs	r3, #1
 800ac42:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ac44:	e007      	b.n	800ac56 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800ac46:	2300      	movs	r3, #0
 800ac48:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ac52:	e000      	b.n	800ac56 <ethernet_link_check_state+0xce>
      break;
 800ac54:	bf00      	nop
    if(linkchanged)
 800ac56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d018      	beq.n	800ac8e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ac5c:	f107 030c 	add.w	r3, r7, #12
 800ac60:	4619      	mov	r1, r3
 800ac62:	480e      	ldr	r0, [pc, #56]	@ (800ac9c <ethernet_link_check_state+0x114>)
 800ac64:	f7fb f9ec 	bl	8006040 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ac68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac6a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800ac6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac6e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ac70:	f107 030c 	add.w	r3, r7, #12
 800ac74:	4619      	mov	r1, r3
 800ac76:	4809      	ldr	r0, [pc, #36]	@ (800ac9c <ethernet_link_check_state+0x114>)
 800ac78:	f7fb facc 	bl	8006214 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800ac7c:	4807      	ldr	r0, [pc, #28]	@ (800ac9c <ethernet_link_check_state+0x114>)
 800ac7e:	f7fa fec7 	bl	8005a10 <HAL_ETH_Start>
      netif_set_up(netif);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f001 fece 	bl	800ca24 <netif_set_up>
      netif_set_link_up(netif);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f001 ff69 	bl	800cb60 <netif_set_link_up>
}
 800ac8e:	bf00      	nop
 800ac90:	3780      	adds	r7, #128	@ 0x80
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	2000ea7c 	.word	0x2000ea7c
 800ac9c:	2000e994 	.word	0x2000e994

0800aca0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af02      	add	r7, sp, #8
 800aca6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800aca8:	4812      	ldr	r0, [pc, #72]	@ (800acf4 <HAL_ETH_RxAllocateCallback+0x54>)
 800acaa:	f001 fbe7 	bl	800c47c <memp_malloc_pool>
 800acae:	60f8      	str	r0, [r7, #12]
  if (p)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d014      	beq.n	800ace0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f103 0220 	add.w	r2, r3, #32
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4a0d      	ldr	r2, [pc, #52]	@ (800acf8 <HAL_ETH_RxAllocateCallback+0x58>)
 800acc4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800acce:	9201      	str	r2, [sp, #4]
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2241      	movs	r2, #65	@ 0x41
 800acd6:	2100      	movs	r1, #0
 800acd8:	2000      	movs	r0, #0
 800acda:	f002 f96b 	bl	800cfb4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800acde:	e005      	b.n	800acec <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800ace0:	4b06      	ldr	r3, [pc, #24]	@ (800acfc <HAL_ETH_RxAllocateCallback+0x5c>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
}
 800acec:	bf00      	nop
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	0801cf24 	.word	0x0801cf24
 800acf8:	0800a939 	.word	0x0800a939
 800acfc:	2000e990 	.word	0x2000e990

0800ad00 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b088      	sub	sp, #32
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
 800ad0c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3b20      	subs	r3, #32
 800ad1e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	2200      	movs	r2, #0
 800ad24:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	887a      	ldrh	r2, [r7, #2]
 800ad30:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d103      	bne.n	800ad42 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	69fa      	ldr	r2, [r7, #28]
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	e003      	b.n	800ad4a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	69fa      	ldr	r2, [r7, #28]
 800ad4e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	61fb      	str	r3, [r7, #28]
 800ad56:	e009      	b.n	800ad6c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	891a      	ldrh	r2, [r3, #8]
 800ad5c:	887b      	ldrh	r3, [r7, #2]
 800ad5e:	4413      	add	r3, r2
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	61fb      	str	r3, [r7, #28]
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1f2      	bne.n	800ad58 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800ad72:	887b      	ldrh	r3, [r7, #2]
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7ff fc30 	bl	800a5dc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800ad7c:	bf00      	nop
 800ad7e:	3720      	adds	r7, #32
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <fs_open+0x16>
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <fs_open+0x1c>
    return ERR_ARG;
 800ad9a:	f06f 030f 	mvn.w	r3, #15
 800ad9e:	e028      	b.n	800adf2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ada0:	4b16      	ldr	r3, [pc, #88]	@ (800adfc <fs_open+0x78>)
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	e020      	b.n	800ade8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	4619      	mov	r1, r3
 800adac:	6838      	ldr	r0, [r7, #0]
 800adae:	f7f5 fa2f 	bl	8000210 <strcmp>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d114      	bne.n	800ade2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	68da      	ldr	r2, [r3, #12]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	7c1a      	ldrb	r2, [r3, #16]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	e007      	b.n	800adf2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	60fb      	str	r3, [r7, #12]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1db      	bne.n	800ada6 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800adee:	f06f 0305 	mvn.w	r3, #5
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	080549d4 	.word	0x080549d4

0800ae00 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	1ad3      	subs	r3, r2, r3
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b082      	sub	sp, #8
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800ae3a:	22ac      	movs	r2, #172	@ 0xac
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f00c ff42 	bl	8017cc8 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800ae44:	bf00      	nop
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ae52:	20ac      	movs	r0, #172	@ 0xac
 800ae54:	f001 f9a4 	bl	800c1a0 <mem_malloc>
 800ae58:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <http_state_alloc+0x1a>
    http_state_init(ret);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff ffe6 	bl	800ae32 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800ae66:	687b      	ldr	r3, [r7, #4]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d007      	beq.n	800ae90 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	695b      	ldr	r3, [r3, #20]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff ffbb 	bl	800ae00 <fs_close>
    hs->handle = NULL;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d007      	beq.n	800aea8 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f002 fa43 	bl	800d328 <pbuf_free>
    hs->req = NULL;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800aea8:	bf00      	nop
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d005      	beq.n	800aeca <http_state_free+0x1a>
    http_state_eof(hs);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff ffd6 	bl	800ae70 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f001 f805 	bl	800bed4 <mem_free>
  }
}
 800aeca:	bf00      	nop
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
 800aee0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d106      	bne.n	800aef6 <http_write+0x22>
 800aee8:	4b2c      	ldr	r3, [pc, #176]	@ (800af9c <http_write+0xc8>)
 800aeea:	f240 2219 	movw	r2, #537	@ 0x219
 800aeee:	492c      	ldr	r1, [pc, #176]	@ (800afa0 <http_write+0xcc>)
 800aef0:	482c      	ldr	r0, [pc, #176]	@ (800afa4 <http_write+0xd0>)
 800aef2:	f00c fd57 	bl	80179a4 <iprintf>
  len = *length;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800aefc:	8afb      	ldrh	r3, [r7, #22]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d101      	bne.n	800af06 <http_write+0x32>
    return ERR_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	e045      	b.n	800af92 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800af0c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800af0e:	8aba      	ldrh	r2, [r7, #20]
 800af10:	8afb      	ldrh	r3, [r7, #22]
 800af12:	429a      	cmp	r2, r3
 800af14:	d201      	bcs.n	800af1a <http_write+0x46>
    len = max_len;
 800af16:	8abb      	ldrh	r3, [r7, #20]
 800af18:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800af22:	8afa      	ldrh	r2, [r7, #22]
 800af24:	8abb      	ldrh	r3, [r7, #20]
 800af26:	429a      	cmp	r2, r3
 800af28:	d901      	bls.n	800af2e <http_write+0x5a>
    len = max_len;
 800af2a:	8abb      	ldrh	r3, [r7, #20]
 800af2c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800af2e:	78fb      	ldrb	r3, [r7, #3]
 800af30:	8afa      	ldrh	r2, [r7, #22]
 800af32:	68b9      	ldr	r1, [r7, #8]
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f007 f81d 	bl	8011f74 <tcp_write>
 800af3a:	4603      	mov	r3, r0
 800af3c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800af3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af46:	d10f      	bne.n	800af68 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d004      	beq.n	800af5c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800af58:	2b08      	cmp	r3, #8
 800af5a:	d902      	bls.n	800af62 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800af5c:	2301      	movs	r3, #1
 800af5e:	82fb      	strh	r3, [r7, #22]
 800af60:	e002      	b.n	800af68 <http_write+0x94>
      } else {
        len /= 2;
 800af62:	8afb      	ldrh	r3, [r7, #22]
 800af64:	085b      	lsrs	r3, r3, #1
 800af66:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800af68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af70:	d102      	bne.n	800af78 <http_write+0xa4>
 800af72:	8afb      	ldrh	r3, [r7, #22]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d8da      	bhi.n	800af2e <http_write+0x5a>

  if (err == ERR_OK) {
 800af78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d103      	bne.n	800af88 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	8afa      	ldrh	r2, [r7, #22]
 800af84:	801a      	strh	r2, [r3, #0]
 800af86:	e002      	b.n	800af8e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800af8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	0801a364 	.word	0x0801a364
 800afa0:	0801a39c 	.word	0x0801a39c
 800afa4:	0801a3ac 	.word	0x0801a3ac

0800afa8 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	4613      	mov	r3, r2
 800afb4:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800afb6:	2100      	movs	r1, #0
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f004 f89f 	bl	800f0fc <tcp_arg>
  altcp_recv(pcb, NULL);
 800afbe:	2100      	movs	r1, #0
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f004 f8ad 	bl	800f120 <tcp_recv>
  altcp_err(pcb, NULL);
 800afc6:	2100      	movs	r1, #0
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f004 f8ed 	bl	800f1a8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800afce:	2200      	movs	r2, #0
 800afd0:	2100      	movs	r1, #0
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f004 f922 	bl	800f21c <tcp_poll>
  altcp_sent(pcb, NULL);
 800afd8:	2100      	movs	r1, #0
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f004 f8c2 	bl	800f164 <tcp_sent>
  if (hs != NULL) {
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d002      	beq.n	800afec <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800afe6:	68b8      	ldr	r0, [r7, #8]
 800afe8:	f7ff ff62 	bl	800aeb0 <http_state_free>
  }

  if (abort_conn) {
 800afec:	79fb      	ldrb	r3, [r7, #7]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d004      	beq.n	800affc <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f002 ffc2 	bl	800df7c <tcp_abort>
    return ERR_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	e00f      	b.n	800b01c <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f002 fed3 	bl	800dda8 <tcp_close>
 800b002:	4603      	mov	r3, r0
 800b004:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800b006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d004      	beq.n	800b018 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b00e:	2204      	movs	r2, #4
 800b010:	4904      	ldr	r1, [pc, #16]	@ (800b024 <http_close_or_abort_conn+0x7c>)
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f004 f902 	bl	800f21c <tcp_poll>
  }
  return err;
 800b018:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	0800b837 	.word	0x0800b837

0800b028 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800b032:	2200      	movs	r2, #0
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f7ff ffb6 	bl	800afa8 <http_close_or_abort_conn>
 800b03c:	4603      	mov	r3, r0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7ff ffe8 	bl	800b028 <http_close_conn>
  }
}
 800b058:	bf00      	nop
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <extract_uri_parameters+0x18>
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <extract_uri_parameters+0x1c>
    return (0);
 800b078:	2300      	movs	r3, #0
 800b07a:	e04e      	b.n	800b11a <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b080:	2300      	movs	r3, #0
 800b082:	613b      	str	r3, [r7, #16]
 800b084:	e042      	b.n	800b10c <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	330a      	adds	r3, #10
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800b098:	2126      	movs	r1, #38	@ 0x26
 800b09a:	6978      	ldr	r0, [r7, #20]
 800b09c:	f00c fe1c 	bl	8017cd8 <strchr>
 800b0a0:	6178      	str	r0, [r7, #20]
    if (pair) {
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d006      	beq.n	800b0b6 <extract_uri_parameters+0x56>
      *pair = '\0';
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	701a      	strb	r2, [r3, #0]
      pair++;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	617b      	str	r3, [r7, #20]
 800b0b4:	e00c      	b.n	800b0d0 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800b0b6:	2120      	movs	r1, #32
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f00c fe0d 	bl	8017cd8 <strchr>
 800b0be:	6178      	str	r0, [r7, #20]
      if (pair) {
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d002      	beq.n	800b0cc <extract_uri_parameters+0x6c>
        *pair = '\0';
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800b0d0:	213d      	movs	r1, #61	@ 0x3d
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f00c fe00 	bl	8017cd8 <strchr>
 800b0d8:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00b      	beq.n	800b0f8 <extract_uri_parameters+0x98>
      *equals = '\0';
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	1c5a      	adds	r2, r3, #1
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	331a      	adds	r3, #26
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	440b      	add	r3, r1
 800b0f4:	605a      	str	r2, [r3, #4]
 800b0f6:	e006      	b.n	800b106 <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	331a      	adds	r3, #26
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	2200      	movs	r2, #0
 800b104:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	3301      	adds	r3, #1
 800b10a:	613b      	str	r3, [r7, #16]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	2b0f      	cmp	r3, #15
 800b110:	dc02      	bgt.n	800b118 <extract_uri_parameters+0xb8>
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1b6      	bne.n	800b086 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800b118:	693b      	ldr	r3, [r7, #16]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3718      	adds	r7, #24
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d105      	bne.n	800b142 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff ff84 	bl	800b046 <http_eof>
    return 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	e016      	b.n	800b170 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	4618      	mov	r0, r3
 800b148:	f7ff fe64 	bl	800ae14 <fs_bytes_left>
 800b14c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	dc05      	bgt.n	800b160 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7ff ff75 	bl	800b046 <http_eof>
    return 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	e007      	b.n	800b170 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800b160:	4b05      	ldr	r3, [pc, #20]	@ (800b178 <http_check_eof+0x54>)
 800b162:	f240 429d 	movw	r2, #1181	@ 0x49d
 800b166:	4905      	ldr	r1, [pc, #20]	@ (800b17c <http_check_eof+0x58>)
 800b168:	4805      	ldr	r0, [pc, #20]	@ (800b180 <http_check_eof+0x5c>)
 800b16a:	f00c fc1b 	bl	80179a4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800b16e:	2301      	movs	r3, #1
}
 800b170:	4618      	mov	r0, r3
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	0801a364 	.word	0x0801a364
 800b17c:	0801a3d4 	.word	0x0801a3d4
 800b180:	0801a3ac 	.word	0x0801a3ac

0800b184 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b196:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d803      	bhi.n	800b1a6 <http_send_data_nonssi+0x22>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	e001      	b.n	800b1aa <http_send_data_nonssi+0x26>
 800b1a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b1aa:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	6999      	ldr	r1, [r3, #24]
 800b1b0:	f107 020c 	add.w	r2, r7, #12
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7ff fe8c 	bl	800aed4 <http_write>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800b1c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10d      	bne.n	800b1e4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	89ba      	ldrh	r2, [r7, #12]
 800b1d2:	441a      	add	r2, r3
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1dc:	89ba      	ldrh	r2, [r7, #12]
 800b1de:	1a9a      	subs	r2, r3, r2
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800b1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b084      	sub	sp, #16
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <http_send+0x18>
    return 0;
 800b202:	2300      	movs	r3, #0
 800b204:	e025      	b.n	800b252 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d108      	bne.n	800b220 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff ff87 	bl	800b124 <http_check_eof>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <http_send+0x32>
      return 0;
 800b21c:	2300      	movs	r3, #0
 800b21e:	e018      	b.n	800b252 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7ff ffae 	bl	800b184 <http_send_data_nonssi>
 800b228:	4603      	mov	r3, r0
 800b22a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10d      	bne.n	800b250 <http_send+0x62>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	4618      	mov	r0, r3
 800b23a:	f7ff fdeb 	bl	800ae14 <fs_bytes_left>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	dc05      	bgt.n	800b250 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7ff fefd 	bl	800b046 <http_eof>
    return 0;
 800b24c:	2300      	movs	r3, #0
 800b24e:	e000      	b.n	800b252 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	4a1c      	ldr	r2, [pc, #112]	@ (800b2dc <http_get_404_file+0x80>)
 800b26a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4619      	mov	r1, r3
 800b274:	4610      	mov	r0, r2
 800b276:	f7ff fd85 	bl	800ad84 <fs_open>
 800b27a:	4603      	mov	r3, r0
 800b27c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d024      	beq.n	800b2d0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	4a15      	ldr	r2, [pc, #84]	@ (800b2e0 <http_get_404_file+0x84>)
 800b28a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4619      	mov	r1, r3
 800b294:	4610      	mov	r0, r2
 800b296:	f7ff fd75 	bl	800ad84 <fs_open>
 800b29a:	4603      	mov	r3, r0
 800b29c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d014      	beq.n	800b2d0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b2e4 <http_get_404_file+0x88>)
 800b2aa:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	f7ff fd65 	bl	800ad84 <fs_open>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800b2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d004      	beq.n	800b2d0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]
        return NULL;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	e000      	b.n	800b2d2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800b2d0:	687b      	ldr	r3, [r7, #4]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	0801a40c 	.word	0x0801a40c
 800b2e0:	0801a418 	.word	0x0801a418
 800b2e4:	0801a424 	.word	0x0801a424

0800b2e8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08e      	sub	sp, #56	@ 0x38
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d106      	bne.n	800b30c <http_parse_request+0x24>
 800b2fe:	4b65      	ldr	r3, [pc, #404]	@ (800b494 <http_parse_request+0x1ac>)
 800b300:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 800b304:	4964      	ldr	r1, [pc, #400]	@ (800b498 <http_parse_request+0x1b0>)
 800b306:	4865      	ldr	r0, [pc, #404]	@ (800b49c <http_parse_request+0x1b4>)
 800b308:	f00c fb4c 	bl	80179a4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d106      	bne.n	800b320 <http_parse_request+0x38>
 800b312:	4b60      	ldr	r3, [pc, #384]	@ (800b494 <http_parse_request+0x1ac>)
 800b314:	f240 72af 	movw	r2, #1967	@ 0x7af
 800b318:	4961      	ldr	r1, [pc, #388]	@ (800b4a0 <http_parse_request+0x1b8>)
 800b31a:	4860      	ldr	r0, [pc, #384]	@ (800b49c <http_parse_request+0x1b4>)
 800b31c:	f00c fb42 	bl	80179a4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	695b      	ldr	r3, [r3, #20]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d103      	bne.n	800b330 <http_parse_request+0x48>
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	699b      	ldr	r3, [r3, #24]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800b330:	f06f 0307 	mvn.w	r3, #7
 800b334:	e0a9      	b.n	800b48a <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d103      	bne.n	800b346 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b342:	621a      	str	r2, [r3, #32]
 800b344:	e005      	b.n	800b352 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b34c:	4618      	mov	r0, r3
 800b34e:	f002 f8ad 	bl	800d4ac <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800b352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b354:	f002 f888 	bl	800d468 <pbuf_ref>

  if (hs->req->next != NULL) {
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d012      	beq.n	800b388 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	891b      	ldrh	r3, [r3, #8]
 800b368:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800b36c:	4293      	cmp	r3, r2
 800b36e:	bf28      	it	cs
 800b370:	4613      	movcs	r3, r2
 800b372:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	6a18      	ldr	r0, [r3, #32]
 800b378:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800b37a:	2300      	movs	r3, #0
 800b37c:	4949      	ldr	r1, [pc, #292]	@ (800b4a4 <http_parse_request+0x1bc>)
 800b37e:	f002 f9cd 	bl	800d71c <pbuf_copy_partial>
    data = httpd_req_buf;
 800b382:	4b48      	ldr	r3, [pc, #288]	@ (800b4a4 <http_parse_request+0x1bc>)
 800b384:	637b      	str	r3, [r7, #52]	@ 0x34
 800b386:	e005      	b.n	800b394 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800b388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800b38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b390:	895b      	ldrh	r3, [r3, #10]
 800b392:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800b394:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b396:	2b06      	cmp	r3, #6
 800b398:	d962      	bls.n	800b460 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800b39a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b39c:	461a      	mov	r2, r3
 800b39e:	4942      	ldr	r1, [pc, #264]	@ (800b4a8 <http_parse_request+0x1c0>)
 800b3a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b3a2:	f000 fc0d 	bl	800bbc0 <lwip_strnstr>
 800b3a6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d058      	beq.n	800b460 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800b3b2:	2204      	movs	r2, #4
 800b3b4:	493d      	ldr	r1, [pc, #244]	@ (800b4ac <http_parse_request+0x1c4>)
 800b3b6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b3b8:	f00c fc9b 	bl	8017cf2 <strncmp>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d116      	bne.n	800b3f0 <http_parse_request+0x108>
        sp1 = data + 3;
 800b3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c4:	3303      	adds	r3, #3
 800b3c6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	1c5a      	adds	r2, r3, #1
 800b3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	8b7a      	ldrh	r2, [r7, #26]
 800b3de:	4934      	ldr	r1, [pc, #208]	@ (800b4b0 <http_parse_request+0x1c8>)
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 fbed 	bl	800bbc0 <lwip_strnstr>
 800b3e6:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d111      	bne.n	800b412 <http_parse_request+0x12a>
 800b3ee:	e006      	b.n	800b3fe <http_parse_request+0x116>
        data[4] = 0;
 800b3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800b3f8:	f06f 030f 	mvn.w	r3, #15
 800b3fc:	e045      	b.n	800b48a <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	3301      	adds	r3, #1
 800b402:	8b7a      	ldrh	r2, [r7, #26]
 800b404:	4928      	ldr	r1, [pc, #160]	@ (800b4a8 <http_parse_request+0x1c0>)
 800b406:	4618      	mov	r0, r3
 800b408:	f000 fbda 	bl	800bbc0 <lwip_strnstr>
 800b40c:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800b40e:	2301      	movs	r3, #1
 800b410:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	3301      	adds	r3, #1
 800b416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d01e      	beq.n	800b460 <http_parse_request+0x178>
 800b422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	429a      	cmp	r2, r3
 800b428:	d91a      	bls.n	800b460 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b42a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b42c:	461a      	mov	r2, r3
 800b42e:	4921      	ldr	r1, [pc, #132]	@ (800b4b4 <http_parse_request+0x1cc>)
 800b430:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b432:	f000 fbc5 	bl	800bbc0 <lwip_strnstr>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d011      	beq.n	800b460 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	3301      	adds	r3, #1
 800b440:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	2200      	movs	r2, #0
 800b446:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b448:	8b3b      	ldrh	r3, [r7, #24]
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	4413      	add	r3, r2
 800b44e:	2200      	movs	r2, #0
 800b450:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b454:	6979      	ldr	r1, [r7, #20]
 800b456:	68b8      	ldr	r0, [r7, #8]
 800b458:	f000 f82e 	bl	800b4b8 <http_find_file>
 800b45c:	4603      	mov	r3, r0
 800b45e:	e014      	b.n	800b48a <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	4618      	mov	r0, r3
 800b466:	f001 ffe7 	bl	800d438 <pbuf_clen>
 800b46a:	4603      	mov	r3, r0
 800b46c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	891b      	ldrh	r3, [r3, #8]
 800b474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b478:	d205      	bcs.n	800b486 <http_parse_request+0x19e>
 800b47a:	8a7b      	ldrh	r3, [r7, #18]
 800b47c:	2b05      	cmp	r3, #5
 800b47e:	d802      	bhi.n	800b486 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b480:	f06f 0304 	mvn.w	r3, #4
 800b484:	e001      	b.n	800b48a <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b486:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3738      	adds	r7, #56	@ 0x38
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	0801a364 	.word	0x0801a364
 800b498:	0801a430 	.word	0x0801a430
 800b49c:	0801a3ac 	.word	0x0801a3ac
 800b4a0:	0801a43c 	.word	0x0801a43c
 800b4a4:	2000ea9c 	.word	0x2000ea9c
 800b4a8:	0801a448 	.word	0x0801a448
 800b4ac:	0801a44c 	.word	0x0801a44c
 800b4b0:	0801a454 	.word	0x0801a454
 800b4b4:	0801a458 	.word	0x0801a458

0800b4b8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b4b8:	b590      	push	{r4, r7, lr}
 800b4ba:	b093      	sub	sp, #76	@ 0x4c
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7f4 fefb 	bl	80002d0 <strlen>
 800b4da:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d06b      	beq.n	800b5ba <http_find_file+0x102>
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	4413      	add	r3, r2
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b2f      	cmp	r3, #47	@ 0x2f
 800b4ee:	d164      	bne.n	800b5ba <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b4f0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b4f2:	4a72      	ldr	r2, [pc, #456]	@ (800b6bc <http_find_file+0x204>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d102      	bne.n	800b4fe <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d15d      	bne.n	800b5ba <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b500:	3b01      	subs	r3, #1
 800b502:	2b3f      	cmp	r3, #63	@ 0x3f
 800b504:	bf28      	it	cs
 800b506:	233f      	movcs	r3, #63	@ 0x3f
 800b508:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00a      	beq.n	800b526 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	6a3a      	ldr	r2, [r7, #32]
 800b514:	4619      	mov	r1, r3
 800b516:	4869      	ldr	r0, [pc, #420]	@ (800b6bc <http_find_file+0x204>)
 800b518:	f00c fc9f 	bl	8017e5a <memcpy>
      http_uri_buf[copy_len] = 0;
 800b51c:	4a67      	ldr	r2, [pc, #412]	@ (800b6bc <http_find_file+0x204>)
 800b51e:	6a3b      	ldr	r3, [r7, #32]
 800b520:	4413      	add	r3, r2
 800b522:	2200      	movs	r2, #0
 800b524:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b526:	2300      	movs	r3, #0
 800b528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b52a:	e043      	b.n	800b5b4 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b52c:	6a3b      	ldr	r3, [r7, #32]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d028      	beq.n	800b584 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b532:	6a3b      	ldr	r3, [r7, #32]
 800b534:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800b538:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01e      	beq.n	800b57e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b540:	4a5f      	ldr	r2, [pc, #380]	@ (800b6c0 <http_find_file+0x208>)
 800b542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b548:	4618      	mov	r0, r3
 800b54a:	f7f4 fec1 	bl	80002d0 <strlen>
 800b54e:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b550:	69ba      	ldr	r2, [r7, #24]
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	4293      	cmp	r3, r2
 800b556:	bf28      	it	cs
 800b558:	4613      	movcs	r3, r2
 800b55a:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	4a57      	ldr	r2, [pc, #348]	@ (800b6bc <http_find_file+0x204>)
 800b560:	1898      	adds	r0, r3, r2
 800b562:	4a57      	ldr	r2, [pc, #348]	@ (800b6c0 <http_find_file+0x208>)
 800b564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b566:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b56a:	697a      	ldr	r2, [r7, #20]
 800b56c:	4619      	mov	r1, r3
 800b56e:	f00c fc74 	bl	8017e5a <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b572:	6a3a      	ldr	r2, [r7, #32]
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	4413      	add	r3, r2
 800b578:	4a50      	ldr	r2, [pc, #320]	@ (800b6bc <http_find_file+0x204>)
 800b57a:	2100      	movs	r1, #0
 800b57c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b57e:	4b4f      	ldr	r3, [pc, #316]	@ (800b6bc <http_find_file+0x204>)
 800b580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b582:	e004      	b.n	800b58e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b584:	4a4e      	ldr	r2, [pc, #312]	@ (800b6c0 <http_find_file+0x208>)
 800b586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b588:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b58c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b592:	4618      	mov	r0, r3
 800b594:	f7ff fbf6 	bl	800ad84 <fs_open>
 800b598:	4603      	mov	r3, r0
 800b59a:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800b59c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d104      	bne.n	800b5ae <http_find_file+0xf6>
        uri = file_name;
 800b5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5a6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800b5ac:	e005      	b.n	800b5ba <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d9b8      	bls.n	800b52c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d161      	bne.n	800b684 <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	213f      	movs	r1, #63	@ 0x3f
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f00c fb87 	bl	8017cd8 <strchr>
 800b5ca:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 800b5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d005      	beq.n	800b5de <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	701a      	strb	r2, [r3, #0]
      params++;
 800b5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5da:	3301      	adds	r3, #1
 800b5dc:	637b      	str	r3, [r7, #52]	@ 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800b5de:	4b39      	ldr	r3, [pc, #228]	@ (800b6c4 <http_find_file+0x20c>)
 800b5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e4:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800b5e6:	4b38      	ldr	r3, [pc, #224]	@ (800b6c8 <http_find_file+0x210>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d034      	beq.n	800b658 <http_find_file+0x1a0>
 800b5ee:	4b37      	ldr	r3, [pc, #220]	@ (800b6cc <http_find_file+0x214>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d030      	beq.n	800b658 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5fa:	e028      	b.n	800b64e <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800b5fc:	68b8      	ldr	r0, [r7, #8]
 800b5fe:	4b33      	ldr	r3, [pc, #204]	@ (800b6cc <http_find_file+0x214>)
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b604:	00db      	lsls	r3, r3, #3
 800b606:	4413      	add	r3, r2
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4619      	mov	r1, r3
 800b60c:	f7f4 fe00 	bl	8000210 <strcmp>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d118      	bne.n	800b648 <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800b616:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f7ff fd21 	bl	800b060 <extract_uri_parameters>
 800b61e:	4603      	mov	r3, r0
 800b620:	4a28      	ldr	r2, [pc, #160]	@ (800b6c4 <http_find_file+0x20c>)
 800b622:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800b624:	4b29      	ldr	r3, [pc, #164]	@ (800b6cc <http_find_file+0x214>)
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62a:	00db      	lsls	r3, r3, #3
 800b62c:	4413      	add	r3, r2
 800b62e:	685c      	ldr	r4, [r3, #4]
 800b630:	4b24      	ldr	r3, [pc, #144]	@ (800b6c4 <http_find_file+0x20c>)
 800b632:	6819      	ldr	r1, [r3, #0]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
                                         hs->param_vals);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	336c      	adds	r3, #108	@ 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800b63e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b640:	47a0      	blx	r4
 800b642:	4603      	mov	r3, r0
 800b644:	60bb      	str	r3, [r7, #8]
          break;
 800b646:	e007      	b.n	800b658 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 800b648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64a:	3301      	adds	r3, #1
 800b64c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b64e:	4b1e      	ldr	r3, [pc, #120]	@ (800b6c8 <http_find_file+0x210>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b654:	429a      	cmp	r2, r3
 800b656:	dbd1      	blt.n	800b5fc <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	68ba      	ldr	r2, [r7, #8]
 800b65c:	4611      	mov	r1, r2
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff fb90 	bl	800ad84 <fs_open>
 800b664:	4603      	mov	r3, r0
 800b666:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800b668:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <http_find_file+0x1be>
      file = &hs->file_handle;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b674:	e006      	b.n	800b684 <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 800b676:	f107 0308 	add.w	r3, r7, #8
 800b67a:	4619      	mov	r1, r3
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff fded 	bl	800b25c <http_get_404_file>
 800b682:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b686:	2b00      	cmp	r3, #0
 800b688:	d106      	bne.n	800b698 <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b68a:	f107 0308 	add.w	r3, r7, #8
 800b68e:	4619      	mov	r1, r3
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff fde3 	bl	800b25c <http_get_404_file>
 800b696:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b698:	68ba      	ldr	r2, [r7, #8]
 800b69a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 f810 	bl	800b6d0 <http_init_file>
 800b6b0:	4603      	mov	r3, r0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3744      	adds	r7, #68	@ 0x44
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd90      	pop	{r4, r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	2000ee9c 	.word	0x2000ee9c
 800b6c0:	080549e8 	.word	0x080549e8
 800b6c4:	2000eee4 	.word	0x2000eee4
 800b6c8:	2000eee0 	.word	0x2000eee0
 800b6cc:	2000eedc 	.word	0x2000eedc

0800b6d0 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d05c      	beq.n	800b79e <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d106      	bne.n	800b6fa <http_init_file+0x2a>
 800b6ec:	4b35      	ldr	r3, [pc, #212]	@ (800b7c4 <http_init_file+0xf4>)
 800b6ee:	f640 120b 	movw	r2, #2315	@ 0x90b
 800b6f2:	4935      	ldr	r1, [pc, #212]	@ (800b7c8 <http_init_file+0xf8>)
 800b6f4:	4835      	ldr	r0, [pc, #212]	@ (800b7cc <http_init_file+0xfc>)
 800b6f6:	f00c f955 	bl	80179a4 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	da06      	bge.n	800b71e <http_init_file+0x4e>
 800b710:	4b2c      	ldr	r3, [pc, #176]	@ (800b7c4 <http_init_file+0xf4>)
 800b712:	f640 1234 	movw	r2, #2356	@ 0x934
 800b716:	492e      	ldr	r1, [pc, #184]	@ (800b7d0 <http_init_file+0x100>)
 800b718:	482c      	ldr	r0, [pc, #176]	@ (800b7cc <http_init_file+0xfc>)
 800b71a:	f00c f943 	bl	80179a4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	461a      	mov	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	7c1b      	ldrb	r3, [r3, #16]
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d106      	bne.n	800b74c <http_init_file+0x7c>
 800b73e:	4b21      	ldr	r3, [pc, #132]	@ (800b7c4 <http_init_file+0xf4>)
 800b740:	f640 1243 	movw	r2, #2371	@ 0x943
 800b744:	4923      	ldr	r1, [pc, #140]	@ (800b7d4 <http_init_file+0x104>)
 800b746:	4821      	ldr	r0, [pc, #132]	@ (800b7cc <http_init_file+0xfc>)
 800b748:	f00c f92c 	bl	80179a4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d032      	beq.n	800b7b8 <http_init_file+0xe8>
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	695b      	ldr	r3, [r3, #20]
 800b756:	7c1b      	ldrb	r3, [r3, #16]
 800b758:	f003 0301 	and.w	r3, r3, #1
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d02b      	beq.n	800b7b8 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6998      	ldr	r0, [r3, #24]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b768:	461a      	mov	r2, r3
 800b76a:	491b      	ldr	r1, [pc, #108]	@ (800b7d8 <http_init_file+0x108>)
 800b76c:	f000 fa28 	bl	800bbc0 <lwip_strnstr>
 800b770:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d01f      	beq.n	800b7b8 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	1d1a      	adds	r2, r3, #4
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	699a      	ldr	r2, [r3, #24]
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	441a      	add	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	1ad2      	subs	r2, r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	625a      	str	r2, [r3, #36]	@ 0x24
 800b79c:	e00c      	b.n	800b7b8 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	0801a364 	.word	0x0801a364
 800b7c8:	0801a460 	.word	0x0801a460
 800b7cc:	0801a3ac 	.word	0x0801a3ac
 800b7d0:	0801a474 	.word	0x0801a474
 800b7d4:	0801a494 	.word	0x0801a494
 800b7d8:	0801a458 	.word	0x0801a458

0800b7dc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <http_err+0x1c>
    http_state_free(hs);
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f7ff fb5c 	bl	800aeb0 <http_state_free>
  }
}
 800b7f8:	bf00      	nop
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	4613      	mov	r3, r2
 800b80c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <http_sent+0x1c>
    return ERR_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	e008      	b.n	800b82e <http_sent+0x2e>
  }

  hs->retries = 0;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800b824:	6979      	ldr	r1, [r7, #20]
 800b826:	68b8      	ldr	r0, [r7, #8]
 800b828:	f7ff fce1 	bl	800b1ee <http_send>

  return ERR_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b084      	sub	sp, #16
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d107      	bne.n	800b85a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b84a:	2100      	movs	r1, #0
 800b84c:	6838      	ldr	r0, [r7, #0]
 800b84e:	f7ff fbeb 	bl	800b028 <http_close_conn>
 800b852:	4603      	mov	r3, r0
 800b854:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	e021      	b.n	800b89e <http_poll+0x68>
  } else {
    hs->retries++;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b860:	3301      	adds	r3, #1
 800b862:	b2da      	uxtb	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b870:	2b04      	cmp	r3, #4
 800b872:	d105      	bne.n	800b880 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b874:	68f9      	ldr	r1, [r7, #12]
 800b876:	6838      	ldr	r0, [r7, #0]
 800b878:	f7ff fbd6 	bl	800b028 <http_close_conn>
      return ERR_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	e00e      	b.n	800b89e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d009      	beq.n	800b89c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b888:	68f9      	ldr	r1, [r7, #12]
 800b88a:	6838      	ldr	r0, [r7, #0]
 800b88c:	f7ff fcaf 	bl	800b1ee <http_send>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d002      	beq.n	800b89c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b896:	6838      	ldr	r0, [r7, #0]
 800b898:	f007 f956 	bl	8012b48 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
	...

0800b8a8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
 800b8b4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b8ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d105      	bne.n	800b8ce <http_recv+0x26>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <http_recv+0x26>
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d111      	bne.n	800b8f2 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d008      	beq.n	800b8e6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	891b      	ldrh	r3, [r3, #8]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	68b8      	ldr	r0, [r7, #8]
 800b8dc:	f002 fd28 	bl	800e330 <tcp_recved>
      pbuf_free(p);
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 fd21 	bl	800d328 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b8e6:	6979      	ldr	r1, [r7, #20]
 800b8e8:	68b8      	ldr	r0, [r7, #8]
 800b8ea:	f7ff fb9d 	bl	800b028 <http_close_conn>
    return ERR_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	e055      	b.n	800b99e <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	891b      	ldrh	r3, [r3, #8]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	68b8      	ldr	r0, [r7, #8]
 800b8fa:	f002 fd19 	bl	800e330 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d147      	bne.n	800b996 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	6979      	ldr	r1, [r7, #20]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff fcec 	bl	800b2e8 <http_parse_request>
 800b910:	4603      	mov	r3, r0
 800b912:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b914:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d015      	beq.n	800b948 <http_recv+0xa0>
 800b91c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b920:	f113 0f05 	cmn.w	r3, #5
 800b924:	d010      	beq.n	800b948 <http_recv+0xa0>
 800b926:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b92a:	f113 0f10 	cmn.w	r3, #16
 800b92e:	d00b      	beq.n	800b948 <http_recv+0xa0>
 800b930:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b934:	f113 0f08 	cmn.w	r3, #8
 800b938:	d006      	beq.n	800b948 <http_recv+0xa0>
 800b93a:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a8 <http_recv+0x100>)
 800b93c:	f640 2204 	movw	r2, #2564	@ 0xa04
 800b940:	491a      	ldr	r1, [pc, #104]	@ (800b9ac <http_recv+0x104>)
 800b942:	481b      	ldr	r0, [pc, #108]	@ (800b9b0 <http_recv+0x108>)
 800b944:	f00c f82e 	bl	80179a4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b948:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b94c:	f113 0f05 	cmn.w	r3, #5
 800b950:	d00b      	beq.n	800b96a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d007      	beq.n	800b96a <http_recv+0xc2>
          pbuf_free(hs->req);
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	4618      	mov	r0, r3
 800b960:	f001 fce2 	bl	800d328 <pbuf_free>
          hs->req = NULL;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	2200      	movs	r2, #0
 800b968:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f001 fcdc 	bl	800d328 <pbuf_free>
      if (parsed == ERR_OK) {
 800b970:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d104      	bne.n	800b982 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b978:	6979      	ldr	r1, [r7, #20]
 800b97a:	68b8      	ldr	r0, [r7, #8]
 800b97c:	f7ff fc37 	bl	800b1ee <http_send>
 800b980:	e00c      	b.n	800b99c <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b982:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b986:	f113 0f10 	cmn.w	r3, #16
 800b98a:	d107      	bne.n	800b99c <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b98c:	6979      	ldr	r1, [r7, #20]
 800b98e:	68b8      	ldr	r0, [r7, #8]
 800b990:	f7ff fb4a 	bl	800b028 <http_close_conn>
 800b994:	e002      	b.n	800b99c <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f001 fcc6 	bl	800d328 <pbuf_free>
    }
  }
  return ERR_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	0801a364 	.word	0x0801a364
 800b9ac:	0801a4c0 	.word	0x0801a4c0
 800b9b0:	0801a3ac 	.word	0x0801a3ac

0800b9b4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b9c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d102      	bne.n	800b9d0 <http_accept+0x1c>
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d102      	bne.n	800b9d6 <http_accept+0x22>
    return ERR_VAL;
 800b9d0:	f06f 0305 	mvn.w	r3, #5
 800b9d4:	e025      	b.n	800ba22 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b9d6:	2101      	movs	r1, #1
 800b9d8:	68b8      	ldr	r0, [r7, #8]
 800b9da:	f003 f98f 	bl	800ecfc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b9de:	f7ff fa35 	bl	800ae4c <http_state_alloc>
 800b9e2:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d102      	bne.n	800b9f0 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ee:	e018      	b.n	800ba22 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b9f6:	6979      	ldr	r1, [r7, #20]
 800b9f8:	68b8      	ldr	r0, [r7, #8]
 800b9fa:	f003 fb7f 	bl	800f0fc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b9fe:	490b      	ldr	r1, [pc, #44]	@ (800ba2c <http_accept+0x78>)
 800ba00:	68b8      	ldr	r0, [r7, #8]
 800ba02:	f003 fb8d 	bl	800f120 <tcp_recv>
  altcp_err(pcb, http_err);
 800ba06:	490a      	ldr	r1, [pc, #40]	@ (800ba30 <http_accept+0x7c>)
 800ba08:	68b8      	ldr	r0, [r7, #8]
 800ba0a:	f003 fbcd 	bl	800f1a8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ba0e:	2204      	movs	r2, #4
 800ba10:	4908      	ldr	r1, [pc, #32]	@ (800ba34 <http_accept+0x80>)
 800ba12:	68b8      	ldr	r0, [r7, #8]
 800ba14:	f003 fc02 	bl	800f21c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800ba18:	4907      	ldr	r1, [pc, #28]	@ (800ba38 <http_accept+0x84>)
 800ba1a:	68b8      	ldr	r0, [r7, #8]
 800ba1c:	f003 fba2 	bl	800f164 <tcp_sent>

  return ERR_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	0800b8a9 	.word	0x0800b8a9
 800ba30:	0800b7dd 	.word	0x0800b7dd
 800ba34:	0800b837 	.word	0x0800b837
 800ba38:	0800b801 	.word	0x0800b801

0800ba3c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d029      	beq.n	800baa2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800ba4e:	2101      	movs	r1, #1
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f003 f953 	bl	800ecfc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800ba56:	887b      	ldrh	r3, [r7, #2]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4914      	ldr	r1, [pc, #80]	@ (800baac <httpd_init_pcb+0x70>)
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f002 fa99 	bl	800df94 <tcp_bind>
 800ba62:	4603      	mov	r3, r0
 800ba64:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800ba66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d006      	beq.n	800ba7c <httpd_init_pcb+0x40>
 800ba6e:	4b10      	ldr	r3, [pc, #64]	@ (800bab0 <httpd_init_pcb+0x74>)
 800ba70:	f640 2257 	movw	r2, #2647	@ 0xa57
 800ba74:	490f      	ldr	r1, [pc, #60]	@ (800bab4 <httpd_init_pcb+0x78>)
 800ba76:	4810      	ldr	r0, [pc, #64]	@ (800bab8 <httpd_init_pcb+0x7c>)
 800ba78:	f00b ff94 	bl	80179a4 <iprintf>
    pcb = altcp_listen(pcb);
 800ba7c:	21ff      	movs	r1, #255	@ 0xff
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f002 fb40 	bl	800e104 <tcp_listen_with_backlog>
 800ba84:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d106      	bne.n	800ba9a <httpd_init_pcb+0x5e>
 800ba8c:	4b08      	ldr	r3, [pc, #32]	@ (800bab0 <httpd_init_pcb+0x74>)
 800ba8e:	f640 2259 	movw	r2, #2649	@ 0xa59
 800ba92:	490a      	ldr	r1, [pc, #40]	@ (800babc <httpd_init_pcb+0x80>)
 800ba94:	4808      	ldr	r0, [pc, #32]	@ (800bab8 <httpd_init_pcb+0x7c>)
 800ba96:	f00b ff85 	bl	80179a4 <iprintf>
    altcp_accept(pcb, http_accept);
 800ba9a:	4909      	ldr	r1, [pc, #36]	@ (800bac0 <httpd_init_pcb+0x84>)
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f003 fba5 	bl	800f1ec <tcp_accept>
  }
}
 800baa2:	bf00      	nop
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	08054ae0 	.word	0x08054ae0
 800bab0:	0801a364 	.word	0x0801a364
 800bab4:	0801a4ec 	.word	0x0801a4ec
 800bab8:	0801a3ac 	.word	0x0801a3ac
 800babc:	0801a508 	.word	0x0801a508
 800bac0:	0800b9b5 	.word	0x0800b9b5

0800bac4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800baca:	202e      	movs	r0, #46	@ 0x2e
 800bacc:	f003 fb08 	bl	800f0e0 <tcp_new_ip_type>
 800bad0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d106      	bne.n	800bae6 <httpd_init+0x22>
 800bad8:	4b07      	ldr	r3, [pc, #28]	@ (800baf8 <httpd_init+0x34>)
 800bada:	f640 2272 	movw	r2, #2674	@ 0xa72
 800bade:	4907      	ldr	r1, [pc, #28]	@ (800bafc <httpd_init+0x38>)
 800bae0:	4807      	ldr	r0, [pc, #28]	@ (800bb00 <httpd_init+0x3c>)
 800bae2:	f00b ff5f 	bl	80179a4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800bae6:	2150      	movs	r1, #80	@ 0x50
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7ff ffa7 	bl	800ba3c <httpd_init_pcb>
}
 800baee:	bf00      	nop
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	0801a364 	.word	0x0801a364
 800bafc:	0801a528 	.word	0x0801a528
 800bb00:	0801a3ac 	.word	0x0801a3ac

0800bb04 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d106      	bne.n	800bb22 <http_set_cgi_handlers+0x1e>
 800bb14:	4b0d      	ldr	r3, [pc, #52]	@ (800bb4c <http_set_cgi_handlers+0x48>)
 800bb16:	f640 22b2 	movw	r2, #2738	@ 0xab2
 800bb1a:	490d      	ldr	r1, [pc, #52]	@ (800bb50 <http_set_cgi_handlers+0x4c>)
 800bb1c:	480d      	ldr	r0, [pc, #52]	@ (800bb54 <http_set_cgi_handlers+0x50>)
 800bb1e:	f00b ff41 	bl	80179a4 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	dc06      	bgt.n	800bb36 <http_set_cgi_handlers+0x32>
 800bb28:	4b08      	ldr	r3, [pc, #32]	@ (800bb4c <http_set_cgi_handlers+0x48>)
 800bb2a:	f640 22b3 	movw	r2, #2739	@ 0xab3
 800bb2e:	490a      	ldr	r1, [pc, #40]	@ (800bb58 <http_set_cgi_handlers+0x54>)
 800bb30:	4808      	ldr	r0, [pc, #32]	@ (800bb54 <http_set_cgi_handlers+0x50>)
 800bb32:	f00b ff37 	bl	80179a4 <iprintf>

  httpd_cgis = cgis;
 800bb36:	4a09      	ldr	r2, [pc, #36]	@ (800bb5c <http_set_cgi_handlers+0x58>)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800bb3c:	4a08      	ldr	r2, [pc, #32]	@ (800bb60 <http_set_cgi_handlers+0x5c>)
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	6013      	str	r3, [r2, #0]
}
 800bb42:	bf00      	nop
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	0801a364 	.word	0x0801a364
 800bb50:	0801a544 	.word	0x0801a544
 800bb54:	0801a3ac 	.word	0x0801a3ac
 800bb58:	0801a554 	.word	0x0801a554
 800bb5c:	2000eedc 	.word	0x2000eedc
 800bb60:	2000eee0 	.word	0x2000eee0

0800bb64 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bb6e:	88fb      	ldrh	r3, [r7, #6]
 800bb70:	021b      	lsls	r3, r3, #8
 800bb72:	b21a      	sxth	r2, r3
 800bb74:	88fb      	ldrh	r3, [r7, #6]
 800bb76:	0a1b      	lsrs	r3, r3, #8
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	b21b      	sxth	r3, r3
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	b21b      	sxth	r3, r3
 800bb80:	b29b      	uxth	r3, r3
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bb8e:	b480      	push	{r7}
 800bb90:	b083      	sub	sp, #12
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	061a      	lsls	r2, r3, #24
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	021b      	lsls	r3, r3, #8
 800bb9e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bba2:	431a      	orrs	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	0a1b      	lsrs	r3, r3, #8
 800bba8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bbac:	431a      	orrs	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	0e1b      	lsrs	r3, r3, #24
 800bbb2:	4313      	orrs	r3, r2
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800bbcc:	68b8      	ldr	r0, [r7, #8]
 800bbce:	f7f4 fb7f 	bl	80002d0 <strlen>
 800bbd2:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	e022      	b.n	800bc24 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	617b      	str	r3, [r7, #20]
 800bbe2:	e012      	b.n	800bc0a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	781a      	ldrb	r2, [r3, #0]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d109      	bne.n	800bc04 <lwip_strnstr+0x44>
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	68b9      	ldr	r1, [r7, #8]
 800bbf4:	6978      	ldr	r0, [r7, #20]
 800bbf6:	f00c f87c 	bl	8017cf2 <strncmp>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	e00f      	b.n	800bc24 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	3301      	adds	r3, #1
 800bc08:	617b      	str	r3, [r7, #20]
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d007      	beq.n	800bc22 <lwip_strnstr+0x62>
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	441a      	add	r2, r3
 800bc18:	68f9      	ldr	r1, [r7, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	440b      	add	r3, r1
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d9e0      	bls.n	800bbe4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3718      	adds	r7, #24
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800bc36:	f000 f8d5 	bl	800bde4 <mem_init>
  memp_init();
 800bc3a:	f000 fbdb 	bl	800c3f4 <memp_init>
  pbuf_init();
  netif_init();
 800bc3e:	f000 fcd9 	bl	800c5f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bc42:	f008 f841 	bl	8013cc8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bc46:	f001 fe9f 	bl	800d988 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bc4a:	f007 ffb3 	bl	8013bb4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bc4e:	bf00      	nop
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bc62:	4b05      	ldr	r3, [pc, #20]	@ (800bc78 <ptr_to_mem+0x20>)
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	88fb      	ldrh	r3, [r7, #6]
 800bc68:	4413      	add	r3, r2
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	20011714 	.word	0x20011714

0800bc7c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bc84:	4b05      	ldr	r3, [pc, #20]	@ (800bc9c <mem_to_ptr+0x20>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	b29b      	uxth	r3, r3
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	20011714 	.word	0x20011714

0800bca0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bca0:	b590      	push	{r4, r7, lr}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bca8:	4b45      	ldr	r3, [pc, #276]	@ (800bdc0 <plug_holes+0x120>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d206      	bcs.n	800bcc0 <plug_holes+0x20>
 800bcb2:	4b44      	ldr	r3, [pc, #272]	@ (800bdc4 <plug_holes+0x124>)
 800bcb4:	f240 12df 	movw	r2, #479	@ 0x1df
 800bcb8:	4943      	ldr	r1, [pc, #268]	@ (800bdc8 <plug_holes+0x128>)
 800bcba:	4844      	ldr	r0, [pc, #272]	@ (800bdcc <plug_holes+0x12c>)
 800bcbc:	f00b fe72 	bl	80179a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bcc0:	4b43      	ldr	r3, [pc, #268]	@ (800bdd0 <plug_holes+0x130>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d306      	bcc.n	800bcd8 <plug_holes+0x38>
 800bcca:	4b3e      	ldr	r3, [pc, #248]	@ (800bdc4 <plug_holes+0x124>)
 800bccc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800bcd0:	4940      	ldr	r1, [pc, #256]	@ (800bdd4 <plug_holes+0x134>)
 800bcd2:	483e      	ldr	r0, [pc, #248]	@ (800bdcc <plug_holes+0x12c>)
 800bcd4:	f00b fe66 	bl	80179a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	791b      	ldrb	r3, [r3, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d006      	beq.n	800bcee <plug_holes+0x4e>
 800bce0:	4b38      	ldr	r3, [pc, #224]	@ (800bdc4 <plug_holes+0x124>)
 800bce2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800bce6:	493c      	ldr	r1, [pc, #240]	@ (800bdd8 <plug_holes+0x138>)
 800bce8:	4838      	ldr	r0, [pc, #224]	@ (800bdcc <plug_holes+0x12c>)
 800bcea:	f00b fe5b 	bl	80179a4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bcf6:	d906      	bls.n	800bd06 <plug_holes+0x66>
 800bcf8:	4b32      	ldr	r3, [pc, #200]	@ (800bdc4 <plug_holes+0x124>)
 800bcfa:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800bcfe:	4937      	ldr	r1, [pc, #220]	@ (800bddc <plug_holes+0x13c>)
 800bd00:	4832      	ldr	r0, [pc, #200]	@ (800bdcc <plug_holes+0x12c>)
 800bd02:	f00b fe4f 	bl	80179a4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7ff ffa4 	bl	800bc58 <ptr_to_mem>
 800bd10:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d024      	beq.n	800bd64 <plug_holes+0xc4>
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	791b      	ldrb	r3, [r3, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d120      	bne.n	800bd64 <plug_holes+0xc4>
 800bd22:	4b2b      	ldr	r3, [pc, #172]	@ (800bdd0 <plug_holes+0x130>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d01b      	beq.n	800bd64 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bd2c:	4b2c      	ldr	r3, [pc, #176]	@ (800bde0 <plug_holes+0x140>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d102      	bne.n	800bd3c <plug_holes+0x9c>
      lfree = mem;
 800bd36:	4a2a      	ldr	r2, [pc, #168]	@ (800bde0 <plug_holes+0x140>)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	881a      	ldrh	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	881b      	ldrh	r3, [r3, #0]
 800bd48:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bd4c:	d00a      	beq.n	800bd64 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff ff80 	bl	800bc58 <ptr_to_mem>
 800bd58:	4604      	mov	r4, r0
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f7ff ff8e 	bl	800bc7c <mem_to_ptr>
 800bd60:	4603      	mov	r3, r0
 800bd62:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	885b      	ldrh	r3, [r3, #2]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7ff ff75 	bl	800bc58 <ptr_to_mem>
 800bd6e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d01f      	beq.n	800bdb8 <plug_holes+0x118>
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	791b      	ldrb	r3, [r3, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d11b      	bne.n	800bdb8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bd80:	4b17      	ldr	r3, [pc, #92]	@ (800bde0 <plug_holes+0x140>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d102      	bne.n	800bd90 <plug_holes+0xf0>
      lfree = pmem;
 800bd8a:	4a15      	ldr	r2, [pc, #84]	@ (800bde0 <plug_holes+0x140>)
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	881a      	ldrh	r2, [r3, #0]
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	881b      	ldrh	r3, [r3, #0]
 800bd9c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bda0:	d00a      	beq.n	800bdb8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	881b      	ldrh	r3, [r3, #0]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff ff56 	bl	800bc58 <ptr_to_mem>
 800bdac:	4604      	mov	r4, r0
 800bdae:	68b8      	ldr	r0, [r7, #8]
 800bdb0:	f7ff ff64 	bl	800bc7c <mem_to_ptr>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bdb8:	bf00      	nop
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd90      	pop	{r4, r7, pc}
 800bdc0:	20011714 	.word	0x20011714
 800bdc4:	0801a570 	.word	0x0801a570
 800bdc8:	0801a5a0 	.word	0x0801a5a0
 800bdcc:	0801a5b8 	.word	0x0801a5b8
 800bdd0:	20011718 	.word	0x20011718
 800bdd4:	0801a5e0 	.word	0x0801a5e0
 800bdd8:	0801a5fc 	.word	0x0801a5fc
 800bddc:	0801a618 	.word	0x0801a618
 800bde0:	2001171c 	.word	0x2001171c

0800bde4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bdea:	4b18      	ldr	r3, [pc, #96]	@ (800be4c <mem_init+0x68>)
 800bdec:	3303      	adds	r3, #3
 800bdee:	f023 0303 	bic.w	r3, r3, #3
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	4b16      	ldr	r3, [pc, #88]	@ (800be50 <mem_init+0x6c>)
 800bdf6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bdf8:	4b15      	ldr	r3, [pc, #84]	@ (800be50 <mem_init+0x6c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800be04:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800be12:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800be16:	f7ff ff1f 	bl	800bc58 <ptr_to_mem>
 800be1a:	4603      	mov	r3, r0
 800be1c:	4a0d      	ldr	r2, [pc, #52]	@ (800be54 <mem_init+0x70>)
 800be1e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800be20:	4b0c      	ldr	r3, [pc, #48]	@ (800be54 <mem_init+0x70>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2201      	movs	r2, #1
 800be26:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800be28:	4b0a      	ldr	r3, [pc, #40]	@ (800be54 <mem_init+0x70>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800be30:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800be32:	4b08      	ldr	r3, [pc, #32]	@ (800be54 <mem_init+0x70>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800be3a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800be3c:	4b04      	ldr	r3, [pc, #16]	@ (800be50 <mem_init+0x6c>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a05      	ldr	r2, [pc, #20]	@ (800be58 <mem_init+0x74>)
 800be42:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	2000ef00 	.word	0x2000ef00
 800be50:	20011714 	.word	0x20011714
 800be54:	20011718 	.word	0x20011718
 800be58:	2001171c 	.word	0x2001171c

0800be5c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f7ff ff09 	bl	800bc7c <mem_to_ptr>
 800be6a:	4603      	mov	r3, r0
 800be6c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff fef0 	bl	800bc58 <ptr_to_mem>
 800be78:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	885b      	ldrh	r3, [r3, #2]
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff feea 	bl	800bc58 <ptr_to_mem>
 800be84:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800be8e:	d818      	bhi.n	800bec2 <mem_link_valid+0x66>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	885b      	ldrh	r3, [r3, #2]
 800be94:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800be98:	d813      	bhi.n	800bec2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800be9e:	8afa      	ldrh	r2, [r7, #22]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d004      	beq.n	800beae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	8afa      	ldrh	r2, [r7, #22]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d109      	bne.n	800bec2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800beae:	4b08      	ldr	r3, [pc, #32]	@ (800bed0 <mem_link_valid+0x74>)
 800beb0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d006      	beq.n	800bec6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	885b      	ldrh	r3, [r3, #2]
 800bebc:	8afa      	ldrh	r2, [r7, #22]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d001      	beq.n	800bec6 <mem_link_valid+0x6a>
    return 0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	e000      	b.n	800bec8 <mem_link_valid+0x6c>
  }
  return 1;
 800bec6:	2301      	movs	r3, #1
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	20011718 	.word	0x20011718

0800bed4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d04c      	beq.n	800bf7c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f003 0303 	and.w	r3, r3, #3
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d007      	beq.n	800befc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800beec:	4b25      	ldr	r3, [pc, #148]	@ (800bf84 <mem_free+0xb0>)
 800beee:	f240 2273 	movw	r2, #627	@ 0x273
 800bef2:	4925      	ldr	r1, [pc, #148]	@ (800bf88 <mem_free+0xb4>)
 800bef4:	4825      	ldr	r0, [pc, #148]	@ (800bf8c <mem_free+0xb8>)
 800bef6:	f00b fd55 	bl	80179a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800befa:	e040      	b.n	800bf7e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3b08      	subs	r3, #8
 800bf00:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bf02:	4b23      	ldr	r3, [pc, #140]	@ (800bf90 <mem_free+0xbc>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d306      	bcc.n	800bf1a <mem_free+0x46>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f103 020c 	add.w	r2, r3, #12
 800bf12:	4b20      	ldr	r3, [pc, #128]	@ (800bf94 <mem_free+0xc0>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d907      	bls.n	800bf2a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bf1a:	4b1a      	ldr	r3, [pc, #104]	@ (800bf84 <mem_free+0xb0>)
 800bf1c:	f240 227f 	movw	r2, #639	@ 0x27f
 800bf20:	491d      	ldr	r1, [pc, #116]	@ (800bf98 <mem_free+0xc4>)
 800bf22:	481a      	ldr	r0, [pc, #104]	@ (800bf8c <mem_free+0xb8>)
 800bf24:	f00b fd3e 	bl	80179a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bf28:	e029      	b.n	800bf7e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	791b      	ldrb	r3, [r3, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d107      	bne.n	800bf42 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bf32:	4b14      	ldr	r3, [pc, #80]	@ (800bf84 <mem_free+0xb0>)
 800bf34:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800bf38:	4918      	ldr	r1, [pc, #96]	@ (800bf9c <mem_free+0xc8>)
 800bf3a:	4814      	ldr	r0, [pc, #80]	@ (800bf8c <mem_free+0xb8>)
 800bf3c:	f00b fd32 	bl	80179a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bf40:	e01d      	b.n	800bf7e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f7ff ff8a 	bl	800be5c <mem_link_valid>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d107      	bne.n	800bf5e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bf4e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf84 <mem_free+0xb0>)
 800bf50:	f240 2295 	movw	r2, #661	@ 0x295
 800bf54:	4912      	ldr	r1, [pc, #72]	@ (800bfa0 <mem_free+0xcc>)
 800bf56:	480d      	ldr	r0, [pc, #52]	@ (800bf8c <mem_free+0xb8>)
 800bf58:	f00b fd24 	bl	80179a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bf5c:	e00f      	b.n	800bf7e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bf64:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa4 <mem_free+0xd0>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d202      	bcs.n	800bf74 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bf6e:	4a0d      	ldr	r2, [pc, #52]	@ (800bfa4 <mem_free+0xd0>)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f7ff fe93 	bl	800bca0 <plug_holes>
 800bf7a:	e000      	b.n	800bf7e <mem_free+0xaa>
    return;
 800bf7c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	0801a570 	.word	0x0801a570
 800bf88:	0801a644 	.word	0x0801a644
 800bf8c:	0801a5b8 	.word	0x0801a5b8
 800bf90:	20011714 	.word	0x20011714
 800bf94:	20011718 	.word	0x20011718
 800bf98:	0801a668 	.word	0x0801a668
 800bf9c:	0801a684 	.word	0x0801a684
 800bfa0:	0801a6ac 	.word	0x0801a6ac
 800bfa4:	2001171c 	.word	0x2001171c

0800bfa8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bfb4:	887b      	ldrh	r3, [r7, #2]
 800bfb6:	3303      	adds	r3, #3
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	f023 0303 	bic.w	r3, r3, #3
 800bfbe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bfc0:	8bfb      	ldrh	r3, [r7, #30]
 800bfc2:	2b0b      	cmp	r3, #11
 800bfc4:	d801      	bhi.n	800bfca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bfc6:	230c      	movs	r3, #12
 800bfc8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bfca:	8bfb      	ldrh	r3, [r7, #30]
 800bfcc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bfd0:	d803      	bhi.n	800bfda <mem_trim+0x32>
 800bfd2:	8bfa      	ldrh	r2, [r7, #30]
 800bfd4:	887b      	ldrh	r3, [r7, #2]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d201      	bcs.n	800bfde <mem_trim+0x36>
    return NULL;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e0cc      	b.n	800c178 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bfde:	4b68      	ldr	r3, [pc, #416]	@ (800c180 <mem_trim+0x1d8>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d304      	bcc.n	800bff2 <mem_trim+0x4a>
 800bfe8:	4b66      	ldr	r3, [pc, #408]	@ (800c184 <mem_trim+0x1dc>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d306      	bcc.n	800c000 <mem_trim+0x58>
 800bff2:	4b65      	ldr	r3, [pc, #404]	@ (800c188 <mem_trim+0x1e0>)
 800bff4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bff8:	4964      	ldr	r1, [pc, #400]	@ (800c18c <mem_trim+0x1e4>)
 800bffa:	4865      	ldr	r0, [pc, #404]	@ (800c190 <mem_trim+0x1e8>)
 800bffc:	f00b fcd2 	bl	80179a4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c000:	4b5f      	ldr	r3, [pc, #380]	@ (800c180 <mem_trim+0x1d8>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	429a      	cmp	r2, r3
 800c008:	d304      	bcc.n	800c014 <mem_trim+0x6c>
 800c00a:	4b5e      	ldr	r3, [pc, #376]	@ (800c184 <mem_trim+0x1dc>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	429a      	cmp	r2, r3
 800c012:	d301      	bcc.n	800c018 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	e0af      	b.n	800c178 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3b08      	subs	r3, #8
 800c01c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c01e:	69b8      	ldr	r0, [r7, #24]
 800c020:	f7ff fe2c 	bl	800bc7c <mem_to_ptr>
 800c024:	4603      	mov	r3, r0
 800c026:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	881a      	ldrh	r2, [r3, #0]
 800c02c:	8afb      	ldrh	r3, [r7, #22]
 800c02e:	1ad3      	subs	r3, r2, r3
 800c030:	b29b      	uxth	r3, r3
 800c032:	3b08      	subs	r3, #8
 800c034:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c036:	8bfa      	ldrh	r2, [r7, #30]
 800c038:	8abb      	ldrh	r3, [r7, #20]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d906      	bls.n	800c04c <mem_trim+0xa4>
 800c03e:	4b52      	ldr	r3, [pc, #328]	@ (800c188 <mem_trim+0x1e0>)
 800c040:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800c044:	4953      	ldr	r1, [pc, #332]	@ (800c194 <mem_trim+0x1ec>)
 800c046:	4852      	ldr	r0, [pc, #328]	@ (800c190 <mem_trim+0x1e8>)
 800c048:	f00b fcac 	bl	80179a4 <iprintf>
  if (newsize > size) {
 800c04c:	8bfa      	ldrh	r2, [r7, #30]
 800c04e:	8abb      	ldrh	r3, [r7, #20]
 800c050:	429a      	cmp	r2, r3
 800c052:	d901      	bls.n	800c058 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c054:	2300      	movs	r3, #0
 800c056:	e08f      	b.n	800c178 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c058:	8bfa      	ldrh	r2, [r7, #30]
 800c05a:	8abb      	ldrh	r3, [r7, #20]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d101      	bne.n	800c064 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	e089      	b.n	800c178 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	4618      	mov	r0, r3
 800c06a:	f7ff fdf5 	bl	800bc58 <ptr_to_mem>
 800c06e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	791b      	ldrb	r3, [r3, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d13f      	bne.n	800c0f8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c080:	d106      	bne.n	800c090 <mem_trim+0xe8>
 800c082:	4b41      	ldr	r3, [pc, #260]	@ (800c188 <mem_trim+0x1e0>)
 800c084:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c088:	4943      	ldr	r1, [pc, #268]	@ (800c198 <mem_trim+0x1f0>)
 800c08a:	4841      	ldr	r0, [pc, #260]	@ (800c190 <mem_trim+0x1e8>)
 800c08c:	f00b fc8a 	bl	80179a4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	881b      	ldrh	r3, [r3, #0]
 800c094:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c096:	8afa      	ldrh	r2, [r7, #22]
 800c098:	8bfb      	ldrh	r3, [r7, #30]
 800c09a:	4413      	add	r3, r2
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	3308      	adds	r3, #8
 800c0a0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c0a2:	4b3e      	ldr	r3, [pc, #248]	@ (800c19c <mem_trim+0x1f4>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d106      	bne.n	800c0ba <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c0ac:	89fb      	ldrh	r3, [r7, #14]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff fdd2 	bl	800bc58 <ptr_to_mem>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	4a39      	ldr	r2, [pc, #228]	@ (800c19c <mem_trim+0x1f4>)
 800c0b8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c0ba:	89fb      	ldrh	r3, [r7, #14]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff fdcb 	bl	800bc58 <ptr_to_mem>
 800c0c2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	89ba      	ldrh	r2, [r7, #12]
 800c0ce:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	8afa      	ldrh	r2, [r7, #22]
 800c0d4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	89fa      	ldrh	r2, [r7, #14]
 800c0da:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c0e4:	d047      	beq.n	800c176 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7ff fdb4 	bl	800bc58 <ptr_to_mem>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	89fb      	ldrh	r3, [r7, #14]
 800c0f4:	8053      	strh	r3, [r2, #2]
 800c0f6:	e03e      	b.n	800c176 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c0f8:	8bfb      	ldrh	r3, [r7, #30]
 800c0fa:	f103 0214 	add.w	r2, r3, #20
 800c0fe:	8abb      	ldrh	r3, [r7, #20]
 800c100:	429a      	cmp	r2, r3
 800c102:	d838      	bhi.n	800c176 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c104:	8afa      	ldrh	r2, [r7, #22]
 800c106:	8bfb      	ldrh	r3, [r7, #30]
 800c108:	4413      	add	r3, r2
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	3308      	adds	r3, #8
 800c10e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	881b      	ldrh	r3, [r3, #0]
 800c114:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c118:	d106      	bne.n	800c128 <mem_trim+0x180>
 800c11a:	4b1b      	ldr	r3, [pc, #108]	@ (800c188 <mem_trim+0x1e0>)
 800c11c:	f240 3216 	movw	r2, #790	@ 0x316
 800c120:	491d      	ldr	r1, [pc, #116]	@ (800c198 <mem_trim+0x1f0>)
 800c122:	481b      	ldr	r0, [pc, #108]	@ (800c190 <mem_trim+0x1e8>)
 800c124:	f00b fc3e 	bl	80179a4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c128:	89fb      	ldrh	r3, [r7, #14]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7ff fd94 	bl	800bc58 <ptr_to_mem>
 800c130:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c132:	4b1a      	ldr	r3, [pc, #104]	@ (800c19c <mem_trim+0x1f4>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d202      	bcs.n	800c142 <mem_trim+0x19a>
      lfree = mem2;
 800c13c:	4a17      	ldr	r2, [pc, #92]	@ (800c19c <mem_trim+0x1f4>)
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	2200      	movs	r2, #0
 800c146:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	881a      	ldrh	r2, [r3, #0]
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	8afa      	ldrh	r2, [r7, #22]
 800c154:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	89fa      	ldrh	r2, [r7, #14]
 800c15a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c164:	d007      	beq.n	800c176 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	881b      	ldrh	r3, [r3, #0]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff fd74 	bl	800bc58 <ptr_to_mem>
 800c170:	4602      	mov	r2, r0
 800c172:	89fb      	ldrh	r3, [r7, #14]
 800c174:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c176:	687b      	ldr	r3, [r7, #4]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3720      	adds	r7, #32
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	20011714 	.word	0x20011714
 800c184:	20011718 	.word	0x20011718
 800c188:	0801a570 	.word	0x0801a570
 800c18c:	0801a6e0 	.word	0x0801a6e0
 800c190:	0801a5b8 	.word	0x0801a5b8
 800c194:	0801a6f8 	.word	0x0801a6f8
 800c198:	0801a718 	.word	0x0801a718
 800c19c:	2001171c 	.word	0x2001171c

0800c1a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b088      	sub	sp, #32
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c1aa:	88fb      	ldrh	r3, [r7, #6]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d101      	bne.n	800c1b4 <mem_malloc+0x14>
    return NULL;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	e0d9      	b.n	800c368 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c1b4:	88fb      	ldrh	r3, [r7, #6]
 800c1b6:	3303      	adds	r3, #3
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	f023 0303 	bic.w	r3, r3, #3
 800c1be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c1c0:	8bbb      	ldrh	r3, [r7, #28]
 800c1c2:	2b0b      	cmp	r3, #11
 800c1c4:	d801      	bhi.n	800c1ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c1c6:	230c      	movs	r3, #12
 800c1c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c1ca:	8bbb      	ldrh	r3, [r7, #28]
 800c1cc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c1d0:	d803      	bhi.n	800c1da <mem_malloc+0x3a>
 800c1d2:	8bba      	ldrh	r2, [r7, #28]
 800c1d4:	88fb      	ldrh	r3, [r7, #6]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d201      	bcs.n	800c1de <mem_malloc+0x3e>
    return NULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	e0c4      	b.n	800c368 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c1de:	4b64      	ldr	r3, [pc, #400]	@ (800c370 <mem_malloc+0x1d0>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7ff fd4a 	bl	800bc7c <mem_to_ptr>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	83fb      	strh	r3, [r7, #30]
 800c1ec:	e0b4      	b.n	800c358 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c1ee:	8bfb      	ldrh	r3, [r7, #30]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7ff fd31 	bl	800bc58 <ptr_to_mem>
 800c1f6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	791b      	ldrb	r3, [r3, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f040 80a4 	bne.w	800c34a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	8bfb      	ldrh	r3, [r7, #30]
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	f1a3 0208 	sub.w	r2, r3, #8
 800c210:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c212:	429a      	cmp	r2, r3
 800c214:	f0c0 8099 	bcc.w	800c34a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	881b      	ldrh	r3, [r3, #0]
 800c21c:	461a      	mov	r2, r3
 800c21e:	8bfb      	ldrh	r3, [r7, #30]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	f1a3 0208 	sub.w	r2, r3, #8
 800c226:	8bbb      	ldrh	r3, [r7, #28]
 800c228:	3314      	adds	r3, #20
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d333      	bcc.n	800c296 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c22e:	8bfa      	ldrh	r2, [r7, #30]
 800c230:	8bbb      	ldrh	r3, [r7, #28]
 800c232:	4413      	add	r3, r2
 800c234:	b29b      	uxth	r3, r3
 800c236:	3308      	adds	r3, #8
 800c238:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c23a:	8a7b      	ldrh	r3, [r7, #18]
 800c23c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c240:	d106      	bne.n	800c250 <mem_malloc+0xb0>
 800c242:	4b4c      	ldr	r3, [pc, #304]	@ (800c374 <mem_malloc+0x1d4>)
 800c244:	f240 3287 	movw	r2, #903	@ 0x387
 800c248:	494b      	ldr	r1, [pc, #300]	@ (800c378 <mem_malloc+0x1d8>)
 800c24a:	484c      	ldr	r0, [pc, #304]	@ (800c37c <mem_malloc+0x1dc>)
 800c24c:	f00b fbaa 	bl	80179a4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c250:	8a7b      	ldrh	r3, [r7, #18]
 800c252:	4618      	mov	r0, r3
 800c254:	f7ff fd00 	bl	800bc58 <ptr_to_mem>
 800c258:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2200      	movs	r2, #0
 800c25e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	881a      	ldrh	r2, [r3, #0]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	8bfa      	ldrh	r2, [r7, #30]
 800c26c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	8a7a      	ldrh	r2, [r7, #18]
 800c272:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	2201      	movs	r2, #1
 800c278:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	881b      	ldrh	r3, [r3, #0]
 800c27e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c282:	d00b      	beq.n	800c29c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f7ff fce5 	bl	800bc58 <ptr_to_mem>
 800c28e:	4602      	mov	r2, r0
 800c290:	8a7b      	ldrh	r3, [r7, #18]
 800c292:	8053      	strh	r3, [r2, #2]
 800c294:	e002      	b.n	800c29c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	2201      	movs	r2, #1
 800c29a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c29c:	4b34      	ldr	r3, [pc, #208]	@ (800c370 <mem_malloc+0x1d0>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	697a      	ldr	r2, [r7, #20]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d127      	bne.n	800c2f6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c2a6:	4b32      	ldr	r3, [pc, #200]	@ (800c370 <mem_malloc+0x1d0>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c2ac:	e005      	b.n	800c2ba <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	881b      	ldrh	r3, [r3, #0]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff fcd0 	bl	800bc58 <ptr_to_mem>
 800c2b8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	791b      	ldrb	r3, [r3, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d004      	beq.n	800c2cc <mem_malloc+0x12c>
 800c2c2:	4b2f      	ldr	r3, [pc, #188]	@ (800c380 <mem_malloc+0x1e0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	69ba      	ldr	r2, [r7, #24]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d1f0      	bne.n	800c2ae <mem_malloc+0x10e>
          }
          lfree = cur;
 800c2cc:	4a28      	ldr	r2, [pc, #160]	@ (800c370 <mem_malloc+0x1d0>)
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c2d2:	4b27      	ldr	r3, [pc, #156]	@ (800c370 <mem_malloc+0x1d0>)
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	4b2a      	ldr	r3, [pc, #168]	@ (800c380 <mem_malloc+0x1e0>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d00b      	beq.n	800c2f6 <mem_malloc+0x156>
 800c2de:	4b24      	ldr	r3, [pc, #144]	@ (800c370 <mem_malloc+0x1d0>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	791b      	ldrb	r3, [r3, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d006      	beq.n	800c2f6 <mem_malloc+0x156>
 800c2e8:	4b22      	ldr	r3, [pc, #136]	@ (800c374 <mem_malloc+0x1d4>)
 800c2ea:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c2ee:	4925      	ldr	r1, [pc, #148]	@ (800c384 <mem_malloc+0x1e4>)
 800c2f0:	4822      	ldr	r0, [pc, #136]	@ (800c37c <mem_malloc+0x1dc>)
 800c2f2:	f00b fb57 	bl	80179a4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c2f6:	8bba      	ldrh	r2, [r7, #28]
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	4a20      	ldr	r2, [pc, #128]	@ (800c380 <mem_malloc+0x1e0>)
 800c300:	6812      	ldr	r2, [r2, #0]
 800c302:	4293      	cmp	r3, r2
 800c304:	d906      	bls.n	800c314 <mem_malloc+0x174>
 800c306:	4b1b      	ldr	r3, [pc, #108]	@ (800c374 <mem_malloc+0x1d4>)
 800c308:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c30c:	491e      	ldr	r1, [pc, #120]	@ (800c388 <mem_malloc+0x1e8>)
 800c30e:	481b      	ldr	r0, [pc, #108]	@ (800c37c <mem_malloc+0x1dc>)
 800c310:	f00b fb48 	bl	80179a4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	f003 0303 	and.w	r3, r3, #3
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d006      	beq.n	800c32c <mem_malloc+0x18c>
 800c31e:	4b15      	ldr	r3, [pc, #84]	@ (800c374 <mem_malloc+0x1d4>)
 800c320:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c324:	4919      	ldr	r1, [pc, #100]	@ (800c38c <mem_malloc+0x1ec>)
 800c326:	4815      	ldr	r0, [pc, #84]	@ (800c37c <mem_malloc+0x1dc>)
 800c328:	f00b fb3c 	bl	80179a4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	f003 0303 	and.w	r3, r3, #3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d006      	beq.n	800c344 <mem_malloc+0x1a4>
 800c336:	4b0f      	ldr	r3, [pc, #60]	@ (800c374 <mem_malloc+0x1d4>)
 800c338:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c33c:	4914      	ldr	r1, [pc, #80]	@ (800c390 <mem_malloc+0x1f0>)
 800c33e:	480f      	ldr	r0, [pc, #60]	@ (800c37c <mem_malloc+0x1dc>)
 800c340:	f00b fb30 	bl	80179a4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	3308      	adds	r3, #8
 800c348:	e00e      	b.n	800c368 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c34a:	8bfb      	ldrh	r3, [r7, #30]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7ff fc83 	bl	800bc58 <ptr_to_mem>
 800c352:	4603      	mov	r3, r0
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c358:	8bfa      	ldrh	r2, [r7, #30]
 800c35a:	8bbb      	ldrh	r3, [r7, #28]
 800c35c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800c360:	429a      	cmp	r2, r3
 800c362:	f4ff af44 	bcc.w	800c1ee <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3720      	adds	r7, #32
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	2001171c 	.word	0x2001171c
 800c374:	0801a570 	.word	0x0801a570
 800c378:	0801a718 	.word	0x0801a718
 800c37c:	0801a5b8 	.word	0x0801a5b8
 800c380:	20011718 	.word	0x20011718
 800c384:	0801a72c 	.word	0x0801a72c
 800c388:	0801a748 	.word	0x0801a748
 800c38c:	0801a778 	.word	0x0801a778
 800c390:	0801a7a8 	.word	0x0801a7a8

0800c394 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	3303      	adds	r3, #3
 800c3aa:	f023 0303 	bic.w	r3, r3, #3
 800c3ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	e011      	b.n	800c3da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	885b      	ldrh	r3, [r3, #2]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	dbe7      	blt.n	800c3b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c3e6:	bf00      	nop
 800c3e8:	bf00      	nop
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	80fb      	strh	r3, [r7, #6]
 800c3fe:	e009      	b.n	800c414 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c400:	88fb      	ldrh	r3, [r7, #6]
 800c402:	4a08      	ldr	r2, [pc, #32]	@ (800c424 <memp_init+0x30>)
 800c404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff ffc3 	bl	800c394 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c40e:	88fb      	ldrh	r3, [r7, #6]
 800c410:	3301      	adds	r3, #1
 800c412:	80fb      	strh	r3, [r7, #6]
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	2b08      	cmp	r3, #8
 800c418:	d9f2      	bls.n	800c400 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c41a:	bf00      	nop
 800c41c:	bf00      	nop
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	08054a7c 	.word	0x08054a7c

0800c428 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d012      	beq.n	800c464 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	6812      	ldr	r2, [r2, #0]
 800c446:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f003 0303 	and.w	r3, r3, #3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d006      	beq.n	800c460 <do_memp_malloc_pool+0x38>
 800c452:	4b07      	ldr	r3, [pc, #28]	@ (800c470 <do_memp_malloc_pool+0x48>)
 800c454:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c458:	4906      	ldr	r1, [pc, #24]	@ (800c474 <do_memp_malloc_pool+0x4c>)
 800c45a:	4807      	ldr	r0, [pc, #28]	@ (800c478 <do_memp_malloc_pool+0x50>)
 800c45c:	f00b faa2 	bl	80179a4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	e000      	b.n	800c466 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	0801a7cc 	.word	0x0801a7cc
 800c474:	0801a7fc 	.word	0x0801a7fc
 800c478:	0801a820 	.word	0x0801a820

0800c47c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d106      	bne.n	800c498 <memp_malloc_pool+0x1c>
 800c48a:	4b0a      	ldr	r3, [pc, #40]	@ (800c4b4 <memp_malloc_pool+0x38>)
 800c48c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c490:	4909      	ldr	r1, [pc, #36]	@ (800c4b8 <memp_malloc_pool+0x3c>)
 800c492:	480a      	ldr	r0, [pc, #40]	@ (800c4bc <memp_malloc_pool+0x40>)
 800c494:	f00b fa86 	bl	80179a4 <iprintf>
  if (desc == NULL) {
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d101      	bne.n	800c4a2 <memp_malloc_pool+0x26>
    return NULL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	e003      	b.n	800c4aa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff ffc0 	bl	800c428 <do_memp_malloc_pool>
 800c4a8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	0801a7cc 	.word	0x0801a7cc
 800c4b8:	0801a848 	.word	0x0801a848
 800c4bc:	0801a820 	.word	0x0801a820

0800c4c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c4ca:	79fb      	ldrb	r3, [r7, #7]
 800c4cc:	2b08      	cmp	r3, #8
 800c4ce:	d908      	bls.n	800c4e2 <memp_malloc+0x22>
 800c4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c4fc <memp_malloc+0x3c>)
 800c4d2:	f240 1257 	movw	r2, #343	@ 0x157
 800c4d6:	490a      	ldr	r1, [pc, #40]	@ (800c500 <memp_malloc+0x40>)
 800c4d8:	480a      	ldr	r0, [pc, #40]	@ (800c504 <memp_malloc+0x44>)
 800c4da:	f00b fa63 	bl	80179a4 <iprintf>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	e008      	b.n	800c4f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	4a08      	ldr	r2, [pc, #32]	@ (800c508 <memp_malloc+0x48>)
 800c4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff ff9c 	bl	800c428 <do_memp_malloc_pool>
 800c4f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	0801a7cc 	.word	0x0801a7cc
 800c500:	0801a85c 	.word	0x0801a85c
 800c504:	0801a820 	.word	0x0801a820
 800c508:	08054a7c 	.word	0x08054a7c

0800c50c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	f003 0303 	and.w	r3, r3, #3
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d006      	beq.n	800c52e <do_memp_free_pool+0x22>
 800c520:	4b0a      	ldr	r3, [pc, #40]	@ (800c54c <do_memp_free_pool+0x40>)
 800c522:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c526:	490a      	ldr	r1, [pc, #40]	@ (800c550 <do_memp_free_pool+0x44>)
 800c528:	480a      	ldr	r0, [pc, #40]	@ (800c554 <do_memp_free_pool+0x48>)
 800c52a:	f00b fa3b 	bl	80179a4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c544:	bf00      	nop
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	0801a7cc 	.word	0x0801a7cc
 800c550:	0801a87c 	.word	0x0801a87c
 800c554:	0801a820 	.word	0x0801a820

0800c558 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d106      	bne.n	800c576 <memp_free_pool+0x1e>
 800c568:	4b0a      	ldr	r3, [pc, #40]	@ (800c594 <memp_free_pool+0x3c>)
 800c56a:	f240 1295 	movw	r2, #405	@ 0x195
 800c56e:	490a      	ldr	r1, [pc, #40]	@ (800c598 <memp_free_pool+0x40>)
 800c570:	480a      	ldr	r0, [pc, #40]	@ (800c59c <memp_free_pool+0x44>)
 800c572:	f00b fa17 	bl	80179a4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d007      	beq.n	800c58c <memp_free_pool+0x34>
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d004      	beq.n	800c58c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c582:	6839      	ldr	r1, [r7, #0]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff ffc1 	bl	800c50c <do_memp_free_pool>
 800c58a:	e000      	b.n	800c58e <memp_free_pool+0x36>
    return;
 800c58c:	bf00      	nop
}
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	0801a7cc 	.word	0x0801a7cc
 800c598:	0801a848 	.word	0x0801a848
 800c59c:	0801a820 	.word	0x0801a820

0800c5a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	6039      	str	r1, [r7, #0]
 800c5aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
 800c5ae:	2b08      	cmp	r3, #8
 800c5b0:	d907      	bls.n	800c5c2 <memp_free+0x22>
 800c5b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e4 <memp_free+0x44>)
 800c5b4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c5b8:	490b      	ldr	r1, [pc, #44]	@ (800c5e8 <memp_free+0x48>)
 800c5ba:	480c      	ldr	r0, [pc, #48]	@ (800c5ec <memp_free+0x4c>)
 800c5bc:	f00b f9f2 	bl	80179a4 <iprintf>
 800c5c0:	e00c      	b.n	800c5dc <memp_free+0x3c>

  if (mem == NULL) {
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d008      	beq.n	800c5da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c5c8:	79fb      	ldrb	r3, [r7, #7]
 800c5ca:	4a09      	ldr	r2, [pc, #36]	@ (800c5f0 <memp_free+0x50>)
 800c5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7ff ff9a 	bl	800c50c <do_memp_free_pool>
 800c5d8:	e000      	b.n	800c5dc <memp_free+0x3c>
    return;
 800c5da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	0801a7cc 	.word	0x0801a7cc
 800c5e8:	0801a89c 	.word	0x0801a89c
 800c5ec:	0801a820 	.word	0x0801a820
 800c5f0:	08054a7c 	.word	0x08054a7c

0800c5f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c5f8:	bf00      	nop
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
	...

0800c604 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
 800c610:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d108      	bne.n	800c62a <netif_add+0x26>
 800c618:	4b57      	ldr	r3, [pc, #348]	@ (800c778 <netif_add+0x174>)
 800c61a:	f240 1227 	movw	r2, #295	@ 0x127
 800c61e:	4957      	ldr	r1, [pc, #348]	@ (800c77c <netif_add+0x178>)
 800c620:	4857      	ldr	r0, [pc, #348]	@ (800c780 <netif_add+0x17c>)
 800c622:	f00b f9bf 	bl	80179a4 <iprintf>
 800c626:	2300      	movs	r3, #0
 800c628:	e0a2      	b.n	800c770 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d108      	bne.n	800c642 <netif_add+0x3e>
 800c630:	4b51      	ldr	r3, [pc, #324]	@ (800c778 <netif_add+0x174>)
 800c632:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c636:	4953      	ldr	r1, [pc, #332]	@ (800c784 <netif_add+0x180>)
 800c638:	4851      	ldr	r0, [pc, #324]	@ (800c780 <netif_add+0x17c>)
 800c63a:	f00b f9b3 	bl	80179a4 <iprintf>
 800c63e:	2300      	movs	r3, #0
 800c640:	e096      	b.n	800c770 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c648:	4b4f      	ldr	r3, [pc, #316]	@ (800c788 <netif_add+0x184>)
 800c64a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c652:	4b4d      	ldr	r3, [pc, #308]	@ (800c788 <netif_add+0x184>)
 800c654:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d101      	bne.n	800c660 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c65c:	4b4a      	ldr	r3, [pc, #296]	@ (800c788 <netif_add+0x184>)
 800c65e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2200      	movs	r2, #0
 800c664:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2200      	movs	r2, #0
 800c670:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	4a45      	ldr	r2, [pc, #276]	@ (800c78c <netif_add+0x188>)
 800c676:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2200      	movs	r2, #0
 800c67c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2200      	movs	r2, #0
 800c68a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	6a3a      	ldr	r2, [r7, #32]
 800c690:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c692:	4b3f      	ldr	r3, [pc, #252]	@ (800c790 <netif_add+0x18c>)
 800c694:	781a      	ldrb	r2, [r3, #0]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6a0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	68b9      	ldr	r1, [r7, #8]
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f000 f913 	bl	800c8d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	4798      	blx	r3
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <netif_add+0xba>
    return NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e058      	b.n	800c770 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6c4:	2bff      	cmp	r3, #255	@ 0xff
 800c6c6:	d103      	bne.n	800c6d0 <netif_add+0xcc>
        netif->num = 0;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c6d4:	4b2f      	ldr	r3, [pc, #188]	@ (800c794 <netif_add+0x190>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	617b      	str	r3, [r7, #20]
 800c6da:	e02b      	b.n	800c734 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d106      	bne.n	800c6f2 <netif_add+0xee>
 800c6e4:	4b24      	ldr	r3, [pc, #144]	@ (800c778 <netif_add+0x174>)
 800c6e6:	f240 128b 	movw	r2, #395	@ 0x18b
 800c6ea:	492b      	ldr	r1, [pc, #172]	@ (800c798 <netif_add+0x194>)
 800c6ec:	4824      	ldr	r0, [pc, #144]	@ (800c780 <netif_add+0x17c>)
 800c6ee:	f00b f959 	bl	80179a4 <iprintf>
        num_netifs++;
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	2bff      	cmp	r3, #255	@ 0xff
 800c6fc:	dd06      	ble.n	800c70c <netif_add+0x108>
 800c6fe:	4b1e      	ldr	r3, [pc, #120]	@ (800c778 <netif_add+0x174>)
 800c700:	f240 128d 	movw	r2, #397	@ 0x18d
 800c704:	4925      	ldr	r1, [pc, #148]	@ (800c79c <netif_add+0x198>)
 800c706:	481e      	ldr	r0, [pc, #120]	@ (800c780 <netif_add+0x17c>)
 800c708:	f00b f94c 	bl	80179a4 <iprintf>
        if (netif2->num == netif->num) {
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c718:	429a      	cmp	r2, r3
 800c71a:	d108      	bne.n	800c72e <netif_add+0x12a>
          netif->num++;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c722:	3301      	adds	r3, #1
 800c724:	b2da      	uxtb	r2, r3
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800c72c:	e005      	b.n	800c73a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	617b      	str	r3, [r7, #20]
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1d0      	bne.n	800c6dc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1be      	bne.n	800c6be <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c746:	2bfe      	cmp	r3, #254	@ 0xfe
 800c748:	d103      	bne.n	800c752 <netif_add+0x14e>
    netif_num = 0;
 800c74a:	4b11      	ldr	r3, [pc, #68]	@ (800c790 <netif_add+0x18c>)
 800c74c:	2200      	movs	r2, #0
 800c74e:	701a      	strb	r2, [r3, #0]
 800c750:	e006      	b.n	800c760 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c758:	3301      	adds	r3, #1
 800c75a:	b2da      	uxtb	r2, r3
 800c75c:	4b0c      	ldr	r3, [pc, #48]	@ (800c790 <netif_add+0x18c>)
 800c75e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c760:	4b0c      	ldr	r3, [pc, #48]	@ (800c794 <netif_add+0x190>)
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c768:	4a0a      	ldr	r2, [pc, #40]	@ (800c794 <netif_add+0x190>)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c76e:	68fb      	ldr	r3, [r7, #12]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3718      	adds	r7, #24
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	0801a8b8 	.word	0x0801a8b8
 800c77c:	0801a94c 	.word	0x0801a94c
 800c780:	0801a908 	.word	0x0801a908
 800c784:	0801a968 	.word	0x0801a968
 800c788:	08054ae0 	.word	0x08054ae0
 800c78c:	0800cc4b 	.word	0x0800cc4b
 800c790:	20014614 	.word	0x20014614
 800c794:	2001460c 	.word	0x2001460c
 800c798:	0801a98c 	.word	0x0801a98c
 800c79c:	0801a9a0 	.word	0x0801a9a0

0800c7a0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c7aa:	6839      	ldr	r1, [r7, #0]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f002 fedb 	bl	800f568 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f007 ff61 	bl	801467c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c7ba:	bf00      	nop
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
	...

0800c7c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d106      	bne.n	800c7e4 <netif_do_set_ipaddr+0x20>
 800c7d6:	4b1d      	ldr	r3, [pc, #116]	@ (800c84c <netif_do_set_ipaddr+0x88>)
 800c7d8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c7dc:	491c      	ldr	r1, [pc, #112]	@ (800c850 <netif_do_set_ipaddr+0x8c>)
 800c7de:	481d      	ldr	r0, [pc, #116]	@ (800c854 <netif_do_set_ipaddr+0x90>)
 800c7e0:	f00b f8e0 	bl	80179a4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d106      	bne.n	800c7f8 <netif_do_set_ipaddr+0x34>
 800c7ea:	4b18      	ldr	r3, [pc, #96]	@ (800c84c <netif_do_set_ipaddr+0x88>)
 800c7ec:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c7f0:	4917      	ldr	r1, [pc, #92]	@ (800c850 <netif_do_set_ipaddr+0x8c>)
 800c7f2:	4818      	ldr	r0, [pc, #96]	@ (800c854 <netif_do_set_ipaddr+0x90>)
 800c7f4:	f00b f8d6 	bl	80179a4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	3304      	adds	r3, #4
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	429a      	cmp	r2, r3
 800c804:	d01c      	beq.n	800c840 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	3304      	adds	r3, #4
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c816:	f107 0314 	add.w	r3, r7, #20
 800c81a:	4619      	mov	r1, r3
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f7ff ffbf 	bl	800c7a0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <netif_do_set_ipaddr+0x6a>
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	e000      	b.n	800c830 <netif_do_set_ipaddr+0x6c>
 800c82e:	2300      	movs	r3, #0
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c834:	2101      	movs	r1, #1
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f000 f920 	bl	800ca7c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c83c:	2301      	movs	r3, #1
 800c83e:	e000      	b.n	800c842 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	0801a8b8 	.word	0x0801a8b8
 800c850:	0801a9d0 	.word	0x0801a9d0
 800c854:	0801a908 	.word	0x0801a908

0800c858 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	3308      	adds	r3, #8
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d00a      	beq.n	800c888 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <netif_do_set_netmask+0x26>
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	e000      	b.n	800c880 <netif_do_set_netmask+0x28>
 800c87e:	2300      	movs	r3, #0
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c884:	2301      	movs	r3, #1
 800c886:	e000      	b.n	800c88a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3714      	adds	r7, #20
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c896:	b480      	push	{r7}
 800c898:	b085      	sub	sp, #20
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	60f8      	str	r0, [r7, #12]
 800c89e:	60b9      	str	r1, [r7, #8]
 800c8a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	330c      	adds	r3, #12
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d00a      	beq.n	800c8c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <netif_do_set_gw+0x26>
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	e000      	b.n	800c8be <netif_do_set_gw+0x28>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e000      	b.n	800c8c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3714      	adds	r7, #20
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d101      	bne.n	800c8f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c8f0:	4b1c      	ldr	r3, [pc, #112]	@ (800c964 <netif_set_addr+0x90>)
 800c8f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d101      	bne.n	800c8fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c8fa:	4b1a      	ldr	r3, [pc, #104]	@ (800c964 <netif_set_addr+0x90>)
 800c8fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d101      	bne.n	800c908 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c904:	4b17      	ldr	r3, [pc, #92]	@ (800c964 <netif_set_addr+0x90>)
 800c906:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <netif_set_addr+0x42>
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d101      	bne.n	800c91a <netif_set_addr+0x46>
 800c916:	2301      	movs	r3, #1
 800c918:	e000      	b.n	800c91c <netif_set_addr+0x48>
 800c91a:	2300      	movs	r3, #0
 800c91c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d006      	beq.n	800c932 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c924:	f107 0310 	add.w	r3, r7, #16
 800c928:	461a      	mov	r2, r3
 800c92a:	68b9      	ldr	r1, [r7, #8]
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f7ff ff49 	bl	800c7c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c932:	69fa      	ldr	r2, [r7, #28]
 800c934:	6879      	ldr	r1, [r7, #4]
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff ff8e 	bl	800c858 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c93c:	69ba      	ldr	r2, [r7, #24]
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f7ff ffa8 	bl	800c896 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d106      	bne.n	800c95a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c94c:	f107 0310 	add.w	r3, r7, #16
 800c950:	461a      	mov	r2, r3
 800c952:	68b9      	ldr	r1, [r7, #8]
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff ff35 	bl	800c7c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c95a:	bf00      	nop
 800c95c:	3720      	adds	r7, #32
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	08054ae0 	.word	0x08054ae0

0800c968 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  int i;
#endif

  LWIP_ASSERT_CORE_LOCKED();

  if (netif == NULL) {
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d03e      	beq.n	800c9f4 <netif_remove+0x8c>
  }

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_REMOVED, NULL);

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3304      	adds	r3, #4
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d005      	beq.n	800c98c <netif_remove+0x24>
    netif_do_ip_addr_changed(netif_ip_addr4(netif), NULL);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3304      	adds	r3, #4
 800c984:	2100      	movs	r1, #0
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff ff0a 	bl	800c7a0 <netif_do_ip_addr_changed>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c992:	f003 0301 	and.w	r3, r3, #1
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <netif_remove+0x3a>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f8ad 	bl	800cafc <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
 800c9a2:	4b16      	ldr	r3, [pc, #88]	@ (800c9fc <netif_remove+0x94>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d102      	bne.n	800c9b2 <netif_remove+0x4a>
    /* reset default netif */
    netif_set_default(NULL);
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	f000 f829 	bl	800ca04 <netif_set_default>
  }
#if !LWIP_SINGLE_NETIF
  /*  is it the first netif? */
  if (netif_list == netif) {
 800c9b2:	4b13      	ldr	r3, [pc, #76]	@ (800ca00 <netif_remove+0x98>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d104      	bne.n	800c9c6 <netif_remove+0x5e>
    netif_list = netif->next;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a0f      	ldr	r2, [pc, #60]	@ (800ca00 <netif_remove+0x98>)
 800c9c2:	6013      	str	r3, [r2, #0]
 800c9c4:	e017      	b.n	800c9f6 <netif_remove+0x8e>
  } else {
    /*  look for netif further down the list */
    struct netif *tmp_netif;
    NETIF_FOREACH(tmp_netif) {
 800c9c6:	4b0e      	ldr	r3, [pc, #56]	@ (800ca00 <netif_remove+0x98>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	e00c      	b.n	800c9e8 <netif_remove+0x80>
      if (tmp_netif->next == netif) {
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d104      	bne.n	800c9e2 <netif_remove+0x7a>
        tmp_netif->next = netif->next;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	601a      	str	r2, [r3, #0]
        break;
 800c9e0:	e005      	b.n	800c9ee <netif_remove+0x86>
    NETIF_FOREACH(tmp_netif) {
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60fb      	str	r3, [r7, #12]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1ef      	bne.n	800c9ce <netif_remove+0x66>
      }
    }
    if (tmp_netif == NULL) {
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	e000      	b.n	800c9f6 <netif_remove+0x8e>
    return;
 800c9f4:	bf00      	nop
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	20014610 	.word	0x20014610
 800ca00:	2001460c 	.word	0x2001460c

0800ca04 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ca0c:	4a04      	ldr	r2, [pc, #16]	@ (800ca20 <netif_set_default+0x1c>)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ca12:	bf00      	nop
 800ca14:	370c      	adds	r7, #12
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	20014610 	.word	0x20014610

0800ca24 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d107      	bne.n	800ca42 <netif_set_up+0x1e>
 800ca32:	4b0f      	ldr	r3, [pc, #60]	@ (800ca70 <netif_set_up+0x4c>)
 800ca34:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ca38:	490e      	ldr	r1, [pc, #56]	@ (800ca74 <netif_set_up+0x50>)
 800ca3a:	480f      	ldr	r0, [pc, #60]	@ (800ca78 <netif_set_up+0x54>)
 800ca3c:	f00a ffb2 	bl	80179a4 <iprintf>
 800ca40:	e013      	b.n	800ca6a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca48:	f003 0301 	and.w	r3, r3, #1
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10c      	bne.n	800ca6a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca56:	f043 0301 	orr.w	r3, r3, #1
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ca62:	2103      	movs	r1, #3
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 f809 	bl	800ca7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	0801a8b8 	.word	0x0801a8b8
 800ca74:	0801aa40 	.word	0x0801aa40
 800ca78:	0801a908 	.word	0x0801a908

0800ca7c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d106      	bne.n	800ca9c <netif_issue_reports+0x20>
 800ca8e:	4b18      	ldr	r3, [pc, #96]	@ (800caf0 <netif_issue_reports+0x74>)
 800ca90:	f240 326d 	movw	r2, #877	@ 0x36d
 800ca94:	4917      	ldr	r1, [pc, #92]	@ (800caf4 <netif_issue_reports+0x78>)
 800ca96:	4818      	ldr	r0, [pc, #96]	@ (800caf8 <netif_issue_reports+0x7c>)
 800ca98:	f00a ff84 	bl	80179a4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800caa2:	f003 0304 	and.w	r3, r3, #4
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d01e      	beq.n	800cae8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cab0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d017      	beq.n	800cae8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cab8:	78fb      	ldrb	r3, [r7, #3]
 800caba:	f003 0301 	and.w	r3, r3, #1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d013      	beq.n	800caea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	3304      	adds	r3, #4
 800cac6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00e      	beq.n	800caea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cad2:	f003 0308 	and.w	r3, r3, #8
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d007      	beq.n	800caea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	3304      	adds	r3, #4
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f008 fd35 	bl	8015550 <etharp_request>
 800cae6:	e000      	b.n	800caea <netif_issue_reports+0x6e>
    return;
 800cae8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	0801a8b8 	.word	0x0801a8b8
 800caf4:	0801aa5c 	.word	0x0801aa5c
 800caf8:	0801a908 	.word	0x0801a908

0800cafc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d107      	bne.n	800cb1a <netif_set_down+0x1e>
 800cb0a:	4b12      	ldr	r3, [pc, #72]	@ (800cb54 <netif_set_down+0x58>)
 800cb0c:	f240 329b 	movw	r2, #923	@ 0x39b
 800cb10:	4911      	ldr	r1, [pc, #68]	@ (800cb58 <netif_set_down+0x5c>)
 800cb12:	4812      	ldr	r0, [pc, #72]	@ (800cb5c <netif_set_down+0x60>)
 800cb14:	f00a ff46 	bl	80179a4 <iprintf>
 800cb18:	e019      	b.n	800cb4e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb20:	f003 0301 	and.w	r3, r3, #1
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d012      	beq.n	800cb4e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb2e:	f023 0301 	bic.w	r3, r3, #1
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb40:	f003 0308 	and.w	r3, r3, #8
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f008 f8bf 	bl	8014ccc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	0801a8b8 	.word	0x0801a8b8
 800cb58:	0801aa80 	.word	0x0801aa80
 800cb5c:	0801a908 	.word	0x0801a908

0800cb60 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d107      	bne.n	800cb7e <netif_set_link_up+0x1e>
 800cb6e:	4b13      	ldr	r3, [pc, #76]	@ (800cbbc <netif_set_link_up+0x5c>)
 800cb70:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800cb74:	4912      	ldr	r1, [pc, #72]	@ (800cbc0 <netif_set_link_up+0x60>)
 800cb76:	4813      	ldr	r0, [pc, #76]	@ (800cbc4 <netif_set_link_up+0x64>)
 800cb78:	f00a ff14 	bl	80179a4 <iprintf>
 800cb7c:	e01b      	b.n	800cbb6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb84:	f003 0304 	and.w	r3, r3, #4
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d114      	bne.n	800cbb6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb92:	f043 0304 	orr.w	r3, r3, #4
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cb9e:	2103      	movs	r1, #3
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7ff ff6b 	bl	800ca7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	69db      	ldr	r3, [r3, #28]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <netif_set_link_up+0x56>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	0801a8b8 	.word	0x0801a8b8
 800cbc0:	0801aaa0 	.word	0x0801aaa0
 800cbc4:	0801a908 	.word	0x0801a908

0800cbc8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d107      	bne.n	800cbe6 <netif_set_link_down+0x1e>
 800cbd6:	4b11      	ldr	r3, [pc, #68]	@ (800cc1c <netif_set_link_down+0x54>)
 800cbd8:	f240 4206 	movw	r2, #1030	@ 0x406
 800cbdc:	4910      	ldr	r1, [pc, #64]	@ (800cc20 <netif_set_link_down+0x58>)
 800cbde:	4811      	ldr	r0, [pc, #68]	@ (800cc24 <netif_set_link_down+0x5c>)
 800cbe0:	f00a fee0 	bl	80179a4 <iprintf>
 800cbe4:	e017      	b.n	800cc16 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cbec:	f003 0304 	and.w	r3, r3, #4
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d010      	beq.n	800cc16 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cbfa:	f023 0304 	bic.w	r3, r3, #4
 800cbfe:	b2da      	uxtb	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	69db      	ldr	r3, [r3, #28]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d003      	beq.n	800cc16 <netif_set_link_down+0x4e>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	69db      	ldr	r3, [r3, #28]
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	0801a8b8 	.word	0x0801a8b8
 800cc20:	0801aac4 	.word	0x0801aac4
 800cc24:	0801a908 	.word	0x0801a908

0800cc28 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d002      	beq.n	800cc3e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	61da      	str	r2, [r3, #28]
  }
}
 800cc3e:	bf00      	nop
 800cc40:	370c      	adds	r7, #12
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b085      	sub	sp, #20
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	60f8      	str	r0, [r7, #12]
 800cc52:	60b9      	str	r1, [r7, #8]
 800cc54:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cc56:	f06f 030b 	mvn.w	r3, #11
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr
	...

0800cc68 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cc72:	79fb      	ldrb	r3, [r7, #7]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d013      	beq.n	800cca0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cc78:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb0 <netif_get_by_index+0x48>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	60fb      	str	r3, [r7, #12]
 800cc7e:	e00c      	b.n	800cc9a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc86:	3301      	adds	r3, #1
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	79fa      	ldrb	r2, [r7, #7]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d101      	bne.n	800cc94 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	e006      	b.n	800cca2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	60fb      	str	r3, [r7, #12]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1ef      	bne.n	800cc80 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	2001460c 	.word	0x2001460c

0800ccb4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ccba:	4b0c      	ldr	r3, [pc, #48]	@ (800ccec <pbuf_free_ooseq+0x38>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ccc0:	4b0b      	ldr	r3, [pc, #44]	@ (800ccf0 <pbuf_free_ooseq+0x3c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	607b      	str	r3, [r7, #4]
 800ccc6:	e00a      	b.n	800ccde <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d003      	beq.n	800ccd8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f002 fc87 	bl	800f5e4 <tcp_free_ooseq>
      return;
 800ccd6:	e005      	b.n	800cce4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	607b      	str	r3, [r7, #4]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1f1      	bne.n	800ccc8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	20014615 	.word	0x20014615
 800ccf0:	20014624 	.word	0x20014624

0800ccf4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ccf8:	4b03      	ldr	r3, [pc, #12]	@ (800cd08 <pbuf_pool_is_empty+0x14>)
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ccfe:	bf00      	nop
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr
 800cd08:	20014615 	.word	0x20014615

0800cd0c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	4611      	mov	r1, r2
 800cd18:	461a      	mov	r2, r3
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	80fb      	strh	r3, [r7, #6]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2200      	movs	r2, #0
 800cd26:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	88fa      	ldrh	r2, [r7, #6]
 800cd32:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	88ba      	ldrh	r2, [r7, #4]
 800cd38:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cd3a:	8b3b      	ldrh	r3, [r7, #24]
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	7f3a      	ldrb	r2, [r7, #28]
 800cd46:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	73da      	strb	r2, [r3, #15]
}
 800cd54:	bf00      	nop
 800cd56:	3714      	adds	r7, #20
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b08c      	sub	sp, #48	@ 0x30
 800cd64:	af02      	add	r7, sp, #8
 800cd66:	4603      	mov	r3, r0
 800cd68:	71fb      	strb	r3, [r7, #7]
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	80bb      	strh	r3, [r7, #4]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cd76:	887b      	ldrh	r3, [r7, #2]
 800cd78:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cd7c:	d07f      	beq.n	800ce7e <pbuf_alloc+0x11e>
 800cd7e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cd82:	f300 80c8 	bgt.w	800cf16 <pbuf_alloc+0x1b6>
 800cd86:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cd8a:	d010      	beq.n	800cdae <pbuf_alloc+0x4e>
 800cd8c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cd90:	f300 80c1 	bgt.w	800cf16 <pbuf_alloc+0x1b6>
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d002      	beq.n	800cd9e <pbuf_alloc+0x3e>
 800cd98:	2b41      	cmp	r3, #65	@ 0x41
 800cd9a:	f040 80bc 	bne.w	800cf16 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cd9e:	887a      	ldrh	r2, [r7, #2]
 800cda0:	88bb      	ldrh	r3, [r7, #4]
 800cda2:	4619      	mov	r1, r3
 800cda4:	2000      	movs	r0, #0
 800cda6:	f000 f8d1 	bl	800cf4c <pbuf_alloc_reference>
 800cdaa:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800cdac:	e0bd      	b.n	800cf2a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cdb6:	88bb      	ldrh	r3, [r7, #4]
 800cdb8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cdba:	2008      	movs	r0, #8
 800cdbc:	f7ff fb80 	bl	800c4c0 <memp_malloc>
 800cdc0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d109      	bne.n	800cddc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cdc8:	f7ff ff94 	bl	800ccf4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cdd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdd4:	f000 faa8 	bl	800d328 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	e0a7      	b.n	800cf2c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cddc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cdde:	3303      	adds	r3, #3
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	f023 0303 	bic.w	r3, r3, #3
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	8b7a      	ldrh	r2, [r7, #26]
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	bf28      	it	cs
 800cdf4:	4613      	movcs	r3, r2
 800cdf6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cdf8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cdfa:	3310      	adds	r3, #16
 800cdfc:	693a      	ldr	r2, [r7, #16]
 800cdfe:	4413      	add	r3, r2
 800ce00:	3303      	adds	r3, #3
 800ce02:	f023 0303 	bic.w	r3, r3, #3
 800ce06:	4618      	mov	r0, r3
 800ce08:	89f9      	ldrh	r1, [r7, #14]
 800ce0a:	8b7a      	ldrh	r2, [r7, #26]
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	9301      	str	r3, [sp, #4]
 800ce10:	887b      	ldrh	r3, [r7, #2]
 800ce12:	9300      	str	r3, [sp, #0]
 800ce14:	460b      	mov	r3, r1
 800ce16:	4601      	mov	r1, r0
 800ce18:	6938      	ldr	r0, [r7, #16]
 800ce1a:	f7ff ff77 	bl	800cd0c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	f003 0303 	and.w	r3, r3, #3
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d006      	beq.n	800ce38 <pbuf_alloc+0xd8>
 800ce2a:	4b42      	ldr	r3, [pc, #264]	@ (800cf34 <pbuf_alloc+0x1d4>)
 800ce2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ce30:	4941      	ldr	r1, [pc, #260]	@ (800cf38 <pbuf_alloc+0x1d8>)
 800ce32:	4842      	ldr	r0, [pc, #264]	@ (800cf3c <pbuf_alloc+0x1dc>)
 800ce34:	f00a fdb6 	bl	80179a4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ce38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ce3a:	3303      	adds	r3, #3
 800ce3c:	f023 0303 	bic.w	r3, r3, #3
 800ce40:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ce44:	d106      	bne.n	800ce54 <pbuf_alloc+0xf4>
 800ce46:	4b3b      	ldr	r3, [pc, #236]	@ (800cf34 <pbuf_alloc+0x1d4>)
 800ce48:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ce4c:	493c      	ldr	r1, [pc, #240]	@ (800cf40 <pbuf_alloc+0x1e0>)
 800ce4e:	483b      	ldr	r0, [pc, #236]	@ (800cf3c <pbuf_alloc+0x1dc>)
 800ce50:	f00a fda8 	bl	80179a4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ce54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d102      	bne.n	800ce60 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce5e:	e002      	b.n	800ce66 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	693a      	ldr	r2, [r7, #16]
 800ce64:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ce6a:	8b7a      	ldrh	r2, [r7, #26]
 800ce6c:	89fb      	ldrh	r3, [r7, #14]
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ce76:	8b7b      	ldrh	r3, [r7, #26]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d19e      	bne.n	800cdba <pbuf_alloc+0x5a>
      break;
 800ce7c:	e055      	b.n	800cf2a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ce7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ce80:	3303      	adds	r3, #3
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	f023 0303 	bic.w	r3, r3, #3
 800ce88:	b29a      	uxth	r2, r3
 800ce8a:	88bb      	ldrh	r3, [r7, #4]
 800ce8c:	3303      	adds	r3, #3
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	f023 0303 	bic.w	r3, r3, #3
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	4413      	add	r3, r2
 800ce98:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ce9a:	8b3b      	ldrh	r3, [r7, #24]
 800ce9c:	3310      	adds	r3, #16
 800ce9e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cea0:	8b3a      	ldrh	r2, [r7, #24]
 800cea2:	88bb      	ldrh	r3, [r7, #4]
 800cea4:	3303      	adds	r3, #3
 800cea6:	f023 0303 	bic.w	r3, r3, #3
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d306      	bcc.n	800cebc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ceae:	8afa      	ldrh	r2, [r7, #22]
 800ceb0:	88bb      	ldrh	r3, [r7, #4]
 800ceb2:	3303      	adds	r3, #3
 800ceb4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d201      	bcs.n	800cec0 <pbuf_alloc+0x160>
        return NULL;
 800cebc:	2300      	movs	r3, #0
 800cebe:	e035      	b.n	800cf2c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cec0:	8afb      	ldrh	r3, [r7, #22]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff f96c 	bl	800c1a0 <mem_malloc>
 800cec8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ceca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <pbuf_alloc+0x174>
        return NULL;
 800ced0:	2300      	movs	r3, #0
 800ced2:	e02b      	b.n	800cf2c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ced4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ced6:	3310      	adds	r3, #16
 800ced8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceda:	4413      	add	r3, r2
 800cedc:	3303      	adds	r3, #3
 800cede:	f023 0303 	bic.w	r3, r3, #3
 800cee2:	4618      	mov	r0, r3
 800cee4:	88b9      	ldrh	r1, [r7, #4]
 800cee6:	88ba      	ldrh	r2, [r7, #4]
 800cee8:	2300      	movs	r3, #0
 800ceea:	9301      	str	r3, [sp, #4]
 800ceec:	887b      	ldrh	r3, [r7, #2]
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	460b      	mov	r3, r1
 800cef2:	4601      	mov	r1, r0
 800cef4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cef6:	f7ff ff09 	bl	800cd0c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	f003 0303 	and.w	r3, r3, #3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d010      	beq.n	800cf28 <pbuf_alloc+0x1c8>
 800cf06:	4b0b      	ldr	r3, [pc, #44]	@ (800cf34 <pbuf_alloc+0x1d4>)
 800cf08:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800cf0c:	490d      	ldr	r1, [pc, #52]	@ (800cf44 <pbuf_alloc+0x1e4>)
 800cf0e:	480b      	ldr	r0, [pc, #44]	@ (800cf3c <pbuf_alloc+0x1dc>)
 800cf10:	f00a fd48 	bl	80179a4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cf14:	e008      	b.n	800cf28 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cf16:	4b07      	ldr	r3, [pc, #28]	@ (800cf34 <pbuf_alloc+0x1d4>)
 800cf18:	f240 1227 	movw	r2, #295	@ 0x127
 800cf1c:	490a      	ldr	r1, [pc, #40]	@ (800cf48 <pbuf_alloc+0x1e8>)
 800cf1e:	4807      	ldr	r0, [pc, #28]	@ (800cf3c <pbuf_alloc+0x1dc>)
 800cf20:	f00a fd40 	bl	80179a4 <iprintf>
      return NULL;
 800cf24:	2300      	movs	r3, #0
 800cf26:	e001      	b.n	800cf2c <pbuf_alloc+0x1cc>
      break;
 800cf28:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3728      	adds	r7, #40	@ 0x28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	0801aae8 	.word	0x0801aae8
 800cf38:	0801ab18 	.word	0x0801ab18
 800cf3c:	0801ab48 	.word	0x0801ab48
 800cf40:	0801ab70 	.word	0x0801ab70
 800cf44:	0801aba4 	.word	0x0801aba4
 800cf48:	0801abd0 	.word	0x0801abd0

0800cf4c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af02      	add	r7, sp, #8
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	807b      	strh	r3, [r7, #2]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cf5c:	883b      	ldrh	r3, [r7, #0]
 800cf5e:	2b41      	cmp	r3, #65	@ 0x41
 800cf60:	d009      	beq.n	800cf76 <pbuf_alloc_reference+0x2a>
 800cf62:	883b      	ldrh	r3, [r7, #0]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d006      	beq.n	800cf76 <pbuf_alloc_reference+0x2a>
 800cf68:	4b0f      	ldr	r3, [pc, #60]	@ (800cfa8 <pbuf_alloc_reference+0x5c>)
 800cf6a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800cf6e:	490f      	ldr	r1, [pc, #60]	@ (800cfac <pbuf_alloc_reference+0x60>)
 800cf70:	480f      	ldr	r0, [pc, #60]	@ (800cfb0 <pbuf_alloc_reference+0x64>)
 800cf72:	f00a fd17 	bl	80179a4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cf76:	2007      	movs	r0, #7
 800cf78:	f7ff faa2 	bl	800c4c0 <memp_malloc>
 800cf7c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cf84:	2300      	movs	r3, #0
 800cf86:	e00b      	b.n	800cfa0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cf88:	8879      	ldrh	r1, [r7, #2]
 800cf8a:	887a      	ldrh	r2, [r7, #2]
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	9301      	str	r3, [sp, #4]
 800cf90:	883b      	ldrh	r3, [r7, #0]
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	460b      	mov	r3, r1
 800cf96:	6879      	ldr	r1, [r7, #4]
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f7ff feb7 	bl	800cd0c <pbuf_init_alloced_pbuf>
  return p;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	0801aae8 	.word	0x0801aae8
 800cfac:	0801abec 	.word	0x0801abec
 800cfb0:	0801ab48 	.word	0x0801ab48

0800cfb4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b088      	sub	sp, #32
 800cfb8:	af02      	add	r7, sp, #8
 800cfba:	607b      	str	r3, [r7, #4]
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73fb      	strb	r3, [r7, #15]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	81bb      	strh	r3, [r7, #12]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
 800cfca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cfcc:	8a7b      	ldrh	r3, [r7, #18]
 800cfce:	3303      	adds	r3, #3
 800cfd0:	f023 0203 	bic.w	r2, r3, #3
 800cfd4:	89bb      	ldrh	r3, [r7, #12]
 800cfd6:	441a      	add	r2, r3
 800cfd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d901      	bls.n	800cfe2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e018      	b.n	800d014 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d007      	beq.n	800cff8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cfe8:	8a7b      	ldrh	r3, [r7, #18]
 800cfea:	3303      	adds	r3, #3
 800cfec:	f023 0303 	bic.w	r3, r3, #3
 800cff0:	6a3a      	ldr	r2, [r7, #32]
 800cff2:	4413      	add	r3, r2
 800cff4:	617b      	str	r3, [r7, #20]
 800cff6:	e001      	b.n	800cffc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cff8:	2300      	movs	r3, #0
 800cffa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	89b9      	ldrh	r1, [r7, #12]
 800d000:	89ba      	ldrh	r2, [r7, #12]
 800d002:	2302      	movs	r3, #2
 800d004:	9301      	str	r3, [sp, #4]
 800d006:	897b      	ldrh	r3, [r7, #10]
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	460b      	mov	r3, r1
 800d00c:	6979      	ldr	r1, [r7, #20]
 800d00e:	f7ff fe7d 	bl	800cd0c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d012:	687b      	ldr	r3, [r7, #4]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3718      	adds	r7, #24
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	460b      	mov	r3, r1
 800d026:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d106      	bne.n	800d03c <pbuf_realloc+0x20>
 800d02e:	4b3a      	ldr	r3, [pc, #232]	@ (800d118 <pbuf_realloc+0xfc>)
 800d030:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d034:	4939      	ldr	r1, [pc, #228]	@ (800d11c <pbuf_realloc+0x100>)
 800d036:	483a      	ldr	r0, [pc, #232]	@ (800d120 <pbuf_realloc+0x104>)
 800d038:	f00a fcb4 	bl	80179a4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	891b      	ldrh	r3, [r3, #8]
 800d040:	887a      	ldrh	r2, [r7, #2]
 800d042:	429a      	cmp	r2, r3
 800d044:	d263      	bcs.n	800d10e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	891a      	ldrh	r2, [r3, #8]
 800d04a:	887b      	ldrh	r3, [r7, #2]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d050:	887b      	ldrh	r3, [r7, #2]
 800d052:	817b      	strh	r3, [r7, #10]
  q = p;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d058:	e018      	b.n	800d08c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	895b      	ldrh	r3, [r3, #10]
 800d05e:	897a      	ldrh	r2, [r7, #10]
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	891a      	ldrh	r2, [r3, #8]
 800d068:	893b      	ldrh	r3, [r7, #8]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d106      	bne.n	800d08c <pbuf_realloc+0x70>
 800d07e:	4b26      	ldr	r3, [pc, #152]	@ (800d118 <pbuf_realloc+0xfc>)
 800d080:	f240 12af 	movw	r2, #431	@ 0x1af
 800d084:	4927      	ldr	r1, [pc, #156]	@ (800d124 <pbuf_realloc+0x108>)
 800d086:	4826      	ldr	r0, [pc, #152]	@ (800d120 <pbuf_realloc+0x104>)
 800d088:	f00a fc8c 	bl	80179a4 <iprintf>
  while (rem_len > q->len) {
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	895b      	ldrh	r3, [r3, #10]
 800d090:	897a      	ldrh	r2, [r7, #10]
 800d092:	429a      	cmp	r2, r3
 800d094:	d8e1      	bhi.n	800d05a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	7b1b      	ldrb	r3, [r3, #12]
 800d09a:	f003 030f 	and.w	r3, r3, #15
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d121      	bne.n	800d0e6 <pbuf_realloc+0xca>
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	895b      	ldrh	r3, [r3, #10]
 800d0a6:	897a      	ldrh	r2, [r7, #10]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d01c      	beq.n	800d0e6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	7b5b      	ldrb	r3, [r3, #13]
 800d0b0:	f003 0302 	and.w	r3, r3, #2
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d116      	bne.n	800d0e6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	685a      	ldr	r2, [r3, #4]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	897b      	ldrh	r3, [r7, #10]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f7fe ff6c 	bl	800bfa8 <mem_trim>
 800d0d0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d106      	bne.n	800d0e6 <pbuf_realloc+0xca>
 800d0d8:	4b0f      	ldr	r3, [pc, #60]	@ (800d118 <pbuf_realloc+0xfc>)
 800d0da:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800d0de:	4912      	ldr	r1, [pc, #72]	@ (800d128 <pbuf_realloc+0x10c>)
 800d0e0:	480f      	ldr	r0, [pc, #60]	@ (800d120 <pbuf_realloc+0x104>)
 800d0e2:	f00a fc5f 	bl	80179a4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	897a      	ldrh	r2, [r7, #10]
 800d0ea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	895a      	ldrh	r2, [r3, #10]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d004      	beq.n	800d106 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4618      	mov	r0, r3
 800d102:	f000 f911 	bl	800d328 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]
 800d10c:	e000      	b.n	800d110 <pbuf_realloc+0xf4>
    return;
 800d10e:	bf00      	nop

}
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	0801aae8 	.word	0x0801aae8
 800d11c:	0801ac00 	.word	0x0801ac00
 800d120:	0801ab48 	.word	0x0801ab48
 800d124:	0801ac18 	.word	0x0801ac18
 800d128:	0801ac30 	.word	0x0801ac30

0800d12c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	4613      	mov	r3, r2
 800d138:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d106      	bne.n	800d14e <pbuf_add_header_impl+0x22>
 800d140:	4b2b      	ldr	r3, [pc, #172]	@ (800d1f0 <pbuf_add_header_impl+0xc4>)
 800d142:	f240 12df 	movw	r2, #479	@ 0x1df
 800d146:	492b      	ldr	r1, [pc, #172]	@ (800d1f4 <pbuf_add_header_impl+0xc8>)
 800d148:	482b      	ldr	r0, [pc, #172]	@ (800d1f8 <pbuf_add_header_impl+0xcc>)
 800d14a:	f00a fc2b 	bl	80179a4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d003      	beq.n	800d15c <pbuf_add_header_impl+0x30>
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d15a:	d301      	bcc.n	800d160 <pbuf_add_header_impl+0x34>
    return 1;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e043      	b.n	800d1e8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d101      	bne.n	800d16a <pbuf_add_header_impl+0x3e>
    return 0;
 800d166:	2300      	movs	r3, #0
 800d168:	e03e      	b.n	800d1e8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	891a      	ldrh	r2, [r3, #8]
 800d172:	8a7b      	ldrh	r3, [r7, #18]
 800d174:	4413      	add	r3, r2
 800d176:	b29b      	uxth	r3, r3
 800d178:	8a7a      	ldrh	r2, [r7, #18]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d901      	bls.n	800d182 <pbuf_add_header_impl+0x56>
    return 1;
 800d17e:	2301      	movs	r3, #1
 800d180:	e032      	b.n	800d1e8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	7b1b      	ldrb	r3, [r3, #12]
 800d186:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d188:	8a3b      	ldrh	r3, [r7, #16]
 800d18a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00c      	beq.n	800d1ac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	425b      	negs	r3, r3
 800d19a:	4413      	add	r3, r2
 800d19c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3310      	adds	r3, #16
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d20d      	bcs.n	800d1c4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e01d      	b.n	800d1e8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d006      	beq.n	800d1c0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	685a      	ldr	r2, [r3, #4]
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	425b      	negs	r3, r3
 800d1ba:	4413      	add	r3, r2
 800d1bc:	617b      	str	r3, [r7, #20]
 800d1be:	e001      	b.n	800d1c4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e011      	b.n	800d1e8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	895a      	ldrh	r2, [r3, #10]
 800d1ce:	8a7b      	ldrh	r3, [r7, #18]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	891a      	ldrh	r2, [r3, #8]
 800d1dc:	8a7b      	ldrh	r3, [r7, #18]
 800d1de:	4413      	add	r3, r2
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	811a      	strh	r2, [r3, #8]


  return 0;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3718      	adds	r7, #24
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	0801aae8 	.word	0x0801aae8
 800d1f4:	0801ac4c 	.word	0x0801ac4c
 800d1f8:	0801ab48 	.word	0x0801ab48

0800d1fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d206:	2200      	movs	r2, #0
 800d208:	6839      	ldr	r1, [r7, #0]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff ff8e 	bl	800d12c <pbuf_add_header_impl>
 800d210:	4603      	mov	r3, r0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
	...

0800d21c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d106      	bne.n	800d23a <pbuf_remove_header+0x1e>
 800d22c:	4b20      	ldr	r3, [pc, #128]	@ (800d2b0 <pbuf_remove_header+0x94>)
 800d22e:	f240 224b 	movw	r2, #587	@ 0x24b
 800d232:	4920      	ldr	r1, [pc, #128]	@ (800d2b4 <pbuf_remove_header+0x98>)
 800d234:	4820      	ldr	r0, [pc, #128]	@ (800d2b8 <pbuf_remove_header+0x9c>)
 800d236:	f00a fbb5 	bl	80179a4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d003      	beq.n	800d248 <pbuf_remove_header+0x2c>
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d246:	d301      	bcc.n	800d24c <pbuf_remove_header+0x30>
    return 1;
 800d248:	2301      	movs	r3, #1
 800d24a:	e02c      	b.n	800d2a6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d101      	bne.n	800d256 <pbuf_remove_header+0x3a>
    return 0;
 800d252:	2300      	movs	r3, #0
 800d254:	e027      	b.n	800d2a6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	895b      	ldrh	r3, [r3, #10]
 800d25e:	89fa      	ldrh	r2, [r7, #14]
 800d260:	429a      	cmp	r2, r3
 800d262:	d908      	bls.n	800d276 <pbuf_remove_header+0x5a>
 800d264:	4b12      	ldr	r3, [pc, #72]	@ (800d2b0 <pbuf_remove_header+0x94>)
 800d266:	f240 2255 	movw	r2, #597	@ 0x255
 800d26a:	4914      	ldr	r1, [pc, #80]	@ (800d2bc <pbuf_remove_header+0xa0>)
 800d26c:	4812      	ldr	r0, [pc, #72]	@ (800d2b8 <pbuf_remove_header+0x9c>)
 800d26e:	f00a fb99 	bl	80179a4 <iprintf>
 800d272:	2301      	movs	r3, #1
 800d274:	e017      	b.n	800d2a6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685a      	ldr	r2, [r3, #4]
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	441a      	add	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	895a      	ldrh	r2, [r3, #10]
 800d28c:	89fb      	ldrh	r3, [r7, #14]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	b29a      	uxth	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	891a      	ldrh	r2, [r3, #8]
 800d29a:	89fb      	ldrh	r3, [r7, #14]
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	0801aae8 	.word	0x0801aae8
 800d2b4:	0801ac4c 	.word	0x0801ac4c
 800d2b8:	0801ab48 	.word	0x0801ab48
 800d2bc:	0801ac58 	.word	0x0801ac58

0800d2c0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	807b      	strh	r3, [r7, #2]
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d2d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	da08      	bge.n	800d2ea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d2d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2dc:	425b      	negs	r3, r3
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7ff ff9b 	bl	800d21c <pbuf_remove_header>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	e007      	b.n	800d2fa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d2ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2ee:	787a      	ldrb	r2, [r7, #1]
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff ff1a 	bl	800d12c <pbuf_add_header_impl>
 800d2f8:	4603      	mov	r3, r0
  }
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b082      	sub	sp, #8
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	460b      	mov	r3, r1
 800d30c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d30e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d312:	2201      	movs	r2, #1
 800d314:	4619      	mov	r1, r3
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7ff ffd2 	bl	800d2c0 <pbuf_header_impl>
 800d31c:	4603      	mov	r3, r0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
	...

0800d328 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d10b      	bne.n	800d34e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d106      	bne.n	800d34a <pbuf_free+0x22>
 800d33c:	4b38      	ldr	r3, [pc, #224]	@ (800d420 <pbuf_free+0xf8>)
 800d33e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d342:	4938      	ldr	r1, [pc, #224]	@ (800d424 <pbuf_free+0xfc>)
 800d344:	4838      	ldr	r0, [pc, #224]	@ (800d428 <pbuf_free+0x100>)
 800d346:	f00a fb2d 	bl	80179a4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	e063      	b.n	800d416 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d352:	e05c      	b.n	800d40e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	7b9b      	ldrb	r3, [r3, #14]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d106      	bne.n	800d36a <pbuf_free+0x42>
 800d35c:	4b30      	ldr	r3, [pc, #192]	@ (800d420 <pbuf_free+0xf8>)
 800d35e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d362:	4932      	ldr	r1, [pc, #200]	@ (800d42c <pbuf_free+0x104>)
 800d364:	4830      	ldr	r0, [pc, #192]	@ (800d428 <pbuf_free+0x100>)
 800d366:	f00a fb1d 	bl	80179a4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	7b9b      	ldrb	r3, [r3, #14]
 800d36e:	3b01      	subs	r3, #1
 800d370:	b2da      	uxtb	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	739a      	strb	r2, [r3, #14]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7b9b      	ldrb	r3, [r3, #14]
 800d37a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d37c:	7dbb      	ldrb	r3, [r7, #22]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d143      	bne.n	800d40a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	7b1b      	ldrb	r3, [r3, #12]
 800d38c:	f003 030f 	and.w	r3, r3, #15
 800d390:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	7b5b      	ldrb	r3, [r3, #13]
 800d396:	f003 0302 	and.w	r3, r3, #2
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d011      	beq.n	800d3c2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <pbuf_free+0x90>
 800d3aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d420 <pbuf_free+0xf8>)
 800d3ac:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d3b0:	491f      	ldr	r1, [pc, #124]	@ (800d430 <pbuf_free+0x108>)
 800d3b2:	481d      	ldr	r0, [pc, #116]	@ (800d428 <pbuf_free+0x100>)
 800d3b4:	f00a faf6 	bl	80179a4 <iprintf>
        pc->custom_free_function(p);
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	4798      	blx	r3
 800d3c0:	e01d      	b.n	800d3fe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d3c2:	7bfb      	ldrb	r3, [r7, #15]
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d104      	bne.n	800d3d2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d3c8:	6879      	ldr	r1, [r7, #4]
 800d3ca:	2008      	movs	r0, #8
 800d3cc:	f7ff f8e8 	bl	800c5a0 <memp_free>
 800d3d0:	e015      	b.n	800d3fe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d104      	bne.n	800d3e2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d3d8:	6879      	ldr	r1, [r7, #4]
 800d3da:	2007      	movs	r0, #7
 800d3dc:	f7ff f8e0 	bl	800c5a0 <memp_free>
 800d3e0:	e00d      	b.n	800d3fe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d3e2:	7bfb      	ldrb	r3, [r7, #15]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d103      	bne.n	800d3f0 <pbuf_free+0xc8>
          mem_free(p);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f7fe fd73 	bl	800bed4 <mem_free>
 800d3ee:	e006      	b.n	800d3fe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800d420 <pbuf_free+0xf8>)
 800d3f2:	f240 320f 	movw	r2, #783	@ 0x30f
 800d3f6:	490f      	ldr	r1, [pc, #60]	@ (800d434 <pbuf_free+0x10c>)
 800d3f8:	480b      	ldr	r0, [pc, #44]	@ (800d428 <pbuf_free+0x100>)
 800d3fa:	f00a fad3 	bl	80179a4 <iprintf>
        }
      }
      count++;
 800d3fe:	7dfb      	ldrb	r3, [r7, #23]
 800d400:	3301      	adds	r3, #1
 800d402:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	607b      	str	r3, [r7, #4]
 800d408:	e001      	b.n	800d40e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d40a:	2300      	movs	r3, #0
 800d40c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d19f      	bne.n	800d354 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d414:	7dfb      	ldrb	r3, [r7, #23]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	0801aae8 	.word	0x0801aae8
 800d424:	0801ac4c 	.word	0x0801ac4c
 800d428:	0801ab48 	.word	0x0801ab48
 800d42c:	0801ac78 	.word	0x0801ac78
 800d430:	0801ac90 	.word	0x0801ac90
 800d434:	0801acb4 	.word	0x0801acb4

0800d438 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d438:	b480      	push	{r7}
 800d43a:	b085      	sub	sp, #20
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d444:	e005      	b.n	800d452 <pbuf_clen+0x1a>
    ++len;
 800d446:	89fb      	ldrh	r3, [r7, #14]
 800d448:	3301      	adds	r3, #1
 800d44a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1f6      	bne.n	800d446 <pbuf_clen+0xe>
  }
  return len;
 800d458:	89fb      	ldrh	r3, [r7, #14]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3714      	adds	r7, #20
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr
	...

0800d468 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d010      	beq.n	800d498 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	7b9b      	ldrb	r3, [r3, #14]
 800d47a:	3301      	adds	r3, #1
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	7b9b      	ldrb	r3, [r3, #14]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d106      	bne.n	800d498 <pbuf_ref+0x30>
 800d48a:	4b05      	ldr	r3, [pc, #20]	@ (800d4a0 <pbuf_ref+0x38>)
 800d48c:	f240 3242 	movw	r2, #834	@ 0x342
 800d490:	4904      	ldr	r1, [pc, #16]	@ (800d4a4 <pbuf_ref+0x3c>)
 800d492:	4805      	ldr	r0, [pc, #20]	@ (800d4a8 <pbuf_ref+0x40>)
 800d494:	f00a fa86 	bl	80179a4 <iprintf>
  }
}
 800d498:	bf00      	nop
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	0801aae8 	.word	0x0801aae8
 800d4a4:	0801acc8 	.word	0x0801acc8
 800d4a8:	0801ab48 	.word	0x0801ab48

0800d4ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <pbuf_cat+0x16>
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d107      	bne.n	800d4d2 <pbuf_cat+0x26>
 800d4c2:	4b20      	ldr	r3, [pc, #128]	@ (800d544 <pbuf_cat+0x98>)
 800d4c4:	f240 3259 	movw	r2, #857	@ 0x359
 800d4c8:	491f      	ldr	r1, [pc, #124]	@ (800d548 <pbuf_cat+0x9c>)
 800d4ca:	4820      	ldr	r0, [pc, #128]	@ (800d54c <pbuf_cat+0xa0>)
 800d4cc:	f00a fa6a 	bl	80179a4 <iprintf>
 800d4d0:	e034      	b.n	800d53c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	e00a      	b.n	800d4ee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	891a      	ldrh	r2, [r3, #8]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	891b      	ldrh	r3, [r3, #8]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	60fb      	str	r3, [r7, #12]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1f0      	bne.n	800d4d8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	891a      	ldrh	r2, [r3, #8]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	895b      	ldrh	r3, [r3, #10]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d006      	beq.n	800d510 <pbuf_cat+0x64>
 800d502:	4b10      	ldr	r3, [pc, #64]	@ (800d544 <pbuf_cat+0x98>)
 800d504:	f240 3262 	movw	r2, #866	@ 0x362
 800d508:	4911      	ldr	r1, [pc, #68]	@ (800d550 <pbuf_cat+0xa4>)
 800d50a:	4810      	ldr	r0, [pc, #64]	@ (800d54c <pbuf_cat+0xa0>)
 800d50c:	f00a fa4a 	bl	80179a4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d006      	beq.n	800d526 <pbuf_cat+0x7a>
 800d518:	4b0a      	ldr	r3, [pc, #40]	@ (800d544 <pbuf_cat+0x98>)
 800d51a:	f240 3263 	movw	r2, #867	@ 0x363
 800d51e:	490d      	ldr	r1, [pc, #52]	@ (800d554 <pbuf_cat+0xa8>)
 800d520:	480a      	ldr	r0, [pc, #40]	@ (800d54c <pbuf_cat+0xa0>)
 800d522:	f00a fa3f 	bl	80179a4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	891a      	ldrh	r2, [r3, #8]
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	891b      	ldrh	r3, [r3, #8]
 800d52e:	4413      	add	r3, r2
 800d530:	b29a      	uxth	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	683a      	ldr	r2, [r7, #0]
 800d53a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	0801aae8 	.word	0x0801aae8
 800d548:	0801acdc 	.word	0x0801acdc
 800d54c:	0801ab48 	.word	0x0801ab48
 800d550:	0801ad14 	.word	0x0801ad14
 800d554:	0801ad44 	.word	0x0801ad44

0800d558 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d562:	6839      	ldr	r1, [r7, #0]
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff ffa1 	bl	800d4ac <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d56a:	6838      	ldr	r0, [r7, #0]
 800d56c:	f7ff ff7c 	bl	800d468 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d570:	bf00      	nop
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d582:	2300      	movs	r3, #0
 800d584:	617b      	str	r3, [r7, #20]
 800d586:	2300      	movs	r3, #0
 800d588:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d008      	beq.n	800d5a2 <pbuf_copy+0x2a>
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d005      	beq.n	800d5a2 <pbuf_copy+0x2a>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	891a      	ldrh	r2, [r3, #8]
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	891b      	ldrh	r3, [r3, #8]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d209      	bcs.n	800d5b6 <pbuf_copy+0x3e>
 800d5a2:	4b57      	ldr	r3, [pc, #348]	@ (800d700 <pbuf_copy+0x188>)
 800d5a4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d5a8:	4956      	ldr	r1, [pc, #344]	@ (800d704 <pbuf_copy+0x18c>)
 800d5aa:	4857      	ldr	r0, [pc, #348]	@ (800d708 <pbuf_copy+0x190>)
 800d5ac:	f00a f9fa 	bl	80179a4 <iprintf>
 800d5b0:	f06f 030f 	mvn.w	r3, #15
 800d5b4:	e09f      	b.n	800d6f6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	895b      	ldrh	r3, [r3, #10]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	1ad2      	subs	r2, r2, r3
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	895b      	ldrh	r3, [r3, #10]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	1acb      	subs	r3, r1, r3
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d306      	bcc.n	800d5dc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	895b      	ldrh	r3, [r3, #10]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	1ad3      	subs	r3, r2, r3
 800d5d8:	60fb      	str	r3, [r7, #12]
 800d5da:	e005      	b.n	800d5e8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	895b      	ldrh	r3, [r3, #10]
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	685a      	ldr	r2, [r3, #4]
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	18d0      	adds	r0, r2, r3
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	685a      	ldr	r2, [r3, #4]
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	f00a fc2d 	bl	8017e5a <memcpy>
    offset_to += len;
 800d600:	697a      	ldr	r2, [r7, #20]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	4413      	add	r3, r2
 800d606:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	4413      	add	r3, r2
 800d60e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	895b      	ldrh	r3, [r3, #10]
 800d614:	461a      	mov	r2, r3
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	4293      	cmp	r3, r2
 800d61a:	d906      	bls.n	800d62a <pbuf_copy+0xb2>
 800d61c:	4b38      	ldr	r3, [pc, #224]	@ (800d700 <pbuf_copy+0x188>)
 800d61e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d622:	493a      	ldr	r1, [pc, #232]	@ (800d70c <pbuf_copy+0x194>)
 800d624:	4838      	ldr	r0, [pc, #224]	@ (800d708 <pbuf_copy+0x190>)
 800d626:	f00a f9bd 	bl	80179a4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	895b      	ldrh	r3, [r3, #10]
 800d62e:	461a      	mov	r2, r3
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	4293      	cmp	r3, r2
 800d634:	d906      	bls.n	800d644 <pbuf_copy+0xcc>
 800d636:	4b32      	ldr	r3, [pc, #200]	@ (800d700 <pbuf_copy+0x188>)
 800d638:	f240 32da 	movw	r2, #986	@ 0x3da
 800d63c:	4934      	ldr	r1, [pc, #208]	@ (800d710 <pbuf_copy+0x198>)
 800d63e:	4832      	ldr	r0, [pc, #200]	@ (800d708 <pbuf_copy+0x190>)
 800d640:	f00a f9b0 	bl	80179a4 <iprintf>
    if (offset_from >= p_from->len) {
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	895b      	ldrh	r3, [r3, #10]
 800d648:	461a      	mov	r2, r3
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d304      	bcc.n	800d65a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	895b      	ldrh	r3, [r3, #10]
 800d65e:	461a      	mov	r2, r3
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	4293      	cmp	r3, r2
 800d664:	d114      	bne.n	800d690 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d666:	2300      	movs	r3, #0
 800d668:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10c      	bne.n	800d690 <pbuf_copy+0x118>
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d009      	beq.n	800d690 <pbuf_copy+0x118>
 800d67c:	4b20      	ldr	r3, [pc, #128]	@ (800d700 <pbuf_copy+0x188>)
 800d67e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d682:	4924      	ldr	r1, [pc, #144]	@ (800d714 <pbuf_copy+0x19c>)
 800d684:	4820      	ldr	r0, [pc, #128]	@ (800d708 <pbuf_copy+0x190>)
 800d686:	f00a f98d 	bl	80179a4 <iprintf>
 800d68a:	f06f 030f 	mvn.w	r3, #15
 800d68e:	e032      	b.n	800d6f6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d013      	beq.n	800d6be <pbuf_copy+0x146>
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	895a      	ldrh	r2, [r3, #10]
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	891b      	ldrh	r3, [r3, #8]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d10d      	bne.n	800d6be <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d009      	beq.n	800d6be <pbuf_copy+0x146>
 800d6aa:	4b15      	ldr	r3, [pc, #84]	@ (800d700 <pbuf_copy+0x188>)
 800d6ac:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d6b0:	4919      	ldr	r1, [pc, #100]	@ (800d718 <pbuf_copy+0x1a0>)
 800d6b2:	4815      	ldr	r0, [pc, #84]	@ (800d708 <pbuf_copy+0x190>)
 800d6b4:	f00a f976 	bl	80179a4 <iprintf>
 800d6b8:	f06f 0305 	mvn.w	r3, #5
 800d6bc:	e01b      	b.n	800d6f6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d013      	beq.n	800d6ec <pbuf_copy+0x174>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	895a      	ldrh	r2, [r3, #10]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	891b      	ldrh	r3, [r3, #8]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d10d      	bne.n	800d6ec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d009      	beq.n	800d6ec <pbuf_copy+0x174>
 800d6d8:	4b09      	ldr	r3, [pc, #36]	@ (800d700 <pbuf_copy+0x188>)
 800d6da:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d6de:	490e      	ldr	r1, [pc, #56]	@ (800d718 <pbuf_copy+0x1a0>)
 800d6e0:	4809      	ldr	r0, [pc, #36]	@ (800d708 <pbuf_copy+0x190>)
 800d6e2:	f00a f95f 	bl	80179a4 <iprintf>
 800d6e6:	f06f 0305 	mvn.w	r3, #5
 800d6ea:	e004      	b.n	800d6f6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f47f af61 	bne.w	800d5b6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3718      	adds	r7, #24
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	0801aae8 	.word	0x0801aae8
 800d704:	0801ad90 	.word	0x0801ad90
 800d708:	0801ab48 	.word	0x0801ab48
 800d70c:	0801adc0 	.word	0x0801adc0
 800d710:	0801add8 	.word	0x0801add8
 800d714:	0801adf4 	.word	0x0801adf4
 800d718:	0801ae04 	.word	0x0801ae04

0800d71c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b088      	sub	sp, #32
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	4611      	mov	r1, r2
 800d728:	461a      	mov	r2, r3
 800d72a:	460b      	mov	r3, r1
 800d72c:	80fb      	strh	r3, [r7, #6]
 800d72e:	4613      	mov	r3, r2
 800d730:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d732:	2300      	movs	r3, #0
 800d734:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d736:	2300      	movs	r3, #0
 800d738:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d108      	bne.n	800d752 <pbuf_copy_partial+0x36>
 800d740:	4b2b      	ldr	r3, [pc, #172]	@ (800d7f0 <pbuf_copy_partial+0xd4>)
 800d742:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d746:	492b      	ldr	r1, [pc, #172]	@ (800d7f4 <pbuf_copy_partial+0xd8>)
 800d748:	482b      	ldr	r0, [pc, #172]	@ (800d7f8 <pbuf_copy_partial+0xdc>)
 800d74a:	f00a f92b 	bl	80179a4 <iprintf>
 800d74e:	2300      	movs	r3, #0
 800d750:	e04a      	b.n	800d7e8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d108      	bne.n	800d76a <pbuf_copy_partial+0x4e>
 800d758:	4b25      	ldr	r3, [pc, #148]	@ (800d7f0 <pbuf_copy_partial+0xd4>)
 800d75a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d75e:	4927      	ldr	r1, [pc, #156]	@ (800d7fc <pbuf_copy_partial+0xe0>)
 800d760:	4825      	ldr	r0, [pc, #148]	@ (800d7f8 <pbuf_copy_partial+0xdc>)
 800d762:	f00a f91f 	bl	80179a4 <iprintf>
 800d766:	2300      	movs	r3, #0
 800d768:	e03e      	b.n	800d7e8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	61fb      	str	r3, [r7, #28]
 800d76e:	e034      	b.n	800d7da <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d770:	88bb      	ldrh	r3, [r7, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00a      	beq.n	800d78c <pbuf_copy_partial+0x70>
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	895b      	ldrh	r3, [r3, #10]
 800d77a:	88ba      	ldrh	r2, [r7, #4]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d305      	bcc.n	800d78c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	895b      	ldrh	r3, [r3, #10]
 800d784:	88ba      	ldrh	r2, [r7, #4]
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	80bb      	strh	r3, [r7, #4]
 800d78a:	e023      	b.n	800d7d4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	895a      	ldrh	r2, [r3, #10]
 800d790:	88bb      	ldrh	r3, [r7, #4]
 800d792:	1ad3      	subs	r3, r2, r3
 800d794:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d796:	8b3a      	ldrh	r2, [r7, #24]
 800d798:	88fb      	ldrh	r3, [r7, #6]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d901      	bls.n	800d7a2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d79e:	88fb      	ldrh	r3, [r7, #6]
 800d7a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d7a2:	8b7b      	ldrh	r3, [r7, #26]
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	18d0      	adds	r0, r2, r3
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	685a      	ldr	r2, [r3, #4]
 800d7ac:	88bb      	ldrh	r3, [r7, #4]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	8b3a      	ldrh	r2, [r7, #24]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	f00a fb51 	bl	8017e5a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d7b8:	8afa      	ldrh	r2, [r7, #22]
 800d7ba:	8b3b      	ldrh	r3, [r7, #24]
 800d7bc:	4413      	add	r3, r2
 800d7be:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d7c0:	8b7a      	ldrh	r2, [r7, #26]
 800d7c2:	8b3b      	ldrh	r3, [r7, #24]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d7c8:	88fa      	ldrh	r2, [r7, #6]
 800d7ca:	8b3b      	ldrh	r3, [r7, #24]
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	61fb      	str	r3, [r7, #28]
 800d7da:	88fb      	ldrh	r3, [r7, #6]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d002      	beq.n	800d7e6 <pbuf_copy_partial+0xca>
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d1c4      	bne.n	800d770 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d7e6:	8afb      	ldrh	r3, [r7, #22]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3720      	adds	r7, #32
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	0801aae8 	.word	0x0801aae8
 800d7f4:	0801ae30 	.word	0x0801ae30
 800d7f8:	0801ab48 	.word	0x0801ab48
 800d7fc:	0801ae50 	.word	0x0801ae50

0800d800 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	4613      	mov	r3, r2
 800d80c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800d80e:	88fb      	ldrh	r3, [r7, #6]
 800d810:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800d812:	2300      	movs	r3, #0
 800d814:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d109      	bne.n	800d830 <pbuf_take+0x30>
 800d81c:	4b3a      	ldr	r3, [pc, #232]	@ (800d908 <pbuf_take+0x108>)
 800d81e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800d822:	493a      	ldr	r1, [pc, #232]	@ (800d90c <pbuf_take+0x10c>)
 800d824:	483a      	ldr	r0, [pc, #232]	@ (800d910 <pbuf_take+0x110>)
 800d826:	f00a f8bd 	bl	80179a4 <iprintf>
 800d82a:	f06f 030f 	mvn.w	r3, #15
 800d82e:	e067      	b.n	800d900 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d109      	bne.n	800d84a <pbuf_take+0x4a>
 800d836:	4b34      	ldr	r3, [pc, #208]	@ (800d908 <pbuf_take+0x108>)
 800d838:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800d83c:	4935      	ldr	r1, [pc, #212]	@ (800d914 <pbuf_take+0x114>)
 800d83e:	4834      	ldr	r0, [pc, #208]	@ (800d910 <pbuf_take+0x110>)
 800d840:	f00a f8b0 	bl	80179a4 <iprintf>
 800d844:	f06f 030f 	mvn.w	r3, #15
 800d848:	e05a      	b.n	800d900 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	891b      	ldrh	r3, [r3, #8]
 800d84e:	88fa      	ldrh	r2, [r7, #6]
 800d850:	429a      	cmp	r2, r3
 800d852:	d909      	bls.n	800d868 <pbuf_take+0x68>
 800d854:	4b2c      	ldr	r3, [pc, #176]	@ (800d908 <pbuf_take+0x108>)
 800d856:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800d85a:	492f      	ldr	r1, [pc, #188]	@ (800d918 <pbuf_take+0x118>)
 800d85c:	482c      	ldr	r0, [pc, #176]	@ (800d910 <pbuf_take+0x110>)
 800d85e:	f00a f8a1 	bl	80179a4 <iprintf>
 800d862:	f04f 33ff 	mov.w	r3, #4294967295
 800d866:	e04b      	b.n	800d900 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d007      	beq.n	800d87e <pbuf_take+0x7e>
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d004      	beq.n	800d87e <pbuf_take+0x7e>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	891b      	ldrh	r3, [r3, #8]
 800d878:	88fa      	ldrh	r2, [r7, #6]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d902      	bls.n	800d884 <pbuf_take+0x84>
    return ERR_ARG;
 800d87e:	f06f 030f 	mvn.w	r3, #15
 800d882:	e03d      	b.n	800d900 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	61fb      	str	r3, [r7, #28]
 800d888:	e028      	b.n	800d8dc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d106      	bne.n	800d89e <pbuf_take+0x9e>
 800d890:	4b1d      	ldr	r3, [pc, #116]	@ (800d908 <pbuf_take+0x108>)
 800d892:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800d896:	4921      	ldr	r1, [pc, #132]	@ (800d91c <pbuf_take+0x11c>)
 800d898:	481d      	ldr	r0, [pc, #116]	@ (800d910 <pbuf_take+0x110>)
 800d89a:	f00a f883 	bl	80179a4 <iprintf>
    buf_copy_len = total_copy_len;
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	895b      	ldrh	r3, [r3, #10]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d902      	bls.n	800d8b4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	895b      	ldrh	r3, [r3, #10]
 800d8b2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	6858      	ldr	r0, [r3, #4]
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	4413      	add	r3, r2
 800d8be:	69ba      	ldr	r2, [r7, #24]
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	f00a faca 	bl	8017e5a <memcpy>
    total_copy_len -= buf_copy_len;
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800d8ce:	693a      	ldr	r2, [r7, #16]
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	61fb      	str	r3, [r7, #28]
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1d3      	bne.n	800d88a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d103      	bne.n	800d8f0 <pbuf_take+0xf0>
 800d8e8:	88fb      	ldrh	r3, [r7, #6]
 800d8ea:	693a      	ldr	r2, [r7, #16]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d006      	beq.n	800d8fe <pbuf_take+0xfe>
 800d8f0:	4b05      	ldr	r3, [pc, #20]	@ (800d908 <pbuf_take+0x108>)
 800d8f2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800d8f6:	490a      	ldr	r1, [pc, #40]	@ (800d920 <pbuf_take+0x120>)
 800d8f8:	4805      	ldr	r0, [pc, #20]	@ (800d910 <pbuf_take+0x110>)
 800d8fa:	f00a f853 	bl	80179a4 <iprintf>
  return ERR_OK;
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3720      	adds	r7, #32
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	0801aae8 	.word	0x0801aae8
 800d90c:	0801aec0 	.word	0x0801aec0
 800d910:	0801ab48 	.word	0x0801ab48
 800d914:	0801aed8 	.word	0x0801aed8
 800d918:	0801aef4 	.word	0x0801aef4
 800d91c:	0801af14 	.word	0x0801af14
 800d920:	0801af2c 	.word	0x0801af2c

0800d924 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	603a      	str	r2, [r7, #0]
 800d92e:	71fb      	strb	r3, [r7, #7]
 800d930:	460b      	mov	r3, r1
 800d932:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	8919      	ldrh	r1, [r3, #8]
 800d938:	88ba      	ldrh	r2, [r7, #4]
 800d93a:	79fb      	ldrb	r3, [r7, #7]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7ff fa0f 	bl	800cd60 <pbuf_alloc>
 800d942:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <pbuf_clone+0x2a>
    return NULL;
 800d94a:	2300      	movs	r3, #0
 800d94c:	e011      	b.n	800d972 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff fe11 	bl	800d578 <pbuf_copy>
 800d956:	4603      	mov	r3, r0
 800d958:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d95a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d006      	beq.n	800d970 <pbuf_clone+0x4c>
 800d962:	4b06      	ldr	r3, [pc, #24]	@ (800d97c <pbuf_clone+0x58>)
 800d964:	f240 5224 	movw	r2, #1316	@ 0x524
 800d968:	4905      	ldr	r1, [pc, #20]	@ (800d980 <pbuf_clone+0x5c>)
 800d96a:	4806      	ldr	r0, [pc, #24]	@ (800d984 <pbuf_clone+0x60>)
 800d96c:	f00a f81a 	bl	80179a4 <iprintf>
  return q;
 800d970:	68fb      	ldr	r3, [r7, #12]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	0801aae8 	.word	0x0801aae8
 800d980:	0801af5c 	.word	0x0801af5c
 800d984:	0801ab48 	.word	0x0801ab48

0800d988 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d98c:	f009 fa2e 	bl	8016dec <rand>
 800d990:	4603      	mov	r3, r0
 800d992:	b29b      	uxth	r3, r3
 800d994:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d998:	b29b      	uxth	r3, r3
 800d99a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	4b01      	ldr	r3, [pc, #4]	@ (800d9a8 <tcp_init+0x20>)
 800d9a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d9a4:	bf00      	nop
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	20009674 	.word	0x20009674

0800d9ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	7d1b      	ldrb	r3, [r3, #20]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d105      	bne.n	800d9c8 <tcp_free+0x1c>
 800d9bc:	4b06      	ldr	r3, [pc, #24]	@ (800d9d8 <tcp_free+0x2c>)
 800d9be:	22d4      	movs	r2, #212	@ 0xd4
 800d9c0:	4906      	ldr	r1, [pc, #24]	@ (800d9dc <tcp_free+0x30>)
 800d9c2:	4807      	ldr	r0, [pc, #28]	@ (800d9e0 <tcp_free+0x34>)
 800d9c4:	f009 ffee 	bl	80179a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d9c8:	6879      	ldr	r1, [r7, #4]
 800d9ca:	2001      	movs	r0, #1
 800d9cc:	f7fe fde8 	bl	800c5a0 <memp_free>
}
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	0801afe8 	.word	0x0801afe8
 800d9dc:	0801b018 	.word	0x0801b018
 800d9e0:	0801b02c 	.word	0x0801b02c

0800d9e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	7d1b      	ldrb	r3, [r3, #20]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d105      	bne.n	800da00 <tcp_free_listen+0x1c>
 800d9f4:	4b06      	ldr	r3, [pc, #24]	@ (800da10 <tcp_free_listen+0x2c>)
 800d9f6:	22df      	movs	r2, #223	@ 0xdf
 800d9f8:	4906      	ldr	r1, [pc, #24]	@ (800da14 <tcp_free_listen+0x30>)
 800d9fa:	4807      	ldr	r0, [pc, #28]	@ (800da18 <tcp_free_listen+0x34>)
 800d9fc:	f009 ffd2 	bl	80179a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800da00:	6879      	ldr	r1, [r7, #4]
 800da02:	2002      	movs	r0, #2
 800da04:	f7fe fdcc 	bl	800c5a0 <memp_free>
}
 800da08:	bf00      	nop
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	0801afe8 	.word	0x0801afe8
 800da14:	0801b054 	.word	0x0801b054
 800da18:	0801b02c 	.word	0x0801b02c

0800da1c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800da20:	f001 f85e 	bl	800eae0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800da24:	4b07      	ldr	r3, [pc, #28]	@ (800da44 <tcp_tmr+0x28>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	3301      	adds	r3, #1
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	4b05      	ldr	r3, [pc, #20]	@ (800da44 <tcp_tmr+0x28>)
 800da2e:	701a      	strb	r2, [r3, #0]
 800da30:	4b04      	ldr	r3, [pc, #16]	@ (800da44 <tcp_tmr+0x28>)
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	f003 0301 	and.w	r3, r3, #1
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d001      	beq.n	800da40 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800da3c:	f000 fd0e 	bl	800e45c <tcp_slowtmr>
  }
}
 800da40:	bf00      	nop
 800da42:	bd80      	pop	{r7, pc}
 800da44:	2001462d 	.word	0x2001462d

0800da48 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d105      	bne.n	800da64 <tcp_remove_listener+0x1c>
 800da58:	4b0d      	ldr	r3, [pc, #52]	@ (800da90 <tcp_remove_listener+0x48>)
 800da5a:	22ff      	movs	r2, #255	@ 0xff
 800da5c:	490d      	ldr	r1, [pc, #52]	@ (800da94 <tcp_remove_listener+0x4c>)
 800da5e:	480e      	ldr	r0, [pc, #56]	@ (800da98 <tcp_remove_listener+0x50>)
 800da60:	f009 ffa0 	bl	80179a4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	60fb      	str	r3, [r7, #12]
 800da68:	e00a      	b.n	800da80 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800da6e:	683a      	ldr	r2, [r7, #0]
 800da70:	429a      	cmp	r2, r3
 800da72:	d102      	bne.n	800da7a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2200      	movs	r2, #0
 800da78:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	68db      	ldr	r3, [r3, #12]
 800da7e:	60fb      	str	r3, [r7, #12]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1f1      	bne.n	800da6a <tcp_remove_listener+0x22>
    }
  }
}
 800da86:	bf00      	nop
 800da88:	bf00      	nop
 800da8a:	3710      	adds	r7, #16
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	0801afe8 	.word	0x0801afe8
 800da94:	0801b070 	.word	0x0801b070
 800da98:	0801b02c 	.word	0x0801b02c

0800da9c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d106      	bne.n	800dab8 <tcp_listen_closed+0x1c>
 800daaa:	4b14      	ldr	r3, [pc, #80]	@ (800dafc <tcp_listen_closed+0x60>)
 800daac:	f240 1211 	movw	r2, #273	@ 0x111
 800dab0:	4913      	ldr	r1, [pc, #76]	@ (800db00 <tcp_listen_closed+0x64>)
 800dab2:	4814      	ldr	r0, [pc, #80]	@ (800db04 <tcp_listen_closed+0x68>)
 800dab4:	f009 ff76 	bl	80179a4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	7d1b      	ldrb	r3, [r3, #20]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d006      	beq.n	800dace <tcp_listen_closed+0x32>
 800dac0:	4b0e      	ldr	r3, [pc, #56]	@ (800dafc <tcp_listen_closed+0x60>)
 800dac2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800dac6:	4910      	ldr	r1, [pc, #64]	@ (800db08 <tcp_listen_closed+0x6c>)
 800dac8:	480e      	ldr	r0, [pc, #56]	@ (800db04 <tcp_listen_closed+0x68>)
 800daca:	f009 ff6b 	bl	80179a4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dace:	2301      	movs	r3, #1
 800dad0:	60fb      	str	r3, [r7, #12]
 800dad2:	e00b      	b.n	800daec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dad4:	4a0d      	ldr	r2, [pc, #52]	@ (800db0c <tcp_listen_closed+0x70>)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	6879      	ldr	r1, [r7, #4]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff ffb1 	bl	800da48 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3301      	adds	r3, #1
 800daea:	60fb      	str	r3, [r7, #12]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d9f0      	bls.n	800dad4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800daf2:	bf00      	nop
 800daf4:	bf00      	nop
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	0801afe8 	.word	0x0801afe8
 800db00:	0801b098 	.word	0x0801b098
 800db04:	0801b02c 	.word	0x0801b02c
 800db08:	0801b0a4 	.word	0x0801b0a4
 800db0c:	08054ab8 	.word	0x08054ab8

0800db10 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800db10:	b5b0      	push	{r4, r5, r7, lr}
 800db12:	b088      	sub	sp, #32
 800db14:	af04      	add	r7, sp, #16
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	460b      	mov	r3, r1
 800db1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d106      	bne.n	800db30 <tcp_close_shutdown+0x20>
 800db22:	4b63      	ldr	r3, [pc, #396]	@ (800dcb0 <tcp_close_shutdown+0x1a0>)
 800db24:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800db28:	4962      	ldr	r1, [pc, #392]	@ (800dcb4 <tcp_close_shutdown+0x1a4>)
 800db2a:	4863      	ldr	r0, [pc, #396]	@ (800dcb8 <tcp_close_shutdown+0x1a8>)
 800db2c:	f009 ff3a 	bl	80179a4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800db30:	78fb      	ldrb	r3, [r7, #3]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d066      	beq.n	800dc04 <tcp_close_shutdown+0xf4>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	7d1b      	ldrb	r3, [r3, #20]
 800db3a:	2b04      	cmp	r3, #4
 800db3c:	d003      	beq.n	800db46 <tcp_close_shutdown+0x36>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	7d1b      	ldrb	r3, [r3, #20]
 800db42:	2b07      	cmp	r3, #7
 800db44:	d15e      	bne.n	800dc04 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d104      	bne.n	800db58 <tcp_close_shutdown+0x48>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db52:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800db56:	d055      	beq.n	800dc04 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	8b5b      	ldrh	r3, [r3, #26]
 800db5c:	f003 0310 	and.w	r3, r3, #16
 800db60:	2b00      	cmp	r3, #0
 800db62:	d106      	bne.n	800db72 <tcp_close_shutdown+0x62>
 800db64:	4b52      	ldr	r3, [pc, #328]	@ (800dcb0 <tcp_close_shutdown+0x1a0>)
 800db66:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800db6a:	4954      	ldr	r1, [pc, #336]	@ (800dcbc <tcp_close_shutdown+0x1ac>)
 800db6c:	4852      	ldr	r0, [pc, #328]	@ (800dcb8 <tcp_close_shutdown+0x1a8>)
 800db6e:	f009 ff19 	bl	80179a4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800db7a:	687d      	ldr	r5, [r7, #4]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3304      	adds	r3, #4
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	8ad2      	ldrh	r2, [r2, #22]
 800db84:	6879      	ldr	r1, [r7, #4]
 800db86:	8b09      	ldrh	r1, [r1, #24]
 800db88:	9102      	str	r1, [sp, #8]
 800db8a:	9201      	str	r2, [sp, #4]
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	462b      	mov	r3, r5
 800db90:	4622      	mov	r2, r4
 800db92:	4601      	mov	r1, r0
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f005 fd8b 	bl	80136b0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f001 fb6e 	bl	800f27c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dba0:	4b47      	ldr	r3, [pc, #284]	@ (800dcc0 <tcp_close_shutdown+0x1b0>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d105      	bne.n	800dbb6 <tcp_close_shutdown+0xa6>
 800dbaa:	4b45      	ldr	r3, [pc, #276]	@ (800dcc0 <tcp_close_shutdown+0x1b0>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	4a43      	ldr	r2, [pc, #268]	@ (800dcc0 <tcp_close_shutdown+0x1b0>)
 800dbb2:	6013      	str	r3, [r2, #0]
 800dbb4:	e013      	b.n	800dbde <tcp_close_shutdown+0xce>
 800dbb6:	4b42      	ldr	r3, [pc, #264]	@ (800dcc0 <tcp_close_shutdown+0x1b0>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	60fb      	str	r3, [r7, #12]
 800dbbc:	e00c      	b.n	800dbd8 <tcp_close_shutdown+0xc8>
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d104      	bne.n	800dbd2 <tcp_close_shutdown+0xc2>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68da      	ldr	r2, [r3, #12]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	60da      	str	r2, [r3, #12]
 800dbd0:	e005      	b.n	800dbde <tcp_close_shutdown+0xce>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	60fb      	str	r3, [r7, #12]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d1ef      	bne.n	800dbbe <tcp_close_shutdown+0xae>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	60da      	str	r2, [r3, #12]
 800dbe4:	4b37      	ldr	r3, [pc, #220]	@ (800dcc4 <tcp_close_shutdown+0x1b4>)
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dbea:	4b37      	ldr	r3, [pc, #220]	@ (800dcc8 <tcp_close_shutdown+0x1b8>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d102      	bne.n	800dbfa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dbf4:	f004 f802 	bl	8011bfc <tcp_trigger_input_pcb_close>
 800dbf8:	e002      	b.n	800dc00 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7ff fed6 	bl	800d9ac <tcp_free>
      }
      return ERR_OK;
 800dc00:	2300      	movs	r3, #0
 800dc02:	e050      	b.n	800dca6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	7d1b      	ldrb	r3, [r3, #20]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d03b      	beq.n	800dc84 <tcp_close_shutdown+0x174>
 800dc0c:	2b02      	cmp	r3, #2
 800dc0e:	dc44      	bgt.n	800dc9a <tcp_close_shutdown+0x18a>
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <tcp_close_shutdown+0x10a>
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d02a      	beq.n	800dc6e <tcp_close_shutdown+0x15e>
 800dc18:	e03f      	b.n	800dc9a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	8adb      	ldrh	r3, [r3, #22]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d021      	beq.n	800dc66 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc22:	4b2a      	ldr	r3, [pc, #168]	@ (800dccc <tcp_close_shutdown+0x1bc>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d105      	bne.n	800dc38 <tcp_close_shutdown+0x128>
 800dc2c:	4b27      	ldr	r3, [pc, #156]	@ (800dccc <tcp_close_shutdown+0x1bc>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	4a26      	ldr	r2, [pc, #152]	@ (800dccc <tcp_close_shutdown+0x1bc>)
 800dc34:	6013      	str	r3, [r2, #0]
 800dc36:	e013      	b.n	800dc60 <tcp_close_shutdown+0x150>
 800dc38:	4b24      	ldr	r3, [pc, #144]	@ (800dccc <tcp_close_shutdown+0x1bc>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	60bb      	str	r3, [r7, #8]
 800dc3e:	e00c      	b.n	800dc5a <tcp_close_shutdown+0x14a>
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d104      	bne.n	800dc54 <tcp_close_shutdown+0x144>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68da      	ldr	r2, [r3, #12]
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	60da      	str	r2, [r3, #12]
 800dc52:	e005      	b.n	800dc60 <tcp_close_shutdown+0x150>
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	60bb      	str	r3, [r7, #8]
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1ef      	bne.n	800dc40 <tcp_close_shutdown+0x130>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7ff fea0 	bl	800d9ac <tcp_free>
      break;
 800dc6c:	e01a      	b.n	800dca4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7ff ff14 	bl	800da9c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dc74:	6879      	ldr	r1, [r7, #4]
 800dc76:	4816      	ldr	r0, [pc, #88]	@ (800dcd0 <tcp_close_shutdown+0x1c0>)
 800dc78:	f001 fb50 	bl	800f31c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f7ff feb1 	bl	800d9e4 <tcp_free_listen>
      break;
 800dc82:	e00f      	b.n	800dca4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc84:	6879      	ldr	r1, [r7, #4]
 800dc86:	480e      	ldr	r0, [pc, #56]	@ (800dcc0 <tcp_close_shutdown+0x1b0>)
 800dc88:	f001 fb48 	bl	800f31c <tcp_pcb_remove>
 800dc8c:	4b0d      	ldr	r3, [pc, #52]	@ (800dcc4 <tcp_close_shutdown+0x1b4>)
 800dc8e:	2201      	movs	r2, #1
 800dc90:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7ff fe8a 	bl	800d9ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dc98:	e004      	b.n	800dca4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f81a 	bl	800dcd4 <tcp_close_shutdown_fin>
 800dca0:	4603      	mov	r3, r0
 800dca2:	e000      	b.n	800dca6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bdb0      	pop	{r4, r5, r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	0801afe8 	.word	0x0801afe8
 800dcb4:	0801b0bc 	.word	0x0801b0bc
 800dcb8:	0801b02c 	.word	0x0801b02c
 800dcbc:	0801b0dc 	.word	0x0801b0dc
 800dcc0:	20014624 	.word	0x20014624
 800dcc4:	2001462c 	.word	0x2001462c
 800dcc8:	20014664 	.word	0x20014664
 800dccc:	2001461c 	.word	0x2001461c
 800dcd0:	20014620 	.word	0x20014620

0800dcd4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d106      	bne.n	800dcf0 <tcp_close_shutdown_fin+0x1c>
 800dce2:	4b2e      	ldr	r3, [pc, #184]	@ (800dd9c <tcp_close_shutdown_fin+0xc8>)
 800dce4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800dce8:	492d      	ldr	r1, [pc, #180]	@ (800dda0 <tcp_close_shutdown_fin+0xcc>)
 800dcea:	482e      	ldr	r0, [pc, #184]	@ (800dda4 <tcp_close_shutdown_fin+0xd0>)
 800dcec:	f009 fe5a 	bl	80179a4 <iprintf>

  switch (pcb->state) {
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	7d1b      	ldrb	r3, [r3, #20]
 800dcf4:	2b07      	cmp	r3, #7
 800dcf6:	d020      	beq.n	800dd3a <tcp_close_shutdown_fin+0x66>
 800dcf8:	2b07      	cmp	r3, #7
 800dcfa:	dc2b      	bgt.n	800dd54 <tcp_close_shutdown_fin+0x80>
 800dcfc:	2b03      	cmp	r3, #3
 800dcfe:	d002      	beq.n	800dd06 <tcp_close_shutdown_fin+0x32>
 800dd00:	2b04      	cmp	r3, #4
 800dd02:	d00d      	beq.n	800dd20 <tcp_close_shutdown_fin+0x4c>
 800dd04:	e026      	b.n	800dd54 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f004 fde0 	bl	80128cc <tcp_send_fin>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d11f      	bne.n	800dd58 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2205      	movs	r2, #5
 800dd1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd1e:	e01b      	b.n	800dd58 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f004 fdd3 	bl	80128cc <tcp_send_fin>
 800dd26:	4603      	mov	r3, r0
 800dd28:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d114      	bne.n	800dd5c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2205      	movs	r2, #5
 800dd36:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd38:	e010      	b.n	800dd5c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f004 fdc6 	bl	80128cc <tcp_send_fin>
 800dd40:	4603      	mov	r3, r0
 800dd42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d109      	bne.n	800dd60 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2209      	movs	r2, #9
 800dd50:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd52:	e005      	b.n	800dd60 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	e01c      	b.n	800dd92 <tcp_close_shutdown_fin+0xbe>
      break;
 800dd58:	bf00      	nop
 800dd5a:	e002      	b.n	800dd62 <tcp_close_shutdown_fin+0x8e>
      break;
 800dd5c:	bf00      	nop
 800dd5e:	e000      	b.n	800dd62 <tcp_close_shutdown_fin+0x8e>
      break;
 800dd60:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dd62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d103      	bne.n	800dd72 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f004 feec 	bl	8012b48 <tcp_output>
 800dd70:	e00d      	b.n	800dd8e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dd72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd7a:	d108      	bne.n	800dd8e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	8b5b      	ldrh	r3, [r3, #26]
 800dd80:	f043 0308 	orr.w	r3, r3, #8
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	e001      	b.n	800dd92 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dd8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	0801afe8 	.word	0x0801afe8
 800dda0:	0801b098 	.word	0x0801b098
 800dda4:	0801b02c 	.word	0x0801b02c

0800dda8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d109      	bne.n	800ddca <tcp_close+0x22>
 800ddb6:	4b0f      	ldr	r3, [pc, #60]	@ (800ddf4 <tcp_close+0x4c>)
 800ddb8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ddbc:	490e      	ldr	r1, [pc, #56]	@ (800ddf8 <tcp_close+0x50>)
 800ddbe:	480f      	ldr	r0, [pc, #60]	@ (800ddfc <tcp_close+0x54>)
 800ddc0:	f009 fdf0 	bl	80179a4 <iprintf>
 800ddc4:	f06f 030f 	mvn.w	r3, #15
 800ddc8:	e00f      	b.n	800ddea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	7d1b      	ldrb	r3, [r3, #20]
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d006      	beq.n	800dde0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	8b5b      	ldrh	r3, [r3, #26]
 800ddd6:	f043 0310 	orr.w	r3, r3, #16
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dde0:	2101      	movs	r1, #1
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff fe94 	bl	800db10 <tcp_close_shutdown>
 800dde8:	4603      	mov	r3, r0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	0801afe8 	.word	0x0801afe8
 800ddf8:	0801b0f8 	.word	0x0801b0f8
 800ddfc:	0801b02c 	.word	0x0801b02c

0800de00 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b08e      	sub	sp, #56	@ 0x38
 800de04:	af04      	add	r7, sp, #16
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d107      	bne.n	800de20 <tcp_abandon+0x20>
 800de10:	4b52      	ldr	r3, [pc, #328]	@ (800df5c <tcp_abandon+0x15c>)
 800de12:	f240 223d 	movw	r2, #573	@ 0x23d
 800de16:	4952      	ldr	r1, [pc, #328]	@ (800df60 <tcp_abandon+0x160>)
 800de18:	4852      	ldr	r0, [pc, #328]	@ (800df64 <tcp_abandon+0x164>)
 800de1a:	f009 fdc3 	bl	80179a4 <iprintf>
 800de1e:	e099      	b.n	800df54 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	7d1b      	ldrb	r3, [r3, #20]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d106      	bne.n	800de36 <tcp_abandon+0x36>
 800de28:	4b4c      	ldr	r3, [pc, #304]	@ (800df5c <tcp_abandon+0x15c>)
 800de2a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800de2e:	494e      	ldr	r1, [pc, #312]	@ (800df68 <tcp_abandon+0x168>)
 800de30:	484c      	ldr	r0, [pc, #304]	@ (800df64 <tcp_abandon+0x164>)
 800de32:	f009 fdb7 	bl	80179a4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	7d1b      	ldrb	r3, [r3, #20]
 800de3a:	2b0a      	cmp	r3, #10
 800de3c:	d107      	bne.n	800de4e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800de3e:	6879      	ldr	r1, [r7, #4]
 800de40:	484a      	ldr	r0, [pc, #296]	@ (800df6c <tcp_abandon+0x16c>)
 800de42:	f001 fa6b 	bl	800f31c <tcp_pcb_remove>
    tcp_free(pcb);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fdb0 	bl	800d9ac <tcp_free>
 800de4c:	e082      	b.n	800df54 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800de4e:	2300      	movs	r3, #0
 800de50:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de5a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de60:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de68:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	7d1b      	ldrb	r3, [r3, #20]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d126      	bne.n	800dec6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	8adb      	ldrh	r3, [r3, #22]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d02e      	beq.n	800dede <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800de80:	4b3b      	ldr	r3, [pc, #236]	@ (800df70 <tcp_abandon+0x170>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	429a      	cmp	r2, r3
 800de88:	d105      	bne.n	800de96 <tcp_abandon+0x96>
 800de8a:	4b39      	ldr	r3, [pc, #228]	@ (800df70 <tcp_abandon+0x170>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	4a37      	ldr	r2, [pc, #220]	@ (800df70 <tcp_abandon+0x170>)
 800de92:	6013      	str	r3, [r2, #0]
 800de94:	e013      	b.n	800debe <tcp_abandon+0xbe>
 800de96:	4b36      	ldr	r3, [pc, #216]	@ (800df70 <tcp_abandon+0x170>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	61fb      	str	r3, [r7, #28]
 800de9c:	e00c      	b.n	800deb8 <tcp_abandon+0xb8>
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d104      	bne.n	800deb2 <tcp_abandon+0xb2>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	68da      	ldr	r2, [r3, #12]
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	60da      	str	r2, [r3, #12]
 800deb0:	e005      	b.n	800debe <tcp_abandon+0xbe>
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	61fb      	str	r3, [r7, #28]
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1ef      	bne.n	800de9e <tcp_abandon+0x9e>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	60da      	str	r2, [r3, #12]
 800dec4:	e00b      	b.n	800dede <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	8adb      	ldrh	r3, [r3, #22]
 800dece:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ded0:	6879      	ldr	r1, [r7, #4]
 800ded2:	4828      	ldr	r0, [pc, #160]	@ (800df74 <tcp_abandon+0x174>)
 800ded4:	f001 fa22 	bl	800f31c <tcp_pcb_remove>
 800ded8:	4b27      	ldr	r3, [pc, #156]	@ (800df78 <tcp_abandon+0x178>)
 800deda:	2201      	movs	r2, #1
 800dedc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d004      	beq.n	800def0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deea:	4618      	mov	r0, r3
 800deec:	f000 fed8 	bl	800eca0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800def4:	2b00      	cmp	r3, #0
 800def6:	d004      	beq.n	800df02 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800defc:	4618      	mov	r0, r3
 800defe:	f000 fecf 	bl	800eca0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df06:	2b00      	cmp	r3, #0
 800df08:	d004      	beq.n	800df14 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 fec6 	bl	800eca0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800df14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00e      	beq.n	800df38 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800df1a:	6879      	ldr	r1, [r7, #4]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	3304      	adds	r3, #4
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	8b12      	ldrh	r2, [r2, #24]
 800df24:	9202      	str	r2, [sp, #8]
 800df26:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800df28:	9201      	str	r2, [sp, #4]
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	460b      	mov	r3, r1
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	69b9      	ldr	r1, [r7, #24]
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f005 fbbc 	bl	80136b0 <tcp_rst>
    }
    last_state = pcb->state;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	7d1b      	ldrb	r3, [r3, #20]
 800df3c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f7ff fd34 	bl	800d9ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d004      	beq.n	800df54 <tcp_abandon+0x154>
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	f06f 010c 	mvn.w	r1, #12
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	4798      	blx	r3
  }
}
 800df54:	3728      	adds	r7, #40	@ 0x28
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	0801afe8 	.word	0x0801afe8
 800df60:	0801b12c 	.word	0x0801b12c
 800df64:	0801b02c 	.word	0x0801b02c
 800df68:	0801b148 	.word	0x0801b148
 800df6c:	20014628 	.word	0x20014628
 800df70:	2001461c 	.word	0x2001461c
 800df74:	20014624 	.word	0x20014624
 800df78:	2001462c 	.word	0x2001462c

0800df7c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800df84:	2101      	movs	r1, #1
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7ff ff3a 	bl	800de00 <tcp_abandon>
}
 800df8c:	bf00      	nop
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b088      	sub	sp, #32
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	4613      	mov	r3, r2
 800dfa0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dfa2:	2304      	movs	r3, #4
 800dfa4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d101      	bne.n	800dfb0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dfac:	4b3e      	ldr	r3, [pc, #248]	@ (800e0a8 <tcp_bind+0x114>)
 800dfae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d109      	bne.n	800dfca <tcp_bind+0x36>
 800dfb6:	4b3d      	ldr	r3, [pc, #244]	@ (800e0ac <tcp_bind+0x118>)
 800dfb8:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800dfbc:	493c      	ldr	r1, [pc, #240]	@ (800e0b0 <tcp_bind+0x11c>)
 800dfbe:	483d      	ldr	r0, [pc, #244]	@ (800e0b4 <tcp_bind+0x120>)
 800dfc0:	f009 fcf0 	bl	80179a4 <iprintf>
 800dfc4:	f06f 030f 	mvn.w	r3, #15
 800dfc8:	e06a      	b.n	800e0a0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	7d1b      	ldrb	r3, [r3, #20]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d009      	beq.n	800dfe6 <tcp_bind+0x52>
 800dfd2:	4b36      	ldr	r3, [pc, #216]	@ (800e0ac <tcp_bind+0x118>)
 800dfd4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800dfd8:	4937      	ldr	r1, [pc, #220]	@ (800e0b8 <tcp_bind+0x124>)
 800dfda:	4836      	ldr	r0, [pc, #216]	@ (800e0b4 <tcp_bind+0x120>)
 800dfdc:	f009 fce2 	bl	80179a4 <iprintf>
 800dfe0:	f06f 0305 	mvn.w	r3, #5
 800dfe4:	e05c      	b.n	800e0a0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dfe6:	88fb      	ldrh	r3, [r7, #6]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d109      	bne.n	800e000 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dfec:	f000 f9f0 	bl	800e3d0 <tcp_new_port>
 800dff0:	4603      	mov	r3, r0
 800dff2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dff4:	88fb      	ldrh	r3, [r7, #6]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d135      	bne.n	800e066 <tcp_bind+0xd2>
      return ERR_BUF;
 800dffa:	f06f 0301 	mvn.w	r3, #1
 800dffe:	e04f      	b.n	800e0a0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e000:	2300      	movs	r3, #0
 800e002:	61fb      	str	r3, [r7, #28]
 800e004:	e02b      	b.n	800e05e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e006:	4a2d      	ldr	r2, [pc, #180]	@ (800e0bc <tcp_bind+0x128>)
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	61bb      	str	r3, [r7, #24]
 800e012:	e01e      	b.n	800e052 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	8adb      	ldrh	r3, [r3, #22]
 800e018:	88fa      	ldrh	r2, [r7, #6]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d116      	bne.n	800e04c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e01e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e020:	2b00      	cmp	r3, #0
 800e022:	d010      	beq.n	800e046 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00c      	beq.n	800e046 <tcp_bind+0xb2>
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d009      	beq.n	800e046 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d005      	beq.n	800e046 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e042:	429a      	cmp	r2, r3
 800e044:	d102      	bne.n	800e04c <tcp_bind+0xb8>
              return ERR_USE;
 800e046:	f06f 0307 	mvn.w	r3, #7
 800e04a:	e029      	b.n	800e0a0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	68db      	ldr	r3, [r3, #12]
 800e050:	61bb      	str	r3, [r7, #24]
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1dd      	bne.n	800e014 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	3301      	adds	r3, #1
 800e05c:	61fb      	str	r3, [r7, #28]
 800e05e:	69fa      	ldr	r2, [r7, #28]
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	429a      	cmp	r2, r3
 800e064:	dbcf      	blt.n	800e006 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00c      	beq.n	800e086 <tcp_bind+0xf2>
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d008      	beq.n	800e086 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <tcp_bind+0xec>
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	e000      	b.n	800e082 <tcp_bind+0xee>
 800e080:	2300      	movs	r3, #0
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	88fa      	ldrh	r2, [r7, #6]
 800e08a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e08c:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c0 <tcp_bind+0x12c>)
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	60da      	str	r2, [r3, #12]
 800e094:	4a0a      	ldr	r2, [pc, #40]	@ (800e0c0 <tcp_bind+0x12c>)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6013      	str	r3, [r2, #0]
 800e09a:	f005 fccb 	bl	8013a34 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3720      	adds	r7, #32
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	08054ae0 	.word	0x08054ae0
 800e0ac:	0801afe8 	.word	0x0801afe8
 800e0b0:	0801b17c 	.word	0x0801b17c
 800e0b4:	0801b02c 	.word	0x0801b02c
 800e0b8:	0801b194 	.word	0x0801b194
 800e0bc:	08054ab8 	.word	0x08054ab8
 800e0c0:	2001461c 	.word	0x2001461c

0800e0c4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	60f8      	str	r0, [r7, #12]
 800e0cc:	60b9      	str	r1, [r7, #8]
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d106      	bne.n	800e0e6 <tcp_accept_null+0x22>
 800e0d8:	4b07      	ldr	r3, [pc, #28]	@ (800e0f8 <tcp_accept_null+0x34>)
 800e0da:	f240 320f 	movw	r2, #783	@ 0x30f
 800e0de:	4907      	ldr	r1, [pc, #28]	@ (800e0fc <tcp_accept_null+0x38>)
 800e0e0:	4807      	ldr	r0, [pc, #28]	@ (800e100 <tcp_accept_null+0x3c>)
 800e0e2:	f009 fc5f 	bl	80179a4 <iprintf>

  tcp_abort(pcb);
 800e0e6:	68b8      	ldr	r0, [r7, #8]
 800e0e8:	f7ff ff48 	bl	800df7c <tcp_abort>

  return ERR_ABRT;
 800e0ec:	f06f 030c 	mvn.w	r3, #12
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	0801afe8 	.word	0x0801afe8
 800e0fc:	0801b1bc 	.word	0x0801b1bc
 800e100:	0801b02c 	.word	0x0801b02c

0800e104 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	460b      	mov	r3, r1
 800e10e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e110:	78fb      	ldrb	r3, [r7, #3]
 800e112:	2200      	movs	r2, #0
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f000 f806 	bl	800e128 <tcp_listen_with_backlog_and_err>
 800e11c:	4603      	mov	r3, r0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
	...

0800e128 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b088      	sub	sp, #32
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	460b      	mov	r3, r1
 800e132:	607a      	str	r2, [r7, #4]
 800e134:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e136:	2300      	movs	r3, #0
 800e138:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d109      	bne.n	800e154 <tcp_listen_with_backlog_and_err+0x2c>
 800e140:	4b47      	ldr	r3, [pc, #284]	@ (800e260 <tcp_listen_with_backlog_and_err+0x138>)
 800e142:	f240 3259 	movw	r2, #857	@ 0x359
 800e146:	4947      	ldr	r1, [pc, #284]	@ (800e264 <tcp_listen_with_backlog_and_err+0x13c>)
 800e148:	4847      	ldr	r0, [pc, #284]	@ (800e268 <tcp_listen_with_backlog_and_err+0x140>)
 800e14a:	f009 fc2b 	bl	80179a4 <iprintf>
 800e14e:	23f0      	movs	r3, #240	@ 0xf0
 800e150:	76fb      	strb	r3, [r7, #27]
 800e152:	e079      	b.n	800e248 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	7d1b      	ldrb	r3, [r3, #20]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d009      	beq.n	800e170 <tcp_listen_with_backlog_and_err+0x48>
 800e15c:	4b40      	ldr	r3, [pc, #256]	@ (800e260 <tcp_listen_with_backlog_and_err+0x138>)
 800e15e:	f240 325a 	movw	r2, #858	@ 0x35a
 800e162:	4942      	ldr	r1, [pc, #264]	@ (800e26c <tcp_listen_with_backlog_and_err+0x144>)
 800e164:	4840      	ldr	r0, [pc, #256]	@ (800e268 <tcp_listen_with_backlog_and_err+0x140>)
 800e166:	f009 fc1d 	bl	80179a4 <iprintf>
 800e16a:	23f1      	movs	r3, #241	@ 0xf1
 800e16c:	76fb      	strb	r3, [r7, #27]
 800e16e:	e06b      	b.n	800e248 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	7d1b      	ldrb	r3, [r3, #20]
 800e174:	2b01      	cmp	r3, #1
 800e176:	d104      	bne.n	800e182 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e17c:	23f7      	movs	r3, #247	@ 0xf7
 800e17e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e180:	e062      	b.n	800e248 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e182:	2002      	movs	r0, #2
 800e184:	f7fe f99c 	bl	800c4c0 <memp_malloc>
 800e188:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d102      	bne.n	800e196 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e190:	23ff      	movs	r3, #255	@ 0xff
 800e192:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e194:	e058      	b.n	800e248 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	691a      	ldr	r2, [r3, #16]
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	8ada      	ldrh	r2, [r3, #22]
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	7d5a      	ldrb	r2, [r3, #21]
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	7a5a      	ldrb	r2, [r3, #9]
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	7ada      	ldrb	r2, [r3, #11]
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	7a9a      	ldrb	r2, [r3, #10]
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	8adb      	ldrh	r3, [r3, #22]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d021      	beq.n	800e226 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e1e2:	4b23      	ldr	r3, [pc, #140]	@ (800e270 <tcp_listen_with_backlog_and_err+0x148>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68fa      	ldr	r2, [r7, #12]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d105      	bne.n	800e1f8 <tcp_listen_with_backlog_and_err+0xd0>
 800e1ec:	4b20      	ldr	r3, [pc, #128]	@ (800e270 <tcp_listen_with_backlog_and_err+0x148>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	4a1f      	ldr	r2, [pc, #124]	@ (800e270 <tcp_listen_with_backlog_and_err+0x148>)
 800e1f4:	6013      	str	r3, [r2, #0]
 800e1f6:	e013      	b.n	800e220 <tcp_listen_with_backlog_and_err+0xf8>
 800e1f8:	4b1d      	ldr	r3, [pc, #116]	@ (800e270 <tcp_listen_with_backlog_and_err+0x148>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	617b      	str	r3, [r7, #20]
 800e1fe:	e00c      	b.n	800e21a <tcp_listen_with_backlog_and_err+0xf2>
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	429a      	cmp	r2, r3
 800e208:	d104      	bne.n	800e214 <tcp_listen_with_backlog_and_err+0xec>
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	68da      	ldr	r2, [r3, #12]
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	60da      	str	r2, [r3, #12]
 800e212:	e005      	b.n	800e220 <tcp_listen_with_backlog_and_err+0xf8>
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	617b      	str	r3, [r7, #20]
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d1ef      	bne.n	800e200 <tcp_listen_with_backlog_and_err+0xd8>
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2200      	movs	r2, #0
 800e224:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f7ff fbc0 	bl	800d9ac <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	4a11      	ldr	r2, [pc, #68]	@ (800e274 <tcp_listen_with_backlog_and_err+0x14c>)
 800e230:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e232:	4b11      	ldr	r3, [pc, #68]	@ (800e278 <tcp_listen_with_backlog_and_err+0x150>)
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	60da      	str	r2, [r3, #12]
 800e23a:	4a0f      	ldr	r2, [pc, #60]	@ (800e278 <tcp_listen_with_backlog_and_err+0x150>)
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	6013      	str	r3, [r2, #0]
 800e240:	f005 fbf8 	bl	8013a34 <tcp_timer_needed>
  res = ERR_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d002      	beq.n	800e254 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	7efa      	ldrb	r2, [r7, #27]
 800e252:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e254:	69fb      	ldr	r3, [r7, #28]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3720      	adds	r7, #32
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	0801afe8 	.word	0x0801afe8
 800e264:	0801b1dc 	.word	0x0801b1dc
 800e268:	0801b02c 	.word	0x0801b02c
 800e26c:	0801b20c 	.word	0x0801b20c
 800e270:	2001461c 	.word	0x2001461c
 800e274:	0800e0c5 	.word	0x0800e0c5
 800e278:	20014620 	.word	0x20014620

0800e27c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d106      	bne.n	800e298 <tcp_update_rcv_ann_wnd+0x1c>
 800e28a:	4b25      	ldr	r3, [pc, #148]	@ (800e320 <tcp_update_rcv_ann_wnd+0xa4>)
 800e28c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e290:	4924      	ldr	r1, [pc, #144]	@ (800e324 <tcp_update_rcv_ann_wnd+0xa8>)
 800e292:	4825      	ldr	r0, [pc, #148]	@ (800e328 <tcp_update_rcv_ann_wnd+0xac>)
 800e294:	f009 fb86 	bl	80179a4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e2a0:	4413      	add	r3, r2
 800e2a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e2ac:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e2b0:	bf28      	it	cs
 800e2b2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e2b6:	b292      	uxth	r2, r2
 800e2b8:	4413      	add	r3, r2
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	db08      	blt.n	800e2d4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	e020      	b.n	800e316 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	dd03      	ble.n	800e2ea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e2e8:	e014      	b.n	800e314 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2fc:	d306      	bcc.n	800e30c <tcp_update_rcv_ann_wnd+0x90>
 800e2fe:	4b08      	ldr	r3, [pc, #32]	@ (800e320 <tcp_update_rcv_ann_wnd+0xa4>)
 800e300:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e304:	4909      	ldr	r1, [pc, #36]	@ (800e32c <tcp_update_rcv_ann_wnd+0xb0>)
 800e306:	4808      	ldr	r0, [pc, #32]	@ (800e328 <tcp_update_rcv_ann_wnd+0xac>)
 800e308:	f009 fb4c 	bl	80179a4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	b29a      	uxth	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e314:	2300      	movs	r3, #0
  }
}
 800e316:	4618      	mov	r0, r3
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	0801afe8 	.word	0x0801afe8
 800e324:	0801b244 	.word	0x0801b244
 800e328:	0801b02c 	.word	0x0801b02c
 800e32c:	0801b268 	.word	0x0801b268

0800e330 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	460b      	mov	r3, r1
 800e33a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d107      	bne.n	800e352 <tcp_recved+0x22>
 800e342:	4b1f      	ldr	r3, [pc, #124]	@ (800e3c0 <tcp_recved+0x90>)
 800e344:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e348:	491e      	ldr	r1, [pc, #120]	@ (800e3c4 <tcp_recved+0x94>)
 800e34a:	481f      	ldr	r0, [pc, #124]	@ (800e3c8 <tcp_recved+0x98>)
 800e34c:	f009 fb2a 	bl	80179a4 <iprintf>
 800e350:	e032      	b.n	800e3b8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	7d1b      	ldrb	r3, [r3, #20]
 800e356:	2b01      	cmp	r3, #1
 800e358:	d106      	bne.n	800e368 <tcp_recved+0x38>
 800e35a:	4b19      	ldr	r3, [pc, #100]	@ (800e3c0 <tcp_recved+0x90>)
 800e35c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e360:	491a      	ldr	r1, [pc, #104]	@ (800e3cc <tcp_recved+0x9c>)
 800e362:	4819      	ldr	r0, [pc, #100]	@ (800e3c8 <tcp_recved+0x98>)
 800e364:	f009 fb1e 	bl	80179a4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e36c:	887b      	ldrh	r3, [r7, #2]
 800e36e:	4413      	add	r3, r2
 800e370:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e372:	89fb      	ldrh	r3, [r7, #14]
 800e374:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e378:	d804      	bhi.n	800e384 <tcp_recved+0x54>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e37e:	89fa      	ldrh	r2, [r7, #14]
 800e380:	429a      	cmp	r2, r3
 800e382:	d204      	bcs.n	800e38e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e38a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e38c:	e002      	b.n	800e394 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	89fa      	ldrh	r2, [r7, #14]
 800e392:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f7ff ff71 	bl	800e27c <tcp_update_rcv_ann_wnd>
 800e39a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e3a2:	d309      	bcc.n	800e3b8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	8b5b      	ldrh	r3, [r3, #26]
 800e3a8:	f043 0302 	orr.w	r3, r3, #2
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f004 fbc8 	bl	8012b48 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e3b8:	3710      	adds	r7, #16
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	0801afe8 	.word	0x0801afe8
 800e3c4:	0801b284 	.word	0x0801b284
 800e3c8:	0801b02c 	.word	0x0801b02c
 800e3cc:	0801b29c 	.word	0x0801b29c

0800e3d0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e3da:	4b1e      	ldr	r3, [pc, #120]	@ (800e454 <tcp_new_port+0x84>)
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	4b1c      	ldr	r3, [pc, #112]	@ (800e454 <tcp_new_port+0x84>)
 800e3e4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e3e6:	4b1b      	ldr	r3, [pc, #108]	@ (800e454 <tcp_new_port+0x84>)
 800e3e8:	881b      	ldrh	r3, [r3, #0]
 800e3ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d103      	bne.n	800e3fa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e3f2:	4b18      	ldr	r3, [pc, #96]	@ (800e454 <tcp_new_port+0x84>)
 800e3f4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e3f8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	71fb      	strb	r3, [r7, #7]
 800e3fe:	e01e      	b.n	800e43e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e400:	79fb      	ldrb	r3, [r7, #7]
 800e402:	4a15      	ldr	r2, [pc, #84]	@ (800e458 <tcp_new_port+0x88>)
 800e404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	603b      	str	r3, [r7, #0]
 800e40c:	e011      	b.n	800e432 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	8ada      	ldrh	r2, [r3, #22]
 800e412:	4b10      	ldr	r3, [pc, #64]	@ (800e454 <tcp_new_port+0x84>)
 800e414:	881b      	ldrh	r3, [r3, #0]
 800e416:	429a      	cmp	r2, r3
 800e418:	d108      	bne.n	800e42c <tcp_new_port+0x5c>
        n++;
 800e41a:	88bb      	ldrh	r3, [r7, #4]
 800e41c:	3301      	adds	r3, #1
 800e41e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e420:	88bb      	ldrh	r3, [r7, #4]
 800e422:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e426:	d3d8      	bcc.n	800e3da <tcp_new_port+0xa>
          return 0;
 800e428:	2300      	movs	r3, #0
 800e42a:	e00d      	b.n	800e448 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	603b      	str	r3, [r7, #0]
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1ea      	bne.n	800e40e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e438:	79fb      	ldrb	r3, [r7, #7]
 800e43a:	3301      	adds	r3, #1
 800e43c:	71fb      	strb	r3, [r7, #7]
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	2b03      	cmp	r3, #3
 800e442:	d9dd      	bls.n	800e400 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e444:	4b03      	ldr	r3, [pc, #12]	@ (800e454 <tcp_new_port+0x84>)
 800e446:	881b      	ldrh	r3, [r3, #0]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr
 800e454:	20009674 	.word	0x20009674
 800e458:	08054ab8 	.word	0x08054ab8

0800e45c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e45c:	b5b0      	push	{r4, r5, r7, lr}
 800e45e:	b090      	sub	sp, #64	@ 0x40
 800e460:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e468:	4b95      	ldr	r3, [pc, #596]	@ (800e6c0 <tcp_slowtmr+0x264>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	3301      	adds	r3, #1
 800e46e:	4a94      	ldr	r2, [pc, #592]	@ (800e6c0 <tcp_slowtmr+0x264>)
 800e470:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e472:	4b94      	ldr	r3, [pc, #592]	@ (800e6c4 <tcp_slowtmr+0x268>)
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	3301      	adds	r3, #1
 800e478:	b2da      	uxtb	r2, r3
 800e47a:	4b92      	ldr	r3, [pc, #584]	@ (800e6c4 <tcp_slowtmr+0x268>)
 800e47c:	701a      	strb	r2, [r3, #0]
 800e47e:	e000      	b.n	800e482 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e480:	bf00      	nop
  prev = NULL;
 800e482:	2300      	movs	r3, #0
 800e484:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e486:	4b90      	ldr	r3, [pc, #576]	@ (800e6c8 <tcp_slowtmr+0x26c>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e48c:	e29d      	b.n	800e9ca <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e490:	7d1b      	ldrb	r3, [r3, #20]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d106      	bne.n	800e4a4 <tcp_slowtmr+0x48>
 800e496:	4b8d      	ldr	r3, [pc, #564]	@ (800e6cc <tcp_slowtmr+0x270>)
 800e498:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e49c:	498c      	ldr	r1, [pc, #560]	@ (800e6d0 <tcp_slowtmr+0x274>)
 800e49e:	488d      	ldr	r0, [pc, #564]	@ (800e6d4 <tcp_slowtmr+0x278>)
 800e4a0:	f009 fa80 	bl	80179a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a6:	7d1b      	ldrb	r3, [r3, #20]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d106      	bne.n	800e4ba <tcp_slowtmr+0x5e>
 800e4ac:	4b87      	ldr	r3, [pc, #540]	@ (800e6cc <tcp_slowtmr+0x270>)
 800e4ae:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e4b2:	4989      	ldr	r1, [pc, #548]	@ (800e6d8 <tcp_slowtmr+0x27c>)
 800e4b4:	4887      	ldr	r0, [pc, #540]	@ (800e6d4 <tcp_slowtmr+0x278>)
 800e4b6:	f009 fa75 	bl	80179a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4bc:	7d1b      	ldrb	r3, [r3, #20]
 800e4be:	2b0a      	cmp	r3, #10
 800e4c0:	d106      	bne.n	800e4d0 <tcp_slowtmr+0x74>
 800e4c2:	4b82      	ldr	r3, [pc, #520]	@ (800e6cc <tcp_slowtmr+0x270>)
 800e4c4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e4c8:	4984      	ldr	r1, [pc, #528]	@ (800e6dc <tcp_slowtmr+0x280>)
 800e4ca:	4882      	ldr	r0, [pc, #520]	@ (800e6d4 <tcp_slowtmr+0x278>)
 800e4cc:	f009 fa6a 	bl	80179a4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d2:	7f9a      	ldrb	r2, [r3, #30]
 800e4d4:	4b7b      	ldr	r3, [pc, #492]	@ (800e6c4 <tcp_slowtmr+0x268>)
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d105      	bne.n	800e4e8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800e4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4de:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e4e6:	e270      	b.n	800e9ca <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800e4e8:	4b76      	ldr	r3, [pc, #472]	@ (800e6c4 <tcp_slowtmr+0x268>)
 800e4ea:	781a      	ldrb	r2, [r3, #0]
 800e4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ee:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fe:	7d1b      	ldrb	r3, [r3, #20]
 800e500:	2b02      	cmp	r3, #2
 800e502:	d10a      	bne.n	800e51a <tcp_slowtmr+0xbe>
 800e504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e506:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e50a:	2b05      	cmp	r3, #5
 800e50c:	d905      	bls.n	800e51a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e50e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e512:	3301      	adds	r3, #1
 800e514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e518:	e11e      	b.n	800e758 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e520:	2b0b      	cmp	r3, #11
 800e522:	d905      	bls.n	800e530 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e528:	3301      	adds	r3, #1
 800e52a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e52e:	e113      	b.n	800e758 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e532:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e536:	2b00      	cmp	r3, #0
 800e538:	d075      	beq.n	800e626 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e53c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d006      	beq.n	800e550 <tcp_slowtmr+0xf4>
 800e542:	4b62      	ldr	r3, [pc, #392]	@ (800e6cc <tcp_slowtmr+0x270>)
 800e544:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e548:	4965      	ldr	r1, [pc, #404]	@ (800e6e0 <tcp_slowtmr+0x284>)
 800e54a:	4862      	ldr	r0, [pc, #392]	@ (800e6d4 <tcp_slowtmr+0x278>)
 800e54c:	f009 fa2a 	bl	80179a4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e554:	2b00      	cmp	r3, #0
 800e556:	d106      	bne.n	800e566 <tcp_slowtmr+0x10a>
 800e558:	4b5c      	ldr	r3, [pc, #368]	@ (800e6cc <tcp_slowtmr+0x270>)
 800e55a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e55e:	4961      	ldr	r1, [pc, #388]	@ (800e6e4 <tcp_slowtmr+0x288>)
 800e560:	485c      	ldr	r0, [pc, #368]	@ (800e6d4 <tcp_slowtmr+0x278>)
 800e562:	f009 fa1f 	bl	80179a4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e568:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e56c:	2b0b      	cmp	r3, #11
 800e56e:	d905      	bls.n	800e57c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e574:	3301      	adds	r3, #1
 800e576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e57a:	e0ed      	b.n	800e758 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e57e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e582:	3b01      	subs	r3, #1
 800e584:	4a58      	ldr	r2, [pc, #352]	@ (800e6e8 <tcp_slowtmr+0x28c>)
 800e586:	5cd3      	ldrb	r3, [r2, r3]
 800e588:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e58c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e590:	7c7a      	ldrb	r2, [r7, #17]
 800e592:	429a      	cmp	r2, r3
 800e594:	d907      	bls.n	800e5a6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e598:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e59c:	3301      	adds	r3, #1
 800e59e:	b2da      	uxtb	r2, r3
 800e5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e5ac:	7c7a      	ldrb	r2, [r7, #17]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	f200 80d2 	bhi.w	800e758 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d108      	bne.n	800e5d4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e5c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5c4:	f005 f968 	bl	8013898 <tcp_zero_window_probe>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d014      	beq.n	800e5f8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	623b      	str	r3, [r7, #32]
 800e5d2:	e011      	b.n	800e5f8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e5da:	4619      	mov	r1, r3
 800e5dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5de:	f004 f82d 	bl	801263c <tcp_split_unsent_seg>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d107      	bne.n	800e5f8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e5e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5ea:	f004 faad 	bl	8012b48 <tcp_output>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d101      	bne.n	800e5f8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e5f8:	6a3b      	ldr	r3, [r7, #32]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	f000 80ac 	beq.w	800e758 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e602:	2200      	movs	r2, #0
 800e604:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e60a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e60e:	2b06      	cmp	r3, #6
 800e610:	f200 80a2 	bhi.w	800e758 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e616:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e61a:	3301      	adds	r3, #1
 800e61c:	b2da      	uxtb	r2, r3
 800e61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e620:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e624:	e098      	b.n	800e758 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e628:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	db0f      	blt.n	800e650 <tcp_slowtmr+0x1f4>
 800e630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e632:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e636:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d008      	beq.n	800e650 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e640:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e644:	b29b      	uxth	r3, r3
 800e646:	3301      	adds	r3, #1
 800e648:	b29b      	uxth	r3, r3
 800e64a:	b21a      	sxth	r2, r3
 800e64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e64e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e652:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e658:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e65c:	429a      	cmp	r2, r3
 800e65e:	db7b      	blt.n	800e758 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e660:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e662:	f004 fd65 	bl	8013130 <tcp_rexmit_rto_prepare>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d007      	beq.n	800e67c <tcp_slowtmr+0x220>
 800e66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e66e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e670:	2b00      	cmp	r3, #0
 800e672:	d171      	bne.n	800e758 <tcp_slowtmr+0x2fc>
 800e674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d06d      	beq.n	800e758 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e67e:	7d1b      	ldrb	r3, [r3, #20]
 800e680:	2b02      	cmp	r3, #2
 800e682:	d03a      	beq.n	800e6fa <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e68a:	2b0c      	cmp	r3, #12
 800e68c:	bf28      	it	cs
 800e68e:	230c      	movcs	r3, #12
 800e690:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e694:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e698:	10db      	asrs	r3, r3, #3
 800e69a:	b21b      	sxth	r3, r3
 800e69c:	461a      	mov	r2, r3
 800e69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e6a4:	4413      	add	r3, r2
 800e6a6:	7efa      	ldrb	r2, [r7, #27]
 800e6a8:	4910      	ldr	r1, [pc, #64]	@ (800e6ec <tcp_slowtmr+0x290>)
 800e6aa:	5c8a      	ldrb	r2, [r1, r2]
 800e6ac:	4093      	lsls	r3, r2
 800e6ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	dc1a      	bgt.n	800e6f0 <tcp_slowtmr+0x294>
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	b21a      	sxth	r2, r3
 800e6be:	e019      	b.n	800e6f4 <tcp_slowtmr+0x298>
 800e6c0:	20014618 	.word	0x20014618
 800e6c4:	2001462e 	.word	0x2001462e
 800e6c8:	20014624 	.word	0x20014624
 800e6cc:	0801afe8 	.word	0x0801afe8
 800e6d0:	0801b32c 	.word	0x0801b32c
 800e6d4:	0801b02c 	.word	0x0801b02c
 800e6d8:	0801b358 	.word	0x0801b358
 800e6dc:	0801b384 	.word	0x0801b384
 800e6e0:	0801b3b4 	.word	0x0801b3b4
 800e6e4:	0801b3e8 	.word	0x0801b3e8
 800e6e8:	08054ab0 	.word	0x08054ab0
 800e6ec:	08054aa0 	.word	0x08054aa0
 800e6f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e702:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e708:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e70c:	4293      	cmp	r3, r2
 800e70e:	bf28      	it	cs
 800e710:	4613      	movcs	r3, r2
 800e712:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e714:	8a7b      	ldrh	r3, [r7, #18]
 800e716:	085b      	lsrs	r3, r3, #1
 800e718:	b29a      	uxth	r2, r3
 800e71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e71c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e722:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e728:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e72a:	005b      	lsls	r3, r3, #1
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	429a      	cmp	r2, r3
 800e730:	d206      	bcs.n	800e740 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e734:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e736:	005b      	lsls	r3, r3, #1
 800e738:	b29a      	uxth	r2, r3
 800e73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e73c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e742:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e746:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e74c:	2200      	movs	r2, #0
 800e74e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e752:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e754:	f004 fd5c 	bl	8013210 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e75a:	7d1b      	ldrb	r3, [r3, #20]
 800e75c:	2b06      	cmp	r3, #6
 800e75e:	d111      	bne.n	800e784 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e762:	8b5b      	ldrh	r3, [r3, #26]
 800e764:	f003 0310 	and.w	r3, r3, #16
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d00b      	beq.n	800e784 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e76c:	4b9c      	ldr	r3, [pc, #624]	@ (800e9e0 <tcp_slowtmr+0x584>)
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e772:	6a1b      	ldr	r3, [r3, #32]
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	2b28      	cmp	r3, #40	@ 0x28
 800e778:	d904      	bls.n	800e784 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e77a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e77e:	3301      	adds	r3, #1
 800e780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e786:	7a5b      	ldrb	r3, [r3, #9]
 800e788:	f003 0308 	and.w	r3, r3, #8
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d04a      	beq.n	800e826 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e792:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e794:	2b04      	cmp	r3, #4
 800e796:	d003      	beq.n	800e7a0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e79a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e79c:	2b07      	cmp	r3, #7
 800e79e:	d142      	bne.n	800e826 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7a0:	4b8f      	ldr	r3, [pc, #572]	@ (800e9e0 <tcp_slowtmr+0x584>)
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a6:	6a1b      	ldr	r3, [r3, #32]
 800e7a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ac:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e7b0:	4b8c      	ldr	r3, [pc, #560]	@ (800e9e4 <tcp_slowtmr+0x588>)
 800e7b2:	440b      	add	r3, r1
 800e7b4:	498c      	ldr	r1, [pc, #560]	@ (800e9e8 <tcp_slowtmr+0x58c>)
 800e7b6:	fba1 1303 	umull	r1, r3, r1, r3
 800e7ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d90a      	bls.n	800e7d6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e7ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e7d4:	e027      	b.n	800e826 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7d6:	4b82      	ldr	r3, [pc, #520]	@ (800e9e0 <tcp_slowtmr+0x584>)
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	4b7f      	ldr	r3, [pc, #508]	@ (800e9ec <tcp_slowtmr+0x590>)
 800e7f0:	fb00 f303 	mul.w	r3, r0, r3
 800e7f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e7f6:	497c      	ldr	r1, [pc, #496]	@ (800e9e8 <tcp_slowtmr+0x58c>)
 800e7f8:	fba1 1303 	umull	r1, r3, r1, r3
 800e7fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d911      	bls.n	800e826 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e802:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e804:	f005 f808 	bl	8013818 <tcp_keepalive>
 800e808:	4603      	mov	r3, r0
 800e80a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e80e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e812:	2b00      	cmp	r3, #0
 800e814:	d107      	bne.n	800e826 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e818:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e81c:	3301      	adds	r3, #1
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e822:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d011      	beq.n	800e852 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e82e:	4b6c      	ldr	r3, [pc, #432]	@ (800e9e0 <tcp_slowtmr+0x584>)
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e834:	6a1b      	ldr	r3, [r3, #32]
 800e836:	1ad2      	subs	r2, r2, r3
 800e838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e83a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e83e:	4619      	mov	r1, r3
 800e840:	460b      	mov	r3, r1
 800e842:	005b      	lsls	r3, r3, #1
 800e844:	440b      	add	r3, r1
 800e846:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e848:	429a      	cmp	r2, r3
 800e84a:	d302      	bcc.n	800e852 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e84c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e84e:	f000 fec9 	bl	800f5e4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e854:	7d1b      	ldrb	r3, [r3, #20]
 800e856:	2b03      	cmp	r3, #3
 800e858:	d10b      	bne.n	800e872 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e85a:	4b61      	ldr	r3, [pc, #388]	@ (800e9e0 <tcp_slowtmr+0x584>)
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e860:	6a1b      	ldr	r3, [r3, #32]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	2b28      	cmp	r3, #40	@ 0x28
 800e866:	d904      	bls.n	800e872 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e86c:	3301      	adds	r3, #1
 800e86e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e874:	7d1b      	ldrb	r3, [r3, #20]
 800e876:	2b09      	cmp	r3, #9
 800e878:	d10b      	bne.n	800e892 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e87a:	4b59      	ldr	r3, [pc, #356]	@ (800e9e0 <tcp_slowtmr+0x584>)
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e880:	6a1b      	ldr	r3, [r3, #32]
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	2bf0      	cmp	r3, #240	@ 0xf0
 800e886:	d904      	bls.n	800e892 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e88c:	3301      	adds	r3, #1
 800e88e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e896:	2b00      	cmp	r3, #0
 800e898:	d060      	beq.n	800e95c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8a0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e8a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e8a4:	f000 fcea 	bl	800f27c <tcp_pcb_purge>
      if (prev != NULL) {
 800e8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d010      	beq.n	800e8d0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e8ae:	4b50      	ldr	r3, [pc, #320]	@ (800e9f0 <tcp_slowtmr+0x594>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d106      	bne.n	800e8c6 <tcp_slowtmr+0x46a>
 800e8b8:	4b4e      	ldr	r3, [pc, #312]	@ (800e9f4 <tcp_slowtmr+0x598>)
 800e8ba:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e8be:	494e      	ldr	r1, [pc, #312]	@ (800e9f8 <tcp_slowtmr+0x59c>)
 800e8c0:	484e      	ldr	r0, [pc, #312]	@ (800e9fc <tcp_slowtmr+0x5a0>)
 800e8c2:	f009 f86f 	bl	80179a4 <iprintf>
        prev->next = pcb->next;
 800e8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8c8:	68da      	ldr	r2, [r3, #12]
 800e8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8cc:	60da      	str	r2, [r3, #12]
 800e8ce:	e00f      	b.n	800e8f0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e8d0:	4b47      	ldr	r3, [pc, #284]	@ (800e9f0 <tcp_slowtmr+0x594>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d006      	beq.n	800e8e8 <tcp_slowtmr+0x48c>
 800e8da:	4b46      	ldr	r3, [pc, #280]	@ (800e9f4 <tcp_slowtmr+0x598>)
 800e8dc:	f240 5271 	movw	r2, #1393	@ 0x571
 800e8e0:	4947      	ldr	r1, [pc, #284]	@ (800ea00 <tcp_slowtmr+0x5a4>)
 800e8e2:	4846      	ldr	r0, [pc, #280]	@ (800e9fc <tcp_slowtmr+0x5a0>)
 800e8e4:	f009 f85e 	bl	80179a4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	4a40      	ldr	r2, [pc, #256]	@ (800e9f0 <tcp_slowtmr+0x594>)
 800e8ee:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e8f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d013      	beq.n	800e920 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8fa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8fe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e900:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e904:	3304      	adds	r3, #4
 800e906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e908:	8ad2      	ldrh	r2, [r2, #22]
 800e90a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e90c:	8b09      	ldrh	r1, [r1, #24]
 800e90e:	9102      	str	r1, [sp, #8]
 800e910:	9201      	str	r2, [sp, #4]
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	462b      	mov	r3, r5
 800e916:	4622      	mov	r2, r4
 800e918:	4601      	mov	r1, r0
 800e91a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e91c:	f004 fec8 	bl	80136b0 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e928:	7d1b      	ldrb	r3, [r3, #20]
 800e92a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e936:	6838      	ldr	r0, [r7, #0]
 800e938:	f7ff f838 	bl	800d9ac <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e93c:	4b31      	ldr	r3, [pc, #196]	@ (800ea04 <tcp_slowtmr+0x5a8>)
 800e93e:	2200      	movs	r2, #0
 800e940:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d004      	beq.n	800e952 <tcp_slowtmr+0x4f6>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f06f 010c 	mvn.w	r1, #12
 800e94e:	68b8      	ldr	r0, [r7, #8]
 800e950:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e952:	4b2c      	ldr	r3, [pc, #176]	@ (800ea04 <tcp_slowtmr+0x5a8>)
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d037      	beq.n	800e9ca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e95a:	e592      	b.n	800e482 <tcp_slowtmr+0x26>
      prev = pcb;
 800e95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e95e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e968:	7f1b      	ldrb	r3, [r3, #28]
 800e96a:	3301      	adds	r3, #1
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e970:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e974:	7f1a      	ldrb	r2, [r3, #28]
 800e976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e978:	7f5b      	ldrb	r3, [r3, #29]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d325      	bcc.n	800e9ca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e980:	2200      	movs	r2, #0
 800e982:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e984:	4b1f      	ldr	r3, [pc, #124]	@ (800ea04 <tcp_slowtmr+0x5a8>)
 800e986:	2200      	movs	r2, #0
 800e988:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e98c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00b      	beq.n	800e9ac <tcp_slowtmr+0x550>
 800e994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e99a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e99c:	6912      	ldr	r2, [r2, #16]
 800e99e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e9a0:	4610      	mov	r0, r2
 800e9a2:	4798      	blx	r3
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e9aa:	e002      	b.n	800e9b2 <tcp_slowtmr+0x556>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e9b2:	4b14      	ldr	r3, [pc, #80]	@ (800ea04 <tcp_slowtmr+0x5a8>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f47f ad62 	bne.w	800e480 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e9bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d102      	bne.n	800e9ca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e9c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9c6:	f004 f8bf 	bl	8012b48 <tcp_output>
  while (pcb != NULL) {
 800e9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	f47f ad5e 	bne.w	800e48e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800ea08 <tcp_slowtmr+0x5ac>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e9dc:	e069      	b.n	800eab2 <tcp_slowtmr+0x656>
 800e9de:	bf00      	nop
 800e9e0:	20014618 	.word	0x20014618
 800e9e4:	000a4cb8 	.word	0x000a4cb8
 800e9e8:	10624dd3 	.word	0x10624dd3
 800e9ec:	000124f8 	.word	0x000124f8
 800e9f0:	20014624 	.word	0x20014624
 800e9f4:	0801afe8 	.word	0x0801afe8
 800e9f8:	0801b420 	.word	0x0801b420
 800e9fc:	0801b02c 	.word	0x0801b02c
 800ea00:	0801b44c 	.word	0x0801b44c
 800ea04:	2001462c 	.word	0x2001462c
 800ea08:	20014628 	.word	0x20014628
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ea0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0e:	7d1b      	ldrb	r3, [r3, #20]
 800ea10:	2b0a      	cmp	r3, #10
 800ea12:	d006      	beq.n	800ea22 <tcp_slowtmr+0x5c6>
 800ea14:	4b2b      	ldr	r3, [pc, #172]	@ (800eac4 <tcp_slowtmr+0x668>)
 800ea16:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ea1a:	492b      	ldr	r1, [pc, #172]	@ (800eac8 <tcp_slowtmr+0x66c>)
 800ea1c:	482b      	ldr	r0, [pc, #172]	@ (800eacc <tcp_slowtmr+0x670>)
 800ea1e:	f008 ffc1 	bl	80179a4 <iprintf>
    pcb_remove = 0;
 800ea22:	2300      	movs	r3, #0
 800ea24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ea28:	4b29      	ldr	r3, [pc, #164]	@ (800ead0 <tcp_slowtmr+0x674>)
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea2e:	6a1b      	ldr	r3, [r3, #32]
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	2bf0      	cmp	r3, #240	@ 0xf0
 800ea34:	d904      	bls.n	800ea40 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800ea36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ea40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d02f      	beq.n	800eaa8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ea48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea4a:	f000 fc17 	bl	800f27c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ea4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d010      	beq.n	800ea76 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ea54:	4b1f      	ldr	r3, [pc, #124]	@ (800ead4 <tcp_slowtmr+0x678>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d106      	bne.n	800ea6c <tcp_slowtmr+0x610>
 800ea5e:	4b19      	ldr	r3, [pc, #100]	@ (800eac4 <tcp_slowtmr+0x668>)
 800ea60:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ea64:	491c      	ldr	r1, [pc, #112]	@ (800ead8 <tcp_slowtmr+0x67c>)
 800ea66:	4819      	ldr	r0, [pc, #100]	@ (800eacc <tcp_slowtmr+0x670>)
 800ea68:	f008 ff9c 	bl	80179a4 <iprintf>
        prev->next = pcb->next;
 800ea6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea6e:	68da      	ldr	r2, [r3, #12]
 800ea70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea72:	60da      	str	r2, [r3, #12]
 800ea74:	e00f      	b.n	800ea96 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ea76:	4b17      	ldr	r3, [pc, #92]	@ (800ead4 <tcp_slowtmr+0x678>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d006      	beq.n	800ea8e <tcp_slowtmr+0x632>
 800ea80:	4b10      	ldr	r3, [pc, #64]	@ (800eac4 <tcp_slowtmr+0x668>)
 800ea82:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ea86:	4915      	ldr	r1, [pc, #84]	@ (800eadc <tcp_slowtmr+0x680>)
 800ea88:	4810      	ldr	r0, [pc, #64]	@ (800eacc <tcp_slowtmr+0x670>)
 800ea8a:	f008 ff8b 	bl	80179a4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ea8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	4a10      	ldr	r2, [pc, #64]	@ (800ead4 <tcp_slowtmr+0x678>)
 800ea94:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ea96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea98:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ea9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800eaa0:	69f8      	ldr	r0, [r7, #28]
 800eaa2:	f7fe ff83 	bl	800d9ac <tcp_free>
 800eaa6:	e004      	b.n	800eab2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800eaa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800eaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800eab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1a9      	bne.n	800ea0c <tcp_slowtmr+0x5b0>
    }
  }
}
 800eab8:	bf00      	nop
 800eaba:	bf00      	nop
 800eabc:	3730      	adds	r7, #48	@ 0x30
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bdb0      	pop	{r4, r5, r7, pc}
 800eac2:	bf00      	nop
 800eac4:	0801afe8 	.word	0x0801afe8
 800eac8:	0801b478 	.word	0x0801b478
 800eacc:	0801b02c 	.word	0x0801b02c
 800ead0:	20014618 	.word	0x20014618
 800ead4:	20014628 	.word	0x20014628
 800ead8:	0801b4a8 	.word	0x0801b4a8
 800eadc:	0801b4d0 	.word	0x0801b4d0

0800eae0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800eae6:	4b2d      	ldr	r3, [pc, #180]	@ (800eb9c <tcp_fasttmr+0xbc>)
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	3301      	adds	r3, #1
 800eaec:	b2da      	uxtb	r2, r3
 800eaee:	4b2b      	ldr	r3, [pc, #172]	@ (800eb9c <tcp_fasttmr+0xbc>)
 800eaf0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eaf2:	4b2b      	ldr	r3, [pc, #172]	@ (800eba0 <tcp_fasttmr+0xc0>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eaf8:	e048      	b.n	800eb8c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	7f9a      	ldrb	r2, [r3, #30]
 800eafe:	4b27      	ldr	r3, [pc, #156]	@ (800eb9c <tcp_fasttmr+0xbc>)
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d03f      	beq.n	800eb86 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eb06:	4b25      	ldr	r3, [pc, #148]	@ (800eb9c <tcp_fasttmr+0xbc>)
 800eb08:	781a      	ldrb	r2, [r3, #0]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	8b5b      	ldrh	r3, [r3, #26]
 800eb12:	f003 0301 	and.w	r3, r3, #1
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d010      	beq.n	800eb3c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	8b5b      	ldrh	r3, [r3, #26]
 800eb1e:	f043 0302 	orr.w	r3, r3, #2
 800eb22:	b29a      	uxth	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f004 f80d 	bl	8012b48 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	8b5b      	ldrh	r3, [r3, #26]
 800eb32:	f023 0303 	bic.w	r3, r3, #3
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	8b5b      	ldrh	r3, [r3, #26]
 800eb40:	f003 0308 	and.w	r3, r3, #8
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d009      	beq.n	800eb5c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	8b5b      	ldrh	r3, [r3, #26]
 800eb4c:	f023 0308 	bic.w	r3, r3, #8
 800eb50:	b29a      	uxth	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7ff f8bc 	bl	800dcd4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	68db      	ldr	r3, [r3, #12]
 800eb60:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00a      	beq.n	800eb80 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eb6a:	4b0e      	ldr	r3, [pc, #56]	@ (800eba4 <tcp_fasttmr+0xc4>)
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f000 f819 	bl	800eba8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eb76:	4b0b      	ldr	r3, [pc, #44]	@ (800eba4 <tcp_fasttmr+0xc4>)
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d000      	beq.n	800eb80 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eb7e:	e7b8      	b.n	800eaf2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	607b      	str	r3, [r7, #4]
 800eb84:	e002      	b.n	800eb8c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d1b3      	bne.n	800eafa <tcp_fasttmr+0x1a>
    }
  }
}
 800eb92:	bf00      	nop
 800eb94:	bf00      	nop
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	2001462e 	.word	0x2001462e
 800eba0:	20014624 	.word	0x20014624
 800eba4:	2001462c 	.word	0x2001462c

0800eba8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eba8:	b590      	push	{r4, r7, lr}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d109      	bne.n	800ebca <tcp_process_refused_data+0x22>
 800ebb6:	4b37      	ldr	r3, [pc, #220]	@ (800ec94 <tcp_process_refused_data+0xec>)
 800ebb8:	f240 6209 	movw	r2, #1545	@ 0x609
 800ebbc:	4936      	ldr	r1, [pc, #216]	@ (800ec98 <tcp_process_refused_data+0xf0>)
 800ebbe:	4837      	ldr	r0, [pc, #220]	@ (800ec9c <tcp_process_refused_data+0xf4>)
 800ebc0:	f008 fef0 	bl	80179a4 <iprintf>
 800ebc4:	f06f 030f 	mvn.w	r3, #15
 800ebc8:	e060      	b.n	800ec8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebce:	7b5b      	ldrb	r3, [r3, #13]
 800ebd0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebd6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00b      	beq.n	800ec00 <tcp_process_refused_data+0x58>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6918      	ldr	r0, [r3, #16]
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	6879      	ldr	r1, [r7, #4]
 800ebf8:	47a0      	blx	r4
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	73fb      	strb	r3, [r7, #15]
 800ebfe:	e007      	b.n	800ec10 <tcp_process_refused_data+0x68>
 800ec00:	2300      	movs	r3, #0
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	6879      	ldr	r1, [r7, #4]
 800ec06:	2000      	movs	r0, #0
 800ec08:	f000 f8c2 	bl	800ed90 <tcp_recv_null>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ec10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d12a      	bne.n	800ec6e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ec18:	7bbb      	ldrb	r3, [r7, #14]
 800ec1a:	f003 0320 	and.w	r3, r3, #32
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d033      	beq.n	800ec8a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec26:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ec2a:	d005      	beq.n	800ec38 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec30:	3301      	adds	r3, #1
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00b      	beq.n	800ec5a <tcp_process_refused_data+0xb2>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6918      	ldr	r0, [r3, #16]
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	2200      	movs	r2, #0
 800ec50:	6879      	ldr	r1, [r7, #4]
 800ec52:	47a0      	blx	r4
 800ec54:	4603      	mov	r3, r0
 800ec56:	73fb      	strb	r3, [r7, #15]
 800ec58:	e001      	b.n	800ec5e <tcp_process_refused_data+0xb6>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ec5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec62:	f113 0f0d 	cmn.w	r3, #13
 800ec66:	d110      	bne.n	800ec8a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ec68:	f06f 030c 	mvn.w	r3, #12
 800ec6c:	e00e      	b.n	800ec8c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ec6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec72:	f113 0f0d 	cmn.w	r3, #13
 800ec76:	d102      	bne.n	800ec7e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ec78:	f06f 030c 	mvn.w	r3, #12
 800ec7c:	e006      	b.n	800ec8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	68ba      	ldr	r2, [r7, #8]
 800ec82:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ec84:	f06f 0304 	mvn.w	r3, #4
 800ec88:	e000      	b.n	800ec8c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ec8a:	2300      	movs	r3, #0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3714      	adds	r7, #20
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd90      	pop	{r4, r7, pc}
 800ec94:	0801afe8 	.word	0x0801afe8
 800ec98:	0801b4f8 	.word	0x0801b4f8
 800ec9c:	0801b02c 	.word	0x0801b02c

0800eca0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800eca8:	e007      	b.n	800ecba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 f80a 	bl	800ecca <tcp_seg_free>
    seg = next;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1f4      	bne.n	800ecaa <tcp_segs_free+0xa>
  }
}
 800ecc0:	bf00      	nop
 800ecc2:	bf00      	nop
 800ecc4:	3710      	adds	r7, #16
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}

0800ecca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ecca:	b580      	push	{r7, lr}
 800eccc:	b082      	sub	sp, #8
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00c      	beq.n	800ecf2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d004      	beq.n	800ecea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fe fb1f 	bl	800d328 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ecea:	6879      	ldr	r1, [r7, #4]
 800ecec:	2003      	movs	r0, #3
 800ecee:	f7fd fc57 	bl	800c5a0 <memp_free>
  }
}
 800ecf2:	bf00      	nop
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
	...

0800ecfc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	460b      	mov	r3, r1
 800ed06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d107      	bne.n	800ed1e <tcp_setprio+0x22>
 800ed0e:	4b07      	ldr	r3, [pc, #28]	@ (800ed2c <tcp_setprio+0x30>)
 800ed10:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800ed14:	4906      	ldr	r1, [pc, #24]	@ (800ed30 <tcp_setprio+0x34>)
 800ed16:	4807      	ldr	r0, [pc, #28]	@ (800ed34 <tcp_setprio+0x38>)
 800ed18:	f008 fe44 	bl	80179a4 <iprintf>
 800ed1c:	e002      	b.n	800ed24 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	78fa      	ldrb	r2, [r7, #3]
 800ed22:	755a      	strb	r2, [r3, #21]
}
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	0801afe8 	.word	0x0801afe8
 800ed30:	0801b520 	.word	0x0801b520
 800ed34:	0801b02c 	.word	0x0801b02c

0800ed38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d106      	bne.n	800ed54 <tcp_seg_copy+0x1c>
 800ed46:	4b0f      	ldr	r3, [pc, #60]	@ (800ed84 <tcp_seg_copy+0x4c>)
 800ed48:	f240 6282 	movw	r2, #1666	@ 0x682
 800ed4c:	490e      	ldr	r1, [pc, #56]	@ (800ed88 <tcp_seg_copy+0x50>)
 800ed4e:	480f      	ldr	r0, [pc, #60]	@ (800ed8c <tcp_seg_copy+0x54>)
 800ed50:	f008 fe28 	bl	80179a4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ed54:	2003      	movs	r0, #3
 800ed56:	f7fd fbb3 	bl	800c4c0 <memp_malloc>
 800ed5a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d101      	bne.n	800ed66 <tcp_seg_copy+0x2e>
    return NULL;
 800ed62:	2300      	movs	r3, #0
 800ed64:	e00a      	b.n	800ed7c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ed66:	2210      	movs	r2, #16
 800ed68:	6879      	ldr	r1, [r7, #4]
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f009 f875 	bl	8017e5a <memcpy>
  pbuf_ref(cseg->p);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7fe fb77 	bl	800d468 <pbuf_ref>
  return cseg;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	0801afe8 	.word	0x0801afe8
 800ed88:	0801b53c 	.word	0x0801b53c
 800ed8c:	0801b02c 	.word	0x0801b02c

0800ed90 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
 800ed9c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d109      	bne.n	800edb8 <tcp_recv_null+0x28>
 800eda4:	4b12      	ldr	r3, [pc, #72]	@ (800edf0 <tcp_recv_null+0x60>)
 800eda6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800edaa:	4912      	ldr	r1, [pc, #72]	@ (800edf4 <tcp_recv_null+0x64>)
 800edac:	4812      	ldr	r0, [pc, #72]	@ (800edf8 <tcp_recv_null+0x68>)
 800edae:	f008 fdf9 	bl	80179a4 <iprintf>
 800edb2:	f06f 030f 	mvn.w	r3, #15
 800edb6:	e016      	b.n	800ede6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d009      	beq.n	800edd2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	891b      	ldrh	r3, [r3, #8]
 800edc2:	4619      	mov	r1, r3
 800edc4:	68b8      	ldr	r0, [r7, #8]
 800edc6:	f7ff fab3 	bl	800e330 <tcp_recved>
    pbuf_free(p);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7fe faac 	bl	800d328 <pbuf_free>
 800edd0:	e008      	b.n	800ede4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800edd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d104      	bne.n	800ede4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800edda:	68b8      	ldr	r0, [r7, #8]
 800eddc:	f7fe ffe4 	bl	800dda8 <tcp_close>
 800ede0:	4603      	mov	r3, r0
 800ede2:	e000      	b.n	800ede6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	0801afe8 	.word	0x0801afe8
 800edf4:	0801b558 	.word	0x0801b558
 800edf8:	0801b02c 	.word	0x0801b02c

0800edfc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	4603      	mov	r3, r0
 800ee04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ee06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	db01      	blt.n	800ee12 <tcp_kill_prio+0x16>
 800ee0e:	79fb      	ldrb	r3, [r7, #7]
 800ee10:	e000      	b.n	800ee14 <tcp_kill_prio+0x18>
 800ee12:	237f      	movs	r3, #127	@ 0x7f
 800ee14:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ee16:	7afb      	ldrb	r3, [r7, #11]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d034      	beq.n	800ee86 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ee1c:	7afb      	ldrb	r3, [r7, #11]
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ee22:	2300      	movs	r3, #0
 800ee24:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ee26:	2300      	movs	r3, #0
 800ee28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee2a:	4b19      	ldr	r3, [pc, #100]	@ (800ee90 <tcp_kill_prio+0x94>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	617b      	str	r3, [r7, #20]
 800ee30:	e01f      	b.n	800ee72 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	7d5b      	ldrb	r3, [r3, #21]
 800ee36:	7afa      	ldrb	r2, [r7, #11]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d80c      	bhi.n	800ee56 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ee40:	7afa      	ldrb	r2, [r7, #11]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d112      	bne.n	800ee6c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ee46:	4b13      	ldr	r3, [pc, #76]	@ (800ee94 <tcp_kill_prio+0x98>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	6a1b      	ldr	r3, [r3, #32]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d80a      	bhi.n	800ee6c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ee56:	4b0f      	ldr	r3, [pc, #60]	@ (800ee94 <tcp_kill_prio+0x98>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	7d5b      	ldrb	r3, [r3, #21]
 800ee6a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	68db      	ldr	r3, [r3, #12]
 800ee70:	617b      	str	r3, [r7, #20]
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1dc      	bne.n	800ee32 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d004      	beq.n	800ee88 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee7e:	6938      	ldr	r0, [r7, #16]
 800ee80:	f7ff f87c 	bl	800df7c <tcp_abort>
 800ee84:	e000      	b.n	800ee88 <tcp_kill_prio+0x8c>
    return;
 800ee86:	bf00      	nop
  }
}
 800ee88:	3718      	adds	r7, #24
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	20014624 	.word	0x20014624
 800ee94:	20014618 	.word	0x20014618

0800ee98 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	4603      	mov	r3, r0
 800eea0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eea2:	79fb      	ldrb	r3, [r7, #7]
 800eea4:	2b08      	cmp	r3, #8
 800eea6:	d009      	beq.n	800eebc <tcp_kill_state+0x24>
 800eea8:	79fb      	ldrb	r3, [r7, #7]
 800eeaa:	2b09      	cmp	r3, #9
 800eeac:	d006      	beq.n	800eebc <tcp_kill_state+0x24>
 800eeae:	4b1a      	ldr	r3, [pc, #104]	@ (800ef18 <tcp_kill_state+0x80>)
 800eeb0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800eeb4:	4919      	ldr	r1, [pc, #100]	@ (800ef1c <tcp_kill_state+0x84>)
 800eeb6:	481a      	ldr	r0, [pc, #104]	@ (800ef20 <tcp_kill_state+0x88>)
 800eeb8:	f008 fd74 	bl	80179a4 <iprintf>

  inactivity = 0;
 800eebc:	2300      	movs	r3, #0
 800eebe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eec0:	2300      	movs	r3, #0
 800eec2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eec4:	4b17      	ldr	r3, [pc, #92]	@ (800ef24 <tcp_kill_state+0x8c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	617b      	str	r3, [r7, #20]
 800eeca:	e017      	b.n	800eefc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	7d1b      	ldrb	r3, [r3, #20]
 800eed0:	79fa      	ldrb	r2, [r7, #7]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d10f      	bne.n	800eef6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eed6:	4b14      	ldr	r3, [pc, #80]	@ (800ef28 <tcp_kill_state+0x90>)
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d807      	bhi.n	800eef6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eee6:	4b10      	ldr	r3, [pc, #64]	@ (800ef28 <tcp_kill_state+0x90>)
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	6a1b      	ldr	r3, [r3, #32]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	617b      	str	r3, [r7, #20]
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1e4      	bne.n	800eecc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d003      	beq.n	800ef10 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ef08:	2100      	movs	r1, #0
 800ef0a:	6938      	ldr	r0, [r7, #16]
 800ef0c:	f7fe ff78 	bl	800de00 <tcp_abandon>
  }
}
 800ef10:	bf00      	nop
 800ef12:	3718      	adds	r7, #24
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	0801afe8 	.word	0x0801afe8
 800ef1c:	0801b574 	.word	0x0801b574
 800ef20:	0801b02c 	.word	0x0801b02c
 800ef24:	20014624 	.word	0x20014624
 800ef28:	20014618 	.word	0x20014618

0800ef2c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ef36:	2300      	movs	r3, #0
 800ef38:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef3a:	4b12      	ldr	r3, [pc, #72]	@ (800ef84 <tcp_kill_timewait+0x58>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	60fb      	str	r3, [r7, #12]
 800ef40:	e012      	b.n	800ef68 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef42:	4b11      	ldr	r3, [pc, #68]	@ (800ef88 <tcp_kill_timewait+0x5c>)
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6a1b      	ldr	r3, [r3, #32]
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d807      	bhi.n	800ef62 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ef52:	4b0d      	ldr	r3, [pc, #52]	@ (800ef88 <tcp_kill_timewait+0x5c>)
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6a1b      	ldr	r3, [r3, #32]
 800ef5a:	1ad3      	subs	r3, r2, r3
 800ef5c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	60fb      	str	r3, [r7, #12]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1e9      	bne.n	800ef42 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d002      	beq.n	800ef7a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef74:	68b8      	ldr	r0, [r7, #8]
 800ef76:	f7ff f801 	bl	800df7c <tcp_abort>
  }
}
 800ef7a:	bf00      	nop
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	20014628 	.word	0x20014628
 800ef88:	20014618 	.word	0x20014618

0800ef8c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ef92:	4b10      	ldr	r3, [pc, #64]	@ (800efd4 <tcp_handle_closepend+0x48>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ef98:	e014      	b.n	800efc4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	8b5b      	ldrh	r3, [r3, #26]
 800efa4:	f003 0308 	and.w	r3, r3, #8
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d009      	beq.n	800efc0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	8b5b      	ldrh	r3, [r3, #26]
 800efb0:	f023 0308 	bic.w	r3, r3, #8
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f7fe fe8a 	bl	800dcd4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1e7      	bne.n	800ef9a <tcp_handle_closepend+0xe>
  }
}
 800efca:	bf00      	nop
 800efcc:	bf00      	nop
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	20014624 	.word	0x20014624

0800efd8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	4603      	mov	r3, r0
 800efe0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efe2:	2001      	movs	r0, #1
 800efe4:	f7fd fa6c 	bl	800c4c0 <memp_malloc>
 800efe8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d126      	bne.n	800f03e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800eff0:	f7ff ffcc 	bl	800ef8c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800eff4:	f7ff ff9a 	bl	800ef2c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eff8:	2001      	movs	r0, #1
 800effa:	f7fd fa61 	bl	800c4c0 <memp_malloc>
 800effe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d11b      	bne.n	800f03e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f006:	2009      	movs	r0, #9
 800f008:	f7ff ff46 	bl	800ee98 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f00c:	2001      	movs	r0, #1
 800f00e:	f7fd fa57 	bl	800c4c0 <memp_malloc>
 800f012:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d111      	bne.n	800f03e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f01a:	2008      	movs	r0, #8
 800f01c:	f7ff ff3c 	bl	800ee98 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f020:	2001      	movs	r0, #1
 800f022:	f7fd fa4d 	bl	800c4c0 <memp_malloc>
 800f026:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d107      	bne.n	800f03e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f02e:	79fb      	ldrb	r3, [r7, #7]
 800f030:	4618      	mov	r0, r3
 800f032:	f7ff fee3 	bl	800edfc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f036:	2001      	movs	r0, #1
 800f038:	f7fd fa42 	bl	800c4c0 <memp_malloc>
 800f03c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d03f      	beq.n	800f0c4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f044:	229c      	movs	r2, #156	@ 0x9c
 800f046:	2100      	movs	r1, #0
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	f008 fe3d 	bl	8017cc8 <memset>
    pcb->prio = prio;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	79fa      	ldrb	r2, [r7, #7]
 800f052:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f05a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f064:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	22ff      	movs	r2, #255	@ 0xff
 800f072:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f07a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2206      	movs	r2, #6
 800f080:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2206      	movs	r2, #6
 800f088:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f090:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2201      	movs	r2, #1
 800f096:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f09a:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d0 <tcp_alloc+0xf8>)
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f0a2:	4b0c      	ldr	r3, [pc, #48]	@ (800f0d4 <tcp_alloc+0xfc>)
 800f0a4:	781a      	ldrb	r2, [r3, #0]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f0b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	4a08      	ldr	r2, [pc, #32]	@ (800f0d8 <tcp_alloc+0x100>)
 800f0b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	4a07      	ldr	r2, [pc, #28]	@ (800f0dc <tcp_alloc+0x104>)
 800f0c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	20014618 	.word	0x20014618
 800f0d4:	2001462e 	.word	0x2001462e
 800f0d8:	0800ed91 	.word	0x0800ed91
 800f0dc:	006ddd00 	.word	0x006ddd00

0800f0e0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f0ea:	2040      	movs	r0, #64	@ 0x40
 800f0ec:	f7ff ff74 	bl	800efd8 <tcp_alloc>
 800f0f0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3710      	adds	r7, #16
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d002      	beq.n	800f112 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	683a      	ldr	r2, [r7, #0]
 800f110:	611a      	str	r2, [r3, #16]
  }
}
 800f112:	bf00      	nop
 800f114:	370c      	adds	r7, #12
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr
	...

0800f120 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00e      	beq.n	800f14e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	7d1b      	ldrb	r3, [r3, #20]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d106      	bne.n	800f146 <tcp_recv+0x26>
 800f138:	4b07      	ldr	r3, [pc, #28]	@ (800f158 <tcp_recv+0x38>)
 800f13a:	f240 72df 	movw	r2, #2015	@ 0x7df
 800f13e:	4907      	ldr	r1, [pc, #28]	@ (800f15c <tcp_recv+0x3c>)
 800f140:	4807      	ldr	r0, [pc, #28]	@ (800f160 <tcp_recv+0x40>)
 800f142:	f008 fc2f 	bl	80179a4 <iprintf>
    pcb->recv = recv;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800f14e:	bf00      	nop
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	0801afe8 	.word	0x0801afe8
 800f15c:	0801b584 	.word	0x0801b584
 800f160:	0801b02c 	.word	0x0801b02c

0800f164 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d00e      	beq.n	800f192 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	7d1b      	ldrb	r3, [r3, #20]
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d106      	bne.n	800f18a <tcp_sent+0x26>
 800f17c:	4b07      	ldr	r3, [pc, #28]	@ (800f19c <tcp_sent+0x38>)
 800f17e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800f182:	4907      	ldr	r1, [pc, #28]	@ (800f1a0 <tcp_sent+0x3c>)
 800f184:	4807      	ldr	r0, [pc, #28]	@ (800f1a4 <tcp_sent+0x40>)
 800f186:	f008 fc0d 	bl	80179a4 <iprintf>
    pcb->sent = sent;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	683a      	ldr	r2, [r7, #0]
 800f18e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800f192:	bf00      	nop
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	0801afe8 	.word	0x0801afe8
 800f1a0:	0801b5ac 	.word	0x0801b5ac
 800f1a4:	0801b02c 	.word	0x0801b02c

0800f1a8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d00e      	beq.n	800f1d6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	7d1b      	ldrb	r3, [r3, #20]
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d106      	bne.n	800f1ce <tcp_err+0x26>
 800f1c0:	4b07      	ldr	r3, [pc, #28]	@ (800f1e0 <tcp_err+0x38>)
 800f1c2:	f640 020d 	movw	r2, #2061	@ 0x80d
 800f1c6:	4907      	ldr	r1, [pc, #28]	@ (800f1e4 <tcp_err+0x3c>)
 800f1c8:	4807      	ldr	r0, [pc, #28]	@ (800f1e8 <tcp_err+0x40>)
 800f1ca:	f008 fbeb 	bl	80179a4 <iprintf>
    pcb->errf = err;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800f1d6:	bf00      	nop
 800f1d8:	3708      	adds	r7, #8
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	0801afe8 	.word	0x0801afe8
 800f1e4:	0801b5d4 	.word	0x0801b5d4
 800f1e8:	0801b02c 	.word	0x0801b02c

0800f1ec <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b085      	sub	sp, #20
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d008      	beq.n	800f20e <tcp_accept+0x22>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	7d1b      	ldrb	r3, [r3, #20]
 800f200:	2b01      	cmp	r3, #1
 800f202:	d104      	bne.n	800f20e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	683a      	ldr	r2, [r7, #0]
 800f20c:	619a      	str	r2, [r3, #24]
  }
}
 800f20e:	bf00      	nop
 800f210:	3714      	adds	r7, #20
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr
	...

0800f21c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	4613      	mov	r3, r2
 800f228:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d107      	bne.n	800f240 <tcp_poll+0x24>
 800f230:	4b0e      	ldr	r3, [pc, #56]	@ (800f26c <tcp_poll+0x50>)
 800f232:	f640 023d 	movw	r2, #2109	@ 0x83d
 800f236:	490e      	ldr	r1, [pc, #56]	@ (800f270 <tcp_poll+0x54>)
 800f238:	480e      	ldr	r0, [pc, #56]	@ (800f274 <tcp_poll+0x58>)
 800f23a:	f008 fbb3 	bl	80179a4 <iprintf>
 800f23e:	e011      	b.n	800f264 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	7d1b      	ldrb	r3, [r3, #20]
 800f244:	2b01      	cmp	r3, #1
 800f246:	d106      	bne.n	800f256 <tcp_poll+0x3a>
 800f248:	4b08      	ldr	r3, [pc, #32]	@ (800f26c <tcp_poll+0x50>)
 800f24a:	f640 023e 	movw	r2, #2110	@ 0x83e
 800f24e:	490a      	ldr	r1, [pc, #40]	@ (800f278 <tcp_poll+0x5c>)
 800f250:	4808      	ldr	r0, [pc, #32]	@ (800f274 <tcp_poll+0x58>)
 800f252:	f008 fba7 	bl	80179a4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	68ba      	ldr	r2, [r7, #8]
 800f25a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	79fa      	ldrb	r2, [r7, #7]
 800f262:	775a      	strb	r2, [r3, #29]
}
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	0801afe8 	.word	0x0801afe8
 800f270:	0801b5fc 	.word	0x0801b5fc
 800f274:	0801b02c 	.word	0x0801b02c
 800f278:	0801b614 	.word	0x0801b614

0800f27c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d107      	bne.n	800f29a <tcp_pcb_purge+0x1e>
 800f28a:	4b21      	ldr	r3, [pc, #132]	@ (800f310 <tcp_pcb_purge+0x94>)
 800f28c:	f640 0251 	movw	r2, #2129	@ 0x851
 800f290:	4920      	ldr	r1, [pc, #128]	@ (800f314 <tcp_pcb_purge+0x98>)
 800f292:	4821      	ldr	r0, [pc, #132]	@ (800f318 <tcp_pcb_purge+0x9c>)
 800f294:	f008 fb86 	bl	80179a4 <iprintf>
 800f298:	e037      	b.n	800f30a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	7d1b      	ldrb	r3, [r3, #20]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d033      	beq.n	800f30a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f2a6:	2b0a      	cmp	r3, #10
 800f2a8:	d02f      	beq.n	800f30a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d02b      	beq.n	800f30a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d007      	beq.n	800f2ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7fe f832 	bl	800d328 <pbuf_free>
      pcb->refused_data = NULL;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d002      	beq.n	800f2d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f986 	bl	800f5e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2de:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff fcdb 	bl	800eca0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7ff fcd6 	bl	800eca0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f30a:	3708      	adds	r7, #8
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	0801afe8 	.word	0x0801afe8
 800f314:	0801b634 	.word	0x0801b634
 800f318:	0801b02c 	.word	0x0801b02c

0800f31c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d106      	bne.n	800f33a <tcp_pcb_remove+0x1e>
 800f32c:	4b3e      	ldr	r3, [pc, #248]	@ (800f428 <tcp_pcb_remove+0x10c>)
 800f32e:	f640 0283 	movw	r2, #2179	@ 0x883
 800f332:	493e      	ldr	r1, [pc, #248]	@ (800f42c <tcp_pcb_remove+0x110>)
 800f334:	483e      	ldr	r0, [pc, #248]	@ (800f430 <tcp_pcb_remove+0x114>)
 800f336:	f008 fb35 	bl	80179a4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d106      	bne.n	800f34e <tcp_pcb_remove+0x32>
 800f340:	4b39      	ldr	r3, [pc, #228]	@ (800f428 <tcp_pcb_remove+0x10c>)
 800f342:	f640 0284 	movw	r2, #2180	@ 0x884
 800f346:	493b      	ldr	r1, [pc, #236]	@ (800f434 <tcp_pcb_remove+0x118>)
 800f348:	4839      	ldr	r0, [pc, #228]	@ (800f430 <tcp_pcb_remove+0x114>)
 800f34a:	f008 fb2b 	bl	80179a4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	683a      	ldr	r2, [r7, #0]
 800f354:	429a      	cmp	r2, r3
 800f356:	d105      	bne.n	800f364 <tcp_pcb_remove+0x48>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	68da      	ldr	r2, [r3, #12]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	601a      	str	r2, [r3, #0]
 800f362:	e013      	b.n	800f38c <tcp_pcb_remove+0x70>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	60fb      	str	r3, [r7, #12]
 800f36a:	e00c      	b.n	800f386 <tcp_pcb_remove+0x6a>
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	683a      	ldr	r2, [r7, #0]
 800f372:	429a      	cmp	r2, r3
 800f374:	d104      	bne.n	800f380 <tcp_pcb_remove+0x64>
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	68da      	ldr	r2, [r3, #12]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	60da      	str	r2, [r3, #12]
 800f37e:	e005      	b.n	800f38c <tcp_pcb_remove+0x70>
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	60fb      	str	r3, [r7, #12]
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d1ef      	bne.n	800f36c <tcp_pcb_remove+0x50>
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	2200      	movs	r2, #0
 800f390:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f392:	6838      	ldr	r0, [r7, #0]
 800f394:	f7ff ff72 	bl	800f27c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	7d1b      	ldrb	r3, [r3, #20]
 800f39c:	2b0a      	cmp	r3, #10
 800f39e:	d013      	beq.n	800f3c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d00f      	beq.n	800f3c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	8b5b      	ldrh	r3, [r3, #26]
 800f3ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d009      	beq.n	800f3c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	8b5b      	ldrh	r3, [r3, #26]
 800f3b8:	f043 0302 	orr.w	r3, r3, #2
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f3c2:	6838      	ldr	r0, [r7, #0]
 800f3c4:	f003 fbc0 	bl	8012b48 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	7d1b      	ldrb	r3, [r3, #20]
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d020      	beq.n	800f412 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d006      	beq.n	800f3e6 <tcp_pcb_remove+0xca>
 800f3d8:	4b13      	ldr	r3, [pc, #76]	@ (800f428 <tcp_pcb_remove+0x10c>)
 800f3da:	f640 0293 	movw	r2, #2195	@ 0x893
 800f3de:	4916      	ldr	r1, [pc, #88]	@ (800f438 <tcp_pcb_remove+0x11c>)
 800f3e0:	4813      	ldr	r0, [pc, #76]	@ (800f430 <tcp_pcb_remove+0x114>)
 800f3e2:	f008 fadf 	bl	80179a4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d006      	beq.n	800f3fc <tcp_pcb_remove+0xe0>
 800f3ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f428 <tcp_pcb_remove+0x10c>)
 800f3f0:	f640 0294 	movw	r2, #2196	@ 0x894
 800f3f4:	4911      	ldr	r1, [pc, #68]	@ (800f43c <tcp_pcb_remove+0x120>)
 800f3f6:	480e      	ldr	r0, [pc, #56]	@ (800f430 <tcp_pcb_remove+0x114>)
 800f3f8:	f008 fad4 	bl	80179a4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f400:	2b00      	cmp	r3, #0
 800f402:	d006      	beq.n	800f412 <tcp_pcb_remove+0xf6>
 800f404:	4b08      	ldr	r3, [pc, #32]	@ (800f428 <tcp_pcb_remove+0x10c>)
 800f406:	f640 0296 	movw	r2, #2198	@ 0x896
 800f40a:	490d      	ldr	r1, [pc, #52]	@ (800f440 <tcp_pcb_remove+0x124>)
 800f40c:	4808      	ldr	r0, [pc, #32]	@ (800f430 <tcp_pcb_remove+0x114>)
 800f40e:	f008 fac9 	bl	80179a4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	2200      	movs	r2, #0
 800f416:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	2200      	movs	r2, #0
 800f41c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f41e:	bf00      	nop
 800f420:	3710      	adds	r7, #16
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	0801afe8 	.word	0x0801afe8
 800f42c:	0801b650 	.word	0x0801b650
 800f430:	0801b02c 	.word	0x0801b02c
 800f434:	0801b66c 	.word	0x0801b66c
 800f438:	0801b68c 	.word	0x0801b68c
 800f43c:	0801b6a4 	.word	0x0801b6a4
 800f440:	0801b6c0 	.word	0x0801b6c0

0800f444 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d106      	bne.n	800f460 <tcp_next_iss+0x1c>
 800f452:	4b0a      	ldr	r3, [pc, #40]	@ (800f47c <tcp_next_iss+0x38>)
 800f454:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f458:	4909      	ldr	r1, [pc, #36]	@ (800f480 <tcp_next_iss+0x3c>)
 800f45a:	480a      	ldr	r0, [pc, #40]	@ (800f484 <tcp_next_iss+0x40>)
 800f45c:	f008 faa2 	bl	80179a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f460:	4b09      	ldr	r3, [pc, #36]	@ (800f488 <tcp_next_iss+0x44>)
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	4b09      	ldr	r3, [pc, #36]	@ (800f48c <tcp_next_iss+0x48>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4413      	add	r3, r2
 800f46a:	4a07      	ldr	r2, [pc, #28]	@ (800f488 <tcp_next_iss+0x44>)
 800f46c:	6013      	str	r3, [r2, #0]
  return iss;
 800f46e:	4b06      	ldr	r3, [pc, #24]	@ (800f488 <tcp_next_iss+0x44>)
 800f470:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f472:	4618      	mov	r0, r3
 800f474:	3708      	adds	r7, #8
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	0801afe8 	.word	0x0801afe8
 800f480:	0801b6d8 	.word	0x0801b6d8
 800f484:	0801b02c 	.word	0x0801b02c
 800f488:	20009678 	.word	0x20009678
 800f48c:	20014618 	.word	0x20014618

0800f490 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b086      	sub	sp, #24
 800f494:	af00      	add	r7, sp, #0
 800f496:	4603      	mov	r3, r0
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
 800f49c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d106      	bne.n	800f4b2 <tcp_eff_send_mss_netif+0x22>
 800f4a4:	4b14      	ldr	r3, [pc, #80]	@ (800f4f8 <tcp_eff_send_mss_netif+0x68>)
 800f4a6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f4aa:	4914      	ldr	r1, [pc, #80]	@ (800f4fc <tcp_eff_send_mss_netif+0x6c>)
 800f4ac:	4814      	ldr	r0, [pc, #80]	@ (800f500 <tcp_eff_send_mss_netif+0x70>)
 800f4ae:	f008 fa79 	bl	80179a4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d101      	bne.n	800f4bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f4b8:	89fb      	ldrh	r3, [r7, #14]
 800f4ba:	e019      	b.n	800f4f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f4c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f4c2:	8afb      	ldrh	r3, [r7, #22]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d012      	beq.n	800f4ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f4c8:	2328      	movs	r3, #40	@ 0x28
 800f4ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f4cc:	8afa      	ldrh	r2, [r7, #22]
 800f4ce:	8abb      	ldrh	r3, [r7, #20]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d904      	bls.n	800f4de <tcp_eff_send_mss_netif+0x4e>
 800f4d4:	8afa      	ldrh	r2, [r7, #22]
 800f4d6:	8abb      	ldrh	r3, [r7, #20]
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	e000      	b.n	800f4e0 <tcp_eff_send_mss_netif+0x50>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f4e2:	8a7a      	ldrh	r2, [r7, #18]
 800f4e4:	89fb      	ldrh	r3, [r7, #14]
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	bf28      	it	cs
 800f4ea:	4613      	movcs	r3, r2
 800f4ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f4ee:	89fb      	ldrh	r3, [r7, #14]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	0801afe8 	.word	0x0801afe8
 800f4fc:	0801b6f4 	.word	0x0801b6f4
 800f500:	0801b02c 	.word	0x0801b02c

0800f504 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d119      	bne.n	800f54c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f518:	4b10      	ldr	r3, [pc, #64]	@ (800f55c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f51a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f51e:	4910      	ldr	r1, [pc, #64]	@ (800f560 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f520:	4810      	ldr	r0, [pc, #64]	@ (800f564 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f522:	f008 fa3f 	bl	80179a4 <iprintf>

  while (pcb != NULL) {
 800f526:	e011      	b.n	800f54c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	429a      	cmp	r2, r3
 800f532:	d108      	bne.n	800f546 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f53a:	68f8      	ldr	r0, [r7, #12]
 800f53c:	f7fe fd1e 	bl	800df7c <tcp_abort>
      pcb = next;
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	60fb      	str	r3, [r7, #12]
 800f544:	e002      	b.n	800f54c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1ea      	bne.n	800f528 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f552:	bf00      	nop
 800f554:	bf00      	nop
 800f556:	3710      	adds	r7, #16
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	0801afe8 	.word	0x0801afe8
 800f560:	0801b71c 	.word	0x0801b71c
 800f564:	0801b02c 	.word	0x0801b02c

0800f568 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d02a      	beq.n	800f5ce <tcp_netif_ip_addr_changed+0x66>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d026      	beq.n	800f5ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f580:	4b15      	ldr	r3, [pc, #84]	@ (800f5d8 <tcp_netif_ip_addr_changed+0x70>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4619      	mov	r1, r3
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7ff ffbc 	bl	800f504 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f58c:	4b13      	ldr	r3, [pc, #76]	@ (800f5dc <tcp_netif_ip_addr_changed+0x74>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4619      	mov	r1, r3
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f7ff ffb6 	bl	800f504 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d017      	beq.n	800f5ce <tcp_netif_ip_addr_changed+0x66>
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d013      	beq.n	800f5ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f5a6:	4b0e      	ldr	r3, [pc, #56]	@ (800f5e0 <tcp_netif_ip_addr_changed+0x78>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	60fb      	str	r3, [r7, #12]
 800f5ac:	e00c      	b.n	800f5c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d103      	bne.n	800f5c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	60fb      	str	r3, [r7, #12]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d1ef      	bne.n	800f5ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f5ce:	bf00      	nop
 800f5d0:	3710      	adds	r7, #16
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	20014624 	.word	0x20014624
 800f5dc:	2001461c 	.word	0x2001461c
 800f5e0:	20014620 	.word	0x20014620

0800f5e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d007      	beq.n	800f604 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7ff fb51 	bl	800eca0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f604:	bf00      	nop
 800f606:	3708      	adds	r7, #8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f60c:	b590      	push	{r4, r7, lr}
 800f60e:	b08d      	sub	sp, #52	@ 0x34
 800f610:	af04      	add	r7, sp, #16
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d105      	bne.n	800f628 <tcp_input+0x1c>
 800f61c:	4b9b      	ldr	r3, [pc, #620]	@ (800f88c <tcp_input+0x280>)
 800f61e:	2283      	movs	r2, #131	@ 0x83
 800f620:	499b      	ldr	r1, [pc, #620]	@ (800f890 <tcp_input+0x284>)
 800f622:	489c      	ldr	r0, [pc, #624]	@ (800f894 <tcp_input+0x288>)
 800f624:	f008 f9be 	bl	80179a4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	4a9a      	ldr	r2, [pc, #616]	@ (800f898 <tcp_input+0x28c>)
 800f62e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	895b      	ldrh	r3, [r3, #10]
 800f634:	2b13      	cmp	r3, #19
 800f636:	f240 83d1 	bls.w	800fddc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f63a:	4b98      	ldr	r3, [pc, #608]	@ (800f89c <tcp_input+0x290>)
 800f63c:	695b      	ldr	r3, [r3, #20]
 800f63e:	4a97      	ldr	r2, [pc, #604]	@ (800f89c <tcp_input+0x290>)
 800f640:	6812      	ldr	r2, [r2, #0]
 800f642:	4611      	mov	r1, r2
 800f644:	4618      	mov	r0, r3
 800f646:	f006 fbb9 	bl	8015dbc <ip4_addr_isbroadcast_u32>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f040 83c7 	bne.w	800fde0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f652:	4b92      	ldr	r3, [pc, #584]	@ (800f89c <tcp_input+0x290>)
 800f654:	695b      	ldr	r3, [r3, #20]
 800f656:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f65a:	2be0      	cmp	r3, #224	@ 0xe0
 800f65c:	f000 83c0 	beq.w	800fde0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f660:	4b8d      	ldr	r3, [pc, #564]	@ (800f898 <tcp_input+0x28c>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	899b      	ldrh	r3, [r3, #12]
 800f666:	b29b      	uxth	r3, r3
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fc fa7b 	bl	800bb64 <lwip_htons>
 800f66e:	4603      	mov	r3, r0
 800f670:	0b1b      	lsrs	r3, r3, #12
 800f672:	b29b      	uxth	r3, r3
 800f674:	b2db      	uxtb	r3, r3
 800f676:	009b      	lsls	r3, r3, #2
 800f678:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f67a:	7cbb      	ldrb	r3, [r7, #18]
 800f67c:	2b13      	cmp	r3, #19
 800f67e:	f240 83b1 	bls.w	800fde4 <tcp_input+0x7d8>
 800f682:	7cbb      	ldrb	r3, [r7, #18]
 800f684:	b29a      	uxth	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	891b      	ldrh	r3, [r3, #8]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	f200 83aa 	bhi.w	800fde4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f690:	7cbb      	ldrb	r3, [r7, #18]
 800f692:	b29b      	uxth	r3, r3
 800f694:	3b14      	subs	r3, #20
 800f696:	b29a      	uxth	r2, r3
 800f698:	4b81      	ldr	r3, [pc, #516]	@ (800f8a0 <tcp_input+0x294>)
 800f69a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f69c:	4b81      	ldr	r3, [pc, #516]	@ (800f8a4 <tcp_input+0x298>)
 800f69e:	2200      	movs	r2, #0
 800f6a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	895a      	ldrh	r2, [r3, #10]
 800f6a6:	7cbb      	ldrb	r3, [r7, #18]
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d309      	bcc.n	800f6c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f6ae:	4b7c      	ldr	r3, [pc, #496]	@ (800f8a0 <tcp_input+0x294>)
 800f6b0:	881a      	ldrh	r2, [r3, #0]
 800f6b2:	4b7d      	ldr	r3, [pc, #500]	@ (800f8a8 <tcp_input+0x29c>)
 800f6b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f6b6:	7cbb      	ldrb	r3, [r7, #18]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f7fd fdae 	bl	800d21c <pbuf_remove_header>
 800f6c0:	e04e      	b.n	800f760 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d105      	bne.n	800f6d6 <tcp_input+0xca>
 800f6ca:	4b70      	ldr	r3, [pc, #448]	@ (800f88c <tcp_input+0x280>)
 800f6cc:	22c2      	movs	r2, #194	@ 0xc2
 800f6ce:	4977      	ldr	r1, [pc, #476]	@ (800f8ac <tcp_input+0x2a0>)
 800f6d0:	4870      	ldr	r0, [pc, #448]	@ (800f894 <tcp_input+0x288>)
 800f6d2:	f008 f967 	bl	80179a4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f6d6:	2114      	movs	r1, #20
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7fd fd9f 	bl	800d21c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	895a      	ldrh	r2, [r3, #10]
 800f6e2:	4b71      	ldr	r3, [pc, #452]	@ (800f8a8 <tcp_input+0x29c>)
 800f6e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f6e6:	4b6e      	ldr	r3, [pc, #440]	@ (800f8a0 <tcp_input+0x294>)
 800f6e8:	881a      	ldrh	r2, [r3, #0]
 800f6ea:	4b6f      	ldr	r3, [pc, #444]	@ (800f8a8 <tcp_input+0x29c>)
 800f6ec:	881b      	ldrh	r3, [r3, #0]
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f6f2:	4b6d      	ldr	r3, [pc, #436]	@ (800f8a8 <tcp_input+0x29c>)
 800f6f4:	881b      	ldrh	r3, [r3, #0]
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f7fd fd8f 	bl	800d21c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	895b      	ldrh	r3, [r3, #10]
 800f704:	8a3a      	ldrh	r2, [r7, #16]
 800f706:	429a      	cmp	r2, r3
 800f708:	f200 836e 	bhi.w	800fde8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	4a64      	ldr	r2, [pc, #400]	@ (800f8a4 <tcp_input+0x298>)
 800f714:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	8a3a      	ldrh	r2, [r7, #16]
 800f71c:	4611      	mov	r1, r2
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fd fd7c 	bl	800d21c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	891a      	ldrh	r2, [r3, #8]
 800f728:	8a3b      	ldrh	r3, [r7, #16]
 800f72a:	1ad3      	subs	r3, r2, r3
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	895b      	ldrh	r3, [r3, #10]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d005      	beq.n	800f746 <tcp_input+0x13a>
 800f73a:	4b54      	ldr	r3, [pc, #336]	@ (800f88c <tcp_input+0x280>)
 800f73c:	22df      	movs	r2, #223	@ 0xdf
 800f73e:	495c      	ldr	r1, [pc, #368]	@ (800f8b0 <tcp_input+0x2a4>)
 800f740:	4854      	ldr	r0, [pc, #336]	@ (800f894 <tcp_input+0x288>)
 800f742:	f008 f92f 	bl	80179a4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	891a      	ldrh	r2, [r3, #8]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	891b      	ldrh	r3, [r3, #8]
 800f750:	429a      	cmp	r2, r3
 800f752:	d005      	beq.n	800f760 <tcp_input+0x154>
 800f754:	4b4d      	ldr	r3, [pc, #308]	@ (800f88c <tcp_input+0x280>)
 800f756:	22e0      	movs	r2, #224	@ 0xe0
 800f758:	4956      	ldr	r1, [pc, #344]	@ (800f8b4 <tcp_input+0x2a8>)
 800f75a:	484e      	ldr	r0, [pc, #312]	@ (800f894 <tcp_input+0x288>)
 800f75c:	f008 f922 	bl	80179a4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f760:	4b4d      	ldr	r3, [pc, #308]	@ (800f898 <tcp_input+0x28c>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	881b      	ldrh	r3, [r3, #0]
 800f766:	b29b      	uxth	r3, r3
 800f768:	4a4b      	ldr	r2, [pc, #300]	@ (800f898 <tcp_input+0x28c>)
 800f76a:	6814      	ldr	r4, [r2, #0]
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fc f9f9 	bl	800bb64 <lwip_htons>
 800f772:	4603      	mov	r3, r0
 800f774:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f776:	4b48      	ldr	r3, [pc, #288]	@ (800f898 <tcp_input+0x28c>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	885b      	ldrh	r3, [r3, #2]
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	4a46      	ldr	r2, [pc, #280]	@ (800f898 <tcp_input+0x28c>)
 800f780:	6814      	ldr	r4, [r2, #0]
 800f782:	4618      	mov	r0, r3
 800f784:	f7fc f9ee 	bl	800bb64 <lwip_htons>
 800f788:	4603      	mov	r3, r0
 800f78a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f78c:	4b42      	ldr	r3, [pc, #264]	@ (800f898 <tcp_input+0x28c>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	4a41      	ldr	r2, [pc, #260]	@ (800f898 <tcp_input+0x28c>)
 800f794:	6814      	ldr	r4, [r2, #0]
 800f796:	4618      	mov	r0, r3
 800f798:	f7fc f9f9 	bl	800bb8e <lwip_htonl>
 800f79c:	4603      	mov	r3, r0
 800f79e:	6063      	str	r3, [r4, #4]
 800f7a0:	6863      	ldr	r3, [r4, #4]
 800f7a2:	4a45      	ldr	r2, [pc, #276]	@ (800f8b8 <tcp_input+0x2ac>)
 800f7a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f7a6:	4b3c      	ldr	r3, [pc, #240]	@ (800f898 <tcp_input+0x28c>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	4a3a      	ldr	r2, [pc, #232]	@ (800f898 <tcp_input+0x28c>)
 800f7ae:	6814      	ldr	r4, [r2, #0]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7fc f9ec 	bl	800bb8e <lwip_htonl>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	60a3      	str	r3, [r4, #8]
 800f7ba:	68a3      	ldr	r3, [r4, #8]
 800f7bc:	4a3f      	ldr	r2, [pc, #252]	@ (800f8bc <tcp_input+0x2b0>)
 800f7be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f7c0:	4b35      	ldr	r3, [pc, #212]	@ (800f898 <tcp_input+0x28c>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	89db      	ldrh	r3, [r3, #14]
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	4a33      	ldr	r2, [pc, #204]	@ (800f898 <tcp_input+0x28c>)
 800f7ca:	6814      	ldr	r4, [r2, #0]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fc f9c9 	bl	800bb64 <lwip_htons>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f7d6:	4b30      	ldr	r3, [pc, #192]	@ (800f898 <tcp_input+0x28c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	899b      	ldrh	r3, [r3, #12]
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fc f9c0 	bl	800bb64 <lwip_htons>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f7ec:	b2da      	uxtb	r2, r3
 800f7ee:	4b34      	ldr	r3, [pc, #208]	@ (800f8c0 <tcp_input+0x2b4>)
 800f7f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	891a      	ldrh	r2, [r3, #8]
 800f7f6:	4b33      	ldr	r3, [pc, #204]	@ (800f8c4 <tcp_input+0x2b8>)
 800f7f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f7fa:	4b31      	ldr	r3, [pc, #196]	@ (800f8c0 <tcp_input+0x2b4>)
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	f003 0303 	and.w	r3, r3, #3
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00c      	beq.n	800f820 <tcp_input+0x214>
    tcplen++;
 800f806:	4b2f      	ldr	r3, [pc, #188]	@ (800f8c4 <tcp_input+0x2b8>)
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	3301      	adds	r3, #1
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	4b2d      	ldr	r3, [pc, #180]	@ (800f8c4 <tcp_input+0x2b8>)
 800f810:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	891a      	ldrh	r2, [r3, #8]
 800f816:	4b2b      	ldr	r3, [pc, #172]	@ (800f8c4 <tcp_input+0x2b8>)
 800f818:	881b      	ldrh	r3, [r3, #0]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	f200 82e6 	bhi.w	800fdec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f820:	2300      	movs	r3, #0
 800f822:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f824:	4b28      	ldr	r3, [pc, #160]	@ (800f8c8 <tcp_input+0x2bc>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	61fb      	str	r3, [r7, #28]
 800f82a:	e09d      	b.n	800f968 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	7d1b      	ldrb	r3, [r3, #20]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d105      	bne.n	800f840 <tcp_input+0x234>
 800f834:	4b15      	ldr	r3, [pc, #84]	@ (800f88c <tcp_input+0x280>)
 800f836:	22fb      	movs	r2, #251	@ 0xfb
 800f838:	4924      	ldr	r1, [pc, #144]	@ (800f8cc <tcp_input+0x2c0>)
 800f83a:	4816      	ldr	r0, [pc, #88]	@ (800f894 <tcp_input+0x288>)
 800f83c:	f008 f8b2 	bl	80179a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	7d1b      	ldrb	r3, [r3, #20]
 800f844:	2b0a      	cmp	r3, #10
 800f846:	d105      	bne.n	800f854 <tcp_input+0x248>
 800f848:	4b10      	ldr	r3, [pc, #64]	@ (800f88c <tcp_input+0x280>)
 800f84a:	22fc      	movs	r2, #252	@ 0xfc
 800f84c:	4920      	ldr	r1, [pc, #128]	@ (800f8d0 <tcp_input+0x2c4>)
 800f84e:	4811      	ldr	r0, [pc, #68]	@ (800f894 <tcp_input+0x288>)
 800f850:	f008 f8a8 	bl	80179a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	7d1b      	ldrb	r3, [r3, #20]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d105      	bne.n	800f868 <tcp_input+0x25c>
 800f85c:	4b0b      	ldr	r3, [pc, #44]	@ (800f88c <tcp_input+0x280>)
 800f85e:	22fd      	movs	r2, #253	@ 0xfd
 800f860:	491c      	ldr	r1, [pc, #112]	@ (800f8d4 <tcp_input+0x2c8>)
 800f862:	480c      	ldr	r0, [pc, #48]	@ (800f894 <tcp_input+0x288>)
 800f864:	f008 f89e 	bl	80179a4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	7a1b      	ldrb	r3, [r3, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d033      	beq.n	800f8d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	7a1a      	ldrb	r2, [r3, #8]
 800f874:	4b09      	ldr	r3, [pc, #36]	@ (800f89c <tcp_input+0x290>)
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f87c:	3301      	adds	r3, #1
 800f87e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f880:	429a      	cmp	r2, r3
 800f882:	d029      	beq.n	800f8d8 <tcp_input+0x2cc>
      prev = pcb;
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	61bb      	str	r3, [r7, #24]
      continue;
 800f888:	e06b      	b.n	800f962 <tcp_input+0x356>
 800f88a:	bf00      	nop
 800f88c:	0801b750 	.word	0x0801b750
 800f890:	0801b784 	.word	0x0801b784
 800f894:	0801b79c 	.word	0x0801b79c
 800f898:	20014640 	.word	0x20014640
 800f89c:	2000eee8 	.word	0x2000eee8
 800f8a0:	20014644 	.word	0x20014644
 800f8a4:	20014648 	.word	0x20014648
 800f8a8:	20014646 	.word	0x20014646
 800f8ac:	0801b7c4 	.word	0x0801b7c4
 800f8b0:	0801b7d4 	.word	0x0801b7d4
 800f8b4:	0801b7e0 	.word	0x0801b7e0
 800f8b8:	20014650 	.word	0x20014650
 800f8bc:	20014654 	.word	0x20014654
 800f8c0:	2001465c 	.word	0x2001465c
 800f8c4:	2001465a 	.word	0x2001465a
 800f8c8:	20014624 	.word	0x20014624
 800f8cc:	0801b800 	.word	0x0801b800
 800f8d0:	0801b828 	.word	0x0801b828
 800f8d4:	0801b854 	.word	0x0801b854
    }

    if (pcb->remote_port == tcphdr->src &&
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	8b1a      	ldrh	r2, [r3, #24]
 800f8dc:	4b72      	ldr	r3, [pc, #456]	@ (800faa8 <tcp_input+0x49c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	881b      	ldrh	r3, [r3, #0]
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d13a      	bne.n	800f95e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	8ada      	ldrh	r2, [r3, #22]
 800f8ec:	4b6e      	ldr	r3, [pc, #440]	@ (800faa8 <tcp_input+0x49c>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	885b      	ldrh	r3, [r3, #2]
 800f8f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d132      	bne.n	800f95e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	4b6b      	ldr	r3, [pc, #428]	@ (800faac <tcp_input+0x4a0>)
 800f8fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f900:	429a      	cmp	r2, r3
 800f902:	d12c      	bne.n	800f95e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	4b68      	ldr	r3, [pc, #416]	@ (800faac <tcp_input+0x4a0>)
 800f90a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d126      	bne.n	800f95e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	69fa      	ldr	r2, [r7, #28]
 800f916:	429a      	cmp	r2, r3
 800f918:	d106      	bne.n	800f928 <tcp_input+0x31c>
 800f91a:	4b65      	ldr	r3, [pc, #404]	@ (800fab0 <tcp_input+0x4a4>)
 800f91c:	f240 120d 	movw	r2, #269	@ 0x10d
 800f920:	4964      	ldr	r1, [pc, #400]	@ (800fab4 <tcp_input+0x4a8>)
 800f922:	4865      	ldr	r0, [pc, #404]	@ (800fab8 <tcp_input+0x4ac>)
 800f924:	f008 f83e 	bl	80179a4 <iprintf>
      if (prev != NULL) {
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00a      	beq.n	800f944 <tcp_input+0x338>
        prev->next = pcb->next;
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	68da      	ldr	r2, [r3, #12]
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f936:	4b61      	ldr	r3, [pc, #388]	@ (800fabc <tcp_input+0x4b0>)
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f93e:	4a5f      	ldr	r2, [pc, #380]	@ (800fabc <tcp_input+0x4b0>)
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	69fa      	ldr	r2, [r7, #28]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d111      	bne.n	800f972 <tcp_input+0x366>
 800f94e:	4b58      	ldr	r3, [pc, #352]	@ (800fab0 <tcp_input+0x4a4>)
 800f950:	f240 1215 	movw	r2, #277	@ 0x115
 800f954:	495a      	ldr	r1, [pc, #360]	@ (800fac0 <tcp_input+0x4b4>)
 800f956:	4858      	ldr	r0, [pc, #352]	@ (800fab8 <tcp_input+0x4ac>)
 800f958:	f008 f824 	bl	80179a4 <iprintf>
      break;
 800f95c:	e009      	b.n	800f972 <tcp_input+0x366>
    }
    prev = pcb;
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	61fb      	str	r3, [r7, #28]
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f47f af5e 	bne.w	800f82c <tcp_input+0x220>
 800f970:	e000      	b.n	800f974 <tcp_input+0x368>
      break;
 800f972:	bf00      	nop
  }

  if (pcb == NULL) {
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	2b00      	cmp	r3, #0
 800f978:	f040 80aa 	bne.w	800fad0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f97c:	4b51      	ldr	r3, [pc, #324]	@ (800fac4 <tcp_input+0x4b8>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	61fb      	str	r3, [r7, #28]
 800f982:	e03f      	b.n	800fa04 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	7d1b      	ldrb	r3, [r3, #20]
 800f988:	2b0a      	cmp	r3, #10
 800f98a:	d006      	beq.n	800f99a <tcp_input+0x38e>
 800f98c:	4b48      	ldr	r3, [pc, #288]	@ (800fab0 <tcp_input+0x4a4>)
 800f98e:	f240 121f 	movw	r2, #287	@ 0x11f
 800f992:	494d      	ldr	r1, [pc, #308]	@ (800fac8 <tcp_input+0x4bc>)
 800f994:	4848      	ldr	r0, [pc, #288]	@ (800fab8 <tcp_input+0x4ac>)
 800f996:	f008 f805 	bl	80179a4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	7a1b      	ldrb	r3, [r3, #8]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d009      	beq.n	800f9b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	7a1a      	ldrb	r2, [r3, #8]
 800f9a6:	4b41      	ldr	r3, [pc, #260]	@ (800faac <tcp_input+0x4a0>)
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d122      	bne.n	800f9fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	8b1a      	ldrh	r2, [r3, #24]
 800f9ba:	4b3b      	ldr	r3, [pc, #236]	@ (800faa8 <tcp_input+0x49c>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	881b      	ldrh	r3, [r3, #0]
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d11b      	bne.n	800f9fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	8ada      	ldrh	r2, [r3, #22]
 800f9ca:	4b37      	ldr	r3, [pc, #220]	@ (800faa8 <tcp_input+0x49c>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	885b      	ldrh	r3, [r3, #2]
 800f9d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d113      	bne.n	800f9fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	685a      	ldr	r2, [r3, #4]
 800f9da:	4b34      	ldr	r3, [pc, #208]	@ (800faac <tcp_input+0x4a0>)
 800f9dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d10d      	bne.n	800f9fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	681a      	ldr	r2, [r3, #0]
 800f9e6:	4b31      	ldr	r3, [pc, #196]	@ (800faac <tcp_input+0x4a0>)
 800f9e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d107      	bne.n	800f9fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f9ee:	69f8      	ldr	r0, [r7, #28]
 800f9f0:	f000 fb56 	bl	80100a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f7fd fc97 	bl	800d328 <pbuf_free>
        return;
 800f9fa:	e1fd      	b.n	800fdf8 <tcp_input+0x7ec>
        continue;
 800f9fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	68db      	ldr	r3, [r3, #12]
 800fa02:	61fb      	str	r3, [r7, #28]
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1bc      	bne.n	800f984 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fa0e:	4b2f      	ldr	r3, [pc, #188]	@ (800facc <tcp_input+0x4c0>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	617b      	str	r3, [r7, #20]
 800fa14:	e02a      	b.n	800fa6c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	7a1b      	ldrb	r3, [r3, #8]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00c      	beq.n	800fa38 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	7a1a      	ldrb	r2, [r3, #8]
 800fa22:	4b22      	ldr	r3, [pc, #136]	@ (800faac <tcp_input+0x4a0>)
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d002      	beq.n	800fa38 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	61bb      	str	r3, [r7, #24]
        continue;
 800fa36:	e016      	b.n	800fa66 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	8ada      	ldrh	r2, [r3, #22]
 800fa3c:	4b1a      	ldr	r3, [pc, #104]	@ (800faa8 <tcp_input+0x49c>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	885b      	ldrh	r3, [r3, #2]
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d10c      	bne.n	800fa62 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	4b17      	ldr	r3, [pc, #92]	@ (800faac <tcp_input+0x4a0>)
 800fa4e:	695b      	ldr	r3, [r3, #20]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d00f      	beq.n	800fa74 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d00d      	beq.n	800fa76 <tcp_input+0x46a>
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d009      	beq.n	800fa76 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	617b      	str	r3, [r7, #20]
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d1d1      	bne.n	800fa16 <tcp_input+0x40a>
 800fa72:	e000      	b.n	800fa76 <tcp_input+0x46a>
            break;
 800fa74:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d029      	beq.n	800fad0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00a      	beq.n	800fa98 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	68da      	ldr	r2, [r3, #12]
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fa8a:	4b10      	ldr	r3, [pc, #64]	@ (800facc <tcp_input+0x4c0>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fa92:	4a0e      	ldr	r2, [pc, #56]	@ (800facc <tcp_input+0x4c0>)
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fa98:	6978      	ldr	r0, [r7, #20]
 800fa9a:	f000 fa03 	bl	800fea4 <tcp_listen_input>
      }
      pbuf_free(p);
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f7fd fc42 	bl	800d328 <pbuf_free>
      return;
 800faa4:	e1a8      	b.n	800fdf8 <tcp_input+0x7ec>
 800faa6:	bf00      	nop
 800faa8:	20014640 	.word	0x20014640
 800faac:	2000eee8 	.word	0x2000eee8
 800fab0:	0801b750 	.word	0x0801b750
 800fab4:	0801b87c 	.word	0x0801b87c
 800fab8:	0801b79c 	.word	0x0801b79c
 800fabc:	20014624 	.word	0x20014624
 800fac0:	0801b8a8 	.word	0x0801b8a8
 800fac4:	20014628 	.word	0x20014628
 800fac8:	0801b8d4 	.word	0x0801b8d4
 800facc:	20014620 	.word	0x20014620
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	f000 8158 	beq.w	800fd88 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fad8:	4b95      	ldr	r3, [pc, #596]	@ (800fd30 <tcp_input+0x724>)
 800fada:	2200      	movs	r2, #0
 800fadc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	891a      	ldrh	r2, [r3, #8]
 800fae2:	4b93      	ldr	r3, [pc, #588]	@ (800fd30 <tcp_input+0x724>)
 800fae4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fae6:	4a92      	ldr	r2, [pc, #584]	@ (800fd30 <tcp_input+0x724>)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800faec:	4b91      	ldr	r3, [pc, #580]	@ (800fd34 <tcp_input+0x728>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4a8f      	ldr	r2, [pc, #572]	@ (800fd30 <tcp_input+0x724>)
 800faf2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800faf4:	4b90      	ldr	r3, [pc, #576]	@ (800fd38 <tcp_input+0x72c>)
 800faf6:	2200      	movs	r2, #0
 800faf8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fafa:	4b90      	ldr	r3, [pc, #576]	@ (800fd3c <tcp_input+0x730>)
 800fafc:	2200      	movs	r2, #0
 800fafe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fb00:	4b8f      	ldr	r3, [pc, #572]	@ (800fd40 <tcp_input+0x734>)
 800fb02:	2200      	movs	r2, #0
 800fb04:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fb06:	4b8f      	ldr	r3, [pc, #572]	@ (800fd44 <tcp_input+0x738>)
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	f003 0308 	and.w	r3, r3, #8
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d006      	beq.n	800fb20 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	7b5b      	ldrb	r3, [r3, #13]
 800fb16:	f043 0301 	orr.w	r3, r3, #1
 800fb1a:	b2da      	uxtb	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d017      	beq.n	800fb58 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fb28:	69f8      	ldr	r0, [r7, #28]
 800fb2a:	f7ff f83d 	bl	800eba8 <tcp_process_refused_data>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	f113 0f0d 	cmn.w	r3, #13
 800fb34:	d007      	beq.n	800fb46 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fb36:	69fb      	ldr	r3, [r7, #28]
 800fb38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00c      	beq.n	800fb58 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fb3e:	4b82      	ldr	r3, [pc, #520]	@ (800fd48 <tcp_input+0x73c>)
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d008      	beq.n	800fb58 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f040 80e3 	bne.w	800fd16 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fb50:	69f8      	ldr	r0, [r7, #28]
 800fb52:	f003 fdff 	bl	8013754 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fb56:	e0de      	b.n	800fd16 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fb58:	4a7c      	ldr	r2, [pc, #496]	@ (800fd4c <tcp_input+0x740>)
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fb5e:	69f8      	ldr	r0, [r7, #28]
 800fb60:	f000 fb18 	bl	8010194 <tcp_process>
 800fb64:	4603      	mov	r3, r0
 800fb66:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fb68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb6c:	f113 0f0d 	cmn.w	r3, #13
 800fb70:	f000 80d3 	beq.w	800fd1a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fb74:	4b71      	ldr	r3, [pc, #452]	@ (800fd3c <tcp_input+0x730>)
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	f003 0308 	and.w	r3, r3, #8
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d015      	beq.n	800fbac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d008      	beq.n	800fb9c <tcp_input+0x590>
 800fb8a:	69fb      	ldr	r3, [r7, #28]
 800fb8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb90:	69fa      	ldr	r2, [r7, #28]
 800fb92:	6912      	ldr	r2, [r2, #16]
 800fb94:	f06f 010d 	mvn.w	r1, #13
 800fb98:	4610      	mov	r0, r2
 800fb9a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fb9c:	69f9      	ldr	r1, [r7, #28]
 800fb9e:	486c      	ldr	r0, [pc, #432]	@ (800fd50 <tcp_input+0x744>)
 800fba0:	f7ff fbbc 	bl	800f31c <tcp_pcb_remove>
        tcp_free(pcb);
 800fba4:	69f8      	ldr	r0, [r7, #28]
 800fba6:	f7fd ff01 	bl	800d9ac <tcp_free>
 800fbaa:	e0da      	b.n	800fd62 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fbac:	2300      	movs	r3, #0
 800fbae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fbb0:	4b63      	ldr	r3, [pc, #396]	@ (800fd40 <tcp_input+0x734>)
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d01d      	beq.n	800fbf4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fbb8:	4b61      	ldr	r3, [pc, #388]	@ (800fd40 <tcp_input+0x734>)
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d00a      	beq.n	800fbde <tcp_input+0x5d2>
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbce:	69fa      	ldr	r2, [r7, #28]
 800fbd0:	6910      	ldr	r0, [r2, #16]
 800fbd2:	89fa      	ldrh	r2, [r7, #14]
 800fbd4:	69f9      	ldr	r1, [r7, #28]
 800fbd6:	4798      	blx	r3
 800fbd8:	4603      	mov	r3, r0
 800fbda:	74fb      	strb	r3, [r7, #19]
 800fbdc:	e001      	b.n	800fbe2 <tcp_input+0x5d6>
 800fbde:	2300      	movs	r3, #0
 800fbe0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fbe2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbe6:	f113 0f0d 	cmn.w	r3, #13
 800fbea:	f000 8098 	beq.w	800fd1e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fbee:	4b54      	ldr	r3, [pc, #336]	@ (800fd40 <tcp_input+0x734>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fbf4:	69f8      	ldr	r0, [r7, #28]
 800fbf6:	f000 f915 	bl	800fe24 <tcp_input_delayed_close>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f040 8090 	bne.w	800fd22 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fc02:	4b4d      	ldr	r3, [pc, #308]	@ (800fd38 <tcp_input+0x72c>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d041      	beq.n	800fc8e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fc0a:	69fb      	ldr	r3, [r7, #28]
 800fc0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d006      	beq.n	800fc20 <tcp_input+0x614>
 800fc12:	4b50      	ldr	r3, [pc, #320]	@ (800fd54 <tcp_input+0x748>)
 800fc14:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800fc18:	494f      	ldr	r1, [pc, #316]	@ (800fd58 <tcp_input+0x74c>)
 800fc1a:	4850      	ldr	r0, [pc, #320]	@ (800fd5c <tcp_input+0x750>)
 800fc1c:	f007 fec2 	bl	80179a4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	8b5b      	ldrh	r3, [r3, #26]
 800fc24:	f003 0310 	and.w	r3, r3, #16
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d008      	beq.n	800fc3e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fc2c:	4b42      	ldr	r3, [pc, #264]	@ (800fd38 <tcp_input+0x72c>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7fd fb79 	bl	800d328 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fc36:	69f8      	ldr	r0, [r7, #28]
 800fc38:	f7fe f9a0 	bl	800df7c <tcp_abort>
            goto aborted;
 800fc3c:	e091      	b.n	800fd62 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d00c      	beq.n	800fc62 <tcp_input+0x656>
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	6918      	ldr	r0, [r3, #16]
 800fc52:	4b39      	ldr	r3, [pc, #228]	@ (800fd38 <tcp_input+0x72c>)
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	2300      	movs	r3, #0
 800fc58:	69f9      	ldr	r1, [r7, #28]
 800fc5a:	47a0      	blx	r4
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	74fb      	strb	r3, [r7, #19]
 800fc60:	e008      	b.n	800fc74 <tcp_input+0x668>
 800fc62:	4b35      	ldr	r3, [pc, #212]	@ (800fd38 <tcp_input+0x72c>)
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	2300      	movs	r3, #0
 800fc68:	69f9      	ldr	r1, [r7, #28]
 800fc6a:	2000      	movs	r0, #0
 800fc6c:	f7ff f890 	bl	800ed90 <tcp_recv_null>
 800fc70:	4603      	mov	r3, r0
 800fc72:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fc74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc78:	f113 0f0d 	cmn.w	r3, #13
 800fc7c:	d053      	beq.n	800fd26 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fc7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d003      	beq.n	800fc8e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fc86:	4b2c      	ldr	r3, [pc, #176]	@ (800fd38 <tcp_input+0x72c>)
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fc8e:	4b2b      	ldr	r3, [pc, #172]	@ (800fd3c <tcp_input+0x730>)
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	f003 0320 	and.w	r3, r3, #32
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d030      	beq.n	800fcfc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d009      	beq.n	800fcb6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fca6:	7b5a      	ldrb	r2, [r3, #13]
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fcac:	f042 0220 	orr.w	r2, r2, #32
 800fcb0:	b2d2      	uxtb	r2, r2
 800fcb2:	735a      	strb	r2, [r3, #13]
 800fcb4:	e022      	b.n	800fcfc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fcbe:	d005      	beq.n	800fccc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00b      	beq.n	800fcee <tcp_input+0x6e2>
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	6918      	ldr	r0, [r3, #16]
 800fce0:	2300      	movs	r3, #0
 800fce2:	2200      	movs	r2, #0
 800fce4:	69f9      	ldr	r1, [r7, #28]
 800fce6:	47a0      	blx	r4
 800fce8:	4603      	mov	r3, r0
 800fcea:	74fb      	strb	r3, [r7, #19]
 800fcec:	e001      	b.n	800fcf2 <tcp_input+0x6e6>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fcf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fcf6:	f113 0f0d 	cmn.w	r3, #13
 800fcfa:	d016      	beq.n	800fd2a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fcfc:	4b13      	ldr	r3, [pc, #76]	@ (800fd4c <tcp_input+0x740>)
 800fcfe:	2200      	movs	r2, #0
 800fd00:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fd02:	69f8      	ldr	r0, [r7, #28]
 800fd04:	f000 f88e 	bl	800fe24 <tcp_input_delayed_close>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d128      	bne.n	800fd60 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fd0e:	69f8      	ldr	r0, [r7, #28]
 800fd10:	f002 ff1a 	bl	8012b48 <tcp_output>
 800fd14:	e025      	b.n	800fd62 <tcp_input+0x756>
        goto aborted;
 800fd16:	bf00      	nop
 800fd18:	e023      	b.n	800fd62 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fd1a:	bf00      	nop
 800fd1c:	e021      	b.n	800fd62 <tcp_input+0x756>
              goto aborted;
 800fd1e:	bf00      	nop
 800fd20:	e01f      	b.n	800fd62 <tcp_input+0x756>
          goto aborted;
 800fd22:	bf00      	nop
 800fd24:	e01d      	b.n	800fd62 <tcp_input+0x756>
            goto aborted;
 800fd26:	bf00      	nop
 800fd28:	e01b      	b.n	800fd62 <tcp_input+0x756>
              goto aborted;
 800fd2a:	bf00      	nop
 800fd2c:	e019      	b.n	800fd62 <tcp_input+0x756>
 800fd2e:	bf00      	nop
 800fd30:	20014630 	.word	0x20014630
 800fd34:	20014640 	.word	0x20014640
 800fd38:	20014660 	.word	0x20014660
 800fd3c:	2001465d 	.word	0x2001465d
 800fd40:	20014658 	.word	0x20014658
 800fd44:	2001465c 	.word	0x2001465c
 800fd48:	2001465a 	.word	0x2001465a
 800fd4c:	20014664 	.word	0x20014664
 800fd50:	20014624 	.word	0x20014624
 800fd54:	0801b750 	.word	0x0801b750
 800fd58:	0801b904 	.word	0x0801b904
 800fd5c:	0801b79c 	.word	0x0801b79c
          goto aborted;
 800fd60:	bf00      	nop
    tcp_input_pcb = NULL;
 800fd62:	4b27      	ldr	r3, [pc, #156]	@ (800fe00 <tcp_input+0x7f4>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fd68:	4b26      	ldr	r3, [pc, #152]	@ (800fe04 <tcp_input+0x7f8>)
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fd6e:	4b26      	ldr	r3, [pc, #152]	@ (800fe08 <tcp_input+0x7fc>)
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d03f      	beq.n	800fdf6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fd76:	4b24      	ldr	r3, [pc, #144]	@ (800fe08 <tcp_input+0x7fc>)
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fd fad4 	bl	800d328 <pbuf_free>
      inseg.p = NULL;
 800fd80:	4b21      	ldr	r3, [pc, #132]	@ (800fe08 <tcp_input+0x7fc>)
 800fd82:	2200      	movs	r2, #0
 800fd84:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fd86:	e036      	b.n	800fdf6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fd88:	4b20      	ldr	r3, [pc, #128]	@ (800fe0c <tcp_input+0x800>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	899b      	ldrh	r3, [r3, #12]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7fb fee7 	bl	800bb64 <lwip_htons>
 800fd96:	4603      	mov	r3, r0
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	f003 0304 	and.w	r3, r3, #4
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d118      	bne.n	800fdd4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda2:	4b1b      	ldr	r3, [pc, #108]	@ (800fe10 <tcp_input+0x804>)
 800fda4:	6819      	ldr	r1, [r3, #0]
 800fda6:	4b1b      	ldr	r3, [pc, #108]	@ (800fe14 <tcp_input+0x808>)
 800fda8:	881b      	ldrh	r3, [r3, #0]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	4b1a      	ldr	r3, [pc, #104]	@ (800fe18 <tcp_input+0x80c>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdb2:	4b16      	ldr	r3, [pc, #88]	@ (800fe0c <tcp_input+0x800>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdb6:	885b      	ldrh	r3, [r3, #2]
 800fdb8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdba:	4a14      	ldr	r2, [pc, #80]	@ (800fe0c <tcp_input+0x800>)
 800fdbc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdbe:	8812      	ldrh	r2, [r2, #0]
 800fdc0:	b292      	uxth	r2, r2
 800fdc2:	9202      	str	r2, [sp, #8]
 800fdc4:	9301      	str	r3, [sp, #4]
 800fdc6:	4b15      	ldr	r3, [pc, #84]	@ (800fe1c <tcp_input+0x810>)
 800fdc8:	9300      	str	r3, [sp, #0]
 800fdca:	4b15      	ldr	r3, [pc, #84]	@ (800fe20 <tcp_input+0x814>)
 800fdcc:	4602      	mov	r2, r0
 800fdce:	2000      	movs	r0, #0
 800fdd0:	f003 fc6e 	bl	80136b0 <tcp_rst>
    pbuf_free(p);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7fd faa7 	bl	800d328 <pbuf_free>
  return;
 800fdda:	e00c      	b.n	800fdf6 <tcp_input+0x7ea>
    goto dropped;
 800fddc:	bf00      	nop
 800fdde:	e006      	b.n	800fdee <tcp_input+0x7e2>
    goto dropped;
 800fde0:	bf00      	nop
 800fde2:	e004      	b.n	800fdee <tcp_input+0x7e2>
    goto dropped;
 800fde4:	bf00      	nop
 800fde6:	e002      	b.n	800fdee <tcp_input+0x7e2>
      goto dropped;
 800fde8:	bf00      	nop
 800fdea:	e000      	b.n	800fdee <tcp_input+0x7e2>
      goto dropped;
 800fdec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7fd fa9a 	bl	800d328 <pbuf_free>
 800fdf4:	e000      	b.n	800fdf8 <tcp_input+0x7ec>
  return;
 800fdf6:	bf00      	nop
}
 800fdf8:	3724      	adds	r7, #36	@ 0x24
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd90      	pop	{r4, r7, pc}
 800fdfe:	bf00      	nop
 800fe00:	20014664 	.word	0x20014664
 800fe04:	20014660 	.word	0x20014660
 800fe08:	20014630 	.word	0x20014630
 800fe0c:	20014640 	.word	0x20014640
 800fe10:	20014654 	.word	0x20014654
 800fe14:	2001465a 	.word	0x2001465a
 800fe18:	20014650 	.word	0x20014650
 800fe1c:	2000eef8 	.word	0x2000eef8
 800fe20:	2000eefc 	.word	0x2000eefc

0800fe24 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d106      	bne.n	800fe40 <tcp_input_delayed_close+0x1c>
 800fe32:	4b17      	ldr	r3, [pc, #92]	@ (800fe90 <tcp_input_delayed_close+0x6c>)
 800fe34:	f240 225a 	movw	r2, #602	@ 0x25a
 800fe38:	4916      	ldr	r1, [pc, #88]	@ (800fe94 <tcp_input_delayed_close+0x70>)
 800fe3a:	4817      	ldr	r0, [pc, #92]	@ (800fe98 <tcp_input_delayed_close+0x74>)
 800fe3c:	f007 fdb2 	bl	80179a4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fe40:	4b16      	ldr	r3, [pc, #88]	@ (800fe9c <tcp_input_delayed_close+0x78>)
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	f003 0310 	and.w	r3, r3, #16
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d01c      	beq.n	800fe86 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	8b5b      	ldrh	r3, [r3, #26]
 800fe50:	f003 0310 	and.w	r3, r3, #16
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d10d      	bne.n	800fe74 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d008      	beq.n	800fe74 <tcp_input_delayed_close+0x50>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	6912      	ldr	r2, [r2, #16]
 800fe6c:	f06f 010e 	mvn.w	r1, #14
 800fe70:	4610      	mov	r0, r2
 800fe72:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fe74:	6879      	ldr	r1, [r7, #4]
 800fe76:	480a      	ldr	r0, [pc, #40]	@ (800fea0 <tcp_input_delayed_close+0x7c>)
 800fe78:	f7ff fa50 	bl	800f31c <tcp_pcb_remove>
    tcp_free(pcb);
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f7fd fd95 	bl	800d9ac <tcp_free>
    return 1;
 800fe82:	2301      	movs	r3, #1
 800fe84:	e000      	b.n	800fe88 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fe86:	2300      	movs	r3, #0
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	0801b750 	.word	0x0801b750
 800fe94:	0801b920 	.word	0x0801b920
 800fe98:	0801b79c 	.word	0x0801b79c
 800fe9c:	2001465d 	.word	0x2001465d
 800fea0:	20014624 	.word	0x20014624

0800fea4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fea4:	b590      	push	{r4, r7, lr}
 800fea6:	b08b      	sub	sp, #44	@ 0x2c
 800fea8:	af04      	add	r7, sp, #16
 800feaa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800feac:	4b6f      	ldr	r3, [pc, #444]	@ (801006c <tcp_listen_input+0x1c8>)
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	f003 0304 	and.w	r3, r3, #4
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f040 80d2 	bne.w	801005e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d106      	bne.n	800fece <tcp_listen_input+0x2a>
 800fec0:	4b6b      	ldr	r3, [pc, #428]	@ (8010070 <tcp_listen_input+0x1cc>)
 800fec2:	f240 2281 	movw	r2, #641	@ 0x281
 800fec6:	496b      	ldr	r1, [pc, #428]	@ (8010074 <tcp_listen_input+0x1d0>)
 800fec8:	486b      	ldr	r0, [pc, #428]	@ (8010078 <tcp_listen_input+0x1d4>)
 800feca:	f007 fd6b 	bl	80179a4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fece:	4b67      	ldr	r3, [pc, #412]	@ (801006c <tcp_listen_input+0x1c8>)
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	f003 0310 	and.w	r3, r3, #16
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d019      	beq.n	800ff0e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feda:	4b68      	ldr	r3, [pc, #416]	@ (801007c <tcp_listen_input+0x1d8>)
 800fedc:	6819      	ldr	r1, [r3, #0]
 800fede:	4b68      	ldr	r3, [pc, #416]	@ (8010080 <tcp_listen_input+0x1dc>)
 800fee0:	881b      	ldrh	r3, [r3, #0]
 800fee2:	461a      	mov	r2, r3
 800fee4:	4b67      	ldr	r3, [pc, #412]	@ (8010084 <tcp_listen_input+0x1e0>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800feea:	4b67      	ldr	r3, [pc, #412]	@ (8010088 <tcp_listen_input+0x1e4>)
 800feec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feee:	885b      	ldrh	r3, [r3, #2]
 800fef0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fef2:	4a65      	ldr	r2, [pc, #404]	@ (8010088 <tcp_listen_input+0x1e4>)
 800fef4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fef6:	8812      	ldrh	r2, [r2, #0]
 800fef8:	b292      	uxth	r2, r2
 800fefa:	9202      	str	r2, [sp, #8]
 800fefc:	9301      	str	r3, [sp, #4]
 800fefe:	4b63      	ldr	r3, [pc, #396]	@ (801008c <tcp_listen_input+0x1e8>)
 800ff00:	9300      	str	r3, [sp, #0]
 800ff02:	4b63      	ldr	r3, [pc, #396]	@ (8010090 <tcp_listen_input+0x1ec>)
 800ff04:	4602      	mov	r2, r0
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f003 fbd2 	bl	80136b0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ff0c:	e0a9      	b.n	8010062 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ff0e:	4b57      	ldr	r3, [pc, #348]	@ (801006c <tcp_listen_input+0x1c8>)
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	f003 0302 	and.w	r3, r3, #2
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	f000 80a3 	beq.w	8010062 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	7d5b      	ldrb	r3, [r3, #21]
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7ff f859 	bl	800efd8 <tcp_alloc>
 800ff26:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d111      	bne.n	800ff52 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	699b      	ldr	r3, [r3, #24]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00a      	beq.n	800ff4c <tcp_listen_input+0xa8>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	699b      	ldr	r3, [r3, #24]
 800ff3a:	687a      	ldr	r2, [r7, #4]
 800ff3c:	6910      	ldr	r0, [r2, #16]
 800ff3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff42:	2100      	movs	r1, #0
 800ff44:	4798      	blx	r3
 800ff46:	4603      	mov	r3, r0
 800ff48:	73bb      	strb	r3, [r7, #14]
      return;
 800ff4a:	e08b      	b.n	8010064 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ff4c:	23f0      	movs	r3, #240	@ 0xf0
 800ff4e:	73bb      	strb	r3, [r7, #14]
      return;
 800ff50:	e088      	b.n	8010064 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ff52:	4b50      	ldr	r3, [pc, #320]	@ (8010094 <tcp_listen_input+0x1f0>)
 800ff54:	695a      	ldr	r2, [r3, #20]
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ff5a:	4b4e      	ldr	r3, [pc, #312]	@ (8010094 <tcp_listen_input+0x1f0>)
 800ff5c:	691a      	ldr	r2, [r3, #16]
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	8ada      	ldrh	r2, [r3, #22]
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ff6a:	4b47      	ldr	r3, [pc, #284]	@ (8010088 <tcp_listen_input+0x1e4>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	881b      	ldrh	r3, [r3, #0]
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	2203      	movs	r2, #3
 800ff7a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ff7c:	4b41      	ldr	r3, [pc, #260]	@ (8010084 <tcp_listen_input+0x1e0>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	1c5a      	adds	r2, r3, #1
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ff8e:	6978      	ldr	r0, [r7, #20]
 800ff90:	f7ff fa58 	bl	800f444 <tcp_next_iss>
 800ff94:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	693a      	ldr	r2, [r7, #16]
 800ff9a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	693a      	ldr	r2, [r7, #16]
 800ffa0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	693a      	ldr	r2, [r7, #16]
 800ffa6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	693a      	ldr	r2, [r7, #16]
 800ffac:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ffae:	4b35      	ldr	r3, [pc, #212]	@ (8010084 <tcp_listen_input+0x1e0>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	1e5a      	subs	r2, r3, #1
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	691a      	ldr	r2, [r3, #16]
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	7a5b      	ldrb	r3, [r3, #9]
 800ffca:	f003 030c 	and.w	r3, r3, #12
 800ffce:	b2da      	uxtb	r2, r3
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	7a1a      	ldrb	r2, [r3, #8]
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ffdc:	4b2e      	ldr	r3, [pc, #184]	@ (8010098 <tcp_listen_input+0x1f4>)
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	60da      	str	r2, [r3, #12]
 800ffe4:	4a2c      	ldr	r2, [pc, #176]	@ (8010098 <tcp_listen_input+0x1f4>)
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	6013      	str	r3, [r2, #0]
 800ffea:	f003 fd23 	bl	8013a34 <tcp_timer_needed>
 800ffee:	4b2b      	ldr	r3, [pc, #172]	@ (801009c <tcp_listen_input+0x1f8>)
 800fff0:	2201      	movs	r2, #1
 800fff2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fff4:	6978      	ldr	r0, [r7, #20]
 800fff6:	f001 fd8b 	bl	8011b10 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fffa:	4b23      	ldr	r3, [pc, #140]	@ (8010088 <tcp_listen_input+0x1e4>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	89db      	ldrh	r3, [r3, #14]
 8010000:	b29a      	uxth	r2, r3
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	3304      	adds	r3, #4
 801001c:	4618      	mov	r0, r3
 801001e:	f005 fc37 	bl	8015890 <ip4_route>
 8010022:	4601      	mov	r1, r0
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	3304      	adds	r3, #4
 8010028:	461a      	mov	r2, r3
 801002a:	4620      	mov	r0, r4
 801002c:	f7ff fa30 	bl	800f490 <tcp_eff_send_mss_netif>
 8010030:	4603      	mov	r3, r0
 8010032:	461a      	mov	r2, r3
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010038:	2112      	movs	r1, #18
 801003a:	6978      	ldr	r0, [r7, #20]
 801003c:	f002 fc96 	bl	801296c <tcp_enqueue_flags>
 8010040:	4603      	mov	r3, r0
 8010042:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d004      	beq.n	8010056 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801004c:	2100      	movs	r1, #0
 801004e:	6978      	ldr	r0, [r7, #20]
 8010050:	f7fd fed6 	bl	800de00 <tcp_abandon>
      return;
 8010054:	e006      	b.n	8010064 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010056:	6978      	ldr	r0, [r7, #20]
 8010058:	f002 fd76 	bl	8012b48 <tcp_output>
  return;
 801005c:	e001      	b.n	8010062 <tcp_listen_input+0x1be>
    return;
 801005e:	bf00      	nop
 8010060:	e000      	b.n	8010064 <tcp_listen_input+0x1c0>
  return;
 8010062:	bf00      	nop
}
 8010064:	371c      	adds	r7, #28
 8010066:	46bd      	mov	sp, r7
 8010068:	bd90      	pop	{r4, r7, pc}
 801006a:	bf00      	nop
 801006c:	2001465c 	.word	0x2001465c
 8010070:	0801b750 	.word	0x0801b750
 8010074:	0801b948 	.word	0x0801b948
 8010078:	0801b79c 	.word	0x0801b79c
 801007c:	20014654 	.word	0x20014654
 8010080:	2001465a 	.word	0x2001465a
 8010084:	20014650 	.word	0x20014650
 8010088:	20014640 	.word	0x20014640
 801008c:	2000eef8 	.word	0x2000eef8
 8010090:	2000eefc 	.word	0x2000eefc
 8010094:	2000eee8 	.word	0x2000eee8
 8010098:	20014624 	.word	0x20014624
 801009c:	2001462c 	.word	0x2001462c

080100a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b086      	sub	sp, #24
 80100a4:	af04      	add	r7, sp, #16
 80100a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80100a8:	4b2f      	ldr	r3, [pc, #188]	@ (8010168 <tcp_timewait_input+0xc8>)
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	f003 0304 	and.w	r3, r3, #4
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d153      	bne.n	801015c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d106      	bne.n	80100c8 <tcp_timewait_input+0x28>
 80100ba:	4b2c      	ldr	r3, [pc, #176]	@ (801016c <tcp_timewait_input+0xcc>)
 80100bc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80100c0:	492b      	ldr	r1, [pc, #172]	@ (8010170 <tcp_timewait_input+0xd0>)
 80100c2:	482c      	ldr	r0, [pc, #176]	@ (8010174 <tcp_timewait_input+0xd4>)
 80100c4:	f007 fc6e 	bl	80179a4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80100c8:	4b27      	ldr	r3, [pc, #156]	@ (8010168 <tcp_timewait_input+0xc8>)
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	f003 0302 	and.w	r3, r3, #2
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d02a      	beq.n	801012a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80100d4:	4b28      	ldr	r3, [pc, #160]	@ (8010178 <tcp_timewait_input+0xd8>)
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	db2d      	blt.n	801013e <tcp_timewait_input+0x9e>
 80100e2:	4b25      	ldr	r3, [pc, #148]	@ (8010178 <tcp_timewait_input+0xd8>)
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ea:	6879      	ldr	r1, [r7, #4]
 80100ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80100ee:	440b      	add	r3, r1
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	dc23      	bgt.n	801013e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100f6:	4b21      	ldr	r3, [pc, #132]	@ (801017c <tcp_timewait_input+0xdc>)
 80100f8:	6819      	ldr	r1, [r3, #0]
 80100fa:	4b21      	ldr	r3, [pc, #132]	@ (8010180 <tcp_timewait_input+0xe0>)
 80100fc:	881b      	ldrh	r3, [r3, #0]
 80100fe:	461a      	mov	r2, r3
 8010100:	4b1d      	ldr	r3, [pc, #116]	@ (8010178 <tcp_timewait_input+0xd8>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010106:	4b1f      	ldr	r3, [pc, #124]	@ (8010184 <tcp_timewait_input+0xe4>)
 8010108:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801010a:	885b      	ldrh	r3, [r3, #2]
 801010c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801010e:	4a1d      	ldr	r2, [pc, #116]	@ (8010184 <tcp_timewait_input+0xe4>)
 8010110:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010112:	8812      	ldrh	r2, [r2, #0]
 8010114:	b292      	uxth	r2, r2
 8010116:	9202      	str	r2, [sp, #8]
 8010118:	9301      	str	r3, [sp, #4]
 801011a:	4b1b      	ldr	r3, [pc, #108]	@ (8010188 <tcp_timewait_input+0xe8>)
 801011c:	9300      	str	r3, [sp, #0]
 801011e:	4b1b      	ldr	r3, [pc, #108]	@ (801018c <tcp_timewait_input+0xec>)
 8010120:	4602      	mov	r2, r0
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f003 fac4 	bl	80136b0 <tcp_rst>
      return;
 8010128:	e01b      	b.n	8010162 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801012a:	4b0f      	ldr	r3, [pc, #60]	@ (8010168 <tcp_timewait_input+0xc8>)
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	f003 0301 	and.w	r3, r3, #1
 8010132:	2b00      	cmp	r3, #0
 8010134:	d003      	beq.n	801013e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010136:	4b16      	ldr	r3, [pc, #88]	@ (8010190 <tcp_timewait_input+0xf0>)
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801013e:	4b10      	ldr	r3, [pc, #64]	@ (8010180 <tcp_timewait_input+0xe0>)
 8010140:	881b      	ldrh	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00c      	beq.n	8010160 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	8b5b      	ldrh	r3, [r3, #26]
 801014a:	f043 0302 	orr.w	r3, r3, #2
 801014e:	b29a      	uxth	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f002 fcf7 	bl	8012b48 <tcp_output>
  }
  return;
 801015a:	e001      	b.n	8010160 <tcp_timewait_input+0xc0>
    return;
 801015c:	bf00      	nop
 801015e:	e000      	b.n	8010162 <tcp_timewait_input+0xc2>
  return;
 8010160:	bf00      	nop
}
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	2001465c 	.word	0x2001465c
 801016c:	0801b750 	.word	0x0801b750
 8010170:	0801b968 	.word	0x0801b968
 8010174:	0801b79c 	.word	0x0801b79c
 8010178:	20014650 	.word	0x20014650
 801017c:	20014654 	.word	0x20014654
 8010180:	2001465a 	.word	0x2001465a
 8010184:	20014640 	.word	0x20014640
 8010188:	2000eef8 	.word	0x2000eef8
 801018c:	2000eefc 	.word	0x2000eefc
 8010190:	20014618 	.word	0x20014618

08010194 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010194:	b590      	push	{r4, r7, lr}
 8010196:	b08d      	sub	sp, #52	@ 0x34
 8010198:	af04      	add	r7, sp, #16
 801019a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801019c:	2300      	movs	r3, #0
 801019e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80101a0:	2300      	movs	r3, #0
 80101a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d106      	bne.n	80101b8 <tcp_process+0x24>
 80101aa:	4b9d      	ldr	r3, [pc, #628]	@ (8010420 <tcp_process+0x28c>)
 80101ac:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80101b0:	499c      	ldr	r1, [pc, #624]	@ (8010424 <tcp_process+0x290>)
 80101b2:	489d      	ldr	r0, [pc, #628]	@ (8010428 <tcp_process+0x294>)
 80101b4:	f007 fbf6 	bl	80179a4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80101b8:	4b9c      	ldr	r3, [pc, #624]	@ (801042c <tcp_process+0x298>)
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	f003 0304 	and.w	r3, r3, #4
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d04e      	beq.n	8010262 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	7d1b      	ldrb	r3, [r3, #20]
 80101c8:	2b02      	cmp	r3, #2
 80101ca:	d108      	bne.n	80101de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101d0:	4b97      	ldr	r3, [pc, #604]	@ (8010430 <tcp_process+0x29c>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d123      	bne.n	8010220 <tcp_process+0x8c>
        acceptable = 1;
 80101d8:	2301      	movs	r3, #1
 80101da:	76fb      	strb	r3, [r7, #27]
 80101dc:	e020      	b.n	8010220 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80101e2:	4b94      	ldr	r3, [pc, #592]	@ (8010434 <tcp_process+0x2a0>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d102      	bne.n	80101f0 <tcp_process+0x5c>
        acceptable = 1;
 80101ea:	2301      	movs	r3, #1
 80101ec:	76fb      	strb	r3, [r7, #27]
 80101ee:	e017      	b.n	8010220 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101f0:	4b90      	ldr	r3, [pc, #576]	@ (8010434 <tcp_process+0x2a0>)
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	db10      	blt.n	8010220 <tcp_process+0x8c>
 80101fe:	4b8d      	ldr	r3, [pc, #564]	@ (8010434 <tcp_process+0x2a0>)
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010206:	6879      	ldr	r1, [r7, #4]
 8010208:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801020a:	440b      	add	r3, r1
 801020c:	1ad3      	subs	r3, r2, r3
 801020e:	2b00      	cmp	r3, #0
 8010210:	dc06      	bgt.n	8010220 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	8b5b      	ldrh	r3, [r3, #26]
 8010216:	f043 0302 	orr.w	r3, r3, #2
 801021a:	b29a      	uxth	r2, r3
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010220:	7efb      	ldrb	r3, [r7, #27]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d01b      	beq.n	801025e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	7d1b      	ldrb	r3, [r3, #20]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d106      	bne.n	801023c <tcp_process+0xa8>
 801022e:	4b7c      	ldr	r3, [pc, #496]	@ (8010420 <tcp_process+0x28c>)
 8010230:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010234:	4980      	ldr	r1, [pc, #512]	@ (8010438 <tcp_process+0x2a4>)
 8010236:	487c      	ldr	r0, [pc, #496]	@ (8010428 <tcp_process+0x294>)
 8010238:	f007 fbb4 	bl	80179a4 <iprintf>
      recv_flags |= TF_RESET;
 801023c:	4b7f      	ldr	r3, [pc, #508]	@ (801043c <tcp_process+0x2a8>)
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	f043 0308 	orr.w	r3, r3, #8
 8010244:	b2da      	uxtb	r2, r3
 8010246:	4b7d      	ldr	r3, [pc, #500]	@ (801043c <tcp_process+0x2a8>)
 8010248:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	8b5b      	ldrh	r3, [r3, #26]
 801024e:	f023 0301 	bic.w	r3, r3, #1
 8010252:	b29a      	uxth	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010258:	f06f 030d 	mvn.w	r3, #13
 801025c:	e37a      	b.n	8010954 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801025e:	2300      	movs	r3, #0
 8010260:	e378      	b.n	8010954 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010262:	4b72      	ldr	r3, [pc, #456]	@ (801042c <tcp_process+0x298>)
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	f003 0302 	and.w	r3, r3, #2
 801026a:	2b00      	cmp	r3, #0
 801026c:	d010      	beq.n	8010290 <tcp_process+0xfc>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	7d1b      	ldrb	r3, [r3, #20]
 8010272:	2b02      	cmp	r3, #2
 8010274:	d00c      	beq.n	8010290 <tcp_process+0xfc>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	7d1b      	ldrb	r3, [r3, #20]
 801027a:	2b03      	cmp	r3, #3
 801027c:	d008      	beq.n	8010290 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	8b5b      	ldrh	r3, [r3, #26]
 8010282:	f043 0302 	orr.w	r3, r3, #2
 8010286:	b29a      	uxth	r2, r3
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801028c:	2300      	movs	r3, #0
 801028e:	e361      	b.n	8010954 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	8b5b      	ldrh	r3, [r3, #26]
 8010294:	f003 0310 	and.w	r3, r3, #16
 8010298:	2b00      	cmp	r3, #0
 801029a:	d103      	bne.n	80102a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801029c:	4b68      	ldr	r3, [pc, #416]	@ (8010440 <tcp_process+0x2ac>)
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2200      	movs	r2, #0
 80102a8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f001 fc2b 	bl	8011b10 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	7d1b      	ldrb	r3, [r3, #20]
 80102be:	3b02      	subs	r3, #2
 80102c0:	2b07      	cmp	r3, #7
 80102c2:	f200 8337 	bhi.w	8010934 <tcp_process+0x7a0>
 80102c6:	a201      	add	r2, pc, #4	@ (adr r2, 80102cc <tcp_process+0x138>)
 80102c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102cc:	080102ed 	.word	0x080102ed
 80102d0:	0801051d 	.word	0x0801051d
 80102d4:	08010695 	.word	0x08010695
 80102d8:	080106bf 	.word	0x080106bf
 80102dc:	080107e3 	.word	0x080107e3
 80102e0:	08010695 	.word	0x08010695
 80102e4:	0801086f 	.word	0x0801086f
 80102e8:	080108ff 	.word	0x080108ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80102ec:	4b4f      	ldr	r3, [pc, #316]	@ (801042c <tcp_process+0x298>)
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	f003 0310 	and.w	r3, r3, #16
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f000 80e4 	beq.w	80104c2 <tcp_process+0x32e>
 80102fa:	4b4c      	ldr	r3, [pc, #304]	@ (801042c <tcp_process+0x298>)
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	f003 0302 	and.w	r3, r3, #2
 8010302:	2b00      	cmp	r3, #0
 8010304:	f000 80dd 	beq.w	80104c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801030c:	1c5a      	adds	r2, r3, #1
 801030e:	4b48      	ldr	r3, [pc, #288]	@ (8010430 <tcp_process+0x29c>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	429a      	cmp	r2, r3
 8010314:	f040 80d5 	bne.w	80104c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010318:	4b46      	ldr	r3, [pc, #280]	@ (8010434 <tcp_process+0x2a0>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	1c5a      	adds	r2, r3, #1
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801032a:	4b41      	ldr	r3, [pc, #260]	@ (8010430 <tcp_process+0x29c>)
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010332:	4b44      	ldr	r3, [pc, #272]	@ (8010444 <tcp_process+0x2b0>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	89db      	ldrh	r3, [r3, #14]
 8010338:	b29a      	uxth	r2, r3
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801034c:	4b39      	ldr	r3, [pc, #228]	@ (8010434 <tcp_process+0x2a0>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	1e5a      	subs	r2, r3, #1
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2204      	movs	r2, #4
 801035a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	3304      	adds	r3, #4
 8010364:	4618      	mov	r0, r3
 8010366:	f005 fa93 	bl	8015890 <ip4_route>
 801036a:	4601      	mov	r1, r0
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	3304      	adds	r3, #4
 8010370:	461a      	mov	r2, r3
 8010372:	4620      	mov	r0, r4
 8010374:	f7ff f88c 	bl	800f490 <tcp_eff_send_mss_netif>
 8010378:	4603      	mov	r3, r0
 801037a:	461a      	mov	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010384:	009a      	lsls	r2, r3, #2
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010390:	428b      	cmp	r3, r1
 8010392:	bf38      	it	cc
 8010394:	460b      	movcc	r3, r1
 8010396:	429a      	cmp	r2, r3
 8010398:	d204      	bcs.n	80103a4 <tcp_process+0x210>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	e00d      	b.n	80103c0 <tcp_process+0x22c>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103a8:	005b      	lsls	r3, r3, #1
 80103aa:	f241 121c 	movw	r2, #4380	@ 0x111c
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d904      	bls.n	80103bc <tcp_process+0x228>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103b6:	005b      	lsls	r3, r3, #1
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	e001      	b.n	80103c0 <tcp_process+0x22c>
 80103bc:	f241 131c 	movw	r3, #4380	@ 0x111c
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d106      	bne.n	80103de <tcp_process+0x24a>
 80103d0:	4b13      	ldr	r3, [pc, #76]	@ (8010420 <tcp_process+0x28c>)
 80103d2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80103d6:	491c      	ldr	r1, [pc, #112]	@ (8010448 <tcp_process+0x2b4>)
 80103d8:	4813      	ldr	r0, [pc, #76]	@ (8010428 <tcp_process+0x294>)
 80103da:	f007 fae3 	bl	80179a4 <iprintf>
        --pcb->snd_queuelen;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80103e4:	3b01      	subs	r3, #1
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80103f4:	69fb      	ldr	r3, [r7, #28]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d12a      	bne.n	8010450 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d106      	bne.n	8010414 <tcp_process+0x280>
 8010406:	4b06      	ldr	r3, [pc, #24]	@ (8010420 <tcp_process+0x28c>)
 8010408:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801040c:	490f      	ldr	r1, [pc, #60]	@ (801044c <tcp_process+0x2b8>)
 801040e:	4806      	ldr	r0, [pc, #24]	@ (8010428 <tcp_process+0x294>)
 8010410:	f007 fac8 	bl	80179a4 <iprintf>
          pcb->unsent = rseg->next;
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801041c:	e01c      	b.n	8010458 <tcp_process+0x2c4>
 801041e:	bf00      	nop
 8010420:	0801b750 	.word	0x0801b750
 8010424:	0801b988 	.word	0x0801b988
 8010428:	0801b79c 	.word	0x0801b79c
 801042c:	2001465c 	.word	0x2001465c
 8010430:	20014654 	.word	0x20014654
 8010434:	20014650 	.word	0x20014650
 8010438:	0801b9a4 	.word	0x0801b9a4
 801043c:	2001465d 	.word	0x2001465d
 8010440:	20014618 	.word	0x20014618
 8010444:	20014640 	.word	0x20014640
 8010448:	0801b9c4 	.word	0x0801b9c4
 801044c:	0801b9dc 	.word	0x0801b9dc
        } else {
          pcb->unacked = rseg->next;
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010458:	69f8      	ldr	r0, [r7, #28]
 801045a:	f7fe fc36 	bl	800ecca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010462:	2b00      	cmp	r3, #0
 8010464:	d104      	bne.n	8010470 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801046c:	861a      	strh	r2, [r3, #48]	@ 0x30
 801046e:	e006      	b.n	801047e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2200      	movs	r2, #0
 8010474:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2200      	movs	r2, #0
 801047a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010484:	2b00      	cmp	r3, #0
 8010486:	d00a      	beq.n	801049e <tcp_process+0x30a>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	6910      	ldr	r0, [r2, #16]
 8010492:	2200      	movs	r2, #0
 8010494:	6879      	ldr	r1, [r7, #4]
 8010496:	4798      	blx	r3
 8010498:	4603      	mov	r3, r0
 801049a:	76bb      	strb	r3, [r7, #26]
 801049c:	e001      	b.n	80104a2 <tcp_process+0x30e>
 801049e:	2300      	movs	r3, #0
 80104a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80104a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104a6:	f113 0f0d 	cmn.w	r3, #13
 80104aa:	d102      	bne.n	80104b2 <tcp_process+0x31e>
          return ERR_ABRT;
 80104ac:	f06f 030c 	mvn.w	r3, #12
 80104b0:	e250      	b.n	8010954 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	8b5b      	ldrh	r3, [r3, #26]
 80104b6:	f043 0302 	orr.w	r3, r3, #2
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80104c0:	e23a      	b.n	8010938 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80104c2:	4b98      	ldr	r3, [pc, #608]	@ (8010724 <tcp_process+0x590>)
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	f003 0310 	and.w	r3, r3, #16
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	f000 8234 	beq.w	8010938 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104d0:	4b95      	ldr	r3, [pc, #596]	@ (8010728 <tcp_process+0x594>)
 80104d2:	6819      	ldr	r1, [r3, #0]
 80104d4:	4b95      	ldr	r3, [pc, #596]	@ (801072c <tcp_process+0x598>)
 80104d6:	881b      	ldrh	r3, [r3, #0]
 80104d8:	461a      	mov	r2, r3
 80104da:	4b95      	ldr	r3, [pc, #596]	@ (8010730 <tcp_process+0x59c>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104e0:	4b94      	ldr	r3, [pc, #592]	@ (8010734 <tcp_process+0x5a0>)
 80104e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104e4:	885b      	ldrh	r3, [r3, #2]
 80104e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104e8:	4a92      	ldr	r2, [pc, #584]	@ (8010734 <tcp_process+0x5a0>)
 80104ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104ec:	8812      	ldrh	r2, [r2, #0]
 80104ee:	b292      	uxth	r2, r2
 80104f0:	9202      	str	r2, [sp, #8]
 80104f2:	9301      	str	r3, [sp, #4]
 80104f4:	4b90      	ldr	r3, [pc, #576]	@ (8010738 <tcp_process+0x5a4>)
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	4b90      	ldr	r3, [pc, #576]	@ (801073c <tcp_process+0x5a8>)
 80104fa:	4602      	mov	r2, r0
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f003 f8d7 	bl	80136b0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010508:	2b05      	cmp	r3, #5
 801050a:	f200 8215 	bhi.w	8010938 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2200      	movs	r2, #0
 8010512:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f002 fea3 	bl	8013260 <tcp_rexmit_rto>
      break;
 801051a:	e20d      	b.n	8010938 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801051c:	4b81      	ldr	r3, [pc, #516]	@ (8010724 <tcp_process+0x590>)
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	f003 0310 	and.w	r3, r3, #16
 8010524:	2b00      	cmp	r3, #0
 8010526:	f000 80a1 	beq.w	801066c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801052a:	4b7f      	ldr	r3, [pc, #508]	@ (8010728 <tcp_process+0x594>)
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010532:	1ad3      	subs	r3, r2, r3
 8010534:	3b01      	subs	r3, #1
 8010536:	2b00      	cmp	r3, #0
 8010538:	db7e      	blt.n	8010638 <tcp_process+0x4a4>
 801053a:	4b7b      	ldr	r3, [pc, #492]	@ (8010728 <tcp_process+0x594>)
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010542:	1ad3      	subs	r3, r2, r3
 8010544:	2b00      	cmp	r3, #0
 8010546:	dc77      	bgt.n	8010638 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2204      	movs	r2, #4
 801054c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010552:	2b00      	cmp	r3, #0
 8010554:	d102      	bne.n	801055c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010556:	23fa      	movs	r3, #250	@ 0xfa
 8010558:	76bb      	strb	r3, [r7, #26]
 801055a:	e01d      	b.n	8010598 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010560:	699b      	ldr	r3, [r3, #24]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d106      	bne.n	8010574 <tcp_process+0x3e0>
 8010566:	4b76      	ldr	r3, [pc, #472]	@ (8010740 <tcp_process+0x5ac>)
 8010568:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801056c:	4975      	ldr	r1, [pc, #468]	@ (8010744 <tcp_process+0x5b0>)
 801056e:	4876      	ldr	r0, [pc, #472]	@ (8010748 <tcp_process+0x5b4>)
 8010570:	f007 fa18 	bl	80179a4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010578:	699b      	ldr	r3, [r3, #24]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d00a      	beq.n	8010594 <tcp_process+0x400>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010582:	699b      	ldr	r3, [r3, #24]
 8010584:	687a      	ldr	r2, [r7, #4]
 8010586:	6910      	ldr	r0, [r2, #16]
 8010588:	2200      	movs	r2, #0
 801058a:	6879      	ldr	r1, [r7, #4]
 801058c:	4798      	blx	r3
 801058e:	4603      	mov	r3, r0
 8010590:	76bb      	strb	r3, [r7, #26]
 8010592:	e001      	b.n	8010598 <tcp_process+0x404>
 8010594:	23f0      	movs	r3, #240	@ 0xf0
 8010596:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010598:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00a      	beq.n	80105b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80105a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80105a4:	f113 0f0d 	cmn.w	r3, #13
 80105a8:	d002      	beq.n	80105b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f7fd fce6 	bl	800df7c <tcp_abort>
            }
            return ERR_ABRT;
 80105b0:	f06f 030c 	mvn.w	r3, #12
 80105b4:	e1ce      	b.n	8010954 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 fae0 	bl	8010b7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80105bc:	4b63      	ldr	r3, [pc, #396]	@ (801074c <tcp_process+0x5b8>)
 80105be:	881b      	ldrh	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d005      	beq.n	80105d0 <tcp_process+0x43c>
            recv_acked--;
 80105c4:	4b61      	ldr	r3, [pc, #388]	@ (801074c <tcp_process+0x5b8>)
 80105c6:	881b      	ldrh	r3, [r3, #0]
 80105c8:	3b01      	subs	r3, #1
 80105ca:	b29a      	uxth	r2, r3
 80105cc:	4b5f      	ldr	r3, [pc, #380]	@ (801074c <tcp_process+0x5b8>)
 80105ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105d4:	009a      	lsls	r2, r3, #2
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105da:	005b      	lsls	r3, r3, #1
 80105dc:	f241 111c 	movw	r1, #4380	@ 0x111c
 80105e0:	428b      	cmp	r3, r1
 80105e2:	bf38      	it	cc
 80105e4:	460b      	movcc	r3, r1
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d204      	bcs.n	80105f4 <tcp_process+0x460>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	e00d      	b.n	8010610 <tcp_process+0x47c>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105f8:	005b      	lsls	r3, r3, #1
 80105fa:	f241 121c 	movw	r2, #4380	@ 0x111c
 80105fe:	4293      	cmp	r3, r2
 8010600:	d904      	bls.n	801060c <tcp_process+0x478>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010606:	005b      	lsls	r3, r3, #1
 8010608:	b29b      	uxth	r3, r3
 801060a:	e001      	b.n	8010610 <tcp_process+0x47c>
 801060c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010616:	4b4e      	ldr	r3, [pc, #312]	@ (8010750 <tcp_process+0x5bc>)
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	f003 0320 	and.w	r3, r3, #32
 801061e:	2b00      	cmp	r3, #0
 8010620:	d037      	beq.n	8010692 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	8b5b      	ldrh	r3, [r3, #26]
 8010626:	f043 0302 	orr.w	r3, r3, #2
 801062a:	b29a      	uxth	r2, r3
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2207      	movs	r2, #7
 8010634:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010636:	e02c      	b.n	8010692 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010638:	4b3b      	ldr	r3, [pc, #236]	@ (8010728 <tcp_process+0x594>)
 801063a:	6819      	ldr	r1, [r3, #0]
 801063c:	4b3b      	ldr	r3, [pc, #236]	@ (801072c <tcp_process+0x598>)
 801063e:	881b      	ldrh	r3, [r3, #0]
 8010640:	461a      	mov	r2, r3
 8010642:	4b3b      	ldr	r3, [pc, #236]	@ (8010730 <tcp_process+0x59c>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010648:	4b3a      	ldr	r3, [pc, #232]	@ (8010734 <tcp_process+0x5a0>)
 801064a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801064c:	885b      	ldrh	r3, [r3, #2]
 801064e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010650:	4a38      	ldr	r2, [pc, #224]	@ (8010734 <tcp_process+0x5a0>)
 8010652:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010654:	8812      	ldrh	r2, [r2, #0]
 8010656:	b292      	uxth	r2, r2
 8010658:	9202      	str	r2, [sp, #8]
 801065a:	9301      	str	r3, [sp, #4]
 801065c:	4b36      	ldr	r3, [pc, #216]	@ (8010738 <tcp_process+0x5a4>)
 801065e:	9300      	str	r3, [sp, #0]
 8010660:	4b36      	ldr	r3, [pc, #216]	@ (801073c <tcp_process+0x5a8>)
 8010662:	4602      	mov	r2, r0
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f003 f823 	bl	80136b0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801066a:	e167      	b.n	801093c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801066c:	4b2d      	ldr	r3, [pc, #180]	@ (8010724 <tcp_process+0x590>)
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	f003 0302 	and.w	r3, r3, #2
 8010674:	2b00      	cmp	r3, #0
 8010676:	f000 8161 	beq.w	801093c <tcp_process+0x7a8>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801067e:	1e5a      	subs	r2, r3, #1
 8010680:	4b2b      	ldr	r3, [pc, #172]	@ (8010730 <tcp_process+0x59c>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	429a      	cmp	r2, r3
 8010686:	f040 8159 	bne.w	801093c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f002 fe0a 	bl	80132a4 <tcp_rexmit>
      break;
 8010690:	e154      	b.n	801093c <tcp_process+0x7a8>
 8010692:	e153      	b.n	801093c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f000 fa71 	bl	8010b7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801069a:	4b2d      	ldr	r3, [pc, #180]	@ (8010750 <tcp_process+0x5bc>)
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	f003 0320 	and.w	r3, r3, #32
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	f000 814c 	beq.w	8010940 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	8b5b      	ldrh	r3, [r3, #26]
 80106ac:	f043 0302 	orr.w	r3, r3, #2
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2207      	movs	r2, #7
 80106ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80106bc:	e140      	b.n	8010940 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f000 fa5c 	bl	8010b7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80106c4:	4b22      	ldr	r3, [pc, #136]	@ (8010750 <tcp_process+0x5bc>)
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	f003 0320 	and.w	r3, r3, #32
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d071      	beq.n	80107b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106d0:	4b14      	ldr	r3, [pc, #80]	@ (8010724 <tcp_process+0x590>)
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	f003 0310 	and.w	r3, r3, #16
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d060      	beq.n	801079e <tcp_process+0x60a>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106e0:	4b11      	ldr	r3, [pc, #68]	@ (8010728 <tcp_process+0x594>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d15a      	bne.n	801079e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d156      	bne.n	801079e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	8b5b      	ldrh	r3, [r3, #26]
 80106f4:	f043 0302 	orr.w	r3, r3, #2
 80106f8:	b29a      	uxth	r2, r3
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f7fe fdbc 	bl	800f27c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010704:	4b13      	ldr	r3, [pc, #76]	@ (8010754 <tcp_process+0x5c0>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	429a      	cmp	r2, r3
 801070c:	d105      	bne.n	801071a <tcp_process+0x586>
 801070e:	4b11      	ldr	r3, [pc, #68]	@ (8010754 <tcp_process+0x5c0>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	4a0f      	ldr	r2, [pc, #60]	@ (8010754 <tcp_process+0x5c0>)
 8010716:	6013      	str	r3, [r2, #0]
 8010718:	e02e      	b.n	8010778 <tcp_process+0x5e4>
 801071a:	4b0e      	ldr	r3, [pc, #56]	@ (8010754 <tcp_process+0x5c0>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	617b      	str	r3, [r7, #20]
 8010720:	e027      	b.n	8010772 <tcp_process+0x5de>
 8010722:	bf00      	nop
 8010724:	2001465c 	.word	0x2001465c
 8010728:	20014654 	.word	0x20014654
 801072c:	2001465a 	.word	0x2001465a
 8010730:	20014650 	.word	0x20014650
 8010734:	20014640 	.word	0x20014640
 8010738:	2000eef8 	.word	0x2000eef8
 801073c:	2000eefc 	.word	0x2000eefc
 8010740:	0801b750 	.word	0x0801b750
 8010744:	0801b9f0 	.word	0x0801b9f0
 8010748:	0801b79c 	.word	0x0801b79c
 801074c:	20014658 	.word	0x20014658
 8010750:	2001465d 	.word	0x2001465d
 8010754:	20014624 	.word	0x20014624
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	429a      	cmp	r2, r3
 8010760:	d104      	bne.n	801076c <tcp_process+0x5d8>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	68da      	ldr	r2, [r3, #12]
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	60da      	str	r2, [r3, #12]
 801076a:	e005      	b.n	8010778 <tcp_process+0x5e4>
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	617b      	str	r3, [r7, #20]
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1ef      	bne.n	8010758 <tcp_process+0x5c4>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2200      	movs	r2, #0
 801077c:	60da      	str	r2, [r3, #12]
 801077e:	4b77      	ldr	r3, [pc, #476]	@ (801095c <tcp_process+0x7c8>)
 8010780:	2201      	movs	r2, #1
 8010782:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	220a      	movs	r2, #10
 8010788:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801078a:	4b75      	ldr	r3, [pc, #468]	@ (8010960 <tcp_process+0x7cc>)
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	60da      	str	r2, [r3, #12]
 8010792:	4a73      	ldr	r2, [pc, #460]	@ (8010960 <tcp_process+0x7cc>)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6013      	str	r3, [r2, #0]
 8010798:	f003 f94c 	bl	8013a34 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801079c:	e0d2      	b.n	8010944 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	8b5b      	ldrh	r3, [r3, #26]
 80107a2:	f043 0302 	orr.w	r3, r3, #2
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2208      	movs	r2, #8
 80107b0:	751a      	strb	r2, [r3, #20]
      break;
 80107b2:	e0c7      	b.n	8010944 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107b4:	4b6b      	ldr	r3, [pc, #428]	@ (8010964 <tcp_process+0x7d0>)
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	f003 0310 	and.w	r3, r3, #16
 80107bc:	2b00      	cmp	r3, #0
 80107be:	f000 80c1 	beq.w	8010944 <tcp_process+0x7b0>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80107c6:	4b68      	ldr	r3, [pc, #416]	@ (8010968 <tcp_process+0x7d4>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	f040 80ba 	bne.w	8010944 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f040 80b5 	bne.w	8010944 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2206      	movs	r2, #6
 80107de:	751a      	strb	r2, [r3, #20]
      break;
 80107e0:	e0b0      	b.n	8010944 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 f9ca 	bl	8010b7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80107e8:	4b60      	ldr	r3, [pc, #384]	@ (801096c <tcp_process+0x7d8>)
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	f003 0320 	and.w	r3, r3, #32
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	f000 80a9 	beq.w	8010948 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	8b5b      	ldrh	r3, [r3, #26]
 80107fa:	f043 0302 	orr.w	r3, r3, #2
 80107fe:	b29a      	uxth	r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f7fe fd39 	bl	800f27c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801080a:	4b59      	ldr	r3, [pc, #356]	@ (8010970 <tcp_process+0x7dc>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	429a      	cmp	r2, r3
 8010812:	d105      	bne.n	8010820 <tcp_process+0x68c>
 8010814:	4b56      	ldr	r3, [pc, #344]	@ (8010970 <tcp_process+0x7dc>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	4a55      	ldr	r2, [pc, #340]	@ (8010970 <tcp_process+0x7dc>)
 801081c:	6013      	str	r3, [r2, #0]
 801081e:	e013      	b.n	8010848 <tcp_process+0x6b4>
 8010820:	4b53      	ldr	r3, [pc, #332]	@ (8010970 <tcp_process+0x7dc>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	613b      	str	r3, [r7, #16]
 8010826:	e00c      	b.n	8010842 <tcp_process+0x6ae>
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	429a      	cmp	r2, r3
 8010830:	d104      	bne.n	801083c <tcp_process+0x6a8>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	68da      	ldr	r2, [r3, #12]
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	60da      	str	r2, [r3, #12]
 801083a:	e005      	b.n	8010848 <tcp_process+0x6b4>
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	613b      	str	r3, [r7, #16]
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d1ef      	bne.n	8010828 <tcp_process+0x694>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2200      	movs	r2, #0
 801084c:	60da      	str	r2, [r3, #12]
 801084e:	4b43      	ldr	r3, [pc, #268]	@ (801095c <tcp_process+0x7c8>)
 8010850:	2201      	movs	r2, #1
 8010852:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	220a      	movs	r2, #10
 8010858:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801085a:	4b41      	ldr	r3, [pc, #260]	@ (8010960 <tcp_process+0x7cc>)
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	60da      	str	r2, [r3, #12]
 8010862:	4a3f      	ldr	r2, [pc, #252]	@ (8010960 <tcp_process+0x7cc>)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6013      	str	r3, [r2, #0]
 8010868:	f003 f8e4 	bl	8013a34 <tcp_timer_needed>
      }
      break;
 801086c:	e06c      	b.n	8010948 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 f984 	bl	8010b7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010874:	4b3b      	ldr	r3, [pc, #236]	@ (8010964 <tcp_process+0x7d0>)
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	f003 0310 	and.w	r3, r3, #16
 801087c:	2b00      	cmp	r3, #0
 801087e:	d065      	beq.n	801094c <tcp_process+0x7b8>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010884:	4b38      	ldr	r3, [pc, #224]	@ (8010968 <tcp_process+0x7d4>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	429a      	cmp	r2, r3
 801088a:	d15f      	bne.n	801094c <tcp_process+0x7b8>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010890:	2b00      	cmp	r3, #0
 8010892:	d15b      	bne.n	801094c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f7fe fcf1 	bl	800f27c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801089a:	4b35      	ldr	r3, [pc, #212]	@ (8010970 <tcp_process+0x7dc>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d105      	bne.n	80108b0 <tcp_process+0x71c>
 80108a4:	4b32      	ldr	r3, [pc, #200]	@ (8010970 <tcp_process+0x7dc>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	4a31      	ldr	r2, [pc, #196]	@ (8010970 <tcp_process+0x7dc>)
 80108ac:	6013      	str	r3, [r2, #0]
 80108ae:	e013      	b.n	80108d8 <tcp_process+0x744>
 80108b0:	4b2f      	ldr	r3, [pc, #188]	@ (8010970 <tcp_process+0x7dc>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	60fb      	str	r3, [r7, #12]
 80108b6:	e00c      	b.n	80108d2 <tcp_process+0x73e>
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d104      	bne.n	80108cc <tcp_process+0x738>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	68da      	ldr	r2, [r3, #12]
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	60da      	str	r2, [r3, #12]
 80108ca:	e005      	b.n	80108d8 <tcp_process+0x744>
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	60fb      	str	r3, [r7, #12]
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d1ef      	bne.n	80108b8 <tcp_process+0x724>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2200      	movs	r2, #0
 80108dc:	60da      	str	r2, [r3, #12]
 80108de:	4b1f      	ldr	r3, [pc, #124]	@ (801095c <tcp_process+0x7c8>)
 80108e0:	2201      	movs	r2, #1
 80108e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	220a      	movs	r2, #10
 80108e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80108ea:	4b1d      	ldr	r3, [pc, #116]	@ (8010960 <tcp_process+0x7cc>)
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	60da      	str	r2, [r3, #12]
 80108f2:	4a1b      	ldr	r2, [pc, #108]	@ (8010960 <tcp_process+0x7cc>)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6013      	str	r3, [r2, #0]
 80108f8:	f003 f89c 	bl	8013a34 <tcp_timer_needed>
      }
      break;
 80108fc:	e026      	b.n	801094c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 f93c 	bl	8010b7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010904:	4b17      	ldr	r3, [pc, #92]	@ (8010964 <tcp_process+0x7d0>)
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	f003 0310 	and.w	r3, r3, #16
 801090c:	2b00      	cmp	r3, #0
 801090e:	d01f      	beq.n	8010950 <tcp_process+0x7bc>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010914:	4b14      	ldr	r3, [pc, #80]	@ (8010968 <tcp_process+0x7d4>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	429a      	cmp	r2, r3
 801091a:	d119      	bne.n	8010950 <tcp_process+0x7bc>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010920:	2b00      	cmp	r3, #0
 8010922:	d115      	bne.n	8010950 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010924:	4b11      	ldr	r3, [pc, #68]	@ (801096c <tcp_process+0x7d8>)
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	f043 0310 	orr.w	r3, r3, #16
 801092c:	b2da      	uxtb	r2, r3
 801092e:	4b0f      	ldr	r3, [pc, #60]	@ (801096c <tcp_process+0x7d8>)
 8010930:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010932:	e00d      	b.n	8010950 <tcp_process+0x7bc>
    default:
      break;
 8010934:	bf00      	nop
 8010936:	e00c      	b.n	8010952 <tcp_process+0x7be>
      break;
 8010938:	bf00      	nop
 801093a:	e00a      	b.n	8010952 <tcp_process+0x7be>
      break;
 801093c:	bf00      	nop
 801093e:	e008      	b.n	8010952 <tcp_process+0x7be>
      break;
 8010940:	bf00      	nop
 8010942:	e006      	b.n	8010952 <tcp_process+0x7be>
      break;
 8010944:	bf00      	nop
 8010946:	e004      	b.n	8010952 <tcp_process+0x7be>
      break;
 8010948:	bf00      	nop
 801094a:	e002      	b.n	8010952 <tcp_process+0x7be>
      break;
 801094c:	bf00      	nop
 801094e:	e000      	b.n	8010952 <tcp_process+0x7be>
      break;
 8010950:	bf00      	nop
  }
  return ERR_OK;
 8010952:	2300      	movs	r3, #0
}
 8010954:	4618      	mov	r0, r3
 8010956:	3724      	adds	r7, #36	@ 0x24
 8010958:	46bd      	mov	sp, r7
 801095a:	bd90      	pop	{r4, r7, pc}
 801095c:	2001462c 	.word	0x2001462c
 8010960:	20014628 	.word	0x20014628
 8010964:	2001465c 	.word	0x2001465c
 8010968:	20014654 	.word	0x20014654
 801096c:	2001465d 	.word	0x2001465d
 8010970:	20014624 	.word	0x20014624

08010974 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010974:	b590      	push	{r4, r7, lr}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d106      	bne.n	8010992 <tcp_oos_insert_segment+0x1e>
 8010984:	4b3b      	ldr	r3, [pc, #236]	@ (8010a74 <tcp_oos_insert_segment+0x100>)
 8010986:	f240 421f 	movw	r2, #1055	@ 0x41f
 801098a:	493b      	ldr	r1, [pc, #236]	@ (8010a78 <tcp_oos_insert_segment+0x104>)
 801098c:	483b      	ldr	r0, [pc, #236]	@ (8010a7c <tcp_oos_insert_segment+0x108>)
 801098e:	f007 f809 	bl	80179a4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	68db      	ldr	r3, [r3, #12]
 8010996:	899b      	ldrh	r3, [r3, #12]
 8010998:	b29b      	uxth	r3, r3
 801099a:	4618      	mov	r0, r3
 801099c:	f7fb f8e2 	bl	800bb64 <lwip_htons>
 80109a0:	4603      	mov	r3, r0
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	f003 0301 	and.w	r3, r3, #1
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d028      	beq.n	80109fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80109ac:	6838      	ldr	r0, [r7, #0]
 80109ae:	f7fe f977 	bl	800eca0 <tcp_segs_free>
    next = NULL;
 80109b2:	2300      	movs	r3, #0
 80109b4:	603b      	str	r3, [r7, #0]
 80109b6:	e056      	b.n	8010a66 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	899b      	ldrh	r3, [r3, #12]
 80109be:	b29b      	uxth	r3, r3
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7fb f8cf 	bl	800bb64 <lwip_htons>
 80109c6:	4603      	mov	r3, r0
 80109c8:	b2db      	uxtb	r3, r3
 80109ca:	f003 0301 	and.w	r3, r3, #1
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00d      	beq.n	80109ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	68db      	ldr	r3, [r3, #12]
 80109d6:	899b      	ldrh	r3, [r3, #12]
 80109d8:	b29c      	uxth	r4, r3
 80109da:	2001      	movs	r0, #1
 80109dc:	f7fb f8c2 	bl	800bb64 <lwip_htons>
 80109e0:	4603      	mov	r3, r0
 80109e2:	461a      	mov	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	68db      	ldr	r3, [r3, #12]
 80109e8:	4322      	orrs	r2, r4
 80109ea:	b292      	uxth	r2, r2
 80109ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80109f8:	68f8      	ldr	r0, [r7, #12]
 80109fa:	f7fe f966 	bl	800ecca <tcp_seg_free>
    while (next &&
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d00e      	beq.n	8010a22 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	891b      	ldrh	r3, [r3, #8]
 8010a08:	461a      	mov	r2, r3
 8010a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8010a80 <tcp_oos_insert_segment+0x10c>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	441a      	add	r2, r3
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	68db      	ldr	r3, [r3, #12]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	6839      	ldr	r1, [r7, #0]
 8010a18:	8909      	ldrh	r1, [r1, #8]
 8010a1a:	440b      	add	r3, r1
 8010a1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	daca      	bge.n	80109b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d01e      	beq.n	8010a66 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	891b      	ldrh	r3, [r3, #8]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	4b14      	ldr	r3, [pc, #80]	@ (8010a80 <tcp_oos_insert_segment+0x10c>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	441a      	add	r2, r3
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	dd12      	ble.n	8010a66 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	4b0d      	ldr	r3, [pc, #52]	@ (8010a80 <tcp_oos_insert_segment+0x10c>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	1ad3      	subs	r3, r2, r3
 8010a50:	b29a      	uxth	r2, r3
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	685a      	ldr	r2, [r3, #4]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	891b      	ldrh	r3, [r3, #8]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	4610      	mov	r0, r2
 8010a62:	f7fc fadb 	bl	800d01c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	683a      	ldr	r2, [r7, #0]
 8010a6a:	601a      	str	r2, [r3, #0]
}
 8010a6c:	bf00      	nop
 8010a6e:	3714      	adds	r7, #20
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd90      	pop	{r4, r7, pc}
 8010a74:	0801b750 	.word	0x0801b750
 8010a78:	0801ba10 	.word	0x0801ba10
 8010a7c:	0801b79c 	.word	0x0801b79c
 8010a80:	20014650 	.word	0x20014650

08010a84 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010a84:	b5b0      	push	{r4, r5, r7, lr}
 8010a86:	b086      	sub	sp, #24
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
 8010a90:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010a92:	e03e      	b.n	8010b12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7fc fcc8 	bl	800d438 <pbuf_clen>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010ab2:	8a7a      	ldrh	r2, [r7, #18]
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d906      	bls.n	8010ac6 <tcp_free_acked_segments+0x42>
 8010ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8010b64 <tcp_free_acked_segments+0xe0>)
 8010aba:	f240 4257 	movw	r2, #1111	@ 0x457
 8010abe:	492a      	ldr	r1, [pc, #168]	@ (8010b68 <tcp_free_acked_segments+0xe4>)
 8010ac0:	482a      	ldr	r0, [pc, #168]	@ (8010b6c <tcp_free_acked_segments+0xe8>)
 8010ac2:	f006 ff6f 	bl	80179a4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010acc:	8a7b      	ldrh	r3, [r7, #18]
 8010ace:	1ad3      	subs	r3, r2, r3
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	891a      	ldrh	r2, [r3, #8]
 8010adc:	4b24      	ldr	r3, [pc, #144]	@ (8010b70 <tcp_free_acked_segments+0xec>)
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	4b22      	ldr	r3, [pc, #136]	@ (8010b70 <tcp_free_acked_segments+0xec>)
 8010ae6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010ae8:	6978      	ldr	r0, [r7, #20]
 8010aea:	f7fe f8ee 	bl	800ecca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d00c      	beq.n	8010b12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d109      	bne.n	8010b12 <tcp_free_acked_segments+0x8e>
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d106      	bne.n	8010b12 <tcp_free_acked_segments+0x8e>
 8010b04:	4b17      	ldr	r3, [pc, #92]	@ (8010b64 <tcp_free_acked_segments+0xe0>)
 8010b06:	f240 4261 	movw	r2, #1121	@ 0x461
 8010b0a:	491a      	ldr	r1, [pc, #104]	@ (8010b74 <tcp_free_acked_segments+0xf0>)
 8010b0c:	4817      	ldr	r0, [pc, #92]	@ (8010b6c <tcp_free_acked_segments+0xe8>)
 8010b0e:	f006 ff49 	bl	80179a4 <iprintf>
  while (seg_list != NULL &&
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d020      	beq.n	8010b5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fb f835 	bl	800bb8e <lwip_htonl>
 8010b24:	4604      	mov	r4, r0
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	891b      	ldrh	r3, [r3, #8]
 8010b2a:	461d      	mov	r5, r3
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	899b      	ldrh	r3, [r3, #12]
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7fb f815 	bl	800bb64 <lwip_htons>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	f003 0303 	and.w	r3, r3, #3
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d001      	beq.n	8010b4a <tcp_free_acked_segments+0xc6>
 8010b46:	2301      	movs	r3, #1
 8010b48:	e000      	b.n	8010b4c <tcp_free_acked_segments+0xc8>
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	442b      	add	r3, r5
 8010b4e:	18e2      	adds	r2, r4, r3
 8010b50:	4b09      	ldr	r3, [pc, #36]	@ (8010b78 <tcp_free_acked_segments+0xf4>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	dd9c      	ble.n	8010a94 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010b5a:	68bb      	ldr	r3, [r7, #8]
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3718      	adds	r7, #24
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bdb0      	pop	{r4, r5, r7, pc}
 8010b64:	0801b750 	.word	0x0801b750
 8010b68:	0801ba38 	.word	0x0801ba38
 8010b6c:	0801b79c 	.word	0x0801b79c
 8010b70:	20014658 	.word	0x20014658
 8010b74:	0801ba60 	.word	0x0801ba60
 8010b78:	20014654 	.word	0x20014654

08010b7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010b7c:	b5b0      	push	{r4, r5, r7, lr}
 8010b7e:	b094      	sub	sp, #80	@ 0x50
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010b84:	2300      	movs	r3, #0
 8010b86:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d106      	bne.n	8010b9c <tcp_receive+0x20>
 8010b8e:	4b91      	ldr	r3, [pc, #580]	@ (8010dd4 <tcp_receive+0x258>)
 8010b90:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010b94:	4990      	ldr	r1, [pc, #576]	@ (8010dd8 <tcp_receive+0x25c>)
 8010b96:	4891      	ldr	r0, [pc, #580]	@ (8010ddc <tcp_receive+0x260>)
 8010b98:	f006 ff04 	bl	80179a4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	7d1b      	ldrb	r3, [r3, #20]
 8010ba0:	2b03      	cmp	r3, #3
 8010ba2:	d806      	bhi.n	8010bb2 <tcp_receive+0x36>
 8010ba4:	4b8b      	ldr	r3, [pc, #556]	@ (8010dd4 <tcp_receive+0x258>)
 8010ba6:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010baa:	498d      	ldr	r1, [pc, #564]	@ (8010de0 <tcp_receive+0x264>)
 8010bac:	488b      	ldr	r0, [pc, #556]	@ (8010ddc <tcp_receive+0x260>)
 8010bae:	f006 fef9 	bl	80179a4 <iprintf>

  if (flags & TCP_ACK) {
 8010bb2:	4b8c      	ldr	r3, [pc, #560]	@ (8010de4 <tcp_receive+0x268>)
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	f003 0310 	and.w	r3, r3, #16
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	f000 8264 	beq.w	8011088 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010bcc:	4413      	add	r3, r2
 8010bce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010bd4:	4b84      	ldr	r3, [pc, #528]	@ (8010de8 <tcp_receive+0x26c>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	1ad3      	subs	r3, r2, r3
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	db1b      	blt.n	8010c16 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010be2:	4b81      	ldr	r3, [pc, #516]	@ (8010de8 <tcp_receive+0x26c>)
 8010be4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d106      	bne.n	8010bf8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010bee:	4b7f      	ldr	r3, [pc, #508]	@ (8010dec <tcp_receive+0x270>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	1ad3      	subs	r3, r2, r3
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	db0e      	blt.n	8010c16 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010bfc:	4b7b      	ldr	r3, [pc, #492]	@ (8010dec <tcp_receive+0x270>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d125      	bne.n	8010c50 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010c04:	4b7a      	ldr	r3, [pc, #488]	@ (8010df0 <tcp_receive+0x274>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	89db      	ldrh	r3, [r3, #14]
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d91c      	bls.n	8010c50 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010c16:	4b76      	ldr	r3, [pc, #472]	@ (8010df0 <tcp_receive+0x274>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	89db      	ldrh	r3, [r3, #14]
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d205      	bcs.n	8010c40 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010c40:	4b69      	ldr	r3, [pc, #420]	@ (8010de8 <tcp_receive+0x26c>)
 8010c42:	681a      	ldr	r2, [r3, #0]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010c48:	4b68      	ldr	r3, [pc, #416]	@ (8010dec <tcp_receive+0x270>)
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010c50:	4b66      	ldr	r3, [pc, #408]	@ (8010dec <tcp_receive+0x270>)
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c58:	1ad3      	subs	r3, r2, r3
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	dc58      	bgt.n	8010d10 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010c5e:	4b65      	ldr	r3, [pc, #404]	@ (8010df4 <tcp_receive+0x278>)
 8010c60:	881b      	ldrh	r3, [r3, #0]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d14b      	bne.n	8010cfe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010c70:	4413      	add	r3, r2
 8010c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d142      	bne.n	8010cfe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	db3d      	blt.n	8010cfe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010c86:	4b59      	ldr	r3, [pc, #356]	@ (8010dec <tcp_receive+0x270>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d137      	bne.n	8010cfe <tcp_receive+0x182>
              found_dupack = 1;
 8010c8e:	2301      	movs	r3, #1
 8010c90:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010c98:	2bff      	cmp	r3, #255	@ 0xff
 8010c9a:	d007      	beq.n	8010cac <tcp_receive+0x130>
                ++pcb->dupacks;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	b2da      	uxtb	r2, r3
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d91b      	bls.n	8010cee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010cc0:	4413      	add	r3, r2
 8010cc2:	b29a      	uxth	r2, r3
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d30a      	bcc.n	8010ce4 <tcp_receive+0x168>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010cd8:	4413      	add	r3, r2
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010ce2:	e004      	b.n	8010cee <tcp_receive+0x172>
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010cea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010cf4:	2b02      	cmp	r3, #2
 8010cf6:	d902      	bls.n	8010cfe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f002 fb3f 	bl	801337c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	f040 8161 	bne.w	8010fc8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010d0e:	e15b      	b.n	8010fc8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d10:	4b36      	ldr	r3, [pc, #216]	@ (8010dec <tcp_receive+0x270>)
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d18:	1ad3      	subs	r3, r2, r3
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	f2c0 814e 	blt.w	8010fbe <tcp_receive+0x442>
 8010d22:	4b32      	ldr	r3, [pc, #200]	@ (8010dec <tcp_receive+0x270>)
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d2a:	1ad3      	subs	r3, r2, r3
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f300 8146 	bgt.w	8010fbe <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	8b5b      	ldrh	r3, [r3, #26]
 8010d36:	f003 0304 	and.w	r3, r3, #4
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d010      	beq.n	8010d60 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	8b5b      	ldrh	r3, [r3, #26]
 8010d42:	f023 0304 	bic.w	r3, r3, #4
 8010d46:	b29a      	uxth	r2, r3
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2200      	movs	r2, #0
 8010d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010d6e:	10db      	asrs	r3, r3, #3
 8010d70:	b21b      	sxth	r3, r3
 8010d72:	b29a      	uxth	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	4413      	add	r3, r2
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	b21a      	sxth	r2, r3
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010d88:	4b18      	ldr	r3, [pc, #96]	@ (8010dec <tcp_receive+0x270>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	1ad3      	subs	r3, r2, r3
 8010d96:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010da0:	4b12      	ldr	r3, [pc, #72]	@ (8010dec <tcp_receive+0x270>)
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	7d1b      	ldrb	r3, [r3, #20]
 8010dac:	2b03      	cmp	r3, #3
 8010dae:	f240 8097 	bls.w	8010ee0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d245      	bcs.n	8010e4e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	8b5b      	ldrh	r3, [r3, #26]
 8010dc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d014      	beq.n	8010df8 <tcp_receive+0x27c>
 8010dce:	2301      	movs	r3, #1
 8010dd0:	e013      	b.n	8010dfa <tcp_receive+0x27e>
 8010dd2:	bf00      	nop
 8010dd4:	0801b750 	.word	0x0801b750
 8010dd8:	0801ba80 	.word	0x0801ba80
 8010ddc:	0801b79c 	.word	0x0801b79c
 8010de0:	0801ba9c 	.word	0x0801ba9c
 8010de4:	2001465c 	.word	0x2001465c
 8010de8:	20014650 	.word	0x20014650
 8010dec:	20014654 	.word	0x20014654
 8010df0:	20014640 	.word	0x20014640
 8010df4:	2001465a 	.word	0x2001465a
 8010df8:	2302      	movs	r3, #2
 8010dfa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010dfe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e08:	fb12 f303 	smulbb	r3, r2, r3
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010e10:	4293      	cmp	r3, r2
 8010e12:	bf28      	it	cs
 8010e14:	4613      	movcs	r3, r2
 8010e16:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010e1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010e20:	4413      	add	r3, r2
 8010e22:	b29a      	uxth	r2, r3
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d309      	bcc.n	8010e42 <tcp_receive+0x2c6>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010e34:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010e36:	4413      	add	r3, r2
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010e40:	e04e      	b.n	8010ee0 <tcp_receive+0x364>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010e48:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010e4c:	e048      	b.n	8010ee0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010e54:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010e56:	4413      	add	r3, r2
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d309      	bcc.n	8010e78 <tcp_receive+0x2fc>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010e6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010e6c:	4413      	add	r3, r2
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010e76:	e004      	b.n	8010e82 <tcp_receive+0x306>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010e7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d326      	bcc.n	8010ee0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010eb2:	4413      	add	r3, r2
 8010eb4:	b29a      	uxth	r2, r3
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d30a      	bcc.n	8010ed6 <tcp_receive+0x35a>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010eca:	4413      	add	r3, r2
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010ed4:	e004      	b.n	8010ee0 <tcp_receive+0x364>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010edc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ee8:	4a98      	ldr	r2, [pc, #608]	@ (801114c <tcp_receive+0x5d0>)
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f7ff fdca 	bl	8010a84 <tcp_free_acked_segments>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010efe:	4a94      	ldr	r2, [pc, #592]	@ (8011150 <tcp_receive+0x5d4>)
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7ff fdbf 	bl	8010a84 <tcp_free_acked_segments>
 8010f06:	4602      	mov	r2, r0
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d104      	bne.n	8010f1e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f1a:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010f1c:	e002      	b.n	8010f24 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d103      	bne.n	8010f3a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010f40:	4b84      	ldr	r3, [pc, #528]	@ (8011154 <tcp_receive+0x5d8>)
 8010f42:	881b      	ldrh	r3, [r3, #0]
 8010f44:	4413      	add	r3, r2
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	8b5b      	ldrh	r3, [r3, #26]
 8010f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d035      	beq.n	8010fc6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d118      	bne.n	8010f94 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00c      	beq.n	8010f84 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7fa fe09 	bl	800bb8e <lwip_htonl>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	dc20      	bgt.n	8010fc6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	8b5b      	ldrh	r3, [r3, #26]
 8010f88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f92:	e018      	b.n	8010fc6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	685b      	ldr	r3, [r3, #4]
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7fa fdf4 	bl	800bb8e <lwip_htonl>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	1ae3      	subs	r3, r4, r3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	dc0b      	bgt.n	8010fc6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	8b5b      	ldrh	r3, [r3, #26]
 8010fb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010fbc:	e003      	b.n	8010fc6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f002 fbc8 	bl	8013754 <tcp_send_empty_ack>
 8010fc4:	e000      	b.n	8010fc8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010fc6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d05b      	beq.n	8011088 <tcp_receive+0x50c>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010fd4:	4b60      	ldr	r3, [pc, #384]	@ (8011158 <tcp_receive+0x5dc>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	1ad3      	subs	r3, r2, r3
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	da54      	bge.n	8011088 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010fde:	4b5f      	ldr	r3, [pc, #380]	@ (801115c <tcp_receive+0x5e0>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	1ad3      	subs	r3, r2, r3
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010ff2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010ffc:	10db      	asrs	r3, r3, #3
 8010ffe:	b21b      	sxth	r3, r3
 8011000:	b29b      	uxth	r3, r3
 8011002:	1ad3      	subs	r3, r2, r3
 8011004:	b29b      	uxth	r3, r3
 8011006:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011010:	b29a      	uxth	r2, r3
 8011012:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011016:	4413      	add	r3, r2
 8011018:	b29b      	uxth	r3, r3
 801101a:	b21a      	sxth	r2, r3
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011020:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011024:	2b00      	cmp	r3, #0
 8011026:	da05      	bge.n	8011034 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011028:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801102c:	425b      	negs	r3, r3
 801102e:	b29b      	uxth	r3, r3
 8011030:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011034:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801103e:	109b      	asrs	r3, r3, #2
 8011040:	b21b      	sxth	r3, r3
 8011042:	b29b      	uxth	r3, r3
 8011044:	1ad3      	subs	r3, r2, r3
 8011046:	b29b      	uxth	r3, r3
 8011048:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011052:	b29a      	uxth	r2, r3
 8011054:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011058:	4413      	add	r3, r2
 801105a:	b29b      	uxth	r3, r3
 801105c:	b21a      	sxth	r2, r3
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011068:	10db      	asrs	r3, r3, #3
 801106a:	b21b      	sxth	r3, r3
 801106c:	b29a      	uxth	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011074:	b29b      	uxth	r3, r3
 8011076:	4413      	add	r3, r2
 8011078:	b29b      	uxth	r3, r3
 801107a:	b21a      	sxth	r2, r3
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2200      	movs	r2, #0
 8011086:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011088:	4b35      	ldr	r3, [pc, #212]	@ (8011160 <tcp_receive+0x5e4>)
 801108a:	881b      	ldrh	r3, [r3, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	f000 84df 	beq.w	8011a50 <tcp_receive+0xed4>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	7d1b      	ldrb	r3, [r3, #20]
 8011096:	2b06      	cmp	r3, #6
 8011098:	f200 84da 	bhi.w	8011a50 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80110a0:	4b30      	ldr	r3, [pc, #192]	@ (8011164 <tcp_receive+0x5e8>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	1ad3      	subs	r3, r2, r3
 80110a6:	3b01      	subs	r3, #1
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f2c0 808f 	blt.w	80111cc <tcp_receive+0x650>
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80110b2:	4b2b      	ldr	r3, [pc, #172]	@ (8011160 <tcp_receive+0x5e4>)
 80110b4:	881b      	ldrh	r3, [r3, #0]
 80110b6:	4619      	mov	r1, r3
 80110b8:	4b2a      	ldr	r3, [pc, #168]	@ (8011164 <tcp_receive+0x5e8>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	440b      	add	r3, r1
 80110be:	1ad3      	subs	r3, r2, r3
 80110c0:	3301      	adds	r3, #1
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	f300 8082 	bgt.w	80111cc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80110c8:	4b27      	ldr	r3, [pc, #156]	@ (8011168 <tcp_receive+0x5ec>)
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80110d2:	4b24      	ldr	r3, [pc, #144]	@ (8011164 <tcp_receive+0x5e8>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	1ad3      	subs	r3, r2, r3
 80110d8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80110da:	4b23      	ldr	r3, [pc, #140]	@ (8011168 <tcp_receive+0x5ec>)
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d106      	bne.n	80110f0 <tcp_receive+0x574>
 80110e2:	4b22      	ldr	r3, [pc, #136]	@ (801116c <tcp_receive+0x5f0>)
 80110e4:	f240 5294 	movw	r2, #1428	@ 0x594
 80110e8:	4921      	ldr	r1, [pc, #132]	@ (8011170 <tcp_receive+0x5f4>)
 80110ea:	4822      	ldr	r0, [pc, #136]	@ (8011174 <tcp_receive+0x5f8>)
 80110ec:	f006 fc5a 	bl	80179a4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80110f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d906      	bls.n	8011108 <tcp_receive+0x58c>
 80110fa:	4b1c      	ldr	r3, [pc, #112]	@ (801116c <tcp_receive+0x5f0>)
 80110fc:	f240 5295 	movw	r2, #1429	@ 0x595
 8011100:	491d      	ldr	r1, [pc, #116]	@ (8011178 <tcp_receive+0x5fc>)
 8011102:	481c      	ldr	r0, [pc, #112]	@ (8011174 <tcp_receive+0x5f8>)
 8011104:	f006 fc4e 	bl	80179a4 <iprintf>
      off = (u16_t)off32;
 8011108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801110a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801110e:	4b16      	ldr	r3, [pc, #88]	@ (8011168 <tcp_receive+0x5ec>)
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	891b      	ldrh	r3, [r3, #8]
 8011114:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011118:	429a      	cmp	r2, r3
 801111a:	d906      	bls.n	801112a <tcp_receive+0x5ae>
 801111c:	4b13      	ldr	r3, [pc, #76]	@ (801116c <tcp_receive+0x5f0>)
 801111e:	f240 5297 	movw	r2, #1431	@ 0x597
 8011122:	4916      	ldr	r1, [pc, #88]	@ (801117c <tcp_receive+0x600>)
 8011124:	4813      	ldr	r0, [pc, #76]	@ (8011174 <tcp_receive+0x5f8>)
 8011126:	f006 fc3d 	bl	80179a4 <iprintf>
      inseg.len -= off;
 801112a:	4b0f      	ldr	r3, [pc, #60]	@ (8011168 <tcp_receive+0x5ec>)
 801112c:	891a      	ldrh	r2, [r3, #8]
 801112e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	b29a      	uxth	r2, r3
 8011136:	4b0c      	ldr	r3, [pc, #48]	@ (8011168 <tcp_receive+0x5ec>)
 8011138:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801113a:	4b0b      	ldr	r3, [pc, #44]	@ (8011168 <tcp_receive+0x5ec>)
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	891a      	ldrh	r2, [r3, #8]
 8011140:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011144:	1ad3      	subs	r3, r2, r3
 8011146:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011148:	e02a      	b.n	80111a0 <tcp_receive+0x624>
 801114a:	bf00      	nop
 801114c:	0801bab8 	.word	0x0801bab8
 8011150:	0801bac0 	.word	0x0801bac0
 8011154:	20014658 	.word	0x20014658
 8011158:	20014654 	.word	0x20014654
 801115c:	20014618 	.word	0x20014618
 8011160:	2001465a 	.word	0x2001465a
 8011164:	20014650 	.word	0x20014650
 8011168:	20014630 	.word	0x20014630
 801116c:	0801b750 	.word	0x0801b750
 8011170:	0801bac8 	.word	0x0801bac8
 8011174:	0801b79c 	.word	0x0801b79c
 8011178:	0801bad8 	.word	0x0801bad8
 801117c:	0801bae8 	.word	0x0801bae8
        off -= p->len;
 8011180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011182:	895b      	ldrh	r3, [r3, #10]
 8011184:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011188:	1ad3      	subs	r3, r2, r3
 801118a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801118e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011190:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011192:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011196:	2200      	movs	r2, #0
 8011198:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801119a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80111a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111a2:	895b      	ldrh	r3, [r3, #10]
 80111a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d8e9      	bhi.n	8011180 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80111ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80111b0:	4619      	mov	r1, r3
 80111b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80111b4:	f7fc f832 	bl	800d21c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111bc:	4a90      	ldr	r2, [pc, #576]	@ (8011400 <tcp_receive+0x884>)
 80111be:	6013      	str	r3, [r2, #0]
 80111c0:	4b90      	ldr	r3, [pc, #576]	@ (8011404 <tcp_receive+0x888>)
 80111c2:	68db      	ldr	r3, [r3, #12]
 80111c4:	4a8e      	ldr	r2, [pc, #568]	@ (8011400 <tcp_receive+0x884>)
 80111c6:	6812      	ldr	r2, [r2, #0]
 80111c8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80111ca:	e00d      	b.n	80111e8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80111cc:	4b8c      	ldr	r3, [pc, #560]	@ (8011400 <tcp_receive+0x884>)
 80111ce:	681a      	ldr	r2, [r3, #0]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	da06      	bge.n	80111e8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	8b5b      	ldrh	r3, [r3, #26]
 80111de:	f043 0302 	orr.w	r3, r3, #2
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80111e8:	4b85      	ldr	r3, [pc, #532]	@ (8011400 <tcp_receive+0x884>)
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111f0:	1ad3      	subs	r3, r2, r3
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	f2c0 8427 	blt.w	8011a46 <tcp_receive+0xeca>
 80111f8:	4b81      	ldr	r3, [pc, #516]	@ (8011400 <tcp_receive+0x884>)
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011200:	6879      	ldr	r1, [r7, #4]
 8011202:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011204:	440b      	add	r3, r1
 8011206:	1ad3      	subs	r3, r2, r3
 8011208:	3301      	adds	r3, #1
 801120a:	2b00      	cmp	r3, #0
 801120c:	f300 841b 	bgt.w	8011a46 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011214:	4b7a      	ldr	r3, [pc, #488]	@ (8011400 <tcp_receive+0x884>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	429a      	cmp	r2, r3
 801121a:	f040 8298 	bne.w	801174e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801121e:	4b79      	ldr	r3, [pc, #484]	@ (8011404 <tcp_receive+0x888>)
 8011220:	891c      	ldrh	r4, [r3, #8]
 8011222:	4b78      	ldr	r3, [pc, #480]	@ (8011404 <tcp_receive+0x888>)
 8011224:	68db      	ldr	r3, [r3, #12]
 8011226:	899b      	ldrh	r3, [r3, #12]
 8011228:	b29b      	uxth	r3, r3
 801122a:	4618      	mov	r0, r3
 801122c:	f7fa fc9a 	bl	800bb64 <lwip_htons>
 8011230:	4603      	mov	r3, r0
 8011232:	b2db      	uxtb	r3, r3
 8011234:	f003 0303 	and.w	r3, r3, #3
 8011238:	2b00      	cmp	r3, #0
 801123a:	d001      	beq.n	8011240 <tcp_receive+0x6c4>
 801123c:	2301      	movs	r3, #1
 801123e:	e000      	b.n	8011242 <tcp_receive+0x6c6>
 8011240:	2300      	movs	r3, #0
 8011242:	4423      	add	r3, r4
 8011244:	b29a      	uxth	r2, r3
 8011246:	4b70      	ldr	r3, [pc, #448]	@ (8011408 <tcp_receive+0x88c>)
 8011248:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801124e:	4b6e      	ldr	r3, [pc, #440]	@ (8011408 <tcp_receive+0x88c>)
 8011250:	881b      	ldrh	r3, [r3, #0]
 8011252:	429a      	cmp	r2, r3
 8011254:	d274      	bcs.n	8011340 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011256:	4b6b      	ldr	r3, [pc, #428]	@ (8011404 <tcp_receive+0x888>)
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	899b      	ldrh	r3, [r3, #12]
 801125c:	b29b      	uxth	r3, r3
 801125e:	4618      	mov	r0, r3
 8011260:	f7fa fc80 	bl	800bb64 <lwip_htons>
 8011264:	4603      	mov	r3, r0
 8011266:	b2db      	uxtb	r3, r3
 8011268:	f003 0301 	and.w	r3, r3, #1
 801126c:	2b00      	cmp	r3, #0
 801126e:	d01e      	beq.n	80112ae <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011270:	4b64      	ldr	r3, [pc, #400]	@ (8011404 <tcp_receive+0x888>)
 8011272:	68db      	ldr	r3, [r3, #12]
 8011274:	899b      	ldrh	r3, [r3, #12]
 8011276:	b29b      	uxth	r3, r3
 8011278:	b21b      	sxth	r3, r3
 801127a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801127e:	b21c      	sxth	r4, r3
 8011280:	4b60      	ldr	r3, [pc, #384]	@ (8011404 <tcp_receive+0x888>)
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	899b      	ldrh	r3, [r3, #12]
 8011286:	b29b      	uxth	r3, r3
 8011288:	4618      	mov	r0, r3
 801128a:	f7fa fc6b 	bl	800bb64 <lwip_htons>
 801128e:	4603      	mov	r3, r0
 8011290:	b2db      	uxtb	r3, r3
 8011292:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011296:	b29b      	uxth	r3, r3
 8011298:	4618      	mov	r0, r3
 801129a:	f7fa fc63 	bl	800bb64 <lwip_htons>
 801129e:	4603      	mov	r3, r0
 80112a0:	b21b      	sxth	r3, r3
 80112a2:	4323      	orrs	r3, r4
 80112a4:	b21a      	sxth	r2, r3
 80112a6:	4b57      	ldr	r3, [pc, #348]	@ (8011404 <tcp_receive+0x888>)
 80112a8:	68db      	ldr	r3, [r3, #12]
 80112aa:	b292      	uxth	r2, r2
 80112ac:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80112b2:	4b54      	ldr	r3, [pc, #336]	@ (8011404 <tcp_receive+0x888>)
 80112b4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80112b6:	4b53      	ldr	r3, [pc, #332]	@ (8011404 <tcp_receive+0x888>)
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	899b      	ldrh	r3, [r3, #12]
 80112bc:	b29b      	uxth	r3, r3
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fa fc50 	bl	800bb64 <lwip_htons>
 80112c4:	4603      	mov	r3, r0
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	f003 0302 	and.w	r3, r3, #2
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d005      	beq.n	80112dc <tcp_receive+0x760>
            inseg.len -= 1;
 80112d0:	4b4c      	ldr	r3, [pc, #304]	@ (8011404 <tcp_receive+0x888>)
 80112d2:	891b      	ldrh	r3, [r3, #8]
 80112d4:	3b01      	subs	r3, #1
 80112d6:	b29a      	uxth	r2, r3
 80112d8:	4b4a      	ldr	r3, [pc, #296]	@ (8011404 <tcp_receive+0x888>)
 80112da:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80112dc:	4b49      	ldr	r3, [pc, #292]	@ (8011404 <tcp_receive+0x888>)
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	4a48      	ldr	r2, [pc, #288]	@ (8011404 <tcp_receive+0x888>)
 80112e2:	8912      	ldrh	r2, [r2, #8]
 80112e4:	4611      	mov	r1, r2
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fb fe98 	bl	800d01c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80112ec:	4b45      	ldr	r3, [pc, #276]	@ (8011404 <tcp_receive+0x888>)
 80112ee:	891c      	ldrh	r4, [r3, #8]
 80112f0:	4b44      	ldr	r3, [pc, #272]	@ (8011404 <tcp_receive+0x888>)
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	899b      	ldrh	r3, [r3, #12]
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7fa fc33 	bl	800bb64 <lwip_htons>
 80112fe:	4603      	mov	r3, r0
 8011300:	b2db      	uxtb	r3, r3
 8011302:	f003 0303 	and.w	r3, r3, #3
 8011306:	2b00      	cmp	r3, #0
 8011308:	d001      	beq.n	801130e <tcp_receive+0x792>
 801130a:	2301      	movs	r3, #1
 801130c:	e000      	b.n	8011310 <tcp_receive+0x794>
 801130e:	2300      	movs	r3, #0
 8011310:	4423      	add	r3, r4
 8011312:	b29a      	uxth	r2, r3
 8011314:	4b3c      	ldr	r3, [pc, #240]	@ (8011408 <tcp_receive+0x88c>)
 8011316:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011318:	4b3b      	ldr	r3, [pc, #236]	@ (8011408 <tcp_receive+0x88c>)
 801131a:	881b      	ldrh	r3, [r3, #0]
 801131c:	461a      	mov	r2, r3
 801131e:	4b38      	ldr	r3, [pc, #224]	@ (8011400 <tcp_receive+0x884>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	441a      	add	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011328:	6879      	ldr	r1, [r7, #4]
 801132a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801132c:	440b      	add	r3, r1
 801132e:	429a      	cmp	r2, r3
 8011330:	d006      	beq.n	8011340 <tcp_receive+0x7c4>
 8011332:	4b36      	ldr	r3, [pc, #216]	@ (801140c <tcp_receive+0x890>)
 8011334:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011338:	4935      	ldr	r1, [pc, #212]	@ (8011410 <tcp_receive+0x894>)
 801133a:	4836      	ldr	r0, [pc, #216]	@ (8011414 <tcp_receive+0x898>)
 801133c:	f006 fb32 	bl	80179a4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011344:	2b00      	cmp	r3, #0
 8011346:	f000 80e6 	beq.w	8011516 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801134a:	4b2e      	ldr	r3, [pc, #184]	@ (8011404 <tcp_receive+0x888>)
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	899b      	ldrh	r3, [r3, #12]
 8011350:	b29b      	uxth	r3, r3
 8011352:	4618      	mov	r0, r3
 8011354:	f7fa fc06 	bl	800bb64 <lwip_htons>
 8011358:	4603      	mov	r3, r0
 801135a:	b2db      	uxtb	r3, r3
 801135c:	f003 0301 	and.w	r3, r3, #1
 8011360:	2b00      	cmp	r3, #0
 8011362:	d010      	beq.n	8011386 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011364:	e00a      	b.n	801137c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801136a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8011376:	68f8      	ldr	r0, [r7, #12]
 8011378:	f7fd fca7 	bl	800ecca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011380:	2b00      	cmp	r3, #0
 8011382:	d1f0      	bne.n	8011366 <tcp_receive+0x7ea>
 8011384:	e0c7      	b.n	8011516 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801138c:	e051      	b.n	8011432 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801138e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	899b      	ldrh	r3, [r3, #12]
 8011394:	b29b      	uxth	r3, r3
 8011396:	4618      	mov	r0, r3
 8011398:	f7fa fbe4 	bl	800bb64 <lwip_htons>
 801139c:	4603      	mov	r3, r0
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	f003 0301 	and.w	r3, r3, #1
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d03c      	beq.n	8011422 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80113a8:	4b16      	ldr	r3, [pc, #88]	@ (8011404 <tcp_receive+0x888>)
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	899b      	ldrh	r3, [r3, #12]
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7fa fbd7 	bl	800bb64 <lwip_htons>
 80113b6:	4603      	mov	r3, r0
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d12f      	bne.n	8011422 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80113c2:	4b10      	ldr	r3, [pc, #64]	@ (8011404 <tcp_receive+0x888>)
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	899b      	ldrh	r3, [r3, #12]
 80113c8:	b29c      	uxth	r4, r3
 80113ca:	2001      	movs	r0, #1
 80113cc:	f7fa fbca 	bl	800bb64 <lwip_htons>
 80113d0:	4603      	mov	r3, r0
 80113d2:	461a      	mov	r2, r3
 80113d4:	4b0b      	ldr	r3, [pc, #44]	@ (8011404 <tcp_receive+0x888>)
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	4322      	orrs	r2, r4
 80113da:	b292      	uxth	r2, r2
 80113dc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80113de:	4b09      	ldr	r3, [pc, #36]	@ (8011404 <tcp_receive+0x888>)
 80113e0:	891c      	ldrh	r4, [r3, #8]
 80113e2:	4b08      	ldr	r3, [pc, #32]	@ (8011404 <tcp_receive+0x888>)
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	899b      	ldrh	r3, [r3, #12]
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fa fbba 	bl	800bb64 <lwip_htons>
 80113f0:	4603      	mov	r3, r0
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	f003 0303 	and.w	r3, r3, #3
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d00d      	beq.n	8011418 <tcp_receive+0x89c>
 80113fc:	2301      	movs	r3, #1
 80113fe:	e00c      	b.n	801141a <tcp_receive+0x89e>
 8011400:	20014650 	.word	0x20014650
 8011404:	20014630 	.word	0x20014630
 8011408:	2001465a 	.word	0x2001465a
 801140c:	0801b750 	.word	0x0801b750
 8011410:	0801baf8 	.word	0x0801baf8
 8011414:	0801b79c 	.word	0x0801b79c
 8011418:	2300      	movs	r3, #0
 801141a:	4423      	add	r3, r4
 801141c:	b29a      	uxth	r2, r3
 801141e:	4b98      	ldr	r3, [pc, #608]	@ (8011680 <tcp_receive+0xb04>)
 8011420:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011424:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801142c:	6938      	ldr	r0, [r7, #16]
 801142e:	f7fd fc4c 	bl	800ecca <tcp_seg_free>
            while (next &&
 8011432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011434:	2b00      	cmp	r3, #0
 8011436:	d00e      	beq.n	8011456 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011438:	4b91      	ldr	r3, [pc, #580]	@ (8011680 <tcp_receive+0xb04>)
 801143a:	881b      	ldrh	r3, [r3, #0]
 801143c:	461a      	mov	r2, r3
 801143e:	4b91      	ldr	r3, [pc, #580]	@ (8011684 <tcp_receive+0xb08>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	441a      	add	r2, r3
 8011444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011446:	68db      	ldr	r3, [r3, #12]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801144c:	8909      	ldrh	r1, [r1, #8]
 801144e:	440b      	add	r3, r1
 8011450:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011452:	2b00      	cmp	r3, #0
 8011454:	da9b      	bge.n	801138e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011458:	2b00      	cmp	r3, #0
 801145a:	d059      	beq.n	8011510 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801145c:	4b88      	ldr	r3, [pc, #544]	@ (8011680 <tcp_receive+0xb04>)
 801145e:	881b      	ldrh	r3, [r3, #0]
 8011460:	461a      	mov	r2, r3
 8011462:	4b88      	ldr	r3, [pc, #544]	@ (8011684 <tcp_receive+0xb08>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	441a      	add	r2, r3
 8011468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011470:	2b00      	cmp	r3, #0
 8011472:	dd4d      	ble.n	8011510 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	b29a      	uxth	r2, r3
 801147c:	4b81      	ldr	r3, [pc, #516]	@ (8011684 <tcp_receive+0xb08>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	b29b      	uxth	r3, r3
 8011482:	1ad3      	subs	r3, r2, r3
 8011484:	b29a      	uxth	r2, r3
 8011486:	4b80      	ldr	r3, [pc, #512]	@ (8011688 <tcp_receive+0xb0c>)
 8011488:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801148a:	4b7f      	ldr	r3, [pc, #508]	@ (8011688 <tcp_receive+0xb0c>)
 801148c:	68db      	ldr	r3, [r3, #12]
 801148e:	899b      	ldrh	r3, [r3, #12]
 8011490:	b29b      	uxth	r3, r3
 8011492:	4618      	mov	r0, r3
 8011494:	f7fa fb66 	bl	800bb64 <lwip_htons>
 8011498:	4603      	mov	r3, r0
 801149a:	b2db      	uxtb	r3, r3
 801149c:	f003 0302 	and.w	r3, r3, #2
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d005      	beq.n	80114b0 <tcp_receive+0x934>
                inseg.len -= 1;
 80114a4:	4b78      	ldr	r3, [pc, #480]	@ (8011688 <tcp_receive+0xb0c>)
 80114a6:	891b      	ldrh	r3, [r3, #8]
 80114a8:	3b01      	subs	r3, #1
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	4b76      	ldr	r3, [pc, #472]	@ (8011688 <tcp_receive+0xb0c>)
 80114ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80114b0:	4b75      	ldr	r3, [pc, #468]	@ (8011688 <tcp_receive+0xb0c>)
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	4a74      	ldr	r2, [pc, #464]	@ (8011688 <tcp_receive+0xb0c>)
 80114b6:	8912      	ldrh	r2, [r2, #8]
 80114b8:	4611      	mov	r1, r2
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fb fdae 	bl	800d01c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80114c0:	4b71      	ldr	r3, [pc, #452]	@ (8011688 <tcp_receive+0xb0c>)
 80114c2:	891c      	ldrh	r4, [r3, #8]
 80114c4:	4b70      	ldr	r3, [pc, #448]	@ (8011688 <tcp_receive+0xb0c>)
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	899b      	ldrh	r3, [r3, #12]
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fa fb49 	bl	800bb64 <lwip_htons>
 80114d2:	4603      	mov	r3, r0
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	f003 0303 	and.w	r3, r3, #3
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d001      	beq.n	80114e2 <tcp_receive+0x966>
 80114de:	2301      	movs	r3, #1
 80114e0:	e000      	b.n	80114e4 <tcp_receive+0x968>
 80114e2:	2300      	movs	r3, #0
 80114e4:	4423      	add	r3, r4
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	4b65      	ldr	r3, [pc, #404]	@ (8011680 <tcp_receive+0xb04>)
 80114ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80114ec:	4b64      	ldr	r3, [pc, #400]	@ (8011680 <tcp_receive+0xb04>)
 80114ee:	881b      	ldrh	r3, [r3, #0]
 80114f0:	461a      	mov	r2, r3
 80114f2:	4b64      	ldr	r3, [pc, #400]	@ (8011684 <tcp_receive+0xb08>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	441a      	add	r2, r3
 80114f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d006      	beq.n	8011510 <tcp_receive+0x994>
 8011502:	4b62      	ldr	r3, [pc, #392]	@ (801168c <tcp_receive+0xb10>)
 8011504:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011508:	4961      	ldr	r1, [pc, #388]	@ (8011690 <tcp_receive+0xb14>)
 801150a:	4862      	ldr	r0, [pc, #392]	@ (8011694 <tcp_receive+0xb18>)
 801150c:	f006 fa4a 	bl	80179a4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011514:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011516:	4b5a      	ldr	r3, [pc, #360]	@ (8011680 <tcp_receive+0xb04>)
 8011518:	881b      	ldrh	r3, [r3, #0]
 801151a:	461a      	mov	r2, r3
 801151c:	4b59      	ldr	r3, [pc, #356]	@ (8011684 <tcp_receive+0xb08>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	441a      	add	r2, r3
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801152a:	4b55      	ldr	r3, [pc, #340]	@ (8011680 <tcp_receive+0xb04>)
 801152c:	881b      	ldrh	r3, [r3, #0]
 801152e:	429a      	cmp	r2, r3
 8011530:	d206      	bcs.n	8011540 <tcp_receive+0x9c4>
 8011532:	4b56      	ldr	r3, [pc, #344]	@ (801168c <tcp_receive+0xb10>)
 8011534:	f240 6207 	movw	r2, #1543	@ 0x607
 8011538:	4957      	ldr	r1, [pc, #348]	@ (8011698 <tcp_receive+0xb1c>)
 801153a:	4856      	ldr	r0, [pc, #344]	@ (8011694 <tcp_receive+0xb18>)
 801153c:	f006 fa32 	bl	80179a4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011544:	4b4e      	ldr	r3, [pc, #312]	@ (8011680 <tcp_receive+0xb04>)
 8011546:	881b      	ldrh	r3, [r3, #0]
 8011548:	1ad3      	subs	r3, r2, r3
 801154a:	b29a      	uxth	r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7fc fe93 	bl	800e27c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011556:	4b4c      	ldr	r3, [pc, #304]	@ (8011688 <tcp_receive+0xb0c>)
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	891b      	ldrh	r3, [r3, #8]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d006      	beq.n	801156e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011560:	4b49      	ldr	r3, [pc, #292]	@ (8011688 <tcp_receive+0xb0c>)
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	4a4d      	ldr	r2, [pc, #308]	@ (801169c <tcp_receive+0xb20>)
 8011566:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011568:	4b47      	ldr	r3, [pc, #284]	@ (8011688 <tcp_receive+0xb0c>)
 801156a:	2200      	movs	r2, #0
 801156c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801156e:	4b46      	ldr	r3, [pc, #280]	@ (8011688 <tcp_receive+0xb0c>)
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	899b      	ldrh	r3, [r3, #12]
 8011574:	b29b      	uxth	r3, r3
 8011576:	4618      	mov	r0, r3
 8011578:	f7fa faf4 	bl	800bb64 <lwip_htons>
 801157c:	4603      	mov	r3, r0
 801157e:	b2db      	uxtb	r3, r3
 8011580:	f003 0301 	and.w	r3, r3, #1
 8011584:	2b00      	cmp	r3, #0
 8011586:	f000 80b8 	beq.w	80116fa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801158a:	4b45      	ldr	r3, [pc, #276]	@ (80116a0 <tcp_receive+0xb24>)
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	f043 0320 	orr.w	r3, r3, #32
 8011592:	b2da      	uxtb	r2, r3
 8011594:	4b42      	ldr	r3, [pc, #264]	@ (80116a0 <tcp_receive+0xb24>)
 8011596:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011598:	e0af      	b.n	80116fa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801159e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	4a36      	ldr	r2, [pc, #216]	@ (8011684 <tcp_receive+0xb08>)
 80115aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	891b      	ldrh	r3, [r3, #8]
 80115b0:	461c      	mov	r4, r3
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	68db      	ldr	r3, [r3, #12]
 80115b6:	899b      	ldrh	r3, [r3, #12]
 80115b8:	b29b      	uxth	r3, r3
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fa fad2 	bl	800bb64 <lwip_htons>
 80115c0:	4603      	mov	r3, r0
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	f003 0303 	and.w	r3, r3, #3
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d001      	beq.n	80115d0 <tcp_receive+0xa54>
 80115cc:	2301      	movs	r3, #1
 80115ce:	e000      	b.n	80115d2 <tcp_receive+0xa56>
 80115d0:	2300      	movs	r3, #0
 80115d2:	191a      	adds	r2, r3, r4
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d8:	441a      	add	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115e2:	461c      	mov	r4, r3
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	891b      	ldrh	r3, [r3, #8]
 80115e8:	461d      	mov	r5, r3
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	68db      	ldr	r3, [r3, #12]
 80115ee:	899b      	ldrh	r3, [r3, #12]
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7fa fab6 	bl	800bb64 <lwip_htons>
 80115f8:	4603      	mov	r3, r0
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	f003 0303 	and.w	r3, r3, #3
 8011600:	2b00      	cmp	r3, #0
 8011602:	d001      	beq.n	8011608 <tcp_receive+0xa8c>
 8011604:	2301      	movs	r3, #1
 8011606:	e000      	b.n	801160a <tcp_receive+0xa8e>
 8011608:	2300      	movs	r3, #0
 801160a:	442b      	add	r3, r5
 801160c:	429c      	cmp	r4, r3
 801160e:	d206      	bcs.n	801161e <tcp_receive+0xaa2>
 8011610:	4b1e      	ldr	r3, [pc, #120]	@ (801168c <tcp_receive+0xb10>)
 8011612:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011616:	4923      	ldr	r1, [pc, #140]	@ (80116a4 <tcp_receive+0xb28>)
 8011618:	481e      	ldr	r0, [pc, #120]	@ (8011694 <tcp_receive+0xb18>)
 801161a:	f006 f9c3 	bl	80179a4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	891b      	ldrh	r3, [r3, #8]
 8011622:	461c      	mov	r4, r3
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	68db      	ldr	r3, [r3, #12]
 8011628:	899b      	ldrh	r3, [r3, #12]
 801162a:	b29b      	uxth	r3, r3
 801162c:	4618      	mov	r0, r3
 801162e:	f7fa fa99 	bl	800bb64 <lwip_htons>
 8011632:	4603      	mov	r3, r0
 8011634:	b2db      	uxtb	r3, r3
 8011636:	f003 0303 	and.w	r3, r3, #3
 801163a:	2b00      	cmp	r3, #0
 801163c:	d001      	beq.n	8011642 <tcp_receive+0xac6>
 801163e:	2301      	movs	r3, #1
 8011640:	e000      	b.n	8011644 <tcp_receive+0xac8>
 8011642:	2300      	movs	r3, #0
 8011644:	1919      	adds	r1, r3, r4
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801164a:	b28b      	uxth	r3, r1
 801164c:	1ad3      	subs	r3, r2, r3
 801164e:	b29a      	uxth	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f7fc fe11 	bl	800e27c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	891b      	ldrh	r3, [r3, #8]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d028      	beq.n	80116b6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011664:	4b0d      	ldr	r3, [pc, #52]	@ (801169c <tcp_receive+0xb20>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d01d      	beq.n	80116a8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801166c:	4b0b      	ldr	r3, [pc, #44]	@ (801169c <tcp_receive+0xb20>)
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	4619      	mov	r1, r3
 8011676:	4610      	mov	r0, r2
 8011678:	f7fb ff18 	bl	800d4ac <pbuf_cat>
 801167c:	e018      	b.n	80116b0 <tcp_receive+0xb34>
 801167e:	bf00      	nop
 8011680:	2001465a 	.word	0x2001465a
 8011684:	20014650 	.word	0x20014650
 8011688:	20014630 	.word	0x20014630
 801168c:	0801b750 	.word	0x0801b750
 8011690:	0801bb30 	.word	0x0801bb30
 8011694:	0801b79c 	.word	0x0801b79c
 8011698:	0801bb6c 	.word	0x0801bb6c
 801169c:	20014660 	.word	0x20014660
 80116a0:	2001465d 	.word	0x2001465d
 80116a4:	0801bb8c 	.word	0x0801bb8c
            } else {
              recv_data = cseg->p;
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	4a70      	ldr	r2, [pc, #448]	@ (8011870 <tcp_receive+0xcf4>)
 80116ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	2200      	movs	r2, #0
 80116b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	68db      	ldr	r3, [r3, #12]
 80116ba:	899b      	ldrh	r3, [r3, #12]
 80116bc:	b29b      	uxth	r3, r3
 80116be:	4618      	mov	r0, r3
 80116c0:	f7fa fa50 	bl	800bb64 <lwip_htons>
 80116c4:	4603      	mov	r3, r0
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	f003 0301 	and.w	r3, r3, #1
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d00d      	beq.n	80116ec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80116d0:	4b68      	ldr	r3, [pc, #416]	@ (8011874 <tcp_receive+0xcf8>)
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	f043 0320 	orr.w	r3, r3, #32
 80116d8:	b2da      	uxtb	r2, r3
 80116da:	4b66      	ldr	r3, [pc, #408]	@ (8011874 <tcp_receive+0xcf8>)
 80116dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	7d1b      	ldrb	r3, [r3, #20]
 80116e2:	2b04      	cmp	r3, #4
 80116e4:	d102      	bne.n	80116ec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2207      	movs	r2, #7
 80116ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80116f4:	68b8      	ldr	r0, [r7, #8]
 80116f6:	f7fd fae8 	bl	800ecca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d008      	beq.n	8011714 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	685a      	ldr	r2, [r3, #4]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801170e:	429a      	cmp	r2, r3
 8011710:	f43f af43 	beq.w	801159a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	8b5b      	ldrh	r3, [r3, #26]
 8011718:	f003 0301 	and.w	r3, r3, #1
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00e      	beq.n	801173e <tcp_receive+0xbc2>
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	8b5b      	ldrh	r3, [r3, #26]
 8011724:	f023 0301 	bic.w	r3, r3, #1
 8011728:	b29a      	uxth	r2, r3
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	835a      	strh	r2, [r3, #26]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	8b5b      	ldrh	r3, [r3, #26]
 8011732:	f043 0302 	orr.w	r3, r3, #2
 8011736:	b29a      	uxth	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801173c:	e187      	b.n	8011a4e <tcp_receive+0xed2>
        tcp_ack(pcb);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	8b5b      	ldrh	r3, [r3, #26]
 8011742:	f043 0301 	orr.w	r3, r3, #1
 8011746:	b29a      	uxth	r2, r3
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801174c:	e17f      	b.n	8011a4e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011752:	2b00      	cmp	r3, #0
 8011754:	d106      	bne.n	8011764 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011756:	4848      	ldr	r0, [pc, #288]	@ (8011878 <tcp_receive+0xcfc>)
 8011758:	f7fd faee 	bl	800ed38 <tcp_seg_copy>
 801175c:	4602      	mov	r2, r0
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	675a      	str	r2, [r3, #116]	@ 0x74
 8011762:	e16c      	b.n	8011a3e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011764:	2300      	movs	r3, #0
 8011766:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801176c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801176e:	e156      	b.n	8011a1e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	685a      	ldr	r2, [r3, #4]
 8011776:	4b41      	ldr	r3, [pc, #260]	@ (801187c <tcp_receive+0xd00>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	429a      	cmp	r2, r3
 801177c:	d11d      	bne.n	80117ba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801177e:	4b3e      	ldr	r3, [pc, #248]	@ (8011878 <tcp_receive+0xcfc>)
 8011780:	891a      	ldrh	r2, [r3, #8]
 8011782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011784:	891b      	ldrh	r3, [r3, #8]
 8011786:	429a      	cmp	r2, r3
 8011788:	f240 814e 	bls.w	8011a28 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801178c:	483a      	ldr	r0, [pc, #232]	@ (8011878 <tcp_receive+0xcfc>)
 801178e:	f7fd fad3 	bl	800ed38 <tcp_seg_copy>
 8011792:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	2b00      	cmp	r3, #0
 8011798:	f000 8148 	beq.w	8011a2c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801179c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d003      	beq.n	80117aa <tcp_receive+0xc2e>
                    prev->next = cseg;
 80117a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117a4:	697a      	ldr	r2, [r7, #20]
 80117a6:	601a      	str	r2, [r3, #0]
 80117a8:	e002      	b.n	80117b0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	697a      	ldr	r2, [r7, #20]
 80117ae:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80117b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80117b2:	6978      	ldr	r0, [r7, #20]
 80117b4:	f7ff f8de 	bl	8010974 <tcp_oos_insert_segment>
                }
                break;
 80117b8:	e138      	b.n	8011a2c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80117ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d117      	bne.n	80117f0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80117c0:	4b2e      	ldr	r3, [pc, #184]	@ (801187c <tcp_receive+0xd00>)
 80117c2:	681a      	ldr	r2, [r3, #0]
 80117c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	1ad3      	subs	r3, r2, r3
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	da57      	bge.n	8011880 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80117d0:	4829      	ldr	r0, [pc, #164]	@ (8011878 <tcp_receive+0xcfc>)
 80117d2:	f7fd fab1 	bl	800ed38 <tcp_seg_copy>
 80117d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80117d8:	69bb      	ldr	r3, [r7, #24]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	f000 8128 	beq.w	8011a30 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	69ba      	ldr	r2, [r7, #24]
 80117e4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80117e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80117e8:	69b8      	ldr	r0, [r7, #24]
 80117ea:	f7ff f8c3 	bl	8010974 <tcp_oos_insert_segment>
                  }
                  break;
 80117ee:	e11f      	b.n	8011a30 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80117f0:	4b22      	ldr	r3, [pc, #136]	@ (801187c <tcp_receive+0xd00>)
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117f6:	68db      	ldr	r3, [r3, #12]
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	1ad3      	subs	r3, r2, r3
 80117fc:	3b01      	subs	r3, #1
 80117fe:	2b00      	cmp	r3, #0
 8011800:	db3e      	blt.n	8011880 <tcp_receive+0xd04>
 8011802:	4b1e      	ldr	r3, [pc, #120]	@ (801187c <tcp_receive+0xd00>)
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	1ad3      	subs	r3, r2, r3
 801180e:	3301      	adds	r3, #1
 8011810:	2b00      	cmp	r3, #0
 8011812:	dc35      	bgt.n	8011880 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011814:	4818      	ldr	r0, [pc, #96]	@ (8011878 <tcp_receive+0xcfc>)
 8011816:	f7fd fa8f 	bl	800ed38 <tcp_seg_copy>
 801181a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	2b00      	cmp	r3, #0
 8011820:	f000 8108 	beq.w	8011a34 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801182c:	8912      	ldrh	r2, [r2, #8]
 801182e:	441a      	add	r2, r3
 8011830:	4b12      	ldr	r3, [pc, #72]	@ (801187c <tcp_receive+0xd00>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	2b00      	cmp	r3, #0
 8011838:	dd12      	ble.n	8011860 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801183a:	4b10      	ldr	r3, [pc, #64]	@ (801187c <tcp_receive+0xd00>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	b29a      	uxth	r2, r3
 8011840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	b29b      	uxth	r3, r3
 8011848:	1ad3      	subs	r3, r2, r3
 801184a:	b29a      	uxth	r2, r3
 801184c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801184e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011852:	685a      	ldr	r2, [r3, #4]
 8011854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011856:	891b      	ldrh	r3, [r3, #8]
 8011858:	4619      	mov	r1, r3
 801185a:	4610      	mov	r0, r2
 801185c:	f7fb fbde 	bl	800d01c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011862:	69fa      	ldr	r2, [r7, #28]
 8011864:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011866:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011868:	69f8      	ldr	r0, [r7, #28]
 801186a:	f7ff f883 	bl	8010974 <tcp_oos_insert_segment>
                  }
                  break;
 801186e:	e0e1      	b.n	8011a34 <tcp_receive+0xeb8>
 8011870:	20014660 	.word	0x20014660
 8011874:	2001465d 	.word	0x2001465d
 8011878:	20014630 	.word	0x20014630
 801187c:	20014650 	.word	0x20014650
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011882:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	f040 80c5 	bne.w	8011a18 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801188e:	4b7f      	ldr	r3, [pc, #508]	@ (8011a8c <tcp_receive+0xf10>)
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011894:	68db      	ldr	r3, [r3, #12]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801189a:	2b00      	cmp	r3, #0
 801189c:	f340 80bc 	ble.w	8011a18 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80118a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	899b      	ldrh	r3, [r3, #12]
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fa f95b 	bl	800bb64 <lwip_htons>
 80118ae:	4603      	mov	r3, r0
 80118b0:	b2db      	uxtb	r3, r3
 80118b2:	f003 0301 	and.w	r3, r3, #1
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	f040 80be 	bne.w	8011a38 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80118bc:	4874      	ldr	r0, [pc, #464]	@ (8011a90 <tcp_receive+0xf14>)
 80118be:	f7fd fa3b 	bl	800ed38 <tcp_seg_copy>
 80118c2:	4602      	mov	r2, r0
 80118c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80118c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	f000 80b5 	beq.w	8011a3c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80118d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d4:	68db      	ldr	r3, [r3, #12]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80118da:	8912      	ldrh	r2, [r2, #8]
 80118dc:	441a      	add	r2, r3
 80118de:	4b6b      	ldr	r3, [pc, #428]	@ (8011a8c <tcp_receive+0xf10>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	dd12      	ble.n	801190e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80118e8:	4b68      	ldr	r3, [pc, #416]	@ (8011a8c <tcp_receive+0xf10>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f0:	68db      	ldr	r3, [r3, #12]
 80118f2:	685b      	ldr	r3, [r3, #4]
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	1ad3      	subs	r3, r2, r3
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80118fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011900:	685a      	ldr	r2, [r3, #4]
 8011902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011904:	891b      	ldrh	r3, [r3, #8]
 8011906:	4619      	mov	r1, r3
 8011908:	4610      	mov	r0, r2
 801190a:	f7fb fb87 	bl	800d01c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801190e:	4b61      	ldr	r3, [pc, #388]	@ (8011a94 <tcp_receive+0xf18>)
 8011910:	881b      	ldrh	r3, [r3, #0]
 8011912:	461a      	mov	r2, r3
 8011914:	4b5d      	ldr	r3, [pc, #372]	@ (8011a8c <tcp_receive+0xf10>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	441a      	add	r2, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801191e:	6879      	ldr	r1, [r7, #4]
 8011920:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011922:	440b      	add	r3, r1
 8011924:	1ad3      	subs	r3, r2, r3
 8011926:	2b00      	cmp	r3, #0
 8011928:	f340 8088 	ble.w	8011a3c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801192c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	899b      	ldrh	r3, [r3, #12]
 8011934:	b29b      	uxth	r3, r3
 8011936:	4618      	mov	r0, r3
 8011938:	f7fa f914 	bl	800bb64 <lwip_htons>
 801193c:	4603      	mov	r3, r0
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f003 0301 	and.w	r3, r3, #1
 8011944:	2b00      	cmp	r3, #0
 8011946:	d021      	beq.n	801198c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	68db      	ldr	r3, [r3, #12]
 801194e:	899b      	ldrh	r3, [r3, #12]
 8011950:	b29b      	uxth	r3, r3
 8011952:	b21b      	sxth	r3, r3
 8011954:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011958:	b21c      	sxth	r4, r3
 801195a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	899b      	ldrh	r3, [r3, #12]
 8011962:	b29b      	uxth	r3, r3
 8011964:	4618      	mov	r0, r3
 8011966:	f7fa f8fd 	bl	800bb64 <lwip_htons>
 801196a:	4603      	mov	r3, r0
 801196c:	b2db      	uxtb	r3, r3
 801196e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011972:	b29b      	uxth	r3, r3
 8011974:	4618      	mov	r0, r3
 8011976:	f7fa f8f5 	bl	800bb64 <lwip_htons>
 801197a:	4603      	mov	r3, r0
 801197c:	b21b      	sxth	r3, r3
 801197e:	4323      	orrs	r3, r4
 8011980:	b21a      	sxth	r2, r3
 8011982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	68db      	ldr	r3, [r3, #12]
 8011988:	b292      	uxth	r2, r2
 801198a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011990:	b29a      	uxth	r2, r3
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011996:	4413      	add	r3, r2
 8011998:	b299      	uxth	r1, r3
 801199a:	4b3c      	ldr	r3, [pc, #240]	@ (8011a8c <tcp_receive+0xf10>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	b29a      	uxth	r2, r3
 80119a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	1a8a      	subs	r2, r1, r2
 80119a6:	b292      	uxth	r2, r2
 80119a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80119aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	685a      	ldr	r2, [r3, #4]
 80119b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	891b      	ldrh	r3, [r3, #8]
 80119b6:	4619      	mov	r1, r3
 80119b8:	4610      	mov	r0, r2
 80119ba:	f7fb fb2f 	bl	800d01c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80119be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	891c      	ldrh	r4, [r3, #8]
 80119c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	899b      	ldrh	r3, [r3, #12]
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fa f8c8 	bl	800bb64 <lwip_htons>
 80119d4:	4603      	mov	r3, r0
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	f003 0303 	and.w	r3, r3, #3
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d001      	beq.n	80119e4 <tcp_receive+0xe68>
 80119e0:	2301      	movs	r3, #1
 80119e2:	e000      	b.n	80119e6 <tcp_receive+0xe6a>
 80119e4:	2300      	movs	r3, #0
 80119e6:	4423      	add	r3, r4
 80119e8:	b29a      	uxth	r2, r3
 80119ea:	4b2a      	ldr	r3, [pc, #168]	@ (8011a94 <tcp_receive+0xf18>)
 80119ec:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80119ee:	4b29      	ldr	r3, [pc, #164]	@ (8011a94 <tcp_receive+0xf18>)
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	461a      	mov	r2, r3
 80119f4:	4b25      	ldr	r3, [pc, #148]	@ (8011a8c <tcp_receive+0xf10>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	441a      	add	r2, r3
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119fe:	6879      	ldr	r1, [r7, #4]
 8011a00:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011a02:	440b      	add	r3, r1
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d019      	beq.n	8011a3c <tcp_receive+0xec0>
 8011a08:	4b23      	ldr	r3, [pc, #140]	@ (8011a98 <tcp_receive+0xf1c>)
 8011a0a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011a0e:	4923      	ldr	r1, [pc, #140]	@ (8011a9c <tcp_receive+0xf20>)
 8011a10:	4823      	ldr	r0, [pc, #140]	@ (8011aa0 <tcp_receive+0xf24>)
 8011a12:	f005 ffc7 	bl	80179a4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011a16:	e011      	b.n	8011a3c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	f47f aea5 	bne.w	8011770 <tcp_receive+0xbf4>
 8011a26:	e00a      	b.n	8011a3e <tcp_receive+0xec2>
                break;
 8011a28:	bf00      	nop
 8011a2a:	e008      	b.n	8011a3e <tcp_receive+0xec2>
                break;
 8011a2c:	bf00      	nop
 8011a2e:	e006      	b.n	8011a3e <tcp_receive+0xec2>
                  break;
 8011a30:	bf00      	nop
 8011a32:	e004      	b.n	8011a3e <tcp_receive+0xec2>
                  break;
 8011a34:	bf00      	nop
 8011a36:	e002      	b.n	8011a3e <tcp_receive+0xec2>
                  break;
 8011a38:	bf00      	nop
 8011a3a:	e000      	b.n	8011a3e <tcp_receive+0xec2>
                break;
 8011a3c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f001 fe88 	bl	8013754 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011a44:	e003      	b.n	8011a4e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f001 fe84 	bl	8013754 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011a4c:	e01a      	b.n	8011a84 <tcp_receive+0xf08>
 8011a4e:	e019      	b.n	8011a84 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011a50:	4b0e      	ldr	r3, [pc, #56]	@ (8011a8c <tcp_receive+0xf10>)
 8011a52:	681a      	ldr	r2, [r3, #0]
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a58:	1ad3      	subs	r3, r2, r3
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	db0a      	blt.n	8011a74 <tcp_receive+0xef8>
 8011a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8011a8c <tcp_receive+0xf10>)
 8011a60:	681a      	ldr	r2, [r3, #0]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a66:	6879      	ldr	r1, [r7, #4]
 8011a68:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011a6a:	440b      	add	r3, r1
 8011a6c:	1ad3      	subs	r3, r2, r3
 8011a6e:	3301      	adds	r3, #1
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	dd07      	ble.n	8011a84 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	8b5b      	ldrh	r3, [r3, #26]
 8011a78:	f043 0302 	orr.w	r3, r3, #2
 8011a7c:	b29a      	uxth	r2, r3
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011a82:	e7ff      	b.n	8011a84 <tcp_receive+0xf08>
 8011a84:	bf00      	nop
 8011a86:	3750      	adds	r7, #80	@ 0x50
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8011a8c:	20014650 	.word	0x20014650
 8011a90:	20014630 	.word	0x20014630
 8011a94:	2001465a 	.word	0x2001465a
 8011a98:	0801b750 	.word	0x0801b750
 8011a9c:	0801baf8 	.word	0x0801baf8
 8011aa0:	0801b79c 	.word	0x0801b79c

08011aa4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b083      	sub	sp, #12
 8011aa8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011aaa:	4b15      	ldr	r3, [pc, #84]	@ (8011b00 <tcp_get_next_optbyte+0x5c>)
 8011aac:	881b      	ldrh	r3, [r3, #0]
 8011aae:	1c5a      	adds	r2, r3, #1
 8011ab0:	b291      	uxth	r1, r2
 8011ab2:	4a13      	ldr	r2, [pc, #76]	@ (8011b00 <tcp_get_next_optbyte+0x5c>)
 8011ab4:	8011      	strh	r1, [r2, #0]
 8011ab6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011ab8:	4b12      	ldr	r3, [pc, #72]	@ (8011b04 <tcp_get_next_optbyte+0x60>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d004      	beq.n	8011aca <tcp_get_next_optbyte+0x26>
 8011ac0:	4b11      	ldr	r3, [pc, #68]	@ (8011b08 <tcp_get_next_optbyte+0x64>)
 8011ac2:	881b      	ldrh	r3, [r3, #0]
 8011ac4:	88fa      	ldrh	r2, [r7, #6]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d208      	bcs.n	8011adc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011aca:	4b10      	ldr	r3, [pc, #64]	@ (8011b0c <tcp_get_next_optbyte+0x68>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	3314      	adds	r3, #20
 8011ad0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011ad2:	88fb      	ldrh	r3, [r7, #6]
 8011ad4:	683a      	ldr	r2, [r7, #0]
 8011ad6:	4413      	add	r3, r2
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	e00b      	b.n	8011af4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011adc:	88fb      	ldrh	r3, [r7, #6]
 8011ade:	b2da      	uxtb	r2, r3
 8011ae0:	4b09      	ldr	r3, [pc, #36]	@ (8011b08 <tcp_get_next_optbyte+0x64>)
 8011ae2:	881b      	ldrh	r3, [r3, #0]
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	1ad3      	subs	r3, r2, r3
 8011ae8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011aea:	4b06      	ldr	r3, [pc, #24]	@ (8011b04 <tcp_get_next_optbyte+0x60>)
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	797b      	ldrb	r3, [r7, #5]
 8011af0:	4413      	add	r3, r2
 8011af2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	370c      	adds	r7, #12
 8011af8:	46bd      	mov	sp, r7
 8011afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afe:	4770      	bx	lr
 8011b00:	2001464c 	.word	0x2001464c
 8011b04:	20014648 	.word	0x20014648
 8011b08:	20014646 	.word	0x20014646
 8011b0c:	20014640 	.word	0x20014640

08011b10 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b084      	sub	sp, #16
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d106      	bne.n	8011b2c <tcp_parseopt+0x1c>
 8011b1e:	4b32      	ldr	r3, [pc, #200]	@ (8011be8 <tcp_parseopt+0xd8>)
 8011b20:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011b24:	4931      	ldr	r1, [pc, #196]	@ (8011bec <tcp_parseopt+0xdc>)
 8011b26:	4832      	ldr	r0, [pc, #200]	@ (8011bf0 <tcp_parseopt+0xe0>)
 8011b28:	f005 ff3c 	bl	80179a4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011b2c:	4b31      	ldr	r3, [pc, #196]	@ (8011bf4 <tcp_parseopt+0xe4>)
 8011b2e:	881b      	ldrh	r3, [r3, #0]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d056      	beq.n	8011be2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011b34:	4b30      	ldr	r3, [pc, #192]	@ (8011bf8 <tcp_parseopt+0xe8>)
 8011b36:	2200      	movs	r2, #0
 8011b38:	801a      	strh	r2, [r3, #0]
 8011b3a:	e046      	b.n	8011bca <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011b3c:	f7ff ffb2 	bl	8011aa4 <tcp_get_next_optbyte>
 8011b40:	4603      	mov	r3, r0
 8011b42:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011b44:	7bfb      	ldrb	r3, [r7, #15]
 8011b46:	2b02      	cmp	r3, #2
 8011b48:	d006      	beq.n	8011b58 <tcp_parseopt+0x48>
 8011b4a:	2b02      	cmp	r3, #2
 8011b4c:	dc2a      	bgt.n	8011ba4 <tcp_parseopt+0x94>
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d042      	beq.n	8011bd8 <tcp_parseopt+0xc8>
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d038      	beq.n	8011bc8 <tcp_parseopt+0xb8>
 8011b56:	e025      	b.n	8011ba4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011b58:	f7ff ffa4 	bl	8011aa4 <tcp_get_next_optbyte>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	2b04      	cmp	r3, #4
 8011b60:	d13c      	bne.n	8011bdc <tcp_parseopt+0xcc>
 8011b62:	4b25      	ldr	r3, [pc, #148]	@ (8011bf8 <tcp_parseopt+0xe8>)
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	3301      	adds	r3, #1
 8011b68:	4a22      	ldr	r2, [pc, #136]	@ (8011bf4 <tcp_parseopt+0xe4>)
 8011b6a:	8812      	ldrh	r2, [r2, #0]
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	da35      	bge.n	8011bdc <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011b70:	f7ff ff98 	bl	8011aa4 <tcp_get_next_optbyte>
 8011b74:	4603      	mov	r3, r0
 8011b76:	021b      	lsls	r3, r3, #8
 8011b78:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011b7a:	f7ff ff93 	bl	8011aa4 <tcp_get_next_optbyte>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	461a      	mov	r2, r3
 8011b82:	89bb      	ldrh	r3, [r7, #12]
 8011b84:	4313      	orrs	r3, r2
 8011b86:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011b88:	89bb      	ldrh	r3, [r7, #12]
 8011b8a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011b8e:	d804      	bhi.n	8011b9a <tcp_parseopt+0x8a>
 8011b90:	89bb      	ldrh	r3, [r7, #12]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d001      	beq.n	8011b9a <tcp_parseopt+0x8a>
 8011b96:	89ba      	ldrh	r2, [r7, #12]
 8011b98:	e001      	b.n	8011b9e <tcp_parseopt+0x8e>
 8011b9a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011ba2:	e012      	b.n	8011bca <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011ba4:	f7ff ff7e 	bl	8011aa4 <tcp_get_next_optbyte>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011bac:	7afb      	ldrb	r3, [r7, #11]
 8011bae:	2b01      	cmp	r3, #1
 8011bb0:	d916      	bls.n	8011be0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011bb2:	7afb      	ldrb	r3, [r7, #11]
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	4b10      	ldr	r3, [pc, #64]	@ (8011bf8 <tcp_parseopt+0xe8>)
 8011bb8:	881b      	ldrh	r3, [r3, #0]
 8011bba:	4413      	add	r3, r2
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	3b02      	subs	r3, #2
 8011bc0:	b29a      	uxth	r2, r3
 8011bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8011bf8 <tcp_parseopt+0xe8>)
 8011bc4:	801a      	strh	r2, [r3, #0]
 8011bc6:	e000      	b.n	8011bca <tcp_parseopt+0xba>
          break;
 8011bc8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011bca:	4b0b      	ldr	r3, [pc, #44]	@ (8011bf8 <tcp_parseopt+0xe8>)
 8011bcc:	881a      	ldrh	r2, [r3, #0]
 8011bce:	4b09      	ldr	r3, [pc, #36]	@ (8011bf4 <tcp_parseopt+0xe4>)
 8011bd0:	881b      	ldrh	r3, [r3, #0]
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d3b2      	bcc.n	8011b3c <tcp_parseopt+0x2c>
 8011bd6:	e004      	b.n	8011be2 <tcp_parseopt+0xd2>
          return;
 8011bd8:	bf00      	nop
 8011bda:	e002      	b.n	8011be2 <tcp_parseopt+0xd2>
            return;
 8011bdc:	bf00      	nop
 8011bde:	e000      	b.n	8011be2 <tcp_parseopt+0xd2>
            return;
 8011be0:	bf00      	nop
      }
    }
  }
}
 8011be2:	3710      	adds	r7, #16
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	0801b750 	.word	0x0801b750
 8011bec:	0801bbb4 	.word	0x0801bbb4
 8011bf0:	0801b79c 	.word	0x0801b79c
 8011bf4:	20014644 	.word	0x20014644
 8011bf8:	2001464c 	.word	0x2001464c

08011bfc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011c00:	4b05      	ldr	r3, [pc, #20]	@ (8011c18 <tcp_trigger_input_pcb_close+0x1c>)
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	f043 0310 	orr.w	r3, r3, #16
 8011c08:	b2da      	uxtb	r2, r3
 8011c0a:	4b03      	ldr	r3, [pc, #12]	@ (8011c18 <tcp_trigger_input_pcb_close+0x1c>)
 8011c0c:	701a      	strb	r2, [r3, #0]
}
 8011c0e:	bf00      	nop
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr
 8011c18:	2001465d 	.word	0x2001465d

08011c1c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b084      	sub	sp, #16
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	60b9      	str	r1, [r7, #8]
 8011c26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d00a      	beq.n	8011c44 <tcp_route+0x28>
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	7a1b      	ldrb	r3, [r3, #8]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d006      	beq.n	8011c44 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	7a1b      	ldrb	r3, [r3, #8]
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7fb f814 	bl	800cc68 <netif_get_by_index>
 8011c40:	4603      	mov	r3, r0
 8011c42:	e003      	b.n	8011c4c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f003 fe23 	bl	8015890 <ip4_route>
 8011c4a:	4603      	mov	r3, r0
  }
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3710      	adds	r7, #16
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011c54:	b590      	push	{r4, r7, lr}
 8011c56:	b087      	sub	sp, #28
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	60f8      	str	r0, [r7, #12]
 8011c5c:	60b9      	str	r1, [r7, #8]
 8011c5e:	603b      	str	r3, [r7, #0]
 8011c60:	4613      	mov	r3, r2
 8011c62:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d105      	bne.n	8011c76 <tcp_create_segment+0x22>
 8011c6a:	4b43      	ldr	r3, [pc, #268]	@ (8011d78 <tcp_create_segment+0x124>)
 8011c6c:	22a3      	movs	r2, #163	@ 0xa3
 8011c6e:	4943      	ldr	r1, [pc, #268]	@ (8011d7c <tcp_create_segment+0x128>)
 8011c70:	4843      	ldr	r0, [pc, #268]	@ (8011d80 <tcp_create_segment+0x12c>)
 8011c72:	f005 fe97 	bl	80179a4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d105      	bne.n	8011c88 <tcp_create_segment+0x34>
 8011c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8011d78 <tcp_create_segment+0x124>)
 8011c7e:	22a4      	movs	r2, #164	@ 0xa4
 8011c80:	4940      	ldr	r1, [pc, #256]	@ (8011d84 <tcp_create_segment+0x130>)
 8011c82:	483f      	ldr	r0, [pc, #252]	@ (8011d80 <tcp_create_segment+0x12c>)
 8011c84:	f005 fe8e 	bl	80179a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	b2db      	uxtb	r3, r3
 8011c90:	f003 0304 	and.w	r3, r3, #4
 8011c94:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011c96:	2003      	movs	r0, #3
 8011c98:	f7fa fc12 	bl	800c4c0 <memp_malloc>
 8011c9c:	6138      	str	r0, [r7, #16]
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d104      	bne.n	8011cae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011ca4:	68b8      	ldr	r0, [r7, #8]
 8011ca6:	f7fb fb3f 	bl	800d328 <pbuf_free>
    return NULL;
 8011caa:	2300      	movs	r3, #0
 8011cac:	e060      	b.n	8011d70 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011cb4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011cbc:	693b      	ldr	r3, [r7, #16]
 8011cbe:	68ba      	ldr	r2, [r7, #8]
 8011cc0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	891a      	ldrh	r2, [r3, #8]
 8011cc6:	7dfb      	ldrb	r3, [r7, #23]
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d205      	bcs.n	8011cda <tcp_create_segment+0x86>
 8011cce:	4b2a      	ldr	r3, [pc, #168]	@ (8011d78 <tcp_create_segment+0x124>)
 8011cd0:	22b0      	movs	r2, #176	@ 0xb0
 8011cd2:	492d      	ldr	r1, [pc, #180]	@ (8011d88 <tcp_create_segment+0x134>)
 8011cd4:	482a      	ldr	r0, [pc, #168]	@ (8011d80 <tcp_create_segment+0x12c>)
 8011cd6:	f005 fe65 	bl	80179a4 <iprintf>
  seg->len = p->tot_len - optlen;
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	891a      	ldrh	r2, [r3, #8]
 8011cde:	7dfb      	ldrb	r3, [r7, #23]
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	1ad3      	subs	r3, r2, r3
 8011ce4:	b29a      	uxth	r2, r3
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011cea:	2114      	movs	r1, #20
 8011cec:	68b8      	ldr	r0, [r7, #8]
 8011cee:	f7fb fa85 	bl	800d1fc <pbuf_add_header>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d004      	beq.n	8011d02 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011cf8:	6938      	ldr	r0, [r7, #16]
 8011cfa:	f7fc ffe6 	bl	800ecca <tcp_seg_free>
    return NULL;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	e036      	b.n	8011d70 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	685a      	ldr	r2, [r3, #4]
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	8ada      	ldrh	r2, [r3, #22]
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	68dc      	ldr	r4, [r3, #12]
 8011d14:	4610      	mov	r0, r2
 8011d16:	f7f9 ff25 	bl	800bb64 <lwip_htons>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	8b1a      	ldrh	r2, [r3, #24]
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	68dc      	ldr	r4, [r3, #12]
 8011d26:	4610      	mov	r0, r2
 8011d28:	f7f9 ff1c 	bl	800bb64 <lwip_htons>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	68dc      	ldr	r4, [r3, #12]
 8011d34:	6838      	ldr	r0, [r7, #0]
 8011d36:	f7f9 ff2a 	bl	800bb8e <lwip_htonl>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011d3e:	7dfb      	ldrb	r3, [r7, #23]
 8011d40:	089b      	lsrs	r3, r3, #2
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	3305      	adds	r3, #5
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	031b      	lsls	r3, r3, #12
 8011d4a:	b29a      	uxth	r2, r3
 8011d4c:	79fb      	ldrb	r3, [r7, #7]
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	4313      	orrs	r3, r2
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	68dc      	ldr	r4, [r3, #12]
 8011d58:	4610      	mov	r0, r2
 8011d5a:	f7f9 ff03 	bl	800bb64 <lwip_htons>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	68db      	ldr	r3, [r3, #12]
 8011d66:	2200      	movs	r2, #0
 8011d68:	749a      	strb	r2, [r3, #18]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	74da      	strb	r2, [r3, #19]
  return seg;
 8011d6e:	693b      	ldr	r3, [r7, #16]
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	371c      	adds	r7, #28
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd90      	pop	{r4, r7, pc}
 8011d78:	0801bbd0 	.word	0x0801bbd0
 8011d7c:	0801bc04 	.word	0x0801bc04
 8011d80:	0801bc24 	.word	0x0801bc24
 8011d84:	0801bc4c 	.word	0x0801bc4c
 8011d88:	0801bc70 	.word	0x0801bc70

08011d8c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b086      	sub	sp, #24
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	607b      	str	r3, [r7, #4]
 8011d94:	4603      	mov	r3, r0
 8011d96:	73fb      	strb	r3, [r7, #15]
 8011d98:	460b      	mov	r3, r1
 8011d9a:	81bb      	strh	r3, [r7, #12]
 8011d9c:	4613      	mov	r3, r2
 8011d9e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011da0:	89bb      	ldrh	r3, [r7, #12]
 8011da2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d105      	bne.n	8011db6 <tcp_pbuf_prealloc+0x2a>
 8011daa:	4b30      	ldr	r3, [pc, #192]	@ (8011e6c <tcp_pbuf_prealloc+0xe0>)
 8011dac:	22e8      	movs	r2, #232	@ 0xe8
 8011dae:	4930      	ldr	r1, [pc, #192]	@ (8011e70 <tcp_pbuf_prealloc+0xe4>)
 8011db0:	4830      	ldr	r0, [pc, #192]	@ (8011e74 <tcp_pbuf_prealloc+0xe8>)
 8011db2:	f005 fdf7 	bl	80179a4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011db6:	6a3b      	ldr	r3, [r7, #32]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d105      	bne.n	8011dc8 <tcp_pbuf_prealloc+0x3c>
 8011dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8011e6c <tcp_pbuf_prealloc+0xe0>)
 8011dbe:	22e9      	movs	r2, #233	@ 0xe9
 8011dc0:	492d      	ldr	r1, [pc, #180]	@ (8011e78 <tcp_pbuf_prealloc+0xec>)
 8011dc2:	482c      	ldr	r0, [pc, #176]	@ (8011e74 <tcp_pbuf_prealloc+0xe8>)
 8011dc4:	f005 fdee 	bl	80179a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011dc8:	89ba      	ldrh	r2, [r7, #12]
 8011dca:	897b      	ldrh	r3, [r7, #10]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d221      	bcs.n	8011e14 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011dd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011dd4:	f003 0302 	and.w	r3, r3, #2
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d111      	bne.n	8011e00 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011ddc:	6a3b      	ldr	r3, [r7, #32]
 8011dde:	8b5b      	ldrh	r3, [r3, #26]
 8011de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d115      	bne.n	8011e14 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011de8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d007      	beq.n	8011e00 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011df0:	6a3b      	ldr	r3, [r7, #32]
 8011df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d103      	bne.n	8011e00 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011df8:	6a3b      	ldr	r3, [r7, #32]
 8011dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d009      	beq.n	8011e14 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011e00:	89bb      	ldrh	r3, [r7, #12]
 8011e02:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8011e06:	f023 0203 	bic.w	r2, r3, #3
 8011e0a:	897b      	ldrh	r3, [r7, #10]
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	bf28      	it	cs
 8011e10:	4613      	movcs	r3, r2
 8011e12:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011e14:	8af9      	ldrh	r1, [r7, #22]
 8011e16:	7bfb      	ldrb	r3, [r7, #15]
 8011e18:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fa ff9f 	bl	800cd60 <pbuf_alloc>
 8011e22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d101      	bne.n	8011e2e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	e019      	b.n	8011e62 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d006      	beq.n	8011e44 <tcp_pbuf_prealloc+0xb8>
 8011e36:	4b0d      	ldr	r3, [pc, #52]	@ (8011e6c <tcp_pbuf_prealloc+0xe0>)
 8011e38:	f240 120b 	movw	r2, #267	@ 0x10b
 8011e3c:	490f      	ldr	r1, [pc, #60]	@ (8011e7c <tcp_pbuf_prealloc+0xf0>)
 8011e3e:	480d      	ldr	r0, [pc, #52]	@ (8011e74 <tcp_pbuf_prealloc+0xe8>)
 8011e40:	f005 fdb0 	bl	80179a4 <iprintf>
  *oversize = p->len - length;
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	895a      	ldrh	r2, [r3, #10]
 8011e48:	89bb      	ldrh	r3, [r7, #12]
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	b29a      	uxth	r2, r3
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	89ba      	ldrh	r2, [r7, #12]
 8011e56:	811a      	strh	r2, [r3, #8]
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	891a      	ldrh	r2, [r3, #8]
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	815a      	strh	r2, [r3, #10]
  return p;
 8011e60:	693b      	ldr	r3, [r7, #16]
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3718      	adds	r7, #24
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	0801bbd0 	.word	0x0801bbd0
 8011e70:	0801bc88 	.word	0x0801bc88
 8011e74:	0801bc24 	.word	0x0801bc24
 8011e78:	0801bcac 	.word	0x0801bcac
 8011e7c:	0801bccc 	.word	0x0801bccc

08011e80 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	460b      	mov	r3, r1
 8011e8a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d106      	bne.n	8011ea0 <tcp_write_checks+0x20>
 8011e92:	4b33      	ldr	r3, [pc, #204]	@ (8011f60 <tcp_write_checks+0xe0>)
 8011e94:	f240 1233 	movw	r2, #307	@ 0x133
 8011e98:	4932      	ldr	r1, [pc, #200]	@ (8011f64 <tcp_write_checks+0xe4>)
 8011e9a:	4833      	ldr	r0, [pc, #204]	@ (8011f68 <tcp_write_checks+0xe8>)
 8011e9c:	f005 fd82 	bl	80179a4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	7d1b      	ldrb	r3, [r3, #20]
 8011ea4:	2b04      	cmp	r3, #4
 8011ea6:	d00e      	beq.n	8011ec6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011eac:	2b07      	cmp	r3, #7
 8011eae:	d00a      	beq.n	8011ec6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011eb4:	2b02      	cmp	r3, #2
 8011eb6:	d006      	beq.n	8011ec6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011ebc:	2b03      	cmp	r3, #3
 8011ebe:	d002      	beq.n	8011ec6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011ec0:	f06f 030a 	mvn.w	r3, #10
 8011ec4:	e048      	b.n	8011f58 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011ec6:	887b      	ldrh	r3, [r7, #2]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d101      	bne.n	8011ed0 <tcp_write_checks+0x50>
    return ERR_OK;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	e043      	b.n	8011f58 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011ed6:	887a      	ldrh	r2, [r7, #2]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d909      	bls.n	8011ef0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	8b5b      	ldrh	r3, [r3, #26]
 8011ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ee4:	b29a      	uxth	r2, r3
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011eea:	f04f 33ff 	mov.w	r3, #4294967295
 8011eee:	e033      	b.n	8011f58 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011ef6:	2b08      	cmp	r3, #8
 8011ef8:	d909      	bls.n	8011f0e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	8b5b      	ldrh	r3, [r3, #26]
 8011efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011f08:	f04f 33ff 	mov.w	r3, #4294967295
 8011f0c:	e024      	b.n	8011f58 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d00f      	beq.n	8011f38 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d11a      	bne.n	8011f56 <tcp_write_checks+0xd6>
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d116      	bne.n	8011f56 <tcp_write_checks+0xd6>
 8011f28:	4b0d      	ldr	r3, [pc, #52]	@ (8011f60 <tcp_write_checks+0xe0>)
 8011f2a:	f240 1255 	movw	r2, #341	@ 0x155
 8011f2e:	490f      	ldr	r1, [pc, #60]	@ (8011f6c <tcp_write_checks+0xec>)
 8011f30:	480d      	ldr	r0, [pc, #52]	@ (8011f68 <tcp_write_checks+0xe8>)
 8011f32:	f005 fd37 	bl	80179a4 <iprintf>
 8011f36:	e00e      	b.n	8011f56 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d103      	bne.n	8011f48 <tcp_write_checks+0xc8>
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d006      	beq.n	8011f56 <tcp_write_checks+0xd6>
 8011f48:	4b05      	ldr	r3, [pc, #20]	@ (8011f60 <tcp_write_checks+0xe0>)
 8011f4a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011f4e:	4908      	ldr	r1, [pc, #32]	@ (8011f70 <tcp_write_checks+0xf0>)
 8011f50:	4805      	ldr	r0, [pc, #20]	@ (8011f68 <tcp_write_checks+0xe8>)
 8011f52:	f005 fd27 	bl	80179a4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011f56:	2300      	movs	r3, #0
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	0801bbd0 	.word	0x0801bbd0
 8011f64:	0801bce0 	.word	0x0801bce0
 8011f68:	0801bc24 	.word	0x0801bc24
 8011f6c:	0801bd00 	.word	0x0801bd00
 8011f70:	0801bd3c 	.word	0x0801bd3c

08011f74 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011f74:	b590      	push	{r4, r7, lr}
 8011f76:	b09b      	sub	sp, #108	@ 0x6c
 8011f78:	af04      	add	r7, sp, #16
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	4611      	mov	r1, r2
 8011f80:	461a      	mov	r2, r3
 8011f82:	460b      	mov	r3, r1
 8011f84:	80fb      	strh	r3, [r7, #6]
 8011f86:	4613      	mov	r3, r2
 8011f88:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f92:	2300      	movs	r3, #0
 8011f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f96:	2300      	movs	r3, #0
 8011f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011faa:	2300      	movs	r3, #0
 8011fac:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d109      	bne.n	8011fd0 <tcp_write+0x5c>
 8011fbc:	4ba4      	ldr	r3, [pc, #656]	@ (8012250 <tcp_write+0x2dc>)
 8011fbe:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8011fc2:	49a4      	ldr	r1, [pc, #656]	@ (8012254 <tcp_write+0x2e0>)
 8011fc4:	48a4      	ldr	r0, [pc, #656]	@ (8012258 <tcp_write+0x2e4>)
 8011fc6:	f005 fced 	bl	80179a4 <iprintf>
 8011fca:	f06f 030f 	mvn.w	r3, #15
 8011fce:	e32a      	b.n	8012626 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011fd6:	085b      	lsrs	r3, r3, #1
 8011fd8:	b29a      	uxth	r2, r3
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	bf28      	it	cs
 8011fe2:	4613      	movcs	r3, r2
 8011fe4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d102      	bne.n	8011ff2 <tcp_write+0x7e>
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ff0:	e000      	b.n	8011ff4 <tcp_write+0x80>
 8011ff2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011ff4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d109      	bne.n	8012010 <tcp_write+0x9c>
 8011ffc:	4b94      	ldr	r3, [pc, #592]	@ (8012250 <tcp_write+0x2dc>)
 8011ffe:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8012002:	4996      	ldr	r1, [pc, #600]	@ (801225c <tcp_write+0x2e8>)
 8012004:	4894      	ldr	r0, [pc, #592]	@ (8012258 <tcp_write+0x2e4>)
 8012006:	f005 fccd 	bl	80179a4 <iprintf>
 801200a:	f06f 030f 	mvn.w	r3, #15
 801200e:	e30a      	b.n	8012626 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012010:	88fb      	ldrh	r3, [r7, #6]
 8012012:	4619      	mov	r1, r3
 8012014:	68f8      	ldr	r0, [r7, #12]
 8012016:	f7ff ff33 	bl	8011e80 <tcp_write_checks>
 801201a:	4603      	mov	r3, r0
 801201c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8012020:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012024:	2b00      	cmp	r3, #0
 8012026:	d002      	beq.n	801202e <tcp_write+0xba>
    return err;
 8012028:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801202c:	e2fb      	b.n	8012626 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012034:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012038:	2300      	movs	r3, #0
 801203a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012042:	2b00      	cmp	r3, #0
 8012044:	f000 80f6 	beq.w	8012234 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801204c:	653b      	str	r3, [r7, #80]	@ 0x50
 801204e:	e002      	b.n	8012056 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d1f8      	bne.n	8012050 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801205e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012060:	7a9b      	ldrb	r3, [r3, #10]
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	b29b      	uxth	r3, r3
 8012066:	f003 0304 	and.w	r3, r3, #4
 801206a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801206c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801206e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012070:	891b      	ldrh	r3, [r3, #8]
 8012072:	4619      	mov	r1, r3
 8012074:	8c3b      	ldrh	r3, [r7, #32]
 8012076:	440b      	add	r3, r1
 8012078:	429a      	cmp	r2, r3
 801207a:	da06      	bge.n	801208a <tcp_write+0x116>
 801207c:	4b74      	ldr	r3, [pc, #464]	@ (8012250 <tcp_write+0x2dc>)
 801207e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012082:	4977      	ldr	r1, [pc, #476]	@ (8012260 <tcp_write+0x2ec>)
 8012084:	4874      	ldr	r0, [pc, #464]	@ (8012258 <tcp_write+0x2e4>)
 8012086:	f005 fc8d 	bl	80179a4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801208a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801208c:	891a      	ldrh	r2, [r3, #8]
 801208e:	8c3b      	ldrh	r3, [r7, #32]
 8012090:	4413      	add	r3, r2
 8012092:	b29b      	uxth	r3, r3
 8012094:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012096:	1ad3      	subs	r3, r2, r3
 8012098:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80120a0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80120a2:	8a7b      	ldrh	r3, [r7, #18]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d026      	beq.n	80120f6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80120a8:	8a7b      	ldrh	r3, [r7, #18]
 80120aa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d206      	bcs.n	80120be <tcp_write+0x14a>
 80120b0:	4b67      	ldr	r3, [pc, #412]	@ (8012250 <tcp_write+0x2dc>)
 80120b2:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80120b6:	496b      	ldr	r1, [pc, #428]	@ (8012264 <tcp_write+0x2f0>)
 80120b8:	4867      	ldr	r0, [pc, #412]	@ (8012258 <tcp_write+0x2e4>)
 80120ba:	f005 fc73 	bl	80179a4 <iprintf>
      seg = last_unsent;
 80120be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80120c2:	8a7b      	ldrh	r3, [r7, #18]
 80120c4:	88fa      	ldrh	r2, [r7, #6]
 80120c6:	4293      	cmp	r3, r2
 80120c8:	bf28      	it	cs
 80120ca:	4613      	movcs	r3, r2
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80120d0:	4293      	cmp	r3, r2
 80120d2:	bf28      	it	cs
 80120d4:	4613      	movcs	r3, r2
 80120d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80120d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80120dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80120de:	4413      	add	r3, r2
 80120e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 80120e4:	8a7a      	ldrh	r2, [r7, #18]
 80120e6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80120e8:	1ad3      	subs	r3, r2, r3
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80120ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80120f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80120f2:	1ad3      	subs	r3, r2, r3
 80120f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80120f6:	8a7b      	ldrh	r3, [r7, #18]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d00b      	beq.n	8012114 <tcp_write+0x1a0>
 80120fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012100:	88fb      	ldrh	r3, [r7, #6]
 8012102:	429a      	cmp	r2, r3
 8012104:	d006      	beq.n	8012114 <tcp_write+0x1a0>
 8012106:	4b52      	ldr	r3, [pc, #328]	@ (8012250 <tcp_write+0x2dc>)
 8012108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801210c:	4956      	ldr	r1, [pc, #344]	@ (8012268 <tcp_write+0x2f4>)
 801210e:	4852      	ldr	r0, [pc, #328]	@ (8012258 <tcp_write+0x2e4>)
 8012110:	f005 fc48 	bl	80179a4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012114:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012118:	88fb      	ldrh	r3, [r7, #6]
 801211a:	429a      	cmp	r2, r3
 801211c:	f080 8167 	bcs.w	80123ee <tcp_write+0x47a>
 8012120:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012122:	2b00      	cmp	r3, #0
 8012124:	f000 8163 	beq.w	80123ee <tcp_write+0x47a>
 8012128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801212a:	891b      	ldrh	r3, [r3, #8]
 801212c:	2b00      	cmp	r3, #0
 801212e:	f000 815e 	beq.w	80123ee <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012132:	88fa      	ldrh	r2, [r7, #6]
 8012134:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012138:	1ad2      	subs	r2, r2, r3
 801213a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801213c:	4293      	cmp	r3, r2
 801213e:	bfa8      	it	ge
 8012140:	4613      	movge	r3, r2
 8012142:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012144:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012146:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012148:	797b      	ldrb	r3, [r7, #5]
 801214a:	f003 0301 	and.w	r3, r3, #1
 801214e:	2b00      	cmp	r3, #0
 8012150:	d027      	beq.n	80121a2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012152:	f107 0012 	add.w	r0, r7, #18
 8012156:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012158:	8bf9      	ldrh	r1, [r7, #30]
 801215a:	2301      	movs	r3, #1
 801215c:	9302      	str	r3, [sp, #8]
 801215e:	797b      	ldrb	r3, [r7, #5]
 8012160:	9301      	str	r3, [sp, #4]
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	4603      	mov	r3, r0
 8012168:	2000      	movs	r0, #0
 801216a:	f7ff fe0f 	bl	8011d8c <tcp_pbuf_prealloc>
 801216e:	6578      	str	r0, [r7, #84]	@ 0x54
 8012170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012172:	2b00      	cmp	r3, #0
 8012174:	f000 8225 	beq.w	80125c2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801217a:	6858      	ldr	r0, [r3, #4]
 801217c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	4413      	add	r3, r2
 8012184:	8bfa      	ldrh	r2, [r7, #30]
 8012186:	4619      	mov	r1, r3
 8012188:	f005 fe67 	bl	8017e5a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801218c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801218e:	f7fb f953 	bl	800d438 <pbuf_clen>
 8012192:	4603      	mov	r3, r0
 8012194:	461a      	mov	r2, r3
 8012196:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801219a:	4413      	add	r3, r2
 801219c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80121a0:	e041      	b.n	8012226 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80121a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80121a8:	e002      	b.n	80121b0 <tcp_write+0x23c>
 80121aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80121b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d1f8      	bne.n	80121aa <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80121b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121ba:	7b1b      	ldrb	r3, [r3, #12]
 80121bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d115      	bne.n	80121f0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80121c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121ca:	8952      	ldrh	r2, [r2, #10]
 80121cc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80121ce:	68ba      	ldr	r2, [r7, #8]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d10d      	bne.n	80121f0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80121d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d006      	beq.n	80121ea <tcp_write+0x276>
 80121dc:	4b1c      	ldr	r3, [pc, #112]	@ (8012250 <tcp_write+0x2dc>)
 80121de:	f240 2231 	movw	r2, #561	@ 0x231
 80121e2:	4922      	ldr	r1, [pc, #136]	@ (801226c <tcp_write+0x2f8>)
 80121e4:	481c      	ldr	r0, [pc, #112]	@ (8012258 <tcp_write+0x2e4>)
 80121e6:	f005 fbdd 	bl	80179a4 <iprintf>
          extendlen = seglen;
 80121ea:	8bfb      	ldrh	r3, [r7, #30]
 80121ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80121ee:	e01a      	b.n	8012226 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80121f0:	8bfb      	ldrh	r3, [r7, #30]
 80121f2:	2201      	movs	r2, #1
 80121f4:	4619      	mov	r1, r3
 80121f6:	2000      	movs	r0, #0
 80121f8:	f7fa fdb2 	bl	800cd60 <pbuf_alloc>
 80121fc:	6578      	str	r0, [r7, #84]	@ 0x54
 80121fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012200:	2b00      	cmp	r3, #0
 8012202:	f000 81e0 	beq.w	80125c6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012206:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801220a:	68ba      	ldr	r2, [r7, #8]
 801220c:	441a      	add	r2, r3
 801220e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012210:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012212:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012214:	f7fb f910 	bl	800d438 <pbuf_clen>
 8012218:	4603      	mov	r3, r0
 801221a:	461a      	mov	r2, r3
 801221c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012220:	4413      	add	r3, r2
 8012222:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012226:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801222a:	8bfb      	ldrh	r3, [r7, #30]
 801222c:	4413      	add	r3, r2
 801222e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8012232:	e0dc      	b.n	80123ee <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801223a:	2b00      	cmp	r3, #0
 801223c:	f000 80d7 	beq.w	80123ee <tcp_write+0x47a>
 8012240:	4b03      	ldr	r3, [pc, #12]	@ (8012250 <tcp_write+0x2dc>)
 8012242:	f240 224a 	movw	r2, #586	@ 0x24a
 8012246:	490a      	ldr	r1, [pc, #40]	@ (8012270 <tcp_write+0x2fc>)
 8012248:	4803      	ldr	r0, [pc, #12]	@ (8012258 <tcp_write+0x2e4>)
 801224a:	f005 fbab 	bl	80179a4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801224e:	e0ce      	b.n	80123ee <tcp_write+0x47a>
 8012250:	0801bbd0 	.word	0x0801bbd0
 8012254:	0801bd70 	.word	0x0801bd70
 8012258:	0801bc24 	.word	0x0801bc24
 801225c:	0801bd88 	.word	0x0801bd88
 8012260:	0801bdbc 	.word	0x0801bdbc
 8012264:	0801bdd4 	.word	0x0801bdd4
 8012268:	0801bdf4 	.word	0x0801bdf4
 801226c:	0801be14 	.word	0x0801be14
 8012270:	0801be40 	.word	0x0801be40
    struct pbuf *p;
    u16_t left = len - pos;
 8012274:	88fa      	ldrh	r2, [r7, #6]
 8012276:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801227a:	1ad3      	subs	r3, r2, r3
 801227c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801227e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012282:	b29b      	uxth	r3, r3
 8012284:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012286:	1ad3      	subs	r3, r2, r3
 8012288:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801228a:	8b7a      	ldrh	r2, [r7, #26]
 801228c:	8bbb      	ldrh	r3, [r7, #28]
 801228e:	4293      	cmp	r3, r2
 8012290:	bf28      	it	cs
 8012292:	4613      	movcs	r3, r2
 8012294:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012296:	797b      	ldrb	r3, [r7, #5]
 8012298:	f003 0301 	and.w	r3, r3, #1
 801229c:	2b00      	cmp	r3, #0
 801229e:	d036      	beq.n	801230e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80122a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80122a4:	b29a      	uxth	r2, r3
 80122a6:	8b3b      	ldrh	r3, [r7, #24]
 80122a8:	4413      	add	r3, r2
 80122aa:	b299      	uxth	r1, r3
 80122ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	bf0c      	ite	eq
 80122b2:	2301      	moveq	r3, #1
 80122b4:	2300      	movne	r3, #0
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	f107 0012 	add.w	r0, r7, #18
 80122bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80122be:	9302      	str	r3, [sp, #8]
 80122c0:	797b      	ldrb	r3, [r7, #5]
 80122c2:	9301      	str	r3, [sp, #4]
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	9300      	str	r3, [sp, #0]
 80122c8:	4603      	mov	r3, r0
 80122ca:	2036      	movs	r0, #54	@ 0x36
 80122cc:	f7ff fd5e 	bl	8011d8c <tcp_pbuf_prealloc>
 80122d0:	6338      	str	r0, [r7, #48]	@ 0x30
 80122d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f000 8178 	beq.w	80125ca <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80122da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122dc:	895b      	ldrh	r3, [r3, #10]
 80122de:	8b3a      	ldrh	r2, [r7, #24]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d906      	bls.n	80122f2 <tcp_write+0x37e>
 80122e4:	4b8c      	ldr	r3, [pc, #560]	@ (8012518 <tcp_write+0x5a4>)
 80122e6:	f240 2266 	movw	r2, #614	@ 0x266
 80122ea:	498c      	ldr	r1, [pc, #560]	@ (801251c <tcp_write+0x5a8>)
 80122ec:	488c      	ldr	r0, [pc, #560]	@ (8012520 <tcp_write+0x5ac>)
 80122ee:	f005 fb59 	bl	80179a4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80122f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f4:	685a      	ldr	r2, [r3, #4]
 80122f6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80122fa:	18d0      	adds	r0, r2, r3
 80122fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012300:	68ba      	ldr	r2, [r7, #8]
 8012302:	4413      	add	r3, r2
 8012304:	8b3a      	ldrh	r2, [r7, #24]
 8012306:	4619      	mov	r1, r3
 8012308:	f005 fda7 	bl	8017e5a <memcpy>
 801230c:	e02f      	b.n	801236e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801230e:	8a7b      	ldrh	r3, [r7, #18]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d006      	beq.n	8012322 <tcp_write+0x3ae>
 8012314:	4b80      	ldr	r3, [pc, #512]	@ (8012518 <tcp_write+0x5a4>)
 8012316:	f240 2271 	movw	r2, #625	@ 0x271
 801231a:	4982      	ldr	r1, [pc, #520]	@ (8012524 <tcp_write+0x5b0>)
 801231c:	4880      	ldr	r0, [pc, #512]	@ (8012520 <tcp_write+0x5ac>)
 801231e:	f005 fb41 	bl	80179a4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012322:	8b3b      	ldrh	r3, [r7, #24]
 8012324:	2201      	movs	r2, #1
 8012326:	4619      	mov	r1, r3
 8012328:	2036      	movs	r0, #54	@ 0x36
 801232a:	f7fa fd19 	bl	800cd60 <pbuf_alloc>
 801232e:	6178      	str	r0, [r7, #20]
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	2b00      	cmp	r3, #0
 8012334:	f000 814b 	beq.w	80125ce <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012338:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801233c:	68ba      	ldr	r2, [r7, #8]
 801233e:	441a      	add	r2, r3
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012344:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012348:	b29b      	uxth	r3, r3
 801234a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801234e:	4619      	mov	r1, r3
 8012350:	2036      	movs	r0, #54	@ 0x36
 8012352:	f7fa fd05 	bl	800cd60 <pbuf_alloc>
 8012356:	6338      	str	r0, [r7, #48]	@ 0x30
 8012358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801235a:	2b00      	cmp	r3, #0
 801235c:	d103      	bne.n	8012366 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801235e:	6978      	ldr	r0, [r7, #20]
 8012360:	f7fa ffe2 	bl	800d328 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012364:	e136      	b.n	80125d4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012366:	6979      	ldr	r1, [r7, #20]
 8012368:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801236a:	f7fb f89f 	bl	800d4ac <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801236e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012370:	f7fb f862 	bl	800d438 <pbuf_clen>
 8012374:	4603      	mov	r3, r0
 8012376:	461a      	mov	r2, r3
 8012378:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801237c:	4413      	add	r3, r2
 801237e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012382:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012386:	2b09      	cmp	r3, #9
 8012388:	d903      	bls.n	8012392 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801238a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801238c:	f7fa ffcc 	bl	800d328 <pbuf_free>
      goto memerr;
 8012390:	e120      	b.n	80125d4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012396:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801239a:	441a      	add	r2, r3
 801239c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123a0:	9300      	str	r3, [sp, #0]
 80123a2:	4613      	mov	r3, r2
 80123a4:	2200      	movs	r2, #0
 80123a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80123a8:	68f8      	ldr	r0, [r7, #12]
 80123aa:	f7ff fc53 	bl	8011c54 <tcp_create_segment>
 80123ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80123b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	f000 810d 	beq.w	80125d2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80123b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d102      	bne.n	80123c4 <tcp_write+0x450>
      queue = seg;
 80123be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80123c2:	e00c      	b.n	80123de <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80123c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d106      	bne.n	80123d8 <tcp_write+0x464>
 80123ca:	4b53      	ldr	r3, [pc, #332]	@ (8012518 <tcp_write+0x5a4>)
 80123cc:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80123d0:	4955      	ldr	r1, [pc, #340]	@ (8012528 <tcp_write+0x5b4>)
 80123d2:	4853      	ldr	r0, [pc, #332]	@ (8012520 <tcp_write+0x5ac>)
 80123d4:	f005 fae6 	bl	80179a4 <iprintf>
      prev_seg->next = seg;
 80123d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80123dc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80123de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123e0:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80123e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80123e6:	8b3b      	ldrh	r3, [r7, #24]
 80123e8:	4413      	add	r3, r2
 80123ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80123ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80123f2:	88fb      	ldrh	r3, [r7, #6]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	f4ff af3d 	bcc.w	8012274 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80123fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d02c      	beq.n	801245a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012406:	e01e      	b.n	8012446 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801240a:	891a      	ldrh	r2, [r3, #8]
 801240c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801240e:	4413      	add	r3, r2
 8012410:	b29a      	uxth	r2, r3
 8012412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012414:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d110      	bne.n	8012440 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801241e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012420:	685b      	ldr	r3, [r3, #4]
 8012422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012424:	8952      	ldrh	r2, [r2, #10]
 8012426:	4413      	add	r3, r2
 8012428:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801242a:	68b9      	ldr	r1, [r7, #8]
 801242c:	4618      	mov	r0, r3
 801242e:	f005 fd14 	bl	8017e5a <memcpy>
        p->len += oversize_used;
 8012432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012434:	895a      	ldrh	r2, [r3, #10]
 8012436:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012438:	4413      	add	r3, r2
 801243a:	b29a      	uxth	r2, r3
 801243c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801243e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012448:	2b00      	cmp	r3, #0
 801244a:	d1dd      	bne.n	8012408 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801244c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801244e:	891a      	ldrh	r2, [r3, #8]
 8012450:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012452:	4413      	add	r3, r2
 8012454:	b29a      	uxth	r2, r3
 8012456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012458:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801245a:	8a7a      	ldrh	r2, [r7, #18]
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012464:	2b00      	cmp	r3, #0
 8012466:	d018      	beq.n	801249a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801246a:	2b00      	cmp	r3, #0
 801246c:	d106      	bne.n	801247c <tcp_write+0x508>
 801246e:	4b2a      	ldr	r3, [pc, #168]	@ (8012518 <tcp_write+0x5a4>)
 8012470:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8012474:	492d      	ldr	r1, [pc, #180]	@ (801252c <tcp_write+0x5b8>)
 8012476:	482a      	ldr	r0, [pc, #168]	@ (8012520 <tcp_write+0x5ac>)
 8012478:	f005 fa94 	bl	80179a4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801247c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012482:	4618      	mov	r0, r3
 8012484:	f7fb f812 	bl	800d4ac <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801248a:	891a      	ldrh	r2, [r3, #8]
 801248c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801248e:	891b      	ldrh	r3, [r3, #8]
 8012490:	4413      	add	r3, r2
 8012492:	b29a      	uxth	r2, r3
 8012494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012496:	811a      	strh	r2, [r3, #8]
 8012498:	e037      	b.n	801250a <tcp_write+0x596>
  } else if (extendlen > 0) {
 801249a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801249c:	2b00      	cmp	r3, #0
 801249e:	d034      	beq.n	801250a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80124a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d003      	beq.n	80124ae <tcp_write+0x53a>
 80124a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124a8:	685b      	ldr	r3, [r3, #4]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d106      	bne.n	80124bc <tcp_write+0x548>
 80124ae:	4b1a      	ldr	r3, [pc, #104]	@ (8012518 <tcp_write+0x5a4>)
 80124b0:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80124b4:	491e      	ldr	r1, [pc, #120]	@ (8012530 <tcp_write+0x5bc>)
 80124b6:	481a      	ldr	r0, [pc, #104]	@ (8012520 <tcp_write+0x5ac>)
 80124b8:	f005 fa74 	bl	80179a4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80124bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80124c2:	e009      	b.n	80124d8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80124c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124c6:	891a      	ldrh	r2, [r3, #8]
 80124c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80124ca:	4413      	add	r3, r2
 80124cc:	b29a      	uxth	r2, r3
 80124ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124d0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80124d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80124d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d1f1      	bne.n	80124c4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80124e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124e2:	891a      	ldrh	r2, [r3, #8]
 80124e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80124e6:	4413      	add	r3, r2
 80124e8:	b29a      	uxth	r2, r3
 80124ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124ec:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80124ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124f0:	895a      	ldrh	r2, [r3, #10]
 80124f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80124f4:	4413      	add	r3, r2
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124fa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80124fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124fe:	891a      	ldrh	r2, [r3, #8]
 8012500:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012502:	4413      	add	r3, r2
 8012504:	b29a      	uxth	r2, r3
 8012506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012508:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801250a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801250c:	2b00      	cmp	r3, #0
 801250e:	d111      	bne.n	8012534 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012514:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012516:	e010      	b.n	801253a <tcp_write+0x5c6>
 8012518:	0801bbd0 	.word	0x0801bbd0
 801251c:	0801be70 	.word	0x0801be70
 8012520:	0801bc24 	.word	0x0801bc24
 8012524:	0801beb0 	.word	0x0801beb0
 8012528:	0801bec0 	.word	0x0801bec0
 801252c:	0801bed4 	.word	0x0801bed4
 8012530:	0801bf0c 	.word	0x0801bf0c
  } else {
    last_unsent->next = queue;
 8012534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012538:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801253e:	88fb      	ldrh	r3, [r7, #6]
 8012540:	441a      	add	r2, r3
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801254c:	88fb      	ldrh	r3, [r7, #6]
 801254e:	1ad3      	subs	r3, r2, r3
 8012550:	b29a      	uxth	r2, r3
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801255e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012568:	2b00      	cmp	r3, #0
 801256a:	d00e      	beq.n	801258a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012570:	2b00      	cmp	r3, #0
 8012572:	d10a      	bne.n	801258a <tcp_write+0x616>
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012578:	2b00      	cmp	r3, #0
 801257a:	d106      	bne.n	801258a <tcp_write+0x616>
 801257c:	4b2c      	ldr	r3, [pc, #176]	@ (8012630 <tcp_write+0x6bc>)
 801257e:	f240 3212 	movw	r2, #786	@ 0x312
 8012582:	492c      	ldr	r1, [pc, #176]	@ (8012634 <tcp_write+0x6c0>)
 8012584:	482c      	ldr	r0, [pc, #176]	@ (8012638 <tcp_write+0x6c4>)
 8012586:	f005 fa0d 	bl	80179a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801258a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801258c:	2b00      	cmp	r3, #0
 801258e:	d016      	beq.n	80125be <tcp_write+0x64a>
 8012590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d012      	beq.n	80125be <tcp_write+0x64a>
 8012598:	797b      	ldrb	r3, [r7, #5]
 801259a:	f003 0302 	and.w	r3, r3, #2
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d10d      	bne.n	80125be <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80125a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	899b      	ldrh	r3, [r3, #12]
 80125a8:	b29c      	uxth	r4, r3
 80125aa:	2008      	movs	r0, #8
 80125ac:	f7f9 fada 	bl	800bb64 <lwip_htons>
 80125b0:	4603      	mov	r3, r0
 80125b2:	461a      	mov	r2, r3
 80125b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	4322      	orrs	r2, r4
 80125ba:	b292      	uxth	r2, r2
 80125bc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80125be:	2300      	movs	r3, #0
 80125c0:	e031      	b.n	8012626 <tcp_write+0x6b2>
          goto memerr;
 80125c2:	bf00      	nop
 80125c4:	e006      	b.n	80125d4 <tcp_write+0x660>
            goto memerr;
 80125c6:	bf00      	nop
 80125c8:	e004      	b.n	80125d4 <tcp_write+0x660>
        goto memerr;
 80125ca:	bf00      	nop
 80125cc:	e002      	b.n	80125d4 <tcp_write+0x660>
        goto memerr;
 80125ce:	bf00      	nop
 80125d0:	e000      	b.n	80125d4 <tcp_write+0x660>
      goto memerr;
 80125d2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	8b5b      	ldrh	r3, [r3, #26]
 80125d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125dc:	b29a      	uxth	r2, r3
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80125e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d002      	beq.n	80125ee <tcp_write+0x67a>
    pbuf_free(concat_p);
 80125e8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80125ea:	f7fa fe9d 	bl	800d328 <pbuf_free>
  }
  if (queue != NULL) {
 80125ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d002      	beq.n	80125fa <tcp_write+0x686>
    tcp_segs_free(queue);
 80125f4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80125f6:	f7fc fb53 	bl	800eca0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012600:	2b00      	cmp	r3, #0
 8012602:	d00e      	beq.n	8012622 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012608:	2b00      	cmp	r3, #0
 801260a:	d10a      	bne.n	8012622 <tcp_write+0x6ae>
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012610:	2b00      	cmp	r3, #0
 8012612:	d106      	bne.n	8012622 <tcp_write+0x6ae>
 8012614:	4b06      	ldr	r3, [pc, #24]	@ (8012630 <tcp_write+0x6bc>)
 8012616:	f240 3227 	movw	r2, #807	@ 0x327
 801261a:	4906      	ldr	r1, [pc, #24]	@ (8012634 <tcp_write+0x6c0>)
 801261c:	4806      	ldr	r0, [pc, #24]	@ (8012638 <tcp_write+0x6c4>)
 801261e:	f005 f9c1 	bl	80179a4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012626:	4618      	mov	r0, r3
 8012628:	375c      	adds	r7, #92	@ 0x5c
 801262a:	46bd      	mov	sp, r7
 801262c:	bd90      	pop	{r4, r7, pc}
 801262e:	bf00      	nop
 8012630:	0801bbd0 	.word	0x0801bbd0
 8012634:	0801bf44 	.word	0x0801bf44
 8012638:	0801bc24 	.word	0x0801bc24

0801263c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801263c:	b590      	push	{r4, r7, lr}
 801263e:	b08b      	sub	sp, #44	@ 0x2c
 8012640:	af02      	add	r7, sp, #8
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	460b      	mov	r3, r1
 8012646:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012648:	2300      	movs	r3, #0
 801264a:	61fb      	str	r3, [r7, #28]
 801264c:	2300      	movs	r3, #0
 801264e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012650:	2300      	movs	r3, #0
 8012652:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <tcp_split_unsent_seg+0x2c>
 801265a:	4b95      	ldr	r3, [pc, #596]	@ (80128b0 <tcp_split_unsent_seg+0x274>)
 801265c:	f240 324b 	movw	r2, #843	@ 0x34b
 8012660:	4994      	ldr	r1, [pc, #592]	@ (80128b4 <tcp_split_unsent_seg+0x278>)
 8012662:	4895      	ldr	r0, [pc, #596]	@ (80128b8 <tcp_split_unsent_seg+0x27c>)
 8012664:	f005 f99e 	bl	80179a4 <iprintf>

  useg = pcb->unsent;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801266c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d102      	bne.n	801267a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012674:	f04f 33ff 	mov.w	r3, #4294967295
 8012678:	e116      	b.n	80128a8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801267a:	887b      	ldrh	r3, [r7, #2]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d109      	bne.n	8012694 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012680:	4b8b      	ldr	r3, [pc, #556]	@ (80128b0 <tcp_split_unsent_seg+0x274>)
 8012682:	f240 3253 	movw	r2, #851	@ 0x353
 8012686:	498d      	ldr	r1, [pc, #564]	@ (80128bc <tcp_split_unsent_seg+0x280>)
 8012688:	488b      	ldr	r0, [pc, #556]	@ (80128b8 <tcp_split_unsent_seg+0x27c>)
 801268a:	f005 f98b 	bl	80179a4 <iprintf>
    return ERR_VAL;
 801268e:	f06f 0305 	mvn.w	r3, #5
 8012692:	e109      	b.n	80128a8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	891b      	ldrh	r3, [r3, #8]
 8012698:	887a      	ldrh	r2, [r7, #2]
 801269a:	429a      	cmp	r2, r3
 801269c:	d301      	bcc.n	80126a2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801269e:	2300      	movs	r3, #0
 80126a0:	e102      	b.n	80128a8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80126a6:	887a      	ldrh	r2, [r7, #2]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d906      	bls.n	80126ba <tcp_split_unsent_seg+0x7e>
 80126ac:	4b80      	ldr	r3, [pc, #512]	@ (80128b0 <tcp_split_unsent_seg+0x274>)
 80126ae:	f240 325b 	movw	r2, #859	@ 0x35b
 80126b2:	4983      	ldr	r1, [pc, #524]	@ (80128c0 <tcp_split_unsent_seg+0x284>)
 80126b4:	4880      	ldr	r0, [pc, #512]	@ (80128b8 <tcp_split_unsent_seg+0x27c>)
 80126b6:	f005 f975 	bl	80179a4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	891b      	ldrh	r3, [r3, #8]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d106      	bne.n	80126d0 <tcp_split_unsent_seg+0x94>
 80126c2:	4b7b      	ldr	r3, [pc, #492]	@ (80128b0 <tcp_split_unsent_seg+0x274>)
 80126c4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80126c8:	497e      	ldr	r1, [pc, #504]	@ (80128c4 <tcp_split_unsent_seg+0x288>)
 80126ca:	487b      	ldr	r0, [pc, #492]	@ (80128b8 <tcp_split_unsent_seg+0x27c>)
 80126cc:	f005 f96a 	bl	80179a4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	7a9b      	ldrb	r3, [r3, #10]
 80126d4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80126d6:	7bfb      	ldrb	r3, [r7, #15]
 80126d8:	009b      	lsls	r3, r3, #2
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	f003 0304 	and.w	r3, r3, #4
 80126e0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	891a      	ldrh	r2, [r3, #8]
 80126e6:	887b      	ldrh	r3, [r7, #2]
 80126e8:	1ad3      	subs	r3, r2, r3
 80126ea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80126ec:	7bbb      	ldrb	r3, [r7, #14]
 80126ee:	b29a      	uxth	r2, r3
 80126f0:	89bb      	ldrh	r3, [r7, #12]
 80126f2:	4413      	add	r3, r2
 80126f4:	b29b      	uxth	r3, r3
 80126f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80126fa:	4619      	mov	r1, r3
 80126fc:	2036      	movs	r0, #54	@ 0x36
 80126fe:	f7fa fb2f 	bl	800cd60 <pbuf_alloc>
 8012702:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012704:	693b      	ldr	r3, [r7, #16]
 8012706:	2b00      	cmp	r3, #0
 8012708:	f000 80b7 	beq.w	801287a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	891a      	ldrh	r2, [r3, #8]
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	891b      	ldrh	r3, [r3, #8]
 8012716:	1ad3      	subs	r3, r2, r3
 8012718:	b29a      	uxth	r2, r3
 801271a:	887b      	ldrh	r3, [r7, #2]
 801271c:	4413      	add	r3, r2
 801271e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	6858      	ldr	r0, [r3, #4]
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	685a      	ldr	r2, [r3, #4]
 8012728:	7bbb      	ldrb	r3, [r7, #14]
 801272a:	18d1      	adds	r1, r2, r3
 801272c:	897b      	ldrh	r3, [r7, #10]
 801272e:	89ba      	ldrh	r2, [r7, #12]
 8012730:	f7fa fff4 	bl	800d71c <pbuf_copy_partial>
 8012734:	4603      	mov	r3, r0
 8012736:	461a      	mov	r2, r3
 8012738:	89bb      	ldrh	r3, [r7, #12]
 801273a:	4293      	cmp	r3, r2
 801273c:	f040 809f 	bne.w	801287e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	899b      	ldrh	r3, [r3, #12]
 8012746:	b29b      	uxth	r3, r3
 8012748:	4618      	mov	r0, r3
 801274a:	f7f9 fa0b 	bl	800bb64 <lwip_htons>
 801274e:	4603      	mov	r3, r0
 8012750:	b2db      	uxtb	r3, r3
 8012752:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012756:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012758:	2300      	movs	r3, #0
 801275a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801275c:	7efb      	ldrb	r3, [r7, #27]
 801275e:	f003 0308 	and.w	r3, r3, #8
 8012762:	2b00      	cmp	r3, #0
 8012764:	d007      	beq.n	8012776 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012766:	7efb      	ldrb	r3, [r7, #27]
 8012768:	f023 0308 	bic.w	r3, r3, #8
 801276c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801276e:	7ebb      	ldrb	r3, [r7, #26]
 8012770:	f043 0308 	orr.w	r3, r3, #8
 8012774:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012776:	7efb      	ldrb	r3, [r7, #27]
 8012778:	f003 0301 	and.w	r3, r3, #1
 801277c:	2b00      	cmp	r3, #0
 801277e:	d007      	beq.n	8012790 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012780:	7efb      	ldrb	r3, [r7, #27]
 8012782:	f023 0301 	bic.w	r3, r3, #1
 8012786:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012788:	7ebb      	ldrb	r3, [r7, #26]
 801278a:	f043 0301 	orr.w	r3, r3, #1
 801278e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	68db      	ldr	r3, [r3, #12]
 8012794:	685b      	ldr	r3, [r3, #4]
 8012796:	4618      	mov	r0, r3
 8012798:	f7f9 f9f9 	bl	800bb8e <lwip_htonl>
 801279c:	4602      	mov	r2, r0
 801279e:	887b      	ldrh	r3, [r7, #2]
 80127a0:	18d1      	adds	r1, r2, r3
 80127a2:	7eba      	ldrb	r2, [r7, #26]
 80127a4:	7bfb      	ldrb	r3, [r7, #15]
 80127a6:	9300      	str	r3, [sp, #0]
 80127a8:	460b      	mov	r3, r1
 80127aa:	6939      	ldr	r1, [r7, #16]
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f7ff fa51 	bl	8011c54 <tcp_create_segment>
 80127b2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d063      	beq.n	8012882 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	4618      	mov	r0, r3
 80127c0:	f7fa fe3a 	bl	800d438 <pbuf_clen>
 80127c4:	4603      	mov	r3, r0
 80127c6:	461a      	mov	r2, r3
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80127ce:	1a9b      	subs	r3, r3, r2
 80127d0:	b29a      	uxth	r2, r3
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	6858      	ldr	r0, [r3, #4]
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	891a      	ldrh	r2, [r3, #8]
 80127e2:	89bb      	ldrh	r3, [r7, #12]
 80127e4:	1ad3      	subs	r3, r2, r3
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	4619      	mov	r1, r3
 80127ea:	f7fa fc17 	bl	800d01c <pbuf_realloc>
  useg->len -= remainder;
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	891a      	ldrh	r2, [r3, #8]
 80127f2:	89bb      	ldrh	r3, [r7, #12]
 80127f4:	1ad3      	subs	r3, r2, r3
 80127f6:	b29a      	uxth	r2, r3
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	68db      	ldr	r3, [r3, #12]
 8012800:	899b      	ldrh	r3, [r3, #12]
 8012802:	b29c      	uxth	r4, r3
 8012804:	7efb      	ldrb	r3, [r7, #27]
 8012806:	b29b      	uxth	r3, r3
 8012808:	4618      	mov	r0, r3
 801280a:	f7f9 f9ab 	bl	800bb64 <lwip_htons>
 801280e:	4603      	mov	r3, r0
 8012810:	461a      	mov	r2, r3
 8012812:	697b      	ldr	r3, [r7, #20]
 8012814:	68db      	ldr	r3, [r3, #12]
 8012816:	4322      	orrs	r2, r4
 8012818:	b292      	uxth	r2, r2
 801281a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	f7fa fe09 	bl	800d438 <pbuf_clen>
 8012826:	4603      	mov	r3, r0
 8012828:	461a      	mov	r2, r3
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012830:	4413      	add	r3, r2
 8012832:	b29a      	uxth	r2, r3
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	4618      	mov	r0, r3
 8012840:	f7fa fdfa 	bl	800d438 <pbuf_clen>
 8012844:	4603      	mov	r3, r0
 8012846:	461a      	mov	r2, r3
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801284e:	4413      	add	r3, r2
 8012850:	b29a      	uxth	r2, r3
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	681a      	ldr	r2, [r3, #0]
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	69fa      	ldr	r2, [r7, #28]
 8012864:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d103      	bne.n	8012876 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2200      	movs	r2, #0
 8012872:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012876:	2300      	movs	r3, #0
 8012878:	e016      	b.n	80128a8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801287a:	bf00      	nop
 801287c:	e002      	b.n	8012884 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801287e:	bf00      	nop
 8012880:	e000      	b.n	8012884 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012882:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d006      	beq.n	8012898 <tcp_split_unsent_seg+0x25c>
 801288a:	4b09      	ldr	r3, [pc, #36]	@ (80128b0 <tcp_split_unsent_seg+0x274>)
 801288c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012890:	490d      	ldr	r1, [pc, #52]	@ (80128c8 <tcp_split_unsent_seg+0x28c>)
 8012892:	4809      	ldr	r0, [pc, #36]	@ (80128b8 <tcp_split_unsent_seg+0x27c>)
 8012894:	f005 f886 	bl	80179a4 <iprintf>
  if (p != NULL) {
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d002      	beq.n	80128a4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801289e:	6938      	ldr	r0, [r7, #16]
 80128a0:	f7fa fd42 	bl	800d328 <pbuf_free>
  }

  return ERR_MEM;
 80128a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3724      	adds	r7, #36	@ 0x24
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd90      	pop	{r4, r7, pc}
 80128b0:	0801bbd0 	.word	0x0801bbd0
 80128b4:	0801bf64 	.word	0x0801bf64
 80128b8:	0801bc24 	.word	0x0801bc24
 80128bc:	0801bf88 	.word	0x0801bf88
 80128c0:	0801bfac 	.word	0x0801bfac
 80128c4:	0801bfbc 	.word	0x0801bfbc
 80128c8:	0801bfcc 	.word	0x0801bfcc

080128cc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80128cc:	b590      	push	{r4, r7, lr}
 80128ce:	b085      	sub	sp, #20
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d106      	bne.n	80128e8 <tcp_send_fin+0x1c>
 80128da:	4b21      	ldr	r3, [pc, #132]	@ (8012960 <tcp_send_fin+0x94>)
 80128dc:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80128e0:	4920      	ldr	r1, [pc, #128]	@ (8012964 <tcp_send_fin+0x98>)
 80128e2:	4821      	ldr	r0, [pc, #132]	@ (8012968 <tcp_send_fin+0x9c>)
 80128e4:	f005 f85e 	bl	80179a4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d02e      	beq.n	801294e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128f4:	60fb      	str	r3, [r7, #12]
 80128f6:	e002      	b.n	80128fe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d1f8      	bne.n	80128f8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	68db      	ldr	r3, [r3, #12]
 801290a:	899b      	ldrh	r3, [r3, #12]
 801290c:	b29b      	uxth	r3, r3
 801290e:	4618      	mov	r0, r3
 8012910:	f7f9 f928 	bl	800bb64 <lwip_htons>
 8012914:	4603      	mov	r3, r0
 8012916:	b2db      	uxtb	r3, r3
 8012918:	f003 0307 	and.w	r3, r3, #7
 801291c:	2b00      	cmp	r3, #0
 801291e:	d116      	bne.n	801294e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	899b      	ldrh	r3, [r3, #12]
 8012926:	b29c      	uxth	r4, r3
 8012928:	2001      	movs	r0, #1
 801292a:	f7f9 f91b 	bl	800bb64 <lwip_htons>
 801292e:	4603      	mov	r3, r0
 8012930:	461a      	mov	r2, r3
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	68db      	ldr	r3, [r3, #12]
 8012936:	4322      	orrs	r2, r4
 8012938:	b292      	uxth	r2, r2
 801293a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	8b5b      	ldrh	r3, [r3, #26]
 8012940:	f043 0320 	orr.w	r3, r3, #32
 8012944:	b29a      	uxth	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801294a:	2300      	movs	r3, #0
 801294c:	e004      	b.n	8012958 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801294e:	2101      	movs	r1, #1
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 f80b 	bl	801296c <tcp_enqueue_flags>
 8012956:	4603      	mov	r3, r0
}
 8012958:	4618      	mov	r0, r3
 801295a:	3714      	adds	r7, #20
 801295c:	46bd      	mov	sp, r7
 801295e:	bd90      	pop	{r4, r7, pc}
 8012960:	0801bbd0 	.word	0x0801bbd0
 8012964:	0801bfd8 	.word	0x0801bfd8
 8012968:	0801bc24 	.word	0x0801bc24

0801296c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b08a      	sub	sp, #40	@ 0x28
 8012970:	af02      	add	r7, sp, #8
 8012972:	6078      	str	r0, [r7, #4]
 8012974:	460b      	mov	r3, r1
 8012976:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012978:	2300      	movs	r3, #0
 801297a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801297c:	2300      	movs	r3, #0
 801297e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012980:	78fb      	ldrb	r3, [r7, #3]
 8012982:	f003 0303 	and.w	r3, r3, #3
 8012986:	2b00      	cmp	r3, #0
 8012988:	d106      	bne.n	8012998 <tcp_enqueue_flags+0x2c>
 801298a:	4b67      	ldr	r3, [pc, #412]	@ (8012b28 <tcp_enqueue_flags+0x1bc>)
 801298c:	f240 4211 	movw	r2, #1041	@ 0x411
 8012990:	4966      	ldr	r1, [pc, #408]	@ (8012b2c <tcp_enqueue_flags+0x1c0>)
 8012992:	4867      	ldr	r0, [pc, #412]	@ (8012b30 <tcp_enqueue_flags+0x1c4>)
 8012994:	f005 f806 	bl	80179a4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d106      	bne.n	80129ac <tcp_enqueue_flags+0x40>
 801299e:	4b62      	ldr	r3, [pc, #392]	@ (8012b28 <tcp_enqueue_flags+0x1bc>)
 80129a0:	f240 4213 	movw	r2, #1043	@ 0x413
 80129a4:	4963      	ldr	r1, [pc, #396]	@ (8012b34 <tcp_enqueue_flags+0x1c8>)
 80129a6:	4862      	ldr	r0, [pc, #392]	@ (8012b30 <tcp_enqueue_flags+0x1c4>)
 80129a8:	f004 fffc 	bl	80179a4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80129ac:	78fb      	ldrb	r3, [r7, #3]
 80129ae:	f003 0302 	and.w	r3, r3, #2
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d001      	beq.n	80129ba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80129b6:	2301      	movs	r3, #1
 80129b8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80129ba:	7ffb      	ldrb	r3, [r7, #31]
 80129bc:	009b      	lsls	r3, r3, #2
 80129be:	b2db      	uxtb	r3, r3
 80129c0:	f003 0304 	and.w	r3, r3, #4
 80129c4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80129c6:	7dfb      	ldrb	r3, [r7, #23]
 80129c8:	b29b      	uxth	r3, r3
 80129ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80129ce:	4619      	mov	r1, r3
 80129d0:	2036      	movs	r0, #54	@ 0x36
 80129d2:	f7fa f9c5 	bl	800cd60 <pbuf_alloc>
 80129d6:	6138      	str	r0, [r7, #16]
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d109      	bne.n	80129f2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	8b5b      	ldrh	r3, [r3, #26]
 80129e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80129e6:	b29a      	uxth	r2, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80129ec:	f04f 33ff 	mov.w	r3, #4294967295
 80129f0:	e095      	b.n	8012b1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80129f2:	693b      	ldr	r3, [r7, #16]
 80129f4:	895a      	ldrh	r2, [r3, #10]
 80129f6:	7dfb      	ldrb	r3, [r7, #23]
 80129f8:	b29b      	uxth	r3, r3
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d206      	bcs.n	8012a0c <tcp_enqueue_flags+0xa0>
 80129fe:	4b4a      	ldr	r3, [pc, #296]	@ (8012b28 <tcp_enqueue_flags+0x1bc>)
 8012a00:	f240 4239 	movw	r2, #1081	@ 0x439
 8012a04:	494c      	ldr	r1, [pc, #304]	@ (8012b38 <tcp_enqueue_flags+0x1cc>)
 8012a06:	484a      	ldr	r0, [pc, #296]	@ (8012b30 <tcp_enqueue_flags+0x1c4>)
 8012a08:	f004 ffcc 	bl	80179a4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012a10:	78fa      	ldrb	r2, [r7, #3]
 8012a12:	7ffb      	ldrb	r3, [r7, #31]
 8012a14:	9300      	str	r3, [sp, #0]
 8012a16:	460b      	mov	r3, r1
 8012a18:	6939      	ldr	r1, [r7, #16]
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f7ff f91a 	bl	8011c54 <tcp_create_segment>
 8012a20:	60f8      	str	r0, [r7, #12]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d109      	bne.n	8012a3c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	8b5b      	ldrh	r3, [r3, #26]
 8012a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012a36:	f04f 33ff 	mov.w	r3, #4294967295
 8012a3a:	e070      	b.n	8012b1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	f003 0303 	and.w	r3, r3, #3
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d006      	beq.n	8012a56 <tcp_enqueue_flags+0xea>
 8012a48:	4b37      	ldr	r3, [pc, #220]	@ (8012b28 <tcp_enqueue_flags+0x1bc>)
 8012a4a:	f240 4242 	movw	r2, #1090	@ 0x442
 8012a4e:	493b      	ldr	r1, [pc, #236]	@ (8012b3c <tcp_enqueue_flags+0x1d0>)
 8012a50:	4837      	ldr	r0, [pc, #220]	@ (8012b30 <tcp_enqueue_flags+0x1c4>)
 8012a52:	f004 ffa7 	bl	80179a4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	891b      	ldrh	r3, [r3, #8]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d006      	beq.n	8012a6c <tcp_enqueue_flags+0x100>
 8012a5e:	4b32      	ldr	r3, [pc, #200]	@ (8012b28 <tcp_enqueue_flags+0x1bc>)
 8012a60:	f240 4243 	movw	r2, #1091	@ 0x443
 8012a64:	4936      	ldr	r1, [pc, #216]	@ (8012b40 <tcp_enqueue_flags+0x1d4>)
 8012a66:	4832      	ldr	r0, [pc, #200]	@ (8012b30 <tcp_enqueue_flags+0x1c4>)
 8012a68:	f004 ff9c 	bl	80179a4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d103      	bne.n	8012a7c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	68fa      	ldr	r2, [r7, #12]
 8012a78:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012a7a:	e00d      	b.n	8012a98 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a80:	61bb      	str	r3, [r7, #24]
 8012a82:	e002      	b.n	8012a8a <tcp_enqueue_flags+0x11e>
 8012a84:	69bb      	ldr	r3, [r7, #24]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	61bb      	str	r3, [r7, #24]
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d1f8      	bne.n	8012a84 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012aa0:	78fb      	ldrb	r3, [r7, #3]
 8012aa2:	f003 0302 	and.w	r3, r3, #2
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d104      	bne.n	8012ab4 <tcp_enqueue_flags+0x148>
 8012aaa:	78fb      	ldrb	r3, [r7, #3]
 8012aac:	f003 0301 	and.w	r3, r3, #1
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d004      	beq.n	8012abe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012ab8:	1c5a      	adds	r2, r3, #1
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012abe:	78fb      	ldrb	r3, [r7, #3]
 8012ac0:	f003 0301 	and.w	r3, r3, #1
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d006      	beq.n	8012ad6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	8b5b      	ldrh	r3, [r3, #26]
 8012acc:	f043 0320 	orr.w	r3, r3, #32
 8012ad0:	b29a      	uxth	r2, r3
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7fa fcac 	bl	800d438 <pbuf_clen>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012aea:	4413      	add	r3, r2
 8012aec:	b29a      	uxth	r2, r3
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d00e      	beq.n	8012b1c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d10a      	bne.n	8012b1c <tcp_enqueue_flags+0x1b0>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d106      	bne.n	8012b1c <tcp_enqueue_flags+0x1b0>
 8012b0e:	4b06      	ldr	r3, [pc, #24]	@ (8012b28 <tcp_enqueue_flags+0x1bc>)
 8012b10:	f240 4265 	movw	r2, #1125	@ 0x465
 8012b14:	490b      	ldr	r1, [pc, #44]	@ (8012b44 <tcp_enqueue_flags+0x1d8>)
 8012b16:	4806      	ldr	r0, [pc, #24]	@ (8012b30 <tcp_enqueue_flags+0x1c4>)
 8012b18:	f004 ff44 	bl	80179a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012b1c:	2300      	movs	r3, #0
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3720      	adds	r7, #32
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
 8012b26:	bf00      	nop
 8012b28:	0801bbd0 	.word	0x0801bbd0
 8012b2c:	0801bff4 	.word	0x0801bff4
 8012b30:	0801bc24 	.word	0x0801bc24
 8012b34:	0801c04c 	.word	0x0801c04c
 8012b38:	0801c06c 	.word	0x0801c06c
 8012b3c:	0801c0a8 	.word	0x0801c0a8
 8012b40:	0801c0c0 	.word	0x0801c0c0
 8012b44:	0801c0ec 	.word	0x0801c0ec

08012b48 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012b48:	b5b0      	push	{r4, r5, r7, lr}
 8012b4a:	b08a      	sub	sp, #40	@ 0x28
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d106      	bne.n	8012b64 <tcp_output+0x1c>
 8012b56:	4b8a      	ldr	r3, [pc, #552]	@ (8012d80 <tcp_output+0x238>)
 8012b58:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012b5c:	4989      	ldr	r1, [pc, #548]	@ (8012d84 <tcp_output+0x23c>)
 8012b5e:	488a      	ldr	r0, [pc, #552]	@ (8012d88 <tcp_output+0x240>)
 8012b60:	f004 ff20 	bl	80179a4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	7d1b      	ldrb	r3, [r3, #20]
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	d106      	bne.n	8012b7a <tcp_output+0x32>
 8012b6c:	4b84      	ldr	r3, [pc, #528]	@ (8012d80 <tcp_output+0x238>)
 8012b6e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012b72:	4986      	ldr	r1, [pc, #536]	@ (8012d8c <tcp_output+0x244>)
 8012b74:	4884      	ldr	r0, [pc, #528]	@ (8012d88 <tcp_output+0x240>)
 8012b76:	f004 ff15 	bl	80179a4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012b7a:	4b85      	ldr	r3, [pc, #532]	@ (8012d90 <tcp_output+0x248>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d101      	bne.n	8012b88 <tcp_output+0x40>
    return ERR_OK;
 8012b84:	2300      	movs	r3, #0
 8012b86:	e1ce      	b.n	8012f26 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012b94:	4293      	cmp	r3, r2
 8012b96:	bf28      	it	cs
 8012b98:	4613      	movcs	r3, r2
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ba2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d10b      	bne.n	8012bc2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	8b5b      	ldrh	r3, [r3, #26]
 8012bae:	f003 0302 	and.w	r3, r3, #2
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	f000 81aa 	beq.w	8012f0c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f000 fdcb 	bl	8013754 <tcp_send_empty_ack>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	e1b1      	b.n	8012f26 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012bc2:	6879      	ldr	r1, [r7, #4]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	3304      	adds	r3, #4
 8012bc8:	461a      	mov	r2, r3
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f7ff f826 	bl	8011c1c <tcp_route>
 8012bd0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d102      	bne.n	8012bde <tcp_output+0x96>
    return ERR_RTE;
 8012bd8:	f06f 0303 	mvn.w	r3, #3
 8012bdc:	e1a3      	b.n	8012f26 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d003      	beq.n	8012bec <tcp_output+0xa4>
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d111      	bne.n	8012c10 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d002      	beq.n	8012bf8 <tcp_output+0xb0>
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	3304      	adds	r3, #4
 8012bf6:	e000      	b.n	8012bfa <tcp_output+0xb2>
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d102      	bne.n	8012c08 <tcp_output+0xc0>
      return ERR_RTE;
 8012c02:	f06f 0303 	mvn.w	r3, #3
 8012c06:	e18e      	b.n	8012f26 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	681a      	ldr	r2, [r3, #0]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7f8 ffb9 	bl	800bb8e <lwip_htonl>
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c22:	1ad3      	subs	r3, r2, r3
 8012c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c26:	8912      	ldrh	r2, [r2, #8]
 8012c28:	4413      	add	r3, r2
 8012c2a:	69ba      	ldr	r2, [r7, #24]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d227      	bcs.n	8012c80 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012c36:	461a      	mov	r2, r3
 8012c38:	69bb      	ldr	r3, [r7, #24]
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d114      	bne.n	8012c68 <tcp_output+0x120>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d110      	bne.n	8012c68 <tcp_output+0x120>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d10b      	bne.n	8012c68 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2200      	movs	r2, #0
 8012c54:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2200      	movs	r2, #0
 8012c64:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	8b5b      	ldrh	r3, [r3, #26]
 8012c6c:	f003 0302 	and.w	r3, r3, #2
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	f000 814d 	beq.w	8012f10 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f000 fd6c 	bl	8013754 <tcp_send_empty_ack>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	e152      	b.n	8012f26 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2200      	movs	r2, #0
 8012c84:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c8c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012c8e:	6a3b      	ldr	r3, [r7, #32]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	f000 811c 	beq.w	8012ece <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012c96:	e002      	b.n	8012c9e <tcp_output+0x156>
 8012c98:	6a3b      	ldr	r3, [r7, #32]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	623b      	str	r3, [r7, #32]
 8012c9e:	6a3b      	ldr	r3, [r7, #32]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d1f8      	bne.n	8012c98 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012ca6:	e112      	b.n	8012ece <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012caa:	68db      	ldr	r3, [r3, #12]
 8012cac:	899b      	ldrh	r3, [r3, #12]
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7f8 ff57 	bl	800bb64 <lwip_htons>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	b2db      	uxtb	r3, r3
 8012cba:	f003 0304 	and.w	r3, r3, #4
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d006      	beq.n	8012cd0 <tcp_output+0x188>
 8012cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8012d80 <tcp_output+0x238>)
 8012cc4:	f240 5236 	movw	r2, #1334	@ 0x536
 8012cc8:	4932      	ldr	r1, [pc, #200]	@ (8012d94 <tcp_output+0x24c>)
 8012cca:	482f      	ldr	r0, [pc, #188]	@ (8012d88 <tcp_output+0x240>)
 8012ccc:	f004 fe6a 	bl	80179a4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d01f      	beq.n	8012d18 <tcp_output+0x1d0>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	8b5b      	ldrh	r3, [r3, #26]
 8012cdc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d119      	bne.n	8012d18 <tcp_output+0x1d0>
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d00b      	beq.n	8012d04 <tcp_output+0x1bc>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d110      	bne.n	8012d18 <tcp_output+0x1d0>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cfa:	891a      	ldrh	r2, [r3, #8]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d209      	bcs.n	8012d18 <tcp_output+0x1d0>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d004      	beq.n	8012d18 <tcp_output+0x1d0>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d14:	2b08      	cmp	r3, #8
 8012d16:	d901      	bls.n	8012d1c <tcp_output+0x1d4>
 8012d18:	2301      	movs	r3, #1
 8012d1a:	e000      	b.n	8012d1e <tcp_output+0x1d6>
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d106      	bne.n	8012d30 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	8b5b      	ldrh	r3, [r3, #26]
 8012d26:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f000 80e4 	beq.w	8012ef8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	7d1b      	ldrb	r3, [r3, #20]
 8012d34:	2b02      	cmp	r3, #2
 8012d36:	d00d      	beq.n	8012d54 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	899b      	ldrh	r3, [r3, #12]
 8012d3e:	b29c      	uxth	r4, r3
 8012d40:	2010      	movs	r0, #16
 8012d42:	f7f8 ff0f 	bl	800bb64 <lwip_htons>
 8012d46:	4603      	mov	r3, r0
 8012d48:	461a      	mov	r2, r3
 8012d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d4c:	68db      	ldr	r3, [r3, #12]
 8012d4e:	4322      	orrs	r2, r4
 8012d50:	b292      	uxth	r2, r2
 8012d52:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012d54:	697a      	ldr	r2, [r7, #20]
 8012d56:	6879      	ldr	r1, [r7, #4]
 8012d58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012d5a:	f000 f909 	bl	8012f70 <tcp_output_segment>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d016      	beq.n	8012d98 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	8b5b      	ldrh	r3, [r3, #26]
 8012d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d72:	b29a      	uxth	r2, r3
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	835a      	strh	r2, [r3, #26]
      return err;
 8012d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d7c:	e0d3      	b.n	8012f26 <tcp_output+0x3de>
 8012d7e:	bf00      	nop
 8012d80:	0801bbd0 	.word	0x0801bbd0
 8012d84:	0801c114 	.word	0x0801c114
 8012d88:	0801bc24 	.word	0x0801bc24
 8012d8c:	0801c12c 	.word	0x0801c12c
 8012d90:	20014664 	.word	0x20014664
 8012d94:	0801c154 	.word	0x0801c154
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	7d1b      	ldrb	r3, [r3, #20]
 8012da4:	2b02      	cmp	r3, #2
 8012da6:	d006      	beq.n	8012db6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	8b5b      	ldrh	r3, [r3, #26]
 8012dac:	f023 0303 	bic.w	r3, r3, #3
 8012db0:	b29a      	uxth	r2, r3
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	685b      	ldr	r3, [r3, #4]
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7f8 fee6 	bl	800bb8e <lwip_htonl>
 8012dc2:	4604      	mov	r4, r0
 8012dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dc6:	891b      	ldrh	r3, [r3, #8]
 8012dc8:	461d      	mov	r5, r3
 8012dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dcc:	68db      	ldr	r3, [r3, #12]
 8012dce:	899b      	ldrh	r3, [r3, #12]
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7f8 fec6 	bl	800bb64 <lwip_htons>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	f003 0303 	and.w	r3, r3, #3
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d001      	beq.n	8012de8 <tcp_output+0x2a0>
 8012de4:	2301      	movs	r3, #1
 8012de6:	e000      	b.n	8012dea <tcp_output+0x2a2>
 8012de8:	2300      	movs	r3, #0
 8012dea:	442b      	add	r3, r5
 8012dec:	4423      	add	r3, r4
 8012dee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	1ad3      	subs	r3, r2, r3
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	da02      	bge.n	8012e02 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	68ba      	ldr	r2, [r7, #8]
 8012e00:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e04:	891b      	ldrh	r3, [r3, #8]
 8012e06:	461c      	mov	r4, r3
 8012e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e0a:	68db      	ldr	r3, [r3, #12]
 8012e0c:	899b      	ldrh	r3, [r3, #12]
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7f8 fea7 	bl	800bb64 <lwip_htons>
 8012e16:	4603      	mov	r3, r0
 8012e18:	b2db      	uxtb	r3, r3
 8012e1a:	f003 0303 	and.w	r3, r3, #3
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d001      	beq.n	8012e26 <tcp_output+0x2de>
 8012e22:	2301      	movs	r3, #1
 8012e24:	e000      	b.n	8012e28 <tcp_output+0x2e0>
 8012e26:	2300      	movs	r3, #0
 8012e28:	4423      	add	r3, r4
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d049      	beq.n	8012ec2 <tcp_output+0x37a>
      seg->next = NULL;
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e30:	2200      	movs	r2, #0
 8012e32:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d105      	bne.n	8012e48 <tcp_output+0x300>
        pcb->unacked = seg;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e40:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e44:	623b      	str	r3, [r7, #32]
 8012e46:	e03f      	b.n	8012ec8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e4a:	68db      	ldr	r3, [r3, #12]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7f8 fe9d 	bl	800bb8e <lwip_htonl>
 8012e54:	4604      	mov	r4, r0
 8012e56:	6a3b      	ldr	r3, [r7, #32]
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7f8 fe96 	bl	800bb8e <lwip_htonl>
 8012e62:	4603      	mov	r3, r0
 8012e64:	1ae3      	subs	r3, r4, r3
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	da24      	bge.n	8012eb4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	3370      	adds	r3, #112	@ 0x70
 8012e6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012e70:	e002      	b.n	8012e78 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012e72:	69fb      	ldr	r3, [r7, #28]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d011      	beq.n	8012ea4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e80:	69fb      	ldr	r3, [r7, #28]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	68db      	ldr	r3, [r3, #12]
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7f8 fe80 	bl	800bb8e <lwip_htonl>
 8012e8e:	4604      	mov	r4, r0
 8012e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e92:	68db      	ldr	r3, [r3, #12]
 8012e94:	685b      	ldr	r3, [r3, #4]
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7f8 fe79 	bl	800bb8e <lwip_htonl>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	dbe6      	blt.n	8012e72 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eaa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012eac:	69fb      	ldr	r3, [r7, #28]
 8012eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012eb0:	601a      	str	r2, [r3, #0]
 8012eb2:	e009      	b.n	8012ec8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012eb4:	6a3b      	ldr	r3, [r7, #32]
 8012eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012eb8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012eba:	6a3b      	ldr	r3, [r7, #32]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	623b      	str	r3, [r7, #32]
 8012ec0:	e002      	b.n	8012ec8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012ec4:	f7fb ff01 	bl	800ecca <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d012      	beq.n	8012efa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ed6:	68db      	ldr	r3, [r3, #12]
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7f8 fe57 	bl	800bb8e <lwip_htonl>
 8012ee0:	4602      	mov	r2, r0
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ee6:	1ad3      	subs	r3, r2, r3
 8012ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012eea:	8912      	ldrh	r2, [r2, #8]
 8012eec:	4413      	add	r3, r2
  while (seg != NULL &&
 8012eee:	69ba      	ldr	r2, [r7, #24]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	f4bf aed9 	bcs.w	8012ca8 <tcp_output+0x160>
 8012ef6:	e000      	b.n	8012efa <tcp_output+0x3b2>
      break;
 8012ef8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d108      	bne.n	8012f14 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2200      	movs	r2, #0
 8012f06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012f0a:	e004      	b.n	8012f16 <tcp_output+0x3ce>
    goto output_done;
 8012f0c:	bf00      	nop
 8012f0e:	e002      	b.n	8012f16 <tcp_output+0x3ce>
    goto output_done;
 8012f10:	bf00      	nop
 8012f12:	e000      	b.n	8012f16 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012f14:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	8b5b      	ldrh	r3, [r3, #26]
 8012f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012f1e:	b29a      	uxth	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012f24:	2300      	movs	r3, #0
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3728      	adds	r7, #40	@ 0x28
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8012f2e:	bf00      	nop

08012f30 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b082      	sub	sp, #8
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d106      	bne.n	8012f4c <tcp_output_segment_busy+0x1c>
 8012f3e:	4b09      	ldr	r3, [pc, #36]	@ (8012f64 <tcp_output_segment_busy+0x34>)
 8012f40:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012f44:	4908      	ldr	r1, [pc, #32]	@ (8012f68 <tcp_output_segment_busy+0x38>)
 8012f46:	4809      	ldr	r0, [pc, #36]	@ (8012f6c <tcp_output_segment_busy+0x3c>)
 8012f48:	f004 fd2c 	bl	80179a4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	7b9b      	ldrb	r3, [r3, #14]
 8012f52:	2b01      	cmp	r3, #1
 8012f54:	d001      	beq.n	8012f5a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012f56:	2301      	movs	r3, #1
 8012f58:	e000      	b.n	8012f5c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012f5a:	2300      	movs	r3, #0
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3708      	adds	r7, #8
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	0801bbd0 	.word	0x0801bbd0
 8012f68:	0801c16c 	.word	0x0801c16c
 8012f6c:	0801bc24 	.word	0x0801bc24

08012f70 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012f70:	b5b0      	push	{r4, r5, r7, lr}
 8012f72:	b08c      	sub	sp, #48	@ 0x30
 8012f74:	af04      	add	r7, sp, #16
 8012f76:	60f8      	str	r0, [r7, #12]
 8012f78:	60b9      	str	r1, [r7, #8]
 8012f7a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d106      	bne.n	8012f90 <tcp_output_segment+0x20>
 8012f82:	4b64      	ldr	r3, [pc, #400]	@ (8013114 <tcp_output_segment+0x1a4>)
 8012f84:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012f88:	4963      	ldr	r1, [pc, #396]	@ (8013118 <tcp_output_segment+0x1a8>)
 8012f8a:	4864      	ldr	r0, [pc, #400]	@ (801311c <tcp_output_segment+0x1ac>)
 8012f8c:	f004 fd0a 	bl	80179a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d106      	bne.n	8012fa4 <tcp_output_segment+0x34>
 8012f96:	4b5f      	ldr	r3, [pc, #380]	@ (8013114 <tcp_output_segment+0x1a4>)
 8012f98:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012f9c:	4960      	ldr	r1, [pc, #384]	@ (8013120 <tcp_output_segment+0x1b0>)
 8012f9e:	485f      	ldr	r0, [pc, #380]	@ (801311c <tcp_output_segment+0x1ac>)
 8012fa0:	f004 fd00 	bl	80179a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d106      	bne.n	8012fb8 <tcp_output_segment+0x48>
 8012faa:	4b5a      	ldr	r3, [pc, #360]	@ (8013114 <tcp_output_segment+0x1a4>)
 8012fac:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012fb0:	495c      	ldr	r1, [pc, #368]	@ (8013124 <tcp_output_segment+0x1b4>)
 8012fb2:	485a      	ldr	r0, [pc, #360]	@ (801311c <tcp_output_segment+0x1ac>)
 8012fb4:	f004 fcf6 	bl	80179a4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	f7ff ffb9 	bl	8012f30 <tcp_output_segment_busy>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d001      	beq.n	8012fc8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	e0a1      	b.n	801310c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	68dc      	ldr	r4, [r3, #12]
 8012fd0:	4610      	mov	r0, r2
 8012fd2:	f7f8 fddc 	bl	800bb8e <lwip_htonl>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	68dc      	ldr	r4, [r3, #12]
 8012fe2:	4610      	mov	r0, r2
 8012fe4:	f7f8 fdbe 	bl	800bb64 <lwip_htons>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ff0:	68ba      	ldr	r2, [r7, #8]
 8012ff2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012ff4:	441a      	add	r2, r3
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	68db      	ldr	r3, [r3, #12]
 8012ffe:	3314      	adds	r3, #20
 8013000:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	7a9b      	ldrb	r3, [r3, #10]
 8013006:	f003 0301 	and.w	r3, r3, #1
 801300a:	2b00      	cmp	r3, #0
 801300c:	d015      	beq.n	801303a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	3304      	adds	r3, #4
 8013012:	461a      	mov	r2, r3
 8013014:	6879      	ldr	r1, [r7, #4]
 8013016:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801301a:	f7fc fa39 	bl	800f490 <tcp_eff_send_mss_netif>
 801301e:	4603      	mov	r3, r0
 8013020:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013022:	8b7b      	ldrh	r3, [r7, #26]
 8013024:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013028:	4618      	mov	r0, r3
 801302a:	f7f8 fdb0 	bl	800bb8e <lwip_htonl>
 801302e:	4602      	mov	r2, r0
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013034:	69fb      	ldr	r3, [r7, #28]
 8013036:	3304      	adds	r3, #4
 8013038:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013040:	2b00      	cmp	r3, #0
 8013042:	da02      	bge.n	801304a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	2200      	movs	r2, #0
 8013048:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801304e:	2b00      	cmp	r3, #0
 8013050:	d10c      	bne.n	801306c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013052:	4b35      	ldr	r3, [pc, #212]	@ (8013128 <tcp_output_segment+0x1b8>)
 8013054:	681a      	ldr	r2, [r3, #0]
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	68db      	ldr	r3, [r3, #12]
 801305e:	685b      	ldr	r3, [r3, #4]
 8013060:	4618      	mov	r0, r3
 8013062:	f7f8 fd94 	bl	800bb8e <lwip_htonl>
 8013066:	4602      	mov	r2, r0
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	68da      	ldr	r2, [r3, #12]
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	685b      	ldr	r3, [r3, #4]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	1ad3      	subs	r3, r2, r3
 8013078:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	8959      	ldrh	r1, [r3, #10]
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	8b3a      	ldrh	r2, [r7, #24]
 8013086:	1a8a      	subs	r2, r1, r2
 8013088:	b292      	uxth	r2, r2
 801308a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	685b      	ldr	r3, [r3, #4]
 8013090:	8919      	ldrh	r1, [r3, #8]
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	8b3a      	ldrh	r2, [r7, #24]
 8013098:	1a8a      	subs	r2, r1, r2
 801309a:	b292      	uxth	r2, r2
 801309c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	68fa      	ldr	r2, [r7, #12]
 80130a4:	68d2      	ldr	r2, [r2, #12]
 80130a6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	68db      	ldr	r3, [r3, #12]
 80130ac:	2200      	movs	r2, #0
 80130ae:	741a      	strb	r2, [r3, #16]
 80130b0:	2200      	movs	r2, #0
 80130b2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	68da      	ldr	r2, [r3, #12]
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	7a9b      	ldrb	r3, [r3, #10]
 80130bc:	f003 0301 	and.w	r3, r3, #1
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d001      	beq.n	80130c8 <tcp_output_segment+0x158>
 80130c4:	2318      	movs	r3, #24
 80130c6:	e000      	b.n	80130ca <tcp_output_segment+0x15a>
 80130c8:	2314      	movs	r3, #20
 80130ca:	4413      	add	r3, r2
 80130cc:	69fa      	ldr	r2, [r7, #28]
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d006      	beq.n	80130e0 <tcp_output_segment+0x170>
 80130d2:	4b10      	ldr	r3, [pc, #64]	@ (8013114 <tcp_output_segment+0x1a4>)
 80130d4:	f240 621c 	movw	r2, #1564	@ 0x61c
 80130d8:	4914      	ldr	r1, [pc, #80]	@ (801312c <tcp_output_segment+0x1bc>)
 80130da:	4810      	ldr	r0, [pc, #64]	@ (801311c <tcp_output_segment+0x1ac>)
 80130dc:	f004 fc62 	bl	80179a4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	6858      	ldr	r0, [r3, #4]
 80130e4:	68b9      	ldr	r1, [r7, #8]
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	1d1c      	adds	r4, r3, #4
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	7add      	ldrb	r5, [r3, #11]
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	7a9b      	ldrb	r3, [r3, #10]
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	9202      	str	r2, [sp, #8]
 80130f6:	2206      	movs	r2, #6
 80130f8:	9201      	str	r2, [sp, #4]
 80130fa:	9300      	str	r3, [sp, #0]
 80130fc:	462b      	mov	r3, r5
 80130fe:	4622      	mov	r2, r4
 8013100:	f002 fd84 	bl	8015c0c <ip4_output_if>
 8013104:	4603      	mov	r3, r0
 8013106:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013108:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801310c:	4618      	mov	r0, r3
 801310e:	3720      	adds	r7, #32
 8013110:	46bd      	mov	sp, r7
 8013112:	bdb0      	pop	{r4, r5, r7, pc}
 8013114:	0801bbd0 	.word	0x0801bbd0
 8013118:	0801c194 	.word	0x0801c194
 801311c:	0801bc24 	.word	0x0801bc24
 8013120:	0801c1b4 	.word	0x0801c1b4
 8013124:	0801c1d4 	.word	0x0801c1d4
 8013128:	20014618 	.word	0x20014618
 801312c:	0801c1f8 	.word	0x0801c1f8

08013130 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013130:	b5b0      	push	{r4, r5, r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d106      	bne.n	801314c <tcp_rexmit_rto_prepare+0x1c>
 801313e:	4b31      	ldr	r3, [pc, #196]	@ (8013204 <tcp_rexmit_rto_prepare+0xd4>)
 8013140:	f240 6263 	movw	r2, #1635	@ 0x663
 8013144:	4930      	ldr	r1, [pc, #192]	@ (8013208 <tcp_rexmit_rto_prepare+0xd8>)
 8013146:	4831      	ldr	r0, [pc, #196]	@ (801320c <tcp_rexmit_rto_prepare+0xdc>)
 8013148:	f004 fc2c 	bl	80179a4 <iprintf>

  if (pcb->unacked == NULL) {
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013150:	2b00      	cmp	r3, #0
 8013152:	d102      	bne.n	801315a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013154:	f06f 0305 	mvn.w	r3, #5
 8013158:	e050      	b.n	80131fc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801315e:	60fb      	str	r3, [r7, #12]
 8013160:	e00b      	b.n	801317a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013162:	68f8      	ldr	r0, [r7, #12]
 8013164:	f7ff fee4 	bl	8012f30 <tcp_output_segment_busy>
 8013168:	4603      	mov	r3, r0
 801316a:	2b00      	cmp	r3, #0
 801316c:	d002      	beq.n	8013174 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801316e:	f06f 0305 	mvn.w	r3, #5
 8013172:	e043      	b.n	80131fc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	60fb      	str	r3, [r7, #12]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d1ef      	bne.n	8013162 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013182:	68f8      	ldr	r0, [r7, #12]
 8013184:	f7ff fed4 	bl	8012f30 <tcp_output_segment_busy>
 8013188:	4603      	mov	r3, r0
 801318a:	2b00      	cmp	r3, #0
 801318c:	d002      	beq.n	8013194 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801318e:	f06f 0305 	mvn.w	r3, #5
 8013192:	e033      	b.n	80131fc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	8b5b      	ldrh	r3, [r3, #26]
 80131ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80131b2:	b29a      	uxth	r2, r3
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	4618      	mov	r0, r3
 80131c0:	f7f8 fce5 	bl	800bb8e <lwip_htonl>
 80131c4:	4604      	mov	r4, r0
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	891b      	ldrh	r3, [r3, #8]
 80131ca:	461d      	mov	r5, r3
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	899b      	ldrh	r3, [r3, #12]
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7f8 fcc5 	bl	800bb64 <lwip_htons>
 80131da:	4603      	mov	r3, r0
 80131dc:	b2db      	uxtb	r3, r3
 80131de:	f003 0303 	and.w	r3, r3, #3
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d001      	beq.n	80131ea <tcp_rexmit_rto_prepare+0xba>
 80131e6:	2301      	movs	r3, #1
 80131e8:	e000      	b.n	80131ec <tcp_rexmit_rto_prepare+0xbc>
 80131ea:	2300      	movs	r3, #0
 80131ec:	442b      	add	r3, r5
 80131ee:	18e2      	adds	r2, r4, r3
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2200      	movs	r2, #0
 80131f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80131fa:	2300      	movs	r3, #0
}
 80131fc:	4618      	mov	r0, r3
 80131fe:	3710      	adds	r7, #16
 8013200:	46bd      	mov	sp, r7
 8013202:	bdb0      	pop	{r4, r5, r7, pc}
 8013204:	0801bbd0 	.word	0x0801bbd0
 8013208:	0801c20c 	.word	0x0801c20c
 801320c:	0801bc24 	.word	0x0801bc24

08013210 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b082      	sub	sp, #8
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d106      	bne.n	801322c <tcp_rexmit_rto_commit+0x1c>
 801321e:	4b0d      	ldr	r3, [pc, #52]	@ (8013254 <tcp_rexmit_rto_commit+0x44>)
 8013220:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013224:	490c      	ldr	r1, [pc, #48]	@ (8013258 <tcp_rexmit_rto_commit+0x48>)
 8013226:	480d      	ldr	r0, [pc, #52]	@ (801325c <tcp_rexmit_rto_commit+0x4c>)
 8013228:	f004 fbbc 	bl	80179a4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013232:	2bff      	cmp	r3, #255	@ 0xff
 8013234:	d007      	beq.n	8013246 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801323c:	3301      	adds	r3, #1
 801323e:	b2da      	uxtb	r2, r3
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f7ff fc7e 	bl	8012b48 <tcp_output>
}
 801324c:	bf00      	nop
 801324e:	3708      	adds	r7, #8
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	0801bbd0 	.word	0x0801bbd0
 8013258:	0801c230 	.word	0x0801c230
 801325c:	0801bc24 	.word	0x0801bc24

08013260 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b082      	sub	sp, #8
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d106      	bne.n	801327c <tcp_rexmit_rto+0x1c>
 801326e:	4b0a      	ldr	r3, [pc, #40]	@ (8013298 <tcp_rexmit_rto+0x38>)
 8013270:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8013274:	4909      	ldr	r1, [pc, #36]	@ (801329c <tcp_rexmit_rto+0x3c>)
 8013276:	480a      	ldr	r0, [pc, #40]	@ (80132a0 <tcp_rexmit_rto+0x40>)
 8013278:	f004 fb94 	bl	80179a4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f7ff ff57 	bl	8013130 <tcp_rexmit_rto_prepare>
 8013282:	4603      	mov	r3, r0
 8013284:	2b00      	cmp	r3, #0
 8013286:	d102      	bne.n	801328e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f7ff ffc1 	bl	8013210 <tcp_rexmit_rto_commit>
  }
}
 801328e:	bf00      	nop
 8013290:	3708      	adds	r7, #8
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	0801bbd0 	.word	0x0801bbd0
 801329c:	0801c254 	.word	0x0801c254
 80132a0:	0801bc24 	.word	0x0801bc24

080132a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80132a4:	b590      	push	{r4, r7, lr}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d106      	bne.n	80132c0 <tcp_rexmit+0x1c>
 80132b2:	4b2f      	ldr	r3, [pc, #188]	@ (8013370 <tcp_rexmit+0xcc>)
 80132b4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80132b8:	492e      	ldr	r1, [pc, #184]	@ (8013374 <tcp_rexmit+0xd0>)
 80132ba:	482f      	ldr	r0, [pc, #188]	@ (8013378 <tcp_rexmit+0xd4>)
 80132bc:	f004 fb72 	bl	80179a4 <iprintf>

  if (pcb->unacked == NULL) {
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d102      	bne.n	80132ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 80132c8:	f06f 0305 	mvn.w	r3, #5
 80132cc:	e04c      	b.n	8013368 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80132d4:	68b8      	ldr	r0, [r7, #8]
 80132d6:	f7ff fe2b 	bl	8012f30 <tcp_output_segment_busy>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d002      	beq.n	80132e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80132e0:	f06f 0305 	mvn.w	r3, #5
 80132e4:	e040      	b.n	8013368 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	681a      	ldr	r2, [r3, #0]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	336c      	adds	r3, #108	@ 0x6c
 80132f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80132f4:	e002      	b.n	80132fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d011      	beq.n	8013328 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	4618      	mov	r0, r3
 801330e:	f7f8 fc3e 	bl	800bb8e <lwip_htonl>
 8013312:	4604      	mov	r4, r0
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	4618      	mov	r0, r3
 801331c:	f7f8 fc37 	bl	800bb8e <lwip_htonl>
 8013320:	4603      	mov	r3, r0
 8013322:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013324:	2b00      	cmp	r3, #0
 8013326:	dbe6      	blt.n	80132f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681a      	ldr	r2, [r3, #0]
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	68ba      	ldr	r2, [r7, #8]
 8013334:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d103      	bne.n	8013346 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	2200      	movs	r2, #0
 8013342:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801334c:	2bff      	cmp	r3, #255	@ 0xff
 801334e:	d007      	beq.n	8013360 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013356:	3301      	adds	r3, #1
 8013358:	b2da      	uxtb	r2, r3
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2200      	movs	r2, #0
 8013364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013366:	2300      	movs	r3, #0
}
 8013368:	4618      	mov	r0, r3
 801336a:	3714      	adds	r7, #20
 801336c:	46bd      	mov	sp, r7
 801336e:	bd90      	pop	{r4, r7, pc}
 8013370:	0801bbd0 	.word	0x0801bbd0
 8013374:	0801c270 	.word	0x0801c270
 8013378:	0801bc24 	.word	0x0801bc24

0801337c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d106      	bne.n	8013398 <tcp_rexmit_fast+0x1c>
 801338a:	4b2a      	ldr	r3, [pc, #168]	@ (8013434 <tcp_rexmit_fast+0xb8>)
 801338c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8013390:	4929      	ldr	r1, [pc, #164]	@ (8013438 <tcp_rexmit_fast+0xbc>)
 8013392:	482a      	ldr	r0, [pc, #168]	@ (801343c <tcp_rexmit_fast+0xc0>)
 8013394:	f004 fb06 	bl	80179a4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801339c:	2b00      	cmp	r3, #0
 801339e:	d045      	beq.n	801342c <tcp_rexmit_fast+0xb0>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	8b5b      	ldrh	r3, [r3, #26]
 80133a4:	f003 0304 	and.w	r3, r3, #4
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d13f      	bne.n	801342c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f7ff ff79 	bl	80132a4 <tcp_rexmit>
 80133b2:	4603      	mov	r3, r0
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d139      	bne.n	801342c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80133c4:	4293      	cmp	r3, r2
 80133c6:	bf28      	it	cs
 80133c8:	4613      	movcs	r3, r2
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	da00      	bge.n	80133d2 <tcp_rexmit_fast+0x56>
 80133d0:	3301      	adds	r3, #1
 80133d2:	105b      	asrs	r3, r3, #1
 80133d4:	b29a      	uxth	r2, r3
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80133e2:	461a      	mov	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133e8:	005b      	lsls	r3, r3, #1
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d206      	bcs.n	80133fc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133f2:	005b      	lsls	r3, r3, #1
 80133f4:	b29a      	uxth	r2, r3
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013406:	4619      	mov	r1, r3
 8013408:	0049      	lsls	r1, r1, #1
 801340a:	440b      	add	r3, r1
 801340c:	b29b      	uxth	r3, r3
 801340e:	4413      	add	r3, r2
 8013410:	b29a      	uxth	r2, r3
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	8b5b      	ldrh	r3, [r3, #26]
 801341c:	f043 0304 	orr.w	r3, r3, #4
 8013420:	b29a      	uxth	r2, r3
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2200      	movs	r2, #0
 801342a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801342c:	bf00      	nop
 801342e:	3708      	adds	r7, #8
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}
 8013434:	0801bbd0 	.word	0x0801bbd0
 8013438:	0801c288 	.word	0x0801c288
 801343c:	0801bc24 	.word	0x0801bc24

08013440 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b086      	sub	sp, #24
 8013444:	af00      	add	r7, sp, #0
 8013446:	60f8      	str	r0, [r7, #12]
 8013448:	607b      	str	r3, [r7, #4]
 801344a:	460b      	mov	r3, r1
 801344c:	817b      	strh	r3, [r7, #10]
 801344e:	4613      	mov	r3, r2
 8013450:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013452:	897a      	ldrh	r2, [r7, #10]
 8013454:	893b      	ldrh	r3, [r7, #8]
 8013456:	4413      	add	r3, r2
 8013458:	b29b      	uxth	r3, r3
 801345a:	3314      	adds	r3, #20
 801345c:	b29b      	uxth	r3, r3
 801345e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013462:	4619      	mov	r1, r3
 8013464:	2022      	movs	r0, #34	@ 0x22
 8013466:	f7f9 fc7b 	bl	800cd60 <pbuf_alloc>
 801346a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d04d      	beq.n	801350e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013472:	897b      	ldrh	r3, [r7, #10]
 8013474:	3313      	adds	r3, #19
 8013476:	697a      	ldr	r2, [r7, #20]
 8013478:	8952      	ldrh	r2, [r2, #10]
 801347a:	4293      	cmp	r3, r2
 801347c:	db06      	blt.n	801348c <tcp_output_alloc_header_common+0x4c>
 801347e:	4b26      	ldr	r3, [pc, #152]	@ (8013518 <tcp_output_alloc_header_common+0xd8>)
 8013480:	f240 7223 	movw	r2, #1827	@ 0x723
 8013484:	4925      	ldr	r1, [pc, #148]	@ (801351c <tcp_output_alloc_header_common+0xdc>)
 8013486:	4826      	ldr	r0, [pc, #152]	@ (8013520 <tcp_output_alloc_header_common+0xe0>)
 8013488:	f004 fa8c 	bl	80179a4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	685b      	ldr	r3, [r3, #4]
 8013490:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013492:	8c3b      	ldrh	r3, [r7, #32]
 8013494:	4618      	mov	r0, r3
 8013496:	f7f8 fb65 	bl	800bb64 <lwip_htons>
 801349a:	4603      	mov	r3, r0
 801349c:	461a      	mov	r2, r3
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80134a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7f8 fb5d 	bl	800bb64 <lwip_htons>
 80134aa:	4603      	mov	r3, r0
 80134ac:	461a      	mov	r2, r3
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	687a      	ldr	r2, [r7, #4]
 80134b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80134b8:	68f8      	ldr	r0, [r7, #12]
 80134ba:	f7f8 fb68 	bl	800bb8e <lwip_htonl>
 80134be:	4602      	mov	r2, r0
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80134c4:	897b      	ldrh	r3, [r7, #10]
 80134c6:	089b      	lsrs	r3, r3, #2
 80134c8:	b29b      	uxth	r3, r3
 80134ca:	3305      	adds	r3, #5
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	031b      	lsls	r3, r3, #12
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80134d6:	b29b      	uxth	r3, r3
 80134d8:	4313      	orrs	r3, r2
 80134da:	b29b      	uxth	r3, r3
 80134dc:	4618      	mov	r0, r3
 80134de:	f7f8 fb41 	bl	800bb64 <lwip_htons>
 80134e2:	4603      	mov	r3, r0
 80134e4:	461a      	mov	r2, r3
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80134ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7f8 fb39 	bl	800bb64 <lwip_htons>
 80134f2:	4603      	mov	r3, r0
 80134f4:	461a      	mov	r2, r3
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	2200      	movs	r2, #0
 80134fe:	741a      	strb	r2, [r3, #16]
 8013500:	2200      	movs	r2, #0
 8013502:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	2200      	movs	r2, #0
 8013508:	749a      	strb	r2, [r3, #18]
 801350a:	2200      	movs	r2, #0
 801350c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801350e:	697b      	ldr	r3, [r7, #20]
}
 8013510:	4618      	mov	r0, r3
 8013512:	3718      	adds	r7, #24
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}
 8013518:	0801bbd0 	.word	0x0801bbd0
 801351c:	0801c2a8 	.word	0x0801c2a8
 8013520:	0801bc24 	.word	0x0801bc24

08013524 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013524:	b5b0      	push	{r4, r5, r7, lr}
 8013526:	b08a      	sub	sp, #40	@ 0x28
 8013528:	af04      	add	r7, sp, #16
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	607b      	str	r3, [r7, #4]
 801352e:	460b      	mov	r3, r1
 8013530:	817b      	strh	r3, [r7, #10]
 8013532:	4613      	mov	r3, r2
 8013534:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d106      	bne.n	801354a <tcp_output_alloc_header+0x26>
 801353c:	4b15      	ldr	r3, [pc, #84]	@ (8013594 <tcp_output_alloc_header+0x70>)
 801353e:	f240 7242 	movw	r2, #1858	@ 0x742
 8013542:	4915      	ldr	r1, [pc, #84]	@ (8013598 <tcp_output_alloc_header+0x74>)
 8013544:	4815      	ldr	r0, [pc, #84]	@ (801359c <tcp_output_alloc_header+0x78>)
 8013546:	f004 fa2d 	bl	80179a4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	8adb      	ldrh	r3, [r3, #22]
 8013552:	68fa      	ldr	r2, [r7, #12]
 8013554:	8b12      	ldrh	r2, [r2, #24]
 8013556:	68f9      	ldr	r1, [r7, #12]
 8013558:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801355a:	893d      	ldrh	r5, [r7, #8]
 801355c:	897c      	ldrh	r4, [r7, #10]
 801355e:	9103      	str	r1, [sp, #12]
 8013560:	2110      	movs	r1, #16
 8013562:	9102      	str	r1, [sp, #8]
 8013564:	9201      	str	r2, [sp, #4]
 8013566:	9300      	str	r3, [sp, #0]
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	462a      	mov	r2, r5
 801356c:	4621      	mov	r1, r4
 801356e:	f7ff ff67 	bl	8013440 <tcp_output_alloc_header_common>
 8013572:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d006      	beq.n	8013588 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013582:	441a      	add	r2, r3
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8013588:	697b      	ldr	r3, [r7, #20]
}
 801358a:	4618      	mov	r0, r3
 801358c:	3718      	adds	r7, #24
 801358e:	46bd      	mov	sp, r7
 8013590:	bdb0      	pop	{r4, r5, r7, pc}
 8013592:	bf00      	nop
 8013594:	0801bbd0 	.word	0x0801bbd0
 8013598:	0801c2d8 	.word	0x0801c2d8
 801359c:	0801bc24 	.word	0x0801bc24

080135a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b088      	sub	sp, #32
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	4611      	mov	r1, r2
 80135ac:	461a      	mov	r2, r3
 80135ae:	460b      	mov	r3, r1
 80135b0:	71fb      	strb	r3, [r7, #7]
 80135b2:	4613      	mov	r3, r2
 80135b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80135b6:	2300      	movs	r3, #0
 80135b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d106      	bne.n	80135ce <tcp_output_fill_options+0x2e>
 80135c0:	4b12      	ldr	r3, [pc, #72]	@ (801360c <tcp_output_fill_options+0x6c>)
 80135c2:	f240 7256 	movw	r2, #1878	@ 0x756
 80135c6:	4912      	ldr	r1, [pc, #72]	@ (8013610 <tcp_output_fill_options+0x70>)
 80135c8:	4812      	ldr	r0, [pc, #72]	@ (8013614 <tcp_output_fill_options+0x74>)
 80135ca:	f004 f9eb 	bl	80179a4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80135d4:	69bb      	ldr	r3, [r7, #24]
 80135d6:	3314      	adds	r3, #20
 80135d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80135da:	8bfb      	ldrh	r3, [r7, #30]
 80135dc:	009b      	lsls	r3, r3, #2
 80135de:	461a      	mov	r2, r3
 80135e0:	79fb      	ldrb	r3, [r7, #7]
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	f003 0304 	and.w	r3, r3, #4
 80135e8:	4413      	add	r3, r2
 80135ea:	3314      	adds	r3, #20
 80135ec:	69ba      	ldr	r2, [r7, #24]
 80135ee:	4413      	add	r3, r2
 80135f0:	697a      	ldr	r2, [r7, #20]
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d006      	beq.n	8013604 <tcp_output_fill_options+0x64>
 80135f6:	4b05      	ldr	r3, [pc, #20]	@ (801360c <tcp_output_fill_options+0x6c>)
 80135f8:	f240 7275 	movw	r2, #1909	@ 0x775
 80135fc:	4906      	ldr	r1, [pc, #24]	@ (8013618 <tcp_output_fill_options+0x78>)
 80135fe:	4805      	ldr	r0, [pc, #20]	@ (8013614 <tcp_output_fill_options+0x74>)
 8013600:	f004 f9d0 	bl	80179a4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013604:	bf00      	nop
 8013606:	3720      	adds	r7, #32
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}
 801360c:	0801bbd0 	.word	0x0801bbd0
 8013610:	0801c300 	.word	0x0801c300
 8013614:	0801bc24 	.word	0x0801bc24
 8013618:	0801c1f8 	.word	0x0801c1f8

0801361c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b08a      	sub	sp, #40	@ 0x28
 8013620:	af04      	add	r7, sp, #16
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]
 8013628:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d106      	bne.n	801363e <tcp_output_control_segment+0x22>
 8013630:	4b1c      	ldr	r3, [pc, #112]	@ (80136a4 <tcp_output_control_segment+0x88>)
 8013632:	f240 7287 	movw	r2, #1927	@ 0x787
 8013636:	491c      	ldr	r1, [pc, #112]	@ (80136a8 <tcp_output_control_segment+0x8c>)
 8013638:	481c      	ldr	r0, [pc, #112]	@ (80136ac <tcp_output_control_segment+0x90>)
 801363a:	f004 f9b3 	bl	80179a4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801363e:	683a      	ldr	r2, [r7, #0]
 8013640:	6879      	ldr	r1, [r7, #4]
 8013642:	68f8      	ldr	r0, [r7, #12]
 8013644:	f7fe faea 	bl	8011c1c <tcp_route>
 8013648:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d102      	bne.n	8013656 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013650:	23fc      	movs	r3, #252	@ 0xfc
 8013652:	75fb      	strb	r3, [r7, #23]
 8013654:	e01c      	b.n	8013690 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d006      	beq.n	801366a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	7adb      	ldrb	r3, [r3, #11]
 8013660:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	7a9b      	ldrb	r3, [r3, #10]
 8013666:	757b      	strb	r3, [r7, #21]
 8013668:	e003      	b.n	8013672 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801366a:	23ff      	movs	r3, #255	@ 0xff
 801366c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013672:	7dba      	ldrb	r2, [r7, #22]
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	9302      	str	r3, [sp, #8]
 8013678:	2306      	movs	r3, #6
 801367a:	9301      	str	r3, [sp, #4]
 801367c:	7d7b      	ldrb	r3, [r7, #21]
 801367e:	9300      	str	r3, [sp, #0]
 8013680:	4613      	mov	r3, r2
 8013682:	683a      	ldr	r2, [r7, #0]
 8013684:	6879      	ldr	r1, [r7, #4]
 8013686:	68b8      	ldr	r0, [r7, #8]
 8013688:	f002 fac0 	bl	8015c0c <ip4_output_if>
 801368c:	4603      	mov	r3, r0
 801368e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013690:	68b8      	ldr	r0, [r7, #8]
 8013692:	f7f9 fe49 	bl	800d328 <pbuf_free>
  return err;
 8013696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801369a:	4618      	mov	r0, r3
 801369c:	3718      	adds	r7, #24
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	0801bbd0 	.word	0x0801bbd0
 80136a8:	0801c328 	.word	0x0801c328
 80136ac:	0801bc24 	.word	0x0801bc24

080136b0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80136b0:	b590      	push	{r4, r7, lr}
 80136b2:	b08b      	sub	sp, #44	@ 0x2c
 80136b4:	af04      	add	r7, sp, #16
 80136b6:	60f8      	str	r0, [r7, #12]
 80136b8:	60b9      	str	r1, [r7, #8]
 80136ba:	607a      	str	r2, [r7, #4]
 80136bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d106      	bne.n	80136d2 <tcp_rst+0x22>
 80136c4:	4b1f      	ldr	r3, [pc, #124]	@ (8013744 <tcp_rst+0x94>)
 80136c6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80136ca:	491f      	ldr	r1, [pc, #124]	@ (8013748 <tcp_rst+0x98>)
 80136cc:	481f      	ldr	r0, [pc, #124]	@ (801374c <tcp_rst+0x9c>)
 80136ce:	f004 f969 	bl	80179a4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80136d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d106      	bne.n	80136e6 <tcp_rst+0x36>
 80136d8:	4b1a      	ldr	r3, [pc, #104]	@ (8013744 <tcp_rst+0x94>)
 80136da:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80136de:	491c      	ldr	r1, [pc, #112]	@ (8013750 <tcp_rst+0xa0>)
 80136e0:	481a      	ldr	r0, [pc, #104]	@ (801374c <tcp_rst+0x9c>)
 80136e2:	f004 f95f 	bl	80179a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136e6:	2300      	movs	r3, #0
 80136e8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80136ea:	f246 0308 	movw	r3, #24584	@ 0x6008
 80136ee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80136f0:	7dfb      	ldrb	r3, [r7, #23]
 80136f2:	b29c      	uxth	r4, r3
 80136f4:	68b8      	ldr	r0, [r7, #8]
 80136f6:	f7f8 fa4a 	bl	800bb8e <lwip_htonl>
 80136fa:	4602      	mov	r2, r0
 80136fc:	8abb      	ldrh	r3, [r7, #20]
 80136fe:	9303      	str	r3, [sp, #12]
 8013700:	2314      	movs	r3, #20
 8013702:	9302      	str	r3, [sp, #8]
 8013704:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8013706:	9301      	str	r3, [sp, #4]
 8013708:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801370a:	9300      	str	r3, [sp, #0]
 801370c:	4613      	mov	r3, r2
 801370e:	2200      	movs	r2, #0
 8013710:	4621      	mov	r1, r4
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f7ff fe94 	bl	8013440 <tcp_output_alloc_header_common>
 8013718:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d00c      	beq.n	801373a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013720:	7dfb      	ldrb	r3, [r7, #23]
 8013722:	2200      	movs	r2, #0
 8013724:	6939      	ldr	r1, [r7, #16]
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	f7ff ff3a 	bl	80135a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801372c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801372e:	683a      	ldr	r2, [r7, #0]
 8013730:	6939      	ldr	r1, [r7, #16]
 8013732:	68f8      	ldr	r0, [r7, #12]
 8013734:	f7ff ff72 	bl	801361c <tcp_output_control_segment>
 8013738:	e000      	b.n	801373c <tcp_rst+0x8c>
    return;
 801373a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801373c:	371c      	adds	r7, #28
 801373e:	46bd      	mov	sp, r7
 8013740:	bd90      	pop	{r4, r7, pc}
 8013742:	bf00      	nop
 8013744:	0801bbd0 	.word	0x0801bbd0
 8013748:	0801c354 	.word	0x0801c354
 801374c:	0801bc24 	.word	0x0801bc24
 8013750:	0801c370 	.word	0x0801c370

08013754 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013754:	b590      	push	{r4, r7, lr}
 8013756:	b087      	sub	sp, #28
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801375c:	2300      	movs	r3, #0
 801375e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013760:	2300      	movs	r3, #0
 8013762:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d106      	bne.n	8013778 <tcp_send_empty_ack+0x24>
 801376a:	4b28      	ldr	r3, [pc, #160]	@ (801380c <tcp_send_empty_ack+0xb8>)
 801376c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013770:	4927      	ldr	r1, [pc, #156]	@ (8013810 <tcp_send_empty_ack+0xbc>)
 8013772:	4828      	ldr	r0, [pc, #160]	@ (8013814 <tcp_send_empty_ack+0xc0>)
 8013774:	f004 f916 	bl	80179a4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013778:	7dfb      	ldrb	r3, [r7, #23]
 801377a:	009b      	lsls	r3, r3, #2
 801377c:	b2db      	uxtb	r3, r3
 801377e:	f003 0304 	and.w	r3, r3, #4
 8013782:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013784:	7d7b      	ldrb	r3, [r7, #21]
 8013786:	b29c      	uxth	r4, r3
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801378c:	4618      	mov	r0, r3
 801378e:	f7f8 f9fe 	bl	800bb8e <lwip_htonl>
 8013792:	4603      	mov	r3, r0
 8013794:	2200      	movs	r2, #0
 8013796:	4621      	mov	r1, r4
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f7ff fec3 	bl	8013524 <tcp_output_alloc_header>
 801379e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d109      	bne.n	80137ba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	8b5b      	ldrh	r3, [r3, #26]
 80137aa:	f043 0303 	orr.w	r3, r3, #3
 80137ae:	b29a      	uxth	r2, r3
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80137b4:	f06f 0301 	mvn.w	r3, #1
 80137b8:	e023      	b.n	8013802 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80137ba:	7dbb      	ldrb	r3, [r7, #22]
 80137bc:	7dfa      	ldrb	r2, [r7, #23]
 80137be:	6939      	ldr	r1, [r7, #16]
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f7ff feed 	bl	80135a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137c6:	687a      	ldr	r2, [r7, #4]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	3304      	adds	r3, #4
 80137cc:	6939      	ldr	r1, [r7, #16]
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f7ff ff24 	bl	801361c <tcp_output_control_segment>
 80137d4:	4603      	mov	r3, r0
 80137d6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80137d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d007      	beq.n	80137f0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	8b5b      	ldrh	r3, [r3, #26]
 80137e4:	f043 0303 	orr.w	r3, r3, #3
 80137e8:	b29a      	uxth	r2, r3
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	835a      	strh	r2, [r3, #26]
 80137ee:	e006      	b.n	80137fe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	8b5b      	ldrh	r3, [r3, #26]
 80137f4:	f023 0303 	bic.w	r3, r3, #3
 80137f8:	b29a      	uxth	r2, r3
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80137fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013802:	4618      	mov	r0, r3
 8013804:	371c      	adds	r7, #28
 8013806:	46bd      	mov	sp, r7
 8013808:	bd90      	pop	{r4, r7, pc}
 801380a:	bf00      	nop
 801380c:	0801bbd0 	.word	0x0801bbd0
 8013810:	0801c38c 	.word	0x0801c38c
 8013814:	0801bc24 	.word	0x0801bc24

08013818 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013818:	b590      	push	{r4, r7, lr}
 801381a:	b087      	sub	sp, #28
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013820:	2300      	movs	r3, #0
 8013822:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d106      	bne.n	8013838 <tcp_keepalive+0x20>
 801382a:	4b18      	ldr	r3, [pc, #96]	@ (801388c <tcp_keepalive+0x74>)
 801382c:	f640 0224 	movw	r2, #2084	@ 0x824
 8013830:	4917      	ldr	r1, [pc, #92]	@ (8013890 <tcp_keepalive+0x78>)
 8013832:	4818      	ldr	r0, [pc, #96]	@ (8013894 <tcp_keepalive+0x7c>)
 8013834:	f004 f8b6 	bl	80179a4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013838:	7dfb      	ldrb	r3, [r7, #23]
 801383a:	b29c      	uxth	r4, r3
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013840:	3b01      	subs	r3, #1
 8013842:	4618      	mov	r0, r3
 8013844:	f7f8 f9a3 	bl	800bb8e <lwip_htonl>
 8013848:	4603      	mov	r3, r0
 801384a:	2200      	movs	r2, #0
 801384c:	4621      	mov	r1, r4
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f7ff fe68 	bl	8013524 <tcp_output_alloc_header>
 8013854:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d102      	bne.n	8013862 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801385c:	f04f 33ff 	mov.w	r3, #4294967295
 8013860:	e010      	b.n	8013884 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013862:	7dfb      	ldrb	r3, [r7, #23]
 8013864:	2200      	movs	r2, #0
 8013866:	6939      	ldr	r1, [r7, #16]
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f7ff fe99 	bl	80135a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	3304      	adds	r3, #4
 8013874:	6939      	ldr	r1, [r7, #16]
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f7ff fed0 	bl	801361c <tcp_output_control_segment>
 801387c:	4603      	mov	r3, r0
 801387e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013880:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013884:	4618      	mov	r0, r3
 8013886:	371c      	adds	r7, #28
 8013888:	46bd      	mov	sp, r7
 801388a:	bd90      	pop	{r4, r7, pc}
 801388c:	0801bbd0 	.word	0x0801bbd0
 8013890:	0801c3ac 	.word	0x0801c3ac
 8013894:	0801bc24 	.word	0x0801bc24

08013898 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013898:	b590      	push	{r4, r7, lr}
 801389a:	b08b      	sub	sp, #44	@ 0x2c
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80138a0:	2300      	movs	r3, #0
 80138a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d106      	bne.n	80138ba <tcp_zero_window_probe+0x22>
 80138ac:	4b4c      	ldr	r3, [pc, #304]	@ (80139e0 <tcp_zero_window_probe+0x148>)
 80138ae:	f640 024f 	movw	r2, #2127	@ 0x84f
 80138b2:	494c      	ldr	r1, [pc, #304]	@ (80139e4 <tcp_zero_window_probe+0x14c>)
 80138b4:	484c      	ldr	r0, [pc, #304]	@ (80139e8 <tcp_zero_window_probe+0x150>)
 80138b6:	f004 f875 	bl	80179a4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80138be:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80138c0:	6a3b      	ldr	r3, [r7, #32]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d101      	bne.n	80138ca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80138c6:	2300      	movs	r3, #0
 80138c8:	e086      	b.n	80139d8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80138d0:	2bff      	cmp	r3, #255	@ 0xff
 80138d2:	d007      	beq.n	80138e4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80138da:	3301      	adds	r3, #1
 80138dc:	b2da      	uxtb	r2, r3
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80138e4:	6a3b      	ldr	r3, [r7, #32]
 80138e6:	68db      	ldr	r3, [r3, #12]
 80138e8:	899b      	ldrh	r3, [r3, #12]
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7f8 f939 	bl	800bb64 <lwip_htons>
 80138f2:	4603      	mov	r3, r0
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	f003 0301 	and.w	r3, r3, #1
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d005      	beq.n	801390a <tcp_zero_window_probe+0x72>
 80138fe:	6a3b      	ldr	r3, [r7, #32]
 8013900:	891b      	ldrh	r3, [r3, #8]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d101      	bne.n	801390a <tcp_zero_window_probe+0x72>
 8013906:	2301      	movs	r3, #1
 8013908:	e000      	b.n	801390c <tcp_zero_window_probe+0x74>
 801390a:	2300      	movs	r3, #0
 801390c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801390e:	7ffb      	ldrb	r3, [r7, #31]
 8013910:	2b00      	cmp	r3, #0
 8013912:	bf0c      	ite	eq
 8013914:	2301      	moveq	r3, #1
 8013916:	2300      	movne	r3, #0
 8013918:	b2db      	uxtb	r3, r3
 801391a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801391c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013920:	b299      	uxth	r1, r3
 8013922:	6a3b      	ldr	r3, [r7, #32]
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	8bba      	ldrh	r2, [r7, #28]
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff fdfa 	bl	8013524 <tcp_output_alloc_header>
 8013930:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d102      	bne.n	801393e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013938:	f04f 33ff 	mov.w	r3, #4294967295
 801393c:	e04c      	b.n	80139d8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801393e:	69bb      	ldr	r3, [r7, #24]
 8013940:	685b      	ldr	r3, [r3, #4]
 8013942:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013944:	7ffb      	ldrb	r3, [r7, #31]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d011      	beq.n	801396e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	899b      	ldrh	r3, [r3, #12]
 801394e:	b29b      	uxth	r3, r3
 8013950:	b21b      	sxth	r3, r3
 8013952:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013956:	b21c      	sxth	r4, r3
 8013958:	2011      	movs	r0, #17
 801395a:	f7f8 f903 	bl	800bb64 <lwip_htons>
 801395e:	4603      	mov	r3, r0
 8013960:	b21b      	sxth	r3, r3
 8013962:	4323      	orrs	r3, r4
 8013964:	b21b      	sxth	r3, r3
 8013966:	b29a      	uxth	r2, r3
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	819a      	strh	r2, [r3, #12]
 801396c:	e010      	b.n	8013990 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801396e:	69bb      	ldr	r3, [r7, #24]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	3314      	adds	r3, #20
 8013974:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013976:	6a3b      	ldr	r3, [r7, #32]
 8013978:	6858      	ldr	r0, [r3, #4]
 801397a:	6a3b      	ldr	r3, [r7, #32]
 801397c:	685b      	ldr	r3, [r3, #4]
 801397e:	891a      	ldrh	r2, [r3, #8]
 8013980:	6a3b      	ldr	r3, [r7, #32]
 8013982:	891b      	ldrh	r3, [r3, #8]
 8013984:	1ad3      	subs	r3, r2, r3
 8013986:	b29b      	uxth	r3, r3
 8013988:	2201      	movs	r2, #1
 801398a:	6939      	ldr	r1, [r7, #16]
 801398c:	f7f9 fec6 	bl	800d71c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013990:	6a3b      	ldr	r3, [r7, #32]
 8013992:	68db      	ldr	r3, [r3, #12]
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	4618      	mov	r0, r3
 8013998:	f7f8 f8f9 	bl	800bb8e <lwip_htonl>
 801399c:	4603      	mov	r3, r0
 801399e:	3301      	adds	r3, #1
 80139a0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	1ad3      	subs	r3, r2, r3
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	da02      	bge.n	80139b4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	68fa      	ldr	r2, [r7, #12]
 80139b2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80139b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80139b8:	2200      	movs	r2, #0
 80139ba:	69b9      	ldr	r1, [r7, #24]
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f7ff fdef 	bl	80135a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80139c2:	687a      	ldr	r2, [r7, #4]
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	3304      	adds	r3, #4
 80139c8:	69b9      	ldr	r1, [r7, #24]
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f7ff fe26 	bl	801361c <tcp_output_control_segment>
 80139d0:	4603      	mov	r3, r0
 80139d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80139d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80139d8:	4618      	mov	r0, r3
 80139da:	372c      	adds	r7, #44	@ 0x2c
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd90      	pop	{r4, r7, pc}
 80139e0:	0801bbd0 	.word	0x0801bbd0
 80139e4:	0801c3c8 	.word	0x0801c3c8
 80139e8:	0801bc24 	.word	0x0801bc24

080139ec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b082      	sub	sp, #8
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80139f4:	f7fa f812 	bl	800da1c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80139f8:	4b0a      	ldr	r3, [pc, #40]	@ (8013a24 <tcpip_tcp_timer+0x38>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d103      	bne.n	8013a08 <tcpip_tcp_timer+0x1c>
 8013a00:	4b09      	ldr	r3, [pc, #36]	@ (8013a28 <tcpip_tcp_timer+0x3c>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d005      	beq.n	8013a14 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013a08:	2200      	movs	r2, #0
 8013a0a:	4908      	ldr	r1, [pc, #32]	@ (8013a2c <tcpip_tcp_timer+0x40>)
 8013a0c:	20fa      	movs	r0, #250	@ 0xfa
 8013a0e:	f000 f8f3 	bl	8013bf8 <sys_timeout>
 8013a12:	e003      	b.n	8013a1c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013a14:	4b06      	ldr	r3, [pc, #24]	@ (8013a30 <tcpip_tcp_timer+0x44>)
 8013a16:	2200      	movs	r2, #0
 8013a18:	601a      	str	r2, [r3, #0]
  }
}
 8013a1a:	bf00      	nop
 8013a1c:	bf00      	nop
 8013a1e:	3708      	adds	r7, #8
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	20014624 	.word	0x20014624
 8013a28:	20014628 	.word	0x20014628
 8013a2c:	080139ed 	.word	0x080139ed
 8013a30:	20014670 	.word	0x20014670

08013a34 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013a38:	4b0a      	ldr	r3, [pc, #40]	@ (8013a64 <tcp_timer_needed+0x30>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d10f      	bne.n	8013a60 <tcp_timer_needed+0x2c>
 8013a40:	4b09      	ldr	r3, [pc, #36]	@ (8013a68 <tcp_timer_needed+0x34>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d103      	bne.n	8013a50 <tcp_timer_needed+0x1c>
 8013a48:	4b08      	ldr	r3, [pc, #32]	@ (8013a6c <tcp_timer_needed+0x38>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d007      	beq.n	8013a60 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013a50:	4b04      	ldr	r3, [pc, #16]	@ (8013a64 <tcp_timer_needed+0x30>)
 8013a52:	2201      	movs	r2, #1
 8013a54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013a56:	2200      	movs	r2, #0
 8013a58:	4905      	ldr	r1, [pc, #20]	@ (8013a70 <tcp_timer_needed+0x3c>)
 8013a5a:	20fa      	movs	r0, #250	@ 0xfa
 8013a5c:	f000 f8cc 	bl	8013bf8 <sys_timeout>
  }
}
 8013a60:	bf00      	nop
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	20014670 	.word	0x20014670
 8013a68:	20014624 	.word	0x20014624
 8013a6c:	20014628 	.word	0x20014628
 8013a70:	080139ed 	.word	0x080139ed

08013a74 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b086      	sub	sp, #24
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	60f8      	str	r0, [r7, #12]
 8013a7c:	60b9      	str	r1, [r7, #8]
 8013a7e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013a80:	2006      	movs	r0, #6
 8013a82:	f7f8 fd1d 	bl	800c4c0 <memp_malloc>
 8013a86:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d109      	bne.n	8013aa2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d151      	bne.n	8013b38 <sys_timeout_abs+0xc4>
 8013a94:	4b2a      	ldr	r3, [pc, #168]	@ (8013b40 <sys_timeout_abs+0xcc>)
 8013a96:	22be      	movs	r2, #190	@ 0xbe
 8013a98:	492a      	ldr	r1, [pc, #168]	@ (8013b44 <sys_timeout_abs+0xd0>)
 8013a9a:	482b      	ldr	r0, [pc, #172]	@ (8013b48 <sys_timeout_abs+0xd4>)
 8013a9c:	f003 ff82 	bl	80179a4 <iprintf>
    return;
 8013aa0:	e04a      	b.n	8013b38 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	68ba      	ldr	r2, [r7, #8]
 8013aac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013aae:	693b      	ldr	r3, [r7, #16]
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	68fa      	ldr	r2, [r7, #12]
 8013ab8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013aba:	4b24      	ldr	r3, [pc, #144]	@ (8013b4c <sys_timeout_abs+0xd8>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d103      	bne.n	8013aca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013ac2:	4a22      	ldr	r2, [pc, #136]	@ (8013b4c <sys_timeout_abs+0xd8>)
 8013ac4:	693b      	ldr	r3, [r7, #16]
 8013ac6:	6013      	str	r3, [r2, #0]
    return;
 8013ac8:	e037      	b.n	8013b3a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	685a      	ldr	r2, [r3, #4]
 8013ace:	4b1f      	ldr	r3, [pc, #124]	@ (8013b4c <sys_timeout_abs+0xd8>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	0fdb      	lsrs	r3, r3, #31
 8013ad8:	f003 0301 	and.w	r3, r3, #1
 8013adc:	b2db      	uxtb	r3, r3
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d007      	beq.n	8013af2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8013b4c <sys_timeout_abs+0xd8>)
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013aea:	4a18      	ldr	r2, [pc, #96]	@ (8013b4c <sys_timeout_abs+0xd8>)
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	6013      	str	r3, [r2, #0]
 8013af0:	e023      	b.n	8013b3a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013af2:	4b16      	ldr	r3, [pc, #88]	@ (8013b4c <sys_timeout_abs+0xd8>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	617b      	str	r3, [r7, #20]
 8013af8:	e01a      	b.n	8013b30 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00b      	beq.n	8013b1a <sys_timeout_abs+0xa6>
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	685a      	ldr	r2, [r3, #4]
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	1ad3      	subs	r3, r2, r3
 8013b0e:	0fdb      	lsrs	r3, r3, #31
 8013b10:	f003 0301 	and.w	r3, r3, #1
 8013b14:	b2db      	uxtb	r3, r3
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d007      	beq.n	8013b2a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	693b      	ldr	r3, [r7, #16]
 8013b20:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	693a      	ldr	r2, [r7, #16]
 8013b26:	601a      	str	r2, [r3, #0]
        break;
 8013b28:	e007      	b.n	8013b3a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	617b      	str	r3, [r7, #20]
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d1e1      	bne.n	8013afa <sys_timeout_abs+0x86>
 8013b36:	e000      	b.n	8013b3a <sys_timeout_abs+0xc6>
    return;
 8013b38:	bf00      	nop
      }
    }
  }
}
 8013b3a:	3718      	adds	r7, #24
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}
 8013b40:	0801c3ec 	.word	0x0801c3ec
 8013b44:	0801c420 	.word	0x0801c420
 8013b48:	0801c460 	.word	0x0801c460
 8013b4c:	20014668 	.word	0x20014668

08013b50 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	685b      	ldr	r3, [r3, #4]
 8013b60:	4798      	blx	r3

  now = sys_now();
 8013b62:	f7f6 ff03 	bl	800a96c <sys_now>
 8013b66:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	681a      	ldr	r2, [r3, #0]
 8013b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8013bac <lwip_cyclic_timer+0x5c>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4413      	add	r3, r2
 8013b72:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013b74:	68fa      	ldr	r2, [r7, #12]
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	1ad3      	subs	r3, r2, r3
 8013b7a:	0fdb      	lsrs	r3, r3, #31
 8013b7c:	f003 0301 	and.w	r3, r3, #1
 8013b80:	b2db      	uxtb	r3, r3
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d009      	beq.n	8013b9a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	4413      	add	r3, r2
 8013b8e:	687a      	ldr	r2, [r7, #4]
 8013b90:	4907      	ldr	r1, [pc, #28]	@ (8013bb0 <lwip_cyclic_timer+0x60>)
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7ff ff6e 	bl	8013a74 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013b98:	e004      	b.n	8013ba4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013b9a:	687a      	ldr	r2, [r7, #4]
 8013b9c:	4904      	ldr	r1, [pc, #16]	@ (8013bb0 <lwip_cyclic_timer+0x60>)
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f7ff ff68 	bl	8013a74 <sys_timeout_abs>
}
 8013ba4:	bf00      	nop
 8013ba6:	3718      	adds	r7, #24
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}
 8013bac:	2001466c 	.word	0x2001466c
 8013bb0:	08013b51 	.word	0x08013b51

08013bb4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013bba:	2301      	movs	r3, #1
 8013bbc:	607b      	str	r3, [r7, #4]
 8013bbe:	e00e      	b.n	8013bde <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8013bf0 <sys_timeouts_init+0x3c>)
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	00db      	lsls	r3, r3, #3
 8013bcc:	4a08      	ldr	r2, [pc, #32]	@ (8013bf0 <sys_timeouts_init+0x3c>)
 8013bce:	4413      	add	r3, r2
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	4908      	ldr	r1, [pc, #32]	@ (8013bf4 <sys_timeouts_init+0x40>)
 8013bd4:	f000 f810 	bl	8013bf8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	607b      	str	r3, [r7, #4]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2b02      	cmp	r3, #2
 8013be2:	d9ed      	bls.n	8013bc0 <sys_timeouts_init+0xc>
  }
}
 8013be4:	bf00      	nop
 8013be6:	bf00      	nop
 8013be8:	3708      	adds	r7, #8
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	08054ac8 	.word	0x08054ac8
 8013bf4:	08013b51 	.word	0x08013b51

08013bf8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b086      	sub	sp, #24
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	60f8      	str	r0, [r7, #12]
 8013c00:	60b9      	str	r1, [r7, #8]
 8013c02:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013c0a:	d306      	bcc.n	8013c1a <sys_timeout+0x22>
 8013c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8013c38 <sys_timeout+0x40>)
 8013c0e:	f240 1229 	movw	r2, #297	@ 0x129
 8013c12:	490a      	ldr	r1, [pc, #40]	@ (8013c3c <sys_timeout+0x44>)
 8013c14:	480a      	ldr	r0, [pc, #40]	@ (8013c40 <sys_timeout+0x48>)
 8013c16:	f003 fec5 	bl	80179a4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013c1a:	f7f6 fea7 	bl	800a96c <sys_now>
 8013c1e:	4602      	mov	r2, r0
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	4413      	add	r3, r2
 8013c24:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013c26:	687a      	ldr	r2, [r7, #4]
 8013c28:	68b9      	ldr	r1, [r7, #8]
 8013c2a:	6978      	ldr	r0, [r7, #20]
 8013c2c:	f7ff ff22 	bl	8013a74 <sys_timeout_abs>
#endif
}
 8013c30:	bf00      	nop
 8013c32:	3718      	adds	r7, #24
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}
 8013c38:	0801c3ec 	.word	0x0801c3ec
 8013c3c:	0801c488 	.word	0x0801c488
 8013c40:	0801c460 	.word	0x0801c460

08013c44 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013c4a:	f7f6 fe8f 	bl	800a96c <sys_now>
 8013c4e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013c50:	4b1a      	ldr	r3, [pc, #104]	@ (8013cbc <sys_check_timeouts+0x78>)
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	b2db      	uxtb	r3, r3
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d001      	beq.n	8013c5e <sys_check_timeouts+0x1a>
 8013c5a:	f7f9 f82b 	bl	800ccb4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013c5e:	4b18      	ldr	r3, [pc, #96]	@ (8013cc0 <sys_check_timeouts+0x7c>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d022      	beq.n	8013cb0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	685b      	ldr	r3, [r3, #4]
 8013c6e:	68fa      	ldr	r2, [r7, #12]
 8013c70:	1ad3      	subs	r3, r2, r3
 8013c72:	0fdb      	lsrs	r3, r3, #31
 8013c74:	f003 0301 	and.w	r3, r3, #1
 8013c78:	b2db      	uxtb	r3, r3
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d11a      	bne.n	8013cb4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	4a0f      	ldr	r2, [pc, #60]	@ (8013cc0 <sys_check_timeouts+0x7c>)
 8013c84:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	689b      	ldr	r3, [r3, #8]
 8013c8a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	4a0b      	ldr	r2, [pc, #44]	@ (8013cc4 <sys_check_timeouts+0x80>)
 8013c98:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013c9a:	68b9      	ldr	r1, [r7, #8]
 8013c9c:	2006      	movs	r0, #6
 8013c9e:	f7f8 fc7f 	bl	800c5a0 <memp_free>
    if (handler != NULL) {
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d0d3      	beq.n	8013c50 <sys_check_timeouts+0xc>
      handler(arg);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6838      	ldr	r0, [r7, #0]
 8013cac:	4798      	blx	r3
  do {
 8013cae:	e7cf      	b.n	8013c50 <sys_check_timeouts+0xc>
      return;
 8013cb0:	bf00      	nop
 8013cb2:	e000      	b.n	8013cb6 <sys_check_timeouts+0x72>
      return;
 8013cb4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013cb6:	3710      	adds	r7, #16
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	20014615 	.word	0x20014615
 8013cc0:	20014668 	.word	0x20014668
 8013cc4:	2001466c 	.word	0x2001466c

08013cc8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013ccc:	f003 f88e 	bl	8016dec <rand>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013cde:	b29a      	uxth	r2, r3
 8013ce0:	4b01      	ldr	r3, [pc, #4]	@ (8013ce8 <udp_init+0x20>)
 8013ce2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013ce4:	bf00      	nop
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	2000967c 	.word	0x2000967c

08013cec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013cf6:	4b17      	ldr	r3, [pc, #92]	@ (8013d54 <udp_new_port+0x68>)
 8013cf8:	881b      	ldrh	r3, [r3, #0]
 8013cfa:	1c5a      	adds	r2, r3, #1
 8013cfc:	b291      	uxth	r1, r2
 8013cfe:	4a15      	ldr	r2, [pc, #84]	@ (8013d54 <udp_new_port+0x68>)
 8013d00:	8011      	strh	r1, [r2, #0]
 8013d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d103      	bne.n	8013d12 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013d0a:	4b12      	ldr	r3, [pc, #72]	@ (8013d54 <udp_new_port+0x68>)
 8013d0c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013d10:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d12:	4b11      	ldr	r3, [pc, #68]	@ (8013d58 <udp_new_port+0x6c>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	603b      	str	r3, [r7, #0]
 8013d18:	e011      	b.n	8013d3e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	8a5a      	ldrh	r2, [r3, #18]
 8013d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8013d54 <udp_new_port+0x68>)
 8013d20:	881b      	ldrh	r3, [r3, #0]
 8013d22:	429a      	cmp	r2, r3
 8013d24:	d108      	bne.n	8013d38 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013d26:	88fb      	ldrh	r3, [r7, #6]
 8013d28:	3301      	adds	r3, #1
 8013d2a:	80fb      	strh	r3, [r7, #6]
 8013d2c:	88fb      	ldrh	r3, [r7, #6]
 8013d2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013d32:	d3e0      	bcc.n	8013cf6 <udp_new_port+0xa>
        return 0;
 8013d34:	2300      	movs	r3, #0
 8013d36:	e007      	b.n	8013d48 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	603b      	str	r3, [r7, #0]
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d1ea      	bne.n	8013d1a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013d44:	4b03      	ldr	r3, [pc, #12]	@ (8013d54 <udp_new_port+0x68>)
 8013d46:	881b      	ldrh	r3, [r3, #0]
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	370c      	adds	r7, #12
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr
 8013d54:	2000967c 	.word	0x2000967c
 8013d58:	20014674 	.word	0x20014674

08013d5c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b084      	sub	sp, #16
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	4613      	mov	r3, r2
 8013d68:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d105      	bne.n	8013d7c <udp_input_local_match+0x20>
 8013d70:	4b27      	ldr	r3, [pc, #156]	@ (8013e10 <udp_input_local_match+0xb4>)
 8013d72:	2287      	movs	r2, #135	@ 0x87
 8013d74:	4927      	ldr	r1, [pc, #156]	@ (8013e14 <udp_input_local_match+0xb8>)
 8013d76:	4828      	ldr	r0, [pc, #160]	@ (8013e18 <udp_input_local_match+0xbc>)
 8013d78:	f003 fe14 	bl	80179a4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d105      	bne.n	8013d8e <udp_input_local_match+0x32>
 8013d82:	4b23      	ldr	r3, [pc, #140]	@ (8013e10 <udp_input_local_match+0xb4>)
 8013d84:	2288      	movs	r2, #136	@ 0x88
 8013d86:	4925      	ldr	r1, [pc, #148]	@ (8013e1c <udp_input_local_match+0xc0>)
 8013d88:	4823      	ldr	r0, [pc, #140]	@ (8013e18 <udp_input_local_match+0xbc>)
 8013d8a:	f003 fe0b 	bl	80179a4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	7a1b      	ldrb	r3, [r3, #8]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d00b      	beq.n	8013dae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	7a1a      	ldrb	r2, [r3, #8]
 8013d9a:	4b21      	ldr	r3, [pc, #132]	@ (8013e20 <udp_input_local_match+0xc4>)
 8013d9c:	685b      	ldr	r3, [r3, #4]
 8013d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013da2:	3301      	adds	r3, #1
 8013da4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d001      	beq.n	8013dae <udp_input_local_match+0x52>
    return 0;
 8013daa:	2300      	movs	r3, #0
 8013dac:	e02b      	b.n	8013e06 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013dae:	79fb      	ldrb	r3, [r7, #7]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d018      	beq.n	8013de6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d013      	beq.n	8013de2 <udp_input_local_match+0x86>
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d00f      	beq.n	8013de2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013dc2:	4b17      	ldr	r3, [pc, #92]	@ (8013e20 <udp_input_local_match+0xc4>)
 8013dc4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dca:	d00a      	beq.n	8013de2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	681a      	ldr	r2, [r3, #0]
 8013dd0:	4b13      	ldr	r3, [pc, #76]	@ (8013e20 <udp_input_local_match+0xc4>)
 8013dd2:	695b      	ldr	r3, [r3, #20]
 8013dd4:	405a      	eors	r2, r3
 8013dd6:	68bb      	ldr	r3, [r7, #8]
 8013dd8:	3308      	adds	r3, #8
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d110      	bne.n	8013e04 <udp_input_local_match+0xa8>
          return 1;
 8013de2:	2301      	movs	r3, #1
 8013de4:	e00f      	b.n	8013e06 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d009      	beq.n	8013e00 <udp_input_local_match+0xa4>
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d005      	beq.n	8013e00 <udp_input_local_match+0xa4>
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	681a      	ldr	r2, [r3, #0]
 8013df8:	4b09      	ldr	r3, [pc, #36]	@ (8013e20 <udp_input_local_match+0xc4>)
 8013dfa:	695b      	ldr	r3, [r3, #20]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d101      	bne.n	8013e04 <udp_input_local_match+0xa8>
        return 1;
 8013e00:	2301      	movs	r3, #1
 8013e02:	e000      	b.n	8013e06 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013e04:	2300      	movs	r3, #0
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3710      	adds	r7, #16
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}
 8013e0e:	bf00      	nop
 8013e10:	0801c4d4 	.word	0x0801c4d4
 8013e14:	0801c504 	.word	0x0801c504
 8013e18:	0801c528 	.word	0x0801c528
 8013e1c:	0801c550 	.word	0x0801c550
 8013e20:	2000eee8 	.word	0x2000eee8

08013e24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013e24:	b590      	push	{r4, r7, lr}
 8013e26:	b08d      	sub	sp, #52	@ 0x34
 8013e28:	af02      	add	r7, sp, #8
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d105      	bne.n	8013e44 <udp_input+0x20>
 8013e38:	4b7c      	ldr	r3, [pc, #496]	@ (801402c <udp_input+0x208>)
 8013e3a:	22cf      	movs	r2, #207	@ 0xcf
 8013e3c:	497c      	ldr	r1, [pc, #496]	@ (8014030 <udp_input+0x20c>)
 8013e3e:	487d      	ldr	r0, [pc, #500]	@ (8014034 <udp_input+0x210>)
 8013e40:	f003 fdb0 	bl	80179a4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d105      	bne.n	8013e56 <udp_input+0x32>
 8013e4a:	4b78      	ldr	r3, [pc, #480]	@ (801402c <udp_input+0x208>)
 8013e4c:	22d0      	movs	r2, #208	@ 0xd0
 8013e4e:	497a      	ldr	r1, [pc, #488]	@ (8014038 <udp_input+0x214>)
 8013e50:	4878      	ldr	r0, [pc, #480]	@ (8014034 <udp_input+0x210>)
 8013e52:	f003 fda7 	bl	80179a4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	895b      	ldrh	r3, [r3, #10]
 8013e5a:	2b07      	cmp	r3, #7
 8013e5c:	d803      	bhi.n	8013e66 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f7f9 fa62 	bl	800d328 <pbuf_free>
    goto end;
 8013e64:	e0de      	b.n	8014024 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013e6c:	4b73      	ldr	r3, [pc, #460]	@ (801403c <udp_input+0x218>)
 8013e6e:	695b      	ldr	r3, [r3, #20]
 8013e70:	4a72      	ldr	r2, [pc, #456]	@ (801403c <udp_input+0x218>)
 8013e72:	6812      	ldr	r2, [r2, #0]
 8013e74:	4611      	mov	r1, r2
 8013e76:	4618      	mov	r0, r3
 8013e78:	f001 ffa0 	bl	8015dbc <ip4_addr_isbroadcast_u32>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	881b      	ldrh	r3, [r3, #0]
 8013e84:	b29b      	uxth	r3, r3
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7f7 fe6c 	bl	800bb64 <lwip_htons>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	885b      	ldrh	r3, [r3, #2]
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7f7 fe64 	bl	800bb64 <lwip_htons>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013eac:	4b64      	ldr	r3, [pc, #400]	@ (8014040 <udp_input+0x21c>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8013eb2:	e054      	b.n	8013f5e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb6:	8a5b      	ldrh	r3, [r3, #18]
 8013eb8:	89fa      	ldrh	r2, [r7, #14]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d14a      	bne.n	8013f54 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013ebe:	7cfb      	ldrb	r3, [r7, #19]
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	6839      	ldr	r1, [r7, #0]
 8013ec4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ec6:	f7ff ff49 	bl	8013d5c <udp_input_local_match>
 8013eca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d041      	beq.n	8013f54 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed2:	7c1b      	ldrb	r3, [r3, #16]
 8013ed4:	f003 0304 	and.w	r3, r3, #4
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d11d      	bne.n	8013f18 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d102      	bne.n	8013ee8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee4:	61fb      	str	r3, [r7, #28]
 8013ee6:	e017      	b.n	8013f18 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013ee8:	7cfb      	ldrb	r3, [r7, #19]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d014      	beq.n	8013f18 <udp_input+0xf4>
 8013eee:	4b53      	ldr	r3, [pc, #332]	@ (801403c <udp_input+0x218>)
 8013ef0:	695b      	ldr	r3, [r3, #20]
 8013ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef6:	d10f      	bne.n	8013f18 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013ef8:	69fb      	ldr	r3, [r7, #28]
 8013efa:	681a      	ldr	r2, [r3, #0]
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	3304      	adds	r3, #4
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d008      	beq.n	8013f18 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f08:	681a      	ldr	r2, [r3, #0]
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	3304      	adds	r3, #4
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d101      	bne.n	8013f18 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f16:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f1a:	8a9b      	ldrh	r3, [r3, #20]
 8013f1c:	8a3a      	ldrh	r2, [r7, #16]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d118      	bne.n	8013f54 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f24:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d005      	beq.n	8013f36 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f2c:	685a      	ldr	r2, [r3, #4]
 8013f2e:	4b43      	ldr	r3, [pc, #268]	@ (801403c <udp_input+0x218>)
 8013f30:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d10e      	bne.n	8013f54 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013f36:	6a3b      	ldr	r3, [r7, #32]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d014      	beq.n	8013f66 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f3e:	68da      	ldr	r2, [r3, #12]
 8013f40:	6a3b      	ldr	r3, [r7, #32]
 8013f42:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013f44:	4b3e      	ldr	r3, [pc, #248]	@ (8014040 <udp_input+0x21c>)
 8013f46:	681a      	ldr	r2, [r3, #0]
 8013f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f4a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8014040 <udp_input+0x21c>)
 8013f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f50:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013f52:	e008      	b.n	8013f66 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f56:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f5a:	68db      	ldr	r3, [r3, #12]
 8013f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d1a7      	bne.n	8013eb4 <udp_input+0x90>
 8013f64:	e000      	b.n	8013f68 <udp_input+0x144>
        break;
 8013f66:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d101      	bne.n	8013f72 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013f6e:	69fb      	ldr	r3, [r7, #28]
 8013f70:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d002      	beq.n	8013f7e <udp_input+0x15a>
    for_us = 1;
 8013f78:	2301      	movs	r3, #1
 8013f7a:	76fb      	strb	r3, [r7, #27]
 8013f7c:	e00a      	b.n	8013f94 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	3304      	adds	r3, #4
 8013f82:	681a      	ldr	r2, [r3, #0]
 8013f84:	4b2d      	ldr	r3, [pc, #180]	@ (801403c <udp_input+0x218>)
 8013f86:	695b      	ldr	r3, [r3, #20]
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	bf0c      	ite	eq
 8013f8c:	2301      	moveq	r3, #1
 8013f8e:	2300      	movne	r3, #0
 8013f90:	b2db      	uxtb	r3, r3
 8013f92:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f94:	7efb      	ldrb	r3, [r7, #27]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d041      	beq.n	801401e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f9a:	2108      	movs	r1, #8
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7f9 f93d 	bl	800d21c <pbuf_remove_header>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d00a      	beq.n	8013fbe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013fa8:	4b20      	ldr	r3, [pc, #128]	@ (801402c <udp_input+0x208>)
 8013faa:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013fae:	4925      	ldr	r1, [pc, #148]	@ (8014044 <udp_input+0x220>)
 8013fb0:	4820      	ldr	r0, [pc, #128]	@ (8014034 <udp_input+0x210>)
 8013fb2:	f003 fcf7 	bl	80179a4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f7f9 f9b6 	bl	800d328 <pbuf_free>
      goto end;
 8013fbc:	e032      	b.n	8014024 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d012      	beq.n	8013fea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fc6:	699b      	ldr	r3, [r3, #24]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d00a      	beq.n	8013fe2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fce:	699c      	ldr	r4, [r3, #24]
 8013fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fd2:	69d8      	ldr	r0, [r3, #28]
 8013fd4:	8a3b      	ldrh	r3, [r7, #16]
 8013fd6:	9300      	str	r3, [sp, #0]
 8013fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8014048 <udp_input+0x224>)
 8013fda:	687a      	ldr	r2, [r7, #4]
 8013fdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013fde:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013fe0:	e021      	b.n	8014026 <udp_input+0x202>
        pbuf_free(p);
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f7f9 f9a0 	bl	800d328 <pbuf_free>
        goto end;
 8013fe8:	e01c      	b.n	8014024 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013fea:	7cfb      	ldrb	r3, [r7, #19]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d112      	bne.n	8014016 <udp_input+0x1f2>
 8013ff0:	4b12      	ldr	r3, [pc, #72]	@ (801403c <udp_input+0x218>)
 8013ff2:	695b      	ldr	r3, [r3, #20]
 8013ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013ff8:	2be0      	cmp	r3, #224	@ 0xe0
 8013ffa:	d00c      	beq.n	8014016 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013ffc:	4b0f      	ldr	r3, [pc, #60]	@ (801403c <udp_input+0x218>)
 8013ffe:	899b      	ldrh	r3, [r3, #12]
 8014000:	3308      	adds	r3, #8
 8014002:	b29b      	uxth	r3, r3
 8014004:	b21b      	sxth	r3, r3
 8014006:	4619      	mov	r1, r3
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f7f9 f97a 	bl	800d302 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801400e:	2103      	movs	r1, #3
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f001 fbb3 	bl	801577c <icmp_dest_unreach>
      pbuf_free(p);
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f7f9 f986 	bl	800d328 <pbuf_free>
  return;
 801401c:	e003      	b.n	8014026 <udp_input+0x202>
    pbuf_free(p);
 801401e:	6878      	ldr	r0, [r7, #4]
 8014020:	f7f9 f982 	bl	800d328 <pbuf_free>
  return;
 8014024:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014026:	372c      	adds	r7, #44	@ 0x2c
 8014028:	46bd      	mov	sp, r7
 801402a:	bd90      	pop	{r4, r7, pc}
 801402c:	0801c4d4 	.word	0x0801c4d4
 8014030:	0801c578 	.word	0x0801c578
 8014034:	0801c528 	.word	0x0801c528
 8014038:	0801c590 	.word	0x0801c590
 801403c:	2000eee8 	.word	0x2000eee8
 8014040:	20014674 	.word	0x20014674
 8014044:	0801c5ac 	.word	0x0801c5ac
 8014048:	2000eef8 	.word	0x2000eef8

0801404c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b082      	sub	sp, #8
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
 8014054:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d109      	bne.n	8014070 <udp_send+0x24>
 801405c:	4b11      	ldr	r3, [pc, #68]	@ (80140a4 <udp_send+0x58>)
 801405e:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8014062:	4911      	ldr	r1, [pc, #68]	@ (80140a8 <udp_send+0x5c>)
 8014064:	4811      	ldr	r0, [pc, #68]	@ (80140ac <udp_send+0x60>)
 8014066:	f003 fc9d 	bl	80179a4 <iprintf>
 801406a:	f06f 030f 	mvn.w	r3, #15
 801406e:	e015      	b.n	801409c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d109      	bne.n	801408a <udp_send+0x3e>
 8014076:	4b0b      	ldr	r3, [pc, #44]	@ (80140a4 <udp_send+0x58>)
 8014078:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801407c:	490c      	ldr	r1, [pc, #48]	@ (80140b0 <udp_send+0x64>)
 801407e:	480b      	ldr	r0, [pc, #44]	@ (80140ac <udp_send+0x60>)
 8014080:	f003 fc90 	bl	80179a4 <iprintf>
 8014084:	f06f 030f 	mvn.w	r3, #15
 8014088:	e008      	b.n	801409c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	1d1a      	adds	r2, r3, #4
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	8a9b      	ldrh	r3, [r3, #20]
 8014092:	6839      	ldr	r1, [r7, #0]
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f000 f80d 	bl	80140b4 <udp_sendto>
 801409a:	4603      	mov	r3, r0
}
 801409c:	4618      	mov	r0, r3
 801409e:	3708      	adds	r7, #8
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}
 80140a4:	0801c4d4 	.word	0x0801c4d4
 80140a8:	0801c5c8 	.word	0x0801c5c8
 80140ac:	0801c528 	.word	0x0801c528
 80140b0:	0801c5e0 	.word	0x0801c5e0

080140b4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b088      	sub	sp, #32
 80140b8:	af02      	add	r7, sp, #8
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	60b9      	str	r1, [r7, #8]
 80140be:	607a      	str	r2, [r7, #4]
 80140c0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d109      	bne.n	80140dc <udp_sendto+0x28>
 80140c8:	4b23      	ldr	r3, [pc, #140]	@ (8014158 <udp_sendto+0xa4>)
 80140ca:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80140ce:	4923      	ldr	r1, [pc, #140]	@ (801415c <udp_sendto+0xa8>)
 80140d0:	4823      	ldr	r0, [pc, #140]	@ (8014160 <udp_sendto+0xac>)
 80140d2:	f003 fc67 	bl	80179a4 <iprintf>
 80140d6:	f06f 030f 	mvn.w	r3, #15
 80140da:	e038      	b.n	801414e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d109      	bne.n	80140f6 <udp_sendto+0x42>
 80140e2:	4b1d      	ldr	r3, [pc, #116]	@ (8014158 <udp_sendto+0xa4>)
 80140e4:	f240 2219 	movw	r2, #537	@ 0x219
 80140e8:	491e      	ldr	r1, [pc, #120]	@ (8014164 <udp_sendto+0xb0>)
 80140ea:	481d      	ldr	r0, [pc, #116]	@ (8014160 <udp_sendto+0xac>)
 80140ec:	f003 fc5a 	bl	80179a4 <iprintf>
 80140f0:	f06f 030f 	mvn.w	r3, #15
 80140f4:	e02b      	b.n	801414e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d109      	bne.n	8014110 <udp_sendto+0x5c>
 80140fc:	4b16      	ldr	r3, [pc, #88]	@ (8014158 <udp_sendto+0xa4>)
 80140fe:	f240 221a 	movw	r2, #538	@ 0x21a
 8014102:	4919      	ldr	r1, [pc, #100]	@ (8014168 <udp_sendto+0xb4>)
 8014104:	4816      	ldr	r0, [pc, #88]	@ (8014160 <udp_sendto+0xac>)
 8014106:	f003 fc4d 	bl	80179a4 <iprintf>
 801410a:	f06f 030f 	mvn.w	r3, #15
 801410e:	e01e      	b.n	801414e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	7a1b      	ldrb	r3, [r3, #8]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d006      	beq.n	8014126 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	7a1b      	ldrb	r3, [r3, #8]
 801411c:	4618      	mov	r0, r3
 801411e:	f7f8 fda3 	bl	800cc68 <netif_get_by_index>
 8014122:	6178      	str	r0, [r7, #20]
 8014124:	e003      	b.n	801412e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f001 fbb2 	bl	8015890 <ip4_route>
 801412c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d102      	bne.n	801413a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014134:	f06f 0303 	mvn.w	r3, #3
 8014138:	e009      	b.n	801414e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801413a:	887a      	ldrh	r2, [r7, #2]
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	9300      	str	r3, [sp, #0]
 8014140:	4613      	mov	r3, r2
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	68b9      	ldr	r1, [r7, #8]
 8014146:	68f8      	ldr	r0, [r7, #12]
 8014148:	f000 f810 	bl	801416c <udp_sendto_if>
 801414c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801414e:	4618      	mov	r0, r3
 8014150:	3718      	adds	r7, #24
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
 8014156:	bf00      	nop
 8014158:	0801c4d4 	.word	0x0801c4d4
 801415c:	0801c5f8 	.word	0x0801c5f8
 8014160:	0801c528 	.word	0x0801c528
 8014164:	0801c610 	.word	0x0801c610
 8014168:	0801c62c 	.word	0x0801c62c

0801416c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b088      	sub	sp, #32
 8014170:	af02      	add	r7, sp, #8
 8014172:	60f8      	str	r0, [r7, #12]
 8014174:	60b9      	str	r1, [r7, #8]
 8014176:	607a      	str	r2, [r7, #4]
 8014178:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d109      	bne.n	8014194 <udp_sendto_if+0x28>
 8014180:	4b2e      	ldr	r3, [pc, #184]	@ (801423c <udp_sendto_if+0xd0>)
 8014182:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014186:	492e      	ldr	r1, [pc, #184]	@ (8014240 <udp_sendto_if+0xd4>)
 8014188:	482e      	ldr	r0, [pc, #184]	@ (8014244 <udp_sendto_if+0xd8>)
 801418a:	f003 fc0b 	bl	80179a4 <iprintf>
 801418e:	f06f 030f 	mvn.w	r3, #15
 8014192:	e04f      	b.n	8014234 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d109      	bne.n	80141ae <udp_sendto_if+0x42>
 801419a:	4b28      	ldr	r3, [pc, #160]	@ (801423c <udp_sendto_if+0xd0>)
 801419c:	f240 2281 	movw	r2, #641	@ 0x281
 80141a0:	4929      	ldr	r1, [pc, #164]	@ (8014248 <udp_sendto_if+0xdc>)
 80141a2:	4828      	ldr	r0, [pc, #160]	@ (8014244 <udp_sendto_if+0xd8>)
 80141a4:	f003 fbfe 	bl	80179a4 <iprintf>
 80141a8:	f06f 030f 	mvn.w	r3, #15
 80141ac:	e042      	b.n	8014234 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d109      	bne.n	80141c8 <udp_sendto_if+0x5c>
 80141b4:	4b21      	ldr	r3, [pc, #132]	@ (801423c <udp_sendto_if+0xd0>)
 80141b6:	f240 2282 	movw	r2, #642	@ 0x282
 80141ba:	4924      	ldr	r1, [pc, #144]	@ (801424c <udp_sendto_if+0xe0>)
 80141bc:	4821      	ldr	r0, [pc, #132]	@ (8014244 <udp_sendto_if+0xd8>)
 80141be:	f003 fbf1 	bl	80179a4 <iprintf>
 80141c2:	f06f 030f 	mvn.w	r3, #15
 80141c6:	e035      	b.n	8014234 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80141c8:	6a3b      	ldr	r3, [r7, #32]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d109      	bne.n	80141e2 <udp_sendto_if+0x76>
 80141ce:	4b1b      	ldr	r3, [pc, #108]	@ (801423c <udp_sendto_if+0xd0>)
 80141d0:	f240 2283 	movw	r2, #643	@ 0x283
 80141d4:	491e      	ldr	r1, [pc, #120]	@ (8014250 <udp_sendto_if+0xe4>)
 80141d6:	481b      	ldr	r0, [pc, #108]	@ (8014244 <udp_sendto_if+0xd8>)
 80141d8:	f003 fbe4 	bl	80179a4 <iprintf>
 80141dc:	f06f 030f 	mvn.w	r3, #15
 80141e0:	e028      	b.n	8014234 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d009      	beq.n	80141fc <udp_sendto_if+0x90>
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d005      	beq.n	80141fc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141f8:	2be0      	cmp	r3, #224	@ 0xe0
 80141fa:	d103      	bne.n	8014204 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80141fc:	6a3b      	ldr	r3, [r7, #32]
 80141fe:	3304      	adds	r3, #4
 8014200:	617b      	str	r3, [r7, #20]
 8014202:	e00b      	b.n	801421c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	681a      	ldr	r2, [r3, #0]
 8014208:	6a3b      	ldr	r3, [r7, #32]
 801420a:	3304      	adds	r3, #4
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	429a      	cmp	r2, r3
 8014210:	d002      	beq.n	8014218 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014212:	f06f 0303 	mvn.w	r3, #3
 8014216:	e00d      	b.n	8014234 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801421c:	887a      	ldrh	r2, [r7, #2]
 801421e:	697b      	ldr	r3, [r7, #20]
 8014220:	9301      	str	r3, [sp, #4]
 8014222:	6a3b      	ldr	r3, [r7, #32]
 8014224:	9300      	str	r3, [sp, #0]
 8014226:	4613      	mov	r3, r2
 8014228:	687a      	ldr	r2, [r7, #4]
 801422a:	68b9      	ldr	r1, [r7, #8]
 801422c:	68f8      	ldr	r0, [r7, #12]
 801422e:	f000 f811 	bl	8014254 <udp_sendto_if_src>
 8014232:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014234:	4618      	mov	r0, r3
 8014236:	3718      	adds	r7, #24
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}
 801423c:	0801c4d4 	.word	0x0801c4d4
 8014240:	0801c648 	.word	0x0801c648
 8014244:	0801c528 	.word	0x0801c528
 8014248:	0801c664 	.word	0x0801c664
 801424c:	0801c680 	.word	0x0801c680
 8014250:	0801c6a0 	.word	0x0801c6a0

08014254 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b08c      	sub	sp, #48	@ 0x30
 8014258:	af04      	add	r7, sp, #16
 801425a:	60f8      	str	r0, [r7, #12]
 801425c:	60b9      	str	r1, [r7, #8]
 801425e:	607a      	str	r2, [r7, #4]
 8014260:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d109      	bne.n	801427c <udp_sendto_if_src+0x28>
 8014268:	4b65      	ldr	r3, [pc, #404]	@ (8014400 <udp_sendto_if_src+0x1ac>)
 801426a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801426e:	4965      	ldr	r1, [pc, #404]	@ (8014404 <udp_sendto_if_src+0x1b0>)
 8014270:	4865      	ldr	r0, [pc, #404]	@ (8014408 <udp_sendto_if_src+0x1b4>)
 8014272:	f003 fb97 	bl	80179a4 <iprintf>
 8014276:	f06f 030f 	mvn.w	r3, #15
 801427a:	e0bc      	b.n	80143f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801427c:	68bb      	ldr	r3, [r7, #8]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d109      	bne.n	8014296 <udp_sendto_if_src+0x42>
 8014282:	4b5f      	ldr	r3, [pc, #380]	@ (8014400 <udp_sendto_if_src+0x1ac>)
 8014284:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8014288:	4960      	ldr	r1, [pc, #384]	@ (801440c <udp_sendto_if_src+0x1b8>)
 801428a:	485f      	ldr	r0, [pc, #380]	@ (8014408 <udp_sendto_if_src+0x1b4>)
 801428c:	f003 fb8a 	bl	80179a4 <iprintf>
 8014290:	f06f 030f 	mvn.w	r3, #15
 8014294:	e0af      	b.n	80143f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d109      	bne.n	80142b0 <udp_sendto_if_src+0x5c>
 801429c:	4b58      	ldr	r3, [pc, #352]	@ (8014400 <udp_sendto_if_src+0x1ac>)
 801429e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80142a2:	495b      	ldr	r1, [pc, #364]	@ (8014410 <udp_sendto_if_src+0x1bc>)
 80142a4:	4858      	ldr	r0, [pc, #352]	@ (8014408 <udp_sendto_if_src+0x1b4>)
 80142a6:	f003 fb7d 	bl	80179a4 <iprintf>
 80142aa:	f06f 030f 	mvn.w	r3, #15
 80142ae:	e0a2      	b.n	80143f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80142b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d109      	bne.n	80142ca <udp_sendto_if_src+0x76>
 80142b6:	4b52      	ldr	r3, [pc, #328]	@ (8014400 <udp_sendto_if_src+0x1ac>)
 80142b8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80142bc:	4955      	ldr	r1, [pc, #340]	@ (8014414 <udp_sendto_if_src+0x1c0>)
 80142be:	4852      	ldr	r0, [pc, #328]	@ (8014408 <udp_sendto_if_src+0x1b4>)
 80142c0:	f003 fb70 	bl	80179a4 <iprintf>
 80142c4:	f06f 030f 	mvn.w	r3, #15
 80142c8:	e095      	b.n	80143f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80142ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d109      	bne.n	80142e4 <udp_sendto_if_src+0x90>
 80142d0:	4b4b      	ldr	r3, [pc, #300]	@ (8014400 <udp_sendto_if_src+0x1ac>)
 80142d2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80142d6:	4950      	ldr	r1, [pc, #320]	@ (8014418 <udp_sendto_if_src+0x1c4>)
 80142d8:	484b      	ldr	r0, [pc, #300]	@ (8014408 <udp_sendto_if_src+0x1b4>)
 80142da:	f003 fb63 	bl	80179a4 <iprintf>
 80142de:	f06f 030f 	mvn.w	r3, #15
 80142e2:	e088      	b.n	80143f6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	8a5b      	ldrh	r3, [r3, #18]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d10f      	bne.n	801430c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80142ec:	68f9      	ldr	r1, [r7, #12]
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	8a5b      	ldrh	r3, [r3, #18]
 80142f2:	461a      	mov	r2, r3
 80142f4:	68f8      	ldr	r0, [r7, #12]
 80142f6:	f000 f893 	bl	8014420 <udp_bind>
 80142fa:	4603      	mov	r3, r0
 80142fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80142fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d002      	beq.n	801430c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014306:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801430a:	e074      	b.n	80143f6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	891b      	ldrh	r3, [r3, #8]
 8014310:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8014314:	4293      	cmp	r3, r2
 8014316:	d902      	bls.n	801431e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014318:	f04f 33ff 	mov.w	r3, #4294967295
 801431c:	e06b      	b.n	80143f6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801431e:	2108      	movs	r1, #8
 8014320:	68b8      	ldr	r0, [r7, #8]
 8014322:	f7f8 ff6b 	bl	800d1fc <pbuf_add_header>
 8014326:	4603      	mov	r3, r0
 8014328:	2b00      	cmp	r3, #0
 801432a:	d015      	beq.n	8014358 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801432c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014330:	2108      	movs	r1, #8
 8014332:	2022      	movs	r0, #34	@ 0x22
 8014334:	f7f8 fd14 	bl	800cd60 <pbuf_alloc>
 8014338:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d102      	bne.n	8014346 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014340:	f04f 33ff 	mov.w	r3, #4294967295
 8014344:	e057      	b.n	80143f6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	891b      	ldrh	r3, [r3, #8]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d006      	beq.n	801435c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801434e:	68b9      	ldr	r1, [r7, #8]
 8014350:	69f8      	ldr	r0, [r7, #28]
 8014352:	f7f9 f901 	bl	800d558 <pbuf_chain>
 8014356:	e001      	b.n	801435c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801435c:	69fb      	ldr	r3, [r7, #28]
 801435e:	895b      	ldrh	r3, [r3, #10]
 8014360:	2b07      	cmp	r3, #7
 8014362:	d806      	bhi.n	8014372 <udp_sendto_if_src+0x11e>
 8014364:	4b26      	ldr	r3, [pc, #152]	@ (8014400 <udp_sendto_if_src+0x1ac>)
 8014366:	f240 320d 	movw	r2, #781	@ 0x30d
 801436a:	492c      	ldr	r1, [pc, #176]	@ (801441c <udp_sendto_if_src+0x1c8>)
 801436c:	4826      	ldr	r0, [pc, #152]	@ (8014408 <udp_sendto_if_src+0x1b4>)
 801436e:	f003 fb19 	bl	80179a4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014372:	69fb      	ldr	r3, [r7, #28]
 8014374:	685b      	ldr	r3, [r3, #4]
 8014376:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	8a5b      	ldrh	r3, [r3, #18]
 801437c:	4618      	mov	r0, r3
 801437e:	f7f7 fbf1 	bl	800bb64 <lwip_htons>
 8014382:	4603      	mov	r3, r0
 8014384:	461a      	mov	r2, r3
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801438a:	887b      	ldrh	r3, [r7, #2]
 801438c:	4618      	mov	r0, r3
 801438e:	f7f7 fbe9 	bl	800bb64 <lwip_htons>
 8014392:	4603      	mov	r3, r0
 8014394:	461a      	mov	r2, r3
 8014396:	697b      	ldr	r3, [r7, #20]
 8014398:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	2200      	movs	r2, #0
 801439e:	719a      	strb	r2, [r3, #6]
 80143a0:	2200      	movs	r2, #0
 80143a2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	891b      	ldrh	r3, [r3, #8]
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7f7 fbdb 	bl	800bb64 <lwip_htons>
 80143ae:	4603      	mov	r3, r0
 80143b0:	461a      	mov	r2, r3
 80143b2:	697b      	ldr	r3, [r7, #20]
 80143b4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80143b6:	2311      	movs	r3, #17
 80143b8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	7adb      	ldrb	r3, [r3, #11]
 80143be:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	7a9b      	ldrb	r3, [r3, #10]
 80143c4:	7cb9      	ldrb	r1, [r7, #18]
 80143c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80143c8:	9202      	str	r2, [sp, #8]
 80143ca:	7cfa      	ldrb	r2, [r7, #19]
 80143cc:	9201      	str	r2, [sp, #4]
 80143ce:	9300      	str	r3, [sp, #0]
 80143d0:	460b      	mov	r3, r1
 80143d2:	687a      	ldr	r2, [r7, #4]
 80143d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80143d6:	69f8      	ldr	r0, [r7, #28]
 80143d8:	f001 fc42 	bl	8015c60 <ip4_output_if_src>
 80143dc:	4603      	mov	r3, r0
 80143de:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80143e0:	69fa      	ldr	r2, [r7, #28]
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d004      	beq.n	80143f2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80143e8:	69f8      	ldr	r0, [r7, #28]
 80143ea:	f7f8 ff9d 	bl	800d328 <pbuf_free>
    q = NULL;
 80143ee:	2300      	movs	r3, #0
 80143f0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80143f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3720      	adds	r7, #32
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	0801c4d4 	.word	0x0801c4d4
 8014404:	0801c6c0 	.word	0x0801c6c0
 8014408:	0801c528 	.word	0x0801c528
 801440c:	0801c6e0 	.word	0x0801c6e0
 8014410:	0801c700 	.word	0x0801c700
 8014414:	0801c724 	.word	0x0801c724
 8014418:	0801c748 	.word	0x0801c748
 801441c:	0801c76c 	.word	0x0801c76c

08014420 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b086      	sub	sp, #24
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	4613      	mov	r3, r2
 801442c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d101      	bne.n	8014438 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014434:	4b39      	ldr	r3, [pc, #228]	@ (801451c <udp_bind+0xfc>)
 8014436:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d109      	bne.n	8014452 <udp_bind+0x32>
 801443e:	4b38      	ldr	r3, [pc, #224]	@ (8014520 <udp_bind+0x100>)
 8014440:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8014444:	4937      	ldr	r1, [pc, #220]	@ (8014524 <udp_bind+0x104>)
 8014446:	4838      	ldr	r0, [pc, #224]	@ (8014528 <udp_bind+0x108>)
 8014448:	f003 faac 	bl	80179a4 <iprintf>
 801444c:	f06f 030f 	mvn.w	r3, #15
 8014450:	e060      	b.n	8014514 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014452:	2300      	movs	r3, #0
 8014454:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014456:	4b35      	ldr	r3, [pc, #212]	@ (801452c <udp_bind+0x10c>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	617b      	str	r3, [r7, #20]
 801445c:	e009      	b.n	8014472 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801445e:	68fa      	ldr	r2, [r7, #12]
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	429a      	cmp	r2, r3
 8014464:	d102      	bne.n	801446c <udp_bind+0x4c>
      rebind = 1;
 8014466:	2301      	movs	r3, #1
 8014468:	74fb      	strb	r3, [r7, #19]
      break;
 801446a:	e005      	b.n	8014478 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	68db      	ldr	r3, [r3, #12]
 8014470:	617b      	str	r3, [r7, #20]
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d1f2      	bne.n	801445e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014478:	88fb      	ldrh	r3, [r7, #6]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d109      	bne.n	8014492 <udp_bind+0x72>
    port = udp_new_port();
 801447e:	f7ff fc35 	bl	8013cec <udp_new_port>
 8014482:	4603      	mov	r3, r0
 8014484:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014486:	88fb      	ldrh	r3, [r7, #6]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d12c      	bne.n	80144e6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801448c:	f06f 0307 	mvn.w	r3, #7
 8014490:	e040      	b.n	8014514 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014492:	4b26      	ldr	r3, [pc, #152]	@ (801452c <udp_bind+0x10c>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	617b      	str	r3, [r7, #20]
 8014498:	e022      	b.n	80144e0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d01b      	beq.n	80144da <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	8a5b      	ldrh	r3, [r3, #18]
 80144a6:	88fa      	ldrh	r2, [r7, #6]
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d116      	bne.n	80144da <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	681a      	ldr	r2, [r3, #0]
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d00d      	beq.n	80144d4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d00a      	beq.n	80144d4 <udp_bind+0xb4>
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d006      	beq.n	80144d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80144c6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d003      	beq.n	80144d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d102      	bne.n	80144da <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80144d4:	f06f 0307 	mvn.w	r3, #7
 80144d8:	e01c      	b.n	8014514 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	68db      	ldr	r3, [r3, #12]
 80144de:	617b      	str	r3, [r7, #20]
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d1d9      	bne.n	801449a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d002      	beq.n	80144f2 <udp_bind+0xd2>
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	e000      	b.n	80144f4 <udp_bind+0xd4>
 80144f2:	2300      	movs	r3, #0
 80144f4:	68fa      	ldr	r2, [r7, #12]
 80144f6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	88fa      	ldrh	r2, [r7, #6]
 80144fc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80144fe:	7cfb      	ldrb	r3, [r7, #19]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d106      	bne.n	8014512 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014504:	4b09      	ldr	r3, [pc, #36]	@ (801452c <udp_bind+0x10c>)
 8014506:	681a      	ldr	r2, [r3, #0]
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801450c:	4a07      	ldr	r2, [pc, #28]	@ (801452c <udp_bind+0x10c>)
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014512:	2300      	movs	r3, #0
}
 8014514:	4618      	mov	r0, r3
 8014516:	3718      	adds	r7, #24
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	08054ae0 	.word	0x08054ae0
 8014520:	0801c4d4 	.word	0x0801c4d4
 8014524:	0801c79c 	.word	0x0801c79c
 8014528:	0801c528 	.word	0x0801c528
 801452c:	20014674 	.word	0x20014674

08014530 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	4613      	mov	r3, r2
 801453c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d109      	bne.n	8014558 <udp_connect+0x28>
 8014544:	4b2c      	ldr	r3, [pc, #176]	@ (80145f8 <udp_connect+0xc8>)
 8014546:	f240 4235 	movw	r2, #1077	@ 0x435
 801454a:	492c      	ldr	r1, [pc, #176]	@ (80145fc <udp_connect+0xcc>)
 801454c:	482c      	ldr	r0, [pc, #176]	@ (8014600 <udp_connect+0xd0>)
 801454e:	f003 fa29 	bl	80179a4 <iprintf>
 8014552:	f06f 030f 	mvn.w	r3, #15
 8014556:	e04b      	b.n	80145f0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d109      	bne.n	8014572 <udp_connect+0x42>
 801455e:	4b26      	ldr	r3, [pc, #152]	@ (80145f8 <udp_connect+0xc8>)
 8014560:	f240 4236 	movw	r2, #1078	@ 0x436
 8014564:	4927      	ldr	r1, [pc, #156]	@ (8014604 <udp_connect+0xd4>)
 8014566:	4826      	ldr	r0, [pc, #152]	@ (8014600 <udp_connect+0xd0>)
 8014568:	f003 fa1c 	bl	80179a4 <iprintf>
 801456c:	f06f 030f 	mvn.w	r3, #15
 8014570:	e03e      	b.n	80145f0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	8a5b      	ldrh	r3, [r3, #18]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d10f      	bne.n	801459a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801457a:	68f9      	ldr	r1, [r7, #12]
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	8a5b      	ldrh	r3, [r3, #18]
 8014580:	461a      	mov	r2, r3
 8014582:	68f8      	ldr	r0, [r7, #12]
 8014584:	f7ff ff4c 	bl	8014420 <udp_bind>
 8014588:	4603      	mov	r3, r0
 801458a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801458c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d002      	beq.n	801459a <udp_connect+0x6a>
      return err;
 8014594:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014598:	e02a      	b.n	80145f0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801459a:	68bb      	ldr	r3, [r7, #8]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d002      	beq.n	80145a6 <udp_connect+0x76>
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	e000      	b.n	80145a8 <udp_connect+0x78>
 80145a6:	2300      	movs	r3, #0
 80145a8:	68fa      	ldr	r2, [r7, #12]
 80145aa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	88fa      	ldrh	r2, [r7, #6]
 80145b0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	7c1b      	ldrb	r3, [r3, #16]
 80145b6:	f043 0304 	orr.w	r3, r3, #4
 80145ba:	b2da      	uxtb	r2, r3
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80145c0:	4b11      	ldr	r3, [pc, #68]	@ (8014608 <udp_connect+0xd8>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	617b      	str	r3, [r7, #20]
 80145c6:	e008      	b.n	80145da <udp_connect+0xaa>
    if (pcb == ipcb) {
 80145c8:	68fa      	ldr	r2, [r7, #12]
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d101      	bne.n	80145d4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80145d0:	2300      	movs	r3, #0
 80145d2:	e00d      	b.n	80145f0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80145d4:	697b      	ldr	r3, [r7, #20]
 80145d6:	68db      	ldr	r3, [r3, #12]
 80145d8:	617b      	str	r3, [r7, #20]
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d1f3      	bne.n	80145c8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80145e0:	4b09      	ldr	r3, [pc, #36]	@ (8014608 <udp_connect+0xd8>)
 80145e2:	681a      	ldr	r2, [r3, #0]
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80145e8:	4a07      	ldr	r2, [pc, #28]	@ (8014608 <udp_connect+0xd8>)
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80145ee:	2300      	movs	r3, #0
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3718      	adds	r7, #24
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	0801c4d4 	.word	0x0801c4d4
 80145fc:	0801c7b4 	.word	0x0801c7b4
 8014600:	0801c528 	.word	0x0801c528
 8014604:	0801c7d0 	.word	0x0801c7d0
 8014608:	20014674 	.word	0x20014674

0801460c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b084      	sub	sp, #16
 8014610:	af00      	add	r7, sp, #0
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	60b9      	str	r1, [r7, #8]
 8014616:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d107      	bne.n	801462e <udp_recv+0x22>
 801461e:	4b08      	ldr	r3, [pc, #32]	@ (8014640 <udp_recv+0x34>)
 8014620:	f240 428a 	movw	r2, #1162	@ 0x48a
 8014624:	4907      	ldr	r1, [pc, #28]	@ (8014644 <udp_recv+0x38>)
 8014626:	4808      	ldr	r0, [pc, #32]	@ (8014648 <udp_recv+0x3c>)
 8014628:	f003 f9bc 	bl	80179a4 <iprintf>
 801462c:	e005      	b.n	801463a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	68ba      	ldr	r2, [r7, #8]
 8014632:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	61da      	str	r2, [r3, #28]
}
 801463a:	3710      	adds	r7, #16
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}
 8014640:	0801c4d4 	.word	0x0801c4d4
 8014644:	0801c808 	.word	0x0801c808
 8014648:	0801c528 	.word	0x0801c528

0801464c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014652:	2000      	movs	r0, #0
 8014654:	f7f7 ff34 	bl	800c4c0 <memp_malloc>
 8014658:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d007      	beq.n	8014670 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014660:	2220      	movs	r2, #32
 8014662:	2100      	movs	r1, #0
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f003 fb2f 	bl	8017cc8 <memset>
    pcb->ttl = UDP_TTL;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	22ff      	movs	r2, #255	@ 0xff
 801466e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014670:	687b      	ldr	r3, [r7, #4]
}
 8014672:	4618      	mov	r0, r3
 8014674:	3708      	adds	r7, #8
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
	...

0801467c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801467c:	b480      	push	{r7}
 801467e:	b085      	sub	sp, #20
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d01e      	beq.n	80146ca <udp_netif_ip_addr_changed+0x4e>
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d01a      	beq.n	80146ca <udp_netif_ip_addr_changed+0x4e>
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d017      	beq.n	80146ca <udp_netif_ip_addr_changed+0x4e>
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d013      	beq.n	80146ca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80146a2:	4b0d      	ldr	r3, [pc, #52]	@ (80146d8 <udp_netif_ip_addr_changed+0x5c>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	60fb      	str	r3, [r7, #12]
 80146a8:	e00c      	b.n	80146c4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d103      	bne.n	80146be <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	68db      	ldr	r3, [r3, #12]
 80146c2:	60fb      	str	r3, [r7, #12]
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d1ef      	bne.n	80146aa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80146ca:	bf00      	nop
 80146cc:	3714      	adds	r7, #20
 80146ce:	46bd      	mov	sp, r7
 80146d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d4:	4770      	bx	lr
 80146d6:	bf00      	nop
 80146d8:	20014674 	.word	0x20014674

080146dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80146e4:	4915      	ldr	r1, [pc, #84]	@ (801473c <etharp_free_entry+0x60>)
 80146e6:	687a      	ldr	r2, [r7, #4]
 80146e8:	4613      	mov	r3, r2
 80146ea:	005b      	lsls	r3, r3, #1
 80146ec:	4413      	add	r3, r2
 80146ee:	00db      	lsls	r3, r3, #3
 80146f0:	440b      	add	r3, r1
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d013      	beq.n	8014720 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80146f8:	4910      	ldr	r1, [pc, #64]	@ (801473c <etharp_free_entry+0x60>)
 80146fa:	687a      	ldr	r2, [r7, #4]
 80146fc:	4613      	mov	r3, r2
 80146fe:	005b      	lsls	r3, r3, #1
 8014700:	4413      	add	r3, r2
 8014702:	00db      	lsls	r3, r3, #3
 8014704:	440b      	add	r3, r1
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	4618      	mov	r0, r3
 801470a:	f7f8 fe0d 	bl	800d328 <pbuf_free>
    arp_table[i].q = NULL;
 801470e:	490b      	ldr	r1, [pc, #44]	@ (801473c <etharp_free_entry+0x60>)
 8014710:	687a      	ldr	r2, [r7, #4]
 8014712:	4613      	mov	r3, r2
 8014714:	005b      	lsls	r3, r3, #1
 8014716:	4413      	add	r3, r2
 8014718:	00db      	lsls	r3, r3, #3
 801471a:	440b      	add	r3, r1
 801471c:	2200      	movs	r2, #0
 801471e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014720:	4906      	ldr	r1, [pc, #24]	@ (801473c <etharp_free_entry+0x60>)
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	4613      	mov	r3, r2
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	4413      	add	r3, r2
 801472a:	00db      	lsls	r3, r3, #3
 801472c:	440b      	add	r3, r1
 801472e:	3314      	adds	r3, #20
 8014730:	2200      	movs	r2, #0
 8014732:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014734:	bf00      	nop
 8014736:	3708      	adds	r7, #8
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	20014678 	.word	0x20014678

08014740 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014746:	2300      	movs	r3, #0
 8014748:	607b      	str	r3, [r7, #4]
 801474a:	e096      	b.n	801487a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801474c:	494f      	ldr	r1, [pc, #316]	@ (801488c <etharp_tmr+0x14c>)
 801474e:	687a      	ldr	r2, [r7, #4]
 8014750:	4613      	mov	r3, r2
 8014752:	005b      	lsls	r3, r3, #1
 8014754:	4413      	add	r3, r2
 8014756:	00db      	lsls	r3, r3, #3
 8014758:	440b      	add	r3, r1
 801475a:	3314      	adds	r3, #20
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014760:	78fb      	ldrb	r3, [r7, #3]
 8014762:	2b00      	cmp	r3, #0
 8014764:	f000 8086 	beq.w	8014874 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014768:	4948      	ldr	r1, [pc, #288]	@ (801488c <etharp_tmr+0x14c>)
 801476a:	687a      	ldr	r2, [r7, #4]
 801476c:	4613      	mov	r3, r2
 801476e:	005b      	lsls	r3, r3, #1
 8014770:	4413      	add	r3, r2
 8014772:	00db      	lsls	r3, r3, #3
 8014774:	440b      	add	r3, r1
 8014776:	3312      	adds	r3, #18
 8014778:	881b      	ldrh	r3, [r3, #0]
 801477a:	3301      	adds	r3, #1
 801477c:	b298      	uxth	r0, r3
 801477e:	4943      	ldr	r1, [pc, #268]	@ (801488c <etharp_tmr+0x14c>)
 8014780:	687a      	ldr	r2, [r7, #4]
 8014782:	4613      	mov	r3, r2
 8014784:	005b      	lsls	r3, r3, #1
 8014786:	4413      	add	r3, r2
 8014788:	00db      	lsls	r3, r3, #3
 801478a:	440b      	add	r3, r1
 801478c:	3312      	adds	r3, #18
 801478e:	4602      	mov	r2, r0
 8014790:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014792:	493e      	ldr	r1, [pc, #248]	@ (801488c <etharp_tmr+0x14c>)
 8014794:	687a      	ldr	r2, [r7, #4]
 8014796:	4613      	mov	r3, r2
 8014798:	005b      	lsls	r3, r3, #1
 801479a:	4413      	add	r3, r2
 801479c:	00db      	lsls	r3, r3, #3
 801479e:	440b      	add	r3, r1
 80147a0:	3312      	adds	r3, #18
 80147a2:	881b      	ldrh	r3, [r3, #0]
 80147a4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80147a8:	d215      	bcs.n	80147d6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80147aa:	4938      	ldr	r1, [pc, #224]	@ (801488c <etharp_tmr+0x14c>)
 80147ac:	687a      	ldr	r2, [r7, #4]
 80147ae:	4613      	mov	r3, r2
 80147b0:	005b      	lsls	r3, r3, #1
 80147b2:	4413      	add	r3, r2
 80147b4:	00db      	lsls	r3, r3, #3
 80147b6:	440b      	add	r3, r1
 80147b8:	3314      	adds	r3, #20
 80147ba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d10e      	bne.n	80147de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80147c0:	4932      	ldr	r1, [pc, #200]	@ (801488c <etharp_tmr+0x14c>)
 80147c2:	687a      	ldr	r2, [r7, #4]
 80147c4:	4613      	mov	r3, r2
 80147c6:	005b      	lsls	r3, r3, #1
 80147c8:	4413      	add	r3, r2
 80147ca:	00db      	lsls	r3, r3, #3
 80147cc:	440b      	add	r3, r1
 80147ce:	3312      	adds	r3, #18
 80147d0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80147d2:	2b04      	cmp	r3, #4
 80147d4:	d903      	bls.n	80147de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f7ff ff80 	bl	80146dc <etharp_free_entry>
 80147dc:	e04a      	b.n	8014874 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80147de:	492b      	ldr	r1, [pc, #172]	@ (801488c <etharp_tmr+0x14c>)
 80147e0:	687a      	ldr	r2, [r7, #4]
 80147e2:	4613      	mov	r3, r2
 80147e4:	005b      	lsls	r3, r3, #1
 80147e6:	4413      	add	r3, r2
 80147e8:	00db      	lsls	r3, r3, #3
 80147ea:	440b      	add	r3, r1
 80147ec:	3314      	adds	r3, #20
 80147ee:	781b      	ldrb	r3, [r3, #0]
 80147f0:	2b03      	cmp	r3, #3
 80147f2:	d10a      	bne.n	801480a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80147f4:	4925      	ldr	r1, [pc, #148]	@ (801488c <etharp_tmr+0x14c>)
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	4613      	mov	r3, r2
 80147fa:	005b      	lsls	r3, r3, #1
 80147fc:	4413      	add	r3, r2
 80147fe:	00db      	lsls	r3, r3, #3
 8014800:	440b      	add	r3, r1
 8014802:	3314      	adds	r3, #20
 8014804:	2204      	movs	r2, #4
 8014806:	701a      	strb	r2, [r3, #0]
 8014808:	e034      	b.n	8014874 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801480a:	4920      	ldr	r1, [pc, #128]	@ (801488c <etharp_tmr+0x14c>)
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	4613      	mov	r3, r2
 8014810:	005b      	lsls	r3, r3, #1
 8014812:	4413      	add	r3, r2
 8014814:	00db      	lsls	r3, r3, #3
 8014816:	440b      	add	r3, r1
 8014818:	3314      	adds	r3, #20
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	2b04      	cmp	r3, #4
 801481e:	d10a      	bne.n	8014836 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014820:	491a      	ldr	r1, [pc, #104]	@ (801488c <etharp_tmr+0x14c>)
 8014822:	687a      	ldr	r2, [r7, #4]
 8014824:	4613      	mov	r3, r2
 8014826:	005b      	lsls	r3, r3, #1
 8014828:	4413      	add	r3, r2
 801482a:	00db      	lsls	r3, r3, #3
 801482c:	440b      	add	r3, r1
 801482e:	3314      	adds	r3, #20
 8014830:	2202      	movs	r2, #2
 8014832:	701a      	strb	r2, [r3, #0]
 8014834:	e01e      	b.n	8014874 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014836:	4915      	ldr	r1, [pc, #84]	@ (801488c <etharp_tmr+0x14c>)
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	4613      	mov	r3, r2
 801483c:	005b      	lsls	r3, r3, #1
 801483e:	4413      	add	r3, r2
 8014840:	00db      	lsls	r3, r3, #3
 8014842:	440b      	add	r3, r1
 8014844:	3314      	adds	r3, #20
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	2b01      	cmp	r3, #1
 801484a:	d113      	bne.n	8014874 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801484c:	490f      	ldr	r1, [pc, #60]	@ (801488c <etharp_tmr+0x14c>)
 801484e:	687a      	ldr	r2, [r7, #4]
 8014850:	4613      	mov	r3, r2
 8014852:	005b      	lsls	r3, r3, #1
 8014854:	4413      	add	r3, r2
 8014856:	00db      	lsls	r3, r3, #3
 8014858:	440b      	add	r3, r1
 801485a:	3308      	adds	r3, #8
 801485c:	6818      	ldr	r0, [r3, #0]
 801485e:	687a      	ldr	r2, [r7, #4]
 8014860:	4613      	mov	r3, r2
 8014862:	005b      	lsls	r3, r3, #1
 8014864:	4413      	add	r3, r2
 8014866:	00db      	lsls	r3, r3, #3
 8014868:	4a08      	ldr	r2, [pc, #32]	@ (801488c <etharp_tmr+0x14c>)
 801486a:	4413      	add	r3, r2
 801486c:	3304      	adds	r3, #4
 801486e:	4619      	mov	r1, r3
 8014870:	f000 fe6e 	bl	8015550 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	3301      	adds	r3, #1
 8014878:	607b      	str	r3, [r7, #4]
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2b09      	cmp	r3, #9
 801487e:	f77f af65 	ble.w	801474c <etharp_tmr+0xc>
      }
    }
  }
}
 8014882:	bf00      	nop
 8014884:	bf00      	nop
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	20014678 	.word	0x20014678

08014890 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b08a      	sub	sp, #40	@ 0x28
 8014894:	af00      	add	r7, sp, #0
 8014896:	60f8      	str	r0, [r7, #12]
 8014898:	460b      	mov	r3, r1
 801489a:	607a      	str	r2, [r7, #4]
 801489c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801489e:	230a      	movs	r3, #10
 80148a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80148a2:	230a      	movs	r3, #10
 80148a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80148a6:	230a      	movs	r3, #10
 80148a8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80148aa:	2300      	movs	r3, #0
 80148ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80148ae:	230a      	movs	r3, #10
 80148b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80148b2:	2300      	movs	r3, #0
 80148b4:	83bb      	strh	r3, [r7, #28]
 80148b6:	2300      	movs	r3, #0
 80148b8:	837b      	strh	r3, [r7, #26]
 80148ba:	2300      	movs	r3, #0
 80148bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148be:	2300      	movs	r3, #0
 80148c0:	843b      	strh	r3, [r7, #32]
 80148c2:	e0ae      	b.n	8014a22 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80148c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148c8:	49a6      	ldr	r1, [pc, #664]	@ (8014b64 <etharp_find_entry+0x2d4>)
 80148ca:	4613      	mov	r3, r2
 80148cc:	005b      	lsls	r3, r3, #1
 80148ce:	4413      	add	r3, r2
 80148d0:	00db      	lsls	r3, r3, #3
 80148d2:	440b      	add	r3, r1
 80148d4:	3314      	adds	r3, #20
 80148d6:	781b      	ldrb	r3, [r3, #0]
 80148d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80148da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80148de:	2b0a      	cmp	r3, #10
 80148e0:	d105      	bne.n	80148ee <etharp_find_entry+0x5e>
 80148e2:	7dfb      	ldrb	r3, [r7, #23]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d102      	bne.n	80148ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80148e8:	8c3b      	ldrh	r3, [r7, #32]
 80148ea:	847b      	strh	r3, [r7, #34]	@ 0x22
 80148ec:	e095      	b.n	8014a1a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80148ee:	7dfb      	ldrb	r3, [r7, #23]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	f000 8092 	beq.w	8014a1a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80148f6:	7dfb      	ldrb	r3, [r7, #23]
 80148f8:	2b01      	cmp	r3, #1
 80148fa:	d009      	beq.n	8014910 <etharp_find_entry+0x80>
 80148fc:	7dfb      	ldrb	r3, [r7, #23]
 80148fe:	2b01      	cmp	r3, #1
 8014900:	d806      	bhi.n	8014910 <etharp_find_entry+0x80>
 8014902:	4b99      	ldr	r3, [pc, #612]	@ (8014b68 <etharp_find_entry+0x2d8>)
 8014904:	f240 1223 	movw	r2, #291	@ 0x123
 8014908:	4998      	ldr	r1, [pc, #608]	@ (8014b6c <etharp_find_entry+0x2dc>)
 801490a:	4899      	ldr	r0, [pc, #612]	@ (8014b70 <etharp_find_entry+0x2e0>)
 801490c:	f003 f84a 	bl	80179a4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d020      	beq.n	8014958 <etharp_find_entry+0xc8>
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	6819      	ldr	r1, [r3, #0]
 801491a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801491e:	4891      	ldr	r0, [pc, #580]	@ (8014b64 <etharp_find_entry+0x2d4>)
 8014920:	4613      	mov	r3, r2
 8014922:	005b      	lsls	r3, r3, #1
 8014924:	4413      	add	r3, r2
 8014926:	00db      	lsls	r3, r3, #3
 8014928:	4403      	add	r3, r0
 801492a:	3304      	adds	r3, #4
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	4299      	cmp	r1, r3
 8014930:	d112      	bne.n	8014958 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d00c      	beq.n	8014952 <etharp_find_entry+0xc2>
 8014938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801493c:	4989      	ldr	r1, [pc, #548]	@ (8014b64 <etharp_find_entry+0x2d4>)
 801493e:	4613      	mov	r3, r2
 8014940:	005b      	lsls	r3, r3, #1
 8014942:	4413      	add	r3, r2
 8014944:	00db      	lsls	r3, r3, #3
 8014946:	440b      	add	r3, r1
 8014948:	3308      	adds	r3, #8
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	687a      	ldr	r2, [r7, #4]
 801494e:	429a      	cmp	r2, r3
 8014950:	d102      	bne.n	8014958 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014952:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014956:	e100      	b.n	8014b5a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014958:	7dfb      	ldrb	r3, [r7, #23]
 801495a:	2b01      	cmp	r3, #1
 801495c:	d140      	bne.n	80149e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801495e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014962:	4980      	ldr	r1, [pc, #512]	@ (8014b64 <etharp_find_entry+0x2d4>)
 8014964:	4613      	mov	r3, r2
 8014966:	005b      	lsls	r3, r3, #1
 8014968:	4413      	add	r3, r2
 801496a:	00db      	lsls	r3, r3, #3
 801496c:	440b      	add	r3, r1
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d01a      	beq.n	80149aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014974:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014978:	497a      	ldr	r1, [pc, #488]	@ (8014b64 <etharp_find_entry+0x2d4>)
 801497a:	4613      	mov	r3, r2
 801497c:	005b      	lsls	r3, r3, #1
 801497e:	4413      	add	r3, r2
 8014980:	00db      	lsls	r3, r3, #3
 8014982:	440b      	add	r3, r1
 8014984:	3312      	adds	r3, #18
 8014986:	881b      	ldrh	r3, [r3, #0]
 8014988:	8bba      	ldrh	r2, [r7, #28]
 801498a:	429a      	cmp	r2, r3
 801498c:	d845      	bhi.n	8014a1a <etharp_find_entry+0x18a>
            old_queue = i;
 801498e:	8c3b      	ldrh	r3, [r7, #32]
 8014990:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014992:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014996:	4973      	ldr	r1, [pc, #460]	@ (8014b64 <etharp_find_entry+0x2d4>)
 8014998:	4613      	mov	r3, r2
 801499a:	005b      	lsls	r3, r3, #1
 801499c:	4413      	add	r3, r2
 801499e:	00db      	lsls	r3, r3, #3
 80149a0:	440b      	add	r3, r1
 80149a2:	3312      	adds	r3, #18
 80149a4:	881b      	ldrh	r3, [r3, #0]
 80149a6:	83bb      	strh	r3, [r7, #28]
 80149a8:	e037      	b.n	8014a1a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80149aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149ae:	496d      	ldr	r1, [pc, #436]	@ (8014b64 <etharp_find_entry+0x2d4>)
 80149b0:	4613      	mov	r3, r2
 80149b2:	005b      	lsls	r3, r3, #1
 80149b4:	4413      	add	r3, r2
 80149b6:	00db      	lsls	r3, r3, #3
 80149b8:	440b      	add	r3, r1
 80149ba:	3312      	adds	r3, #18
 80149bc:	881b      	ldrh	r3, [r3, #0]
 80149be:	8b7a      	ldrh	r2, [r7, #26]
 80149c0:	429a      	cmp	r2, r3
 80149c2:	d82a      	bhi.n	8014a1a <etharp_find_entry+0x18a>
            old_pending = i;
 80149c4:	8c3b      	ldrh	r3, [r7, #32]
 80149c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80149c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149cc:	4965      	ldr	r1, [pc, #404]	@ (8014b64 <etharp_find_entry+0x2d4>)
 80149ce:	4613      	mov	r3, r2
 80149d0:	005b      	lsls	r3, r3, #1
 80149d2:	4413      	add	r3, r2
 80149d4:	00db      	lsls	r3, r3, #3
 80149d6:	440b      	add	r3, r1
 80149d8:	3312      	adds	r3, #18
 80149da:	881b      	ldrh	r3, [r3, #0]
 80149dc:	837b      	strh	r3, [r7, #26]
 80149de:	e01c      	b.n	8014a1a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80149e0:	7dfb      	ldrb	r3, [r7, #23]
 80149e2:	2b01      	cmp	r3, #1
 80149e4:	d919      	bls.n	8014a1a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80149e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149ea:	495e      	ldr	r1, [pc, #376]	@ (8014b64 <etharp_find_entry+0x2d4>)
 80149ec:	4613      	mov	r3, r2
 80149ee:	005b      	lsls	r3, r3, #1
 80149f0:	4413      	add	r3, r2
 80149f2:	00db      	lsls	r3, r3, #3
 80149f4:	440b      	add	r3, r1
 80149f6:	3312      	adds	r3, #18
 80149f8:	881b      	ldrh	r3, [r3, #0]
 80149fa:	8b3a      	ldrh	r2, [r7, #24]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d80c      	bhi.n	8014a1a <etharp_find_entry+0x18a>
            old_stable = i;
 8014a00:	8c3b      	ldrh	r3, [r7, #32]
 8014a02:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014a04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a08:	4956      	ldr	r1, [pc, #344]	@ (8014b64 <etharp_find_entry+0x2d4>)
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	005b      	lsls	r3, r3, #1
 8014a0e:	4413      	add	r3, r2
 8014a10:	00db      	lsls	r3, r3, #3
 8014a12:	440b      	add	r3, r1
 8014a14:	3312      	adds	r3, #18
 8014a16:	881b      	ldrh	r3, [r3, #0]
 8014a18:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a1a:	8c3b      	ldrh	r3, [r7, #32]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	b29b      	uxth	r3, r3
 8014a20:	843b      	strh	r3, [r7, #32]
 8014a22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a26:	2b09      	cmp	r3, #9
 8014a28:	f77f af4c 	ble.w	80148c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014a2c:	7afb      	ldrb	r3, [r7, #11]
 8014a2e:	f003 0302 	and.w	r3, r3, #2
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d108      	bne.n	8014a48 <etharp_find_entry+0x1b8>
 8014a36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014a3a:	2b0a      	cmp	r3, #10
 8014a3c:	d107      	bne.n	8014a4e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014a3e:	7afb      	ldrb	r3, [r7, #11]
 8014a40:	f003 0301 	and.w	r3, r3, #1
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d102      	bne.n	8014a4e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014a48:	f04f 33ff 	mov.w	r3, #4294967295
 8014a4c:	e085      	b.n	8014b5a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014a4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014a52:	2b09      	cmp	r3, #9
 8014a54:	dc02      	bgt.n	8014a5c <etharp_find_entry+0x1cc>
    i = empty;
 8014a56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014a58:	843b      	strh	r3, [r7, #32]
 8014a5a:	e039      	b.n	8014ad0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014a5c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014a60:	2b09      	cmp	r3, #9
 8014a62:	dc14      	bgt.n	8014a8e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014a64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014a66:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014a68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a6c:	493d      	ldr	r1, [pc, #244]	@ (8014b64 <etharp_find_entry+0x2d4>)
 8014a6e:	4613      	mov	r3, r2
 8014a70:	005b      	lsls	r3, r3, #1
 8014a72:	4413      	add	r3, r2
 8014a74:	00db      	lsls	r3, r3, #3
 8014a76:	440b      	add	r3, r1
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d018      	beq.n	8014ab0 <etharp_find_entry+0x220>
 8014a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8014b68 <etharp_find_entry+0x2d8>)
 8014a80:	f240 126d 	movw	r2, #365	@ 0x16d
 8014a84:	493b      	ldr	r1, [pc, #236]	@ (8014b74 <etharp_find_entry+0x2e4>)
 8014a86:	483a      	ldr	r0, [pc, #232]	@ (8014b70 <etharp_find_entry+0x2e0>)
 8014a88:	f002 ff8c 	bl	80179a4 <iprintf>
 8014a8c:	e010      	b.n	8014ab0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014a8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014a92:	2b09      	cmp	r3, #9
 8014a94:	dc02      	bgt.n	8014a9c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014a96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014a98:	843b      	strh	r3, [r7, #32]
 8014a9a:	e009      	b.n	8014ab0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014a9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014aa0:	2b09      	cmp	r3, #9
 8014aa2:	dc02      	bgt.n	8014aaa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014aa4:	8bfb      	ldrh	r3, [r7, #30]
 8014aa6:	843b      	strh	r3, [r7, #32]
 8014aa8:	e002      	b.n	8014ab0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8014aae:	e054      	b.n	8014b5a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014ab0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014ab4:	2b09      	cmp	r3, #9
 8014ab6:	dd06      	ble.n	8014ac6 <etharp_find_entry+0x236>
 8014ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8014b68 <etharp_find_entry+0x2d8>)
 8014aba:	f240 127f 	movw	r2, #383	@ 0x17f
 8014abe:	492e      	ldr	r1, [pc, #184]	@ (8014b78 <etharp_find_entry+0x2e8>)
 8014ac0:	482b      	ldr	r0, [pc, #172]	@ (8014b70 <etharp_find_entry+0x2e0>)
 8014ac2:	f002 ff6f 	bl	80179a4 <iprintf>
    etharp_free_entry(i);
 8014ac6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7ff fe06 	bl	80146dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014ad0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014ad4:	2b09      	cmp	r3, #9
 8014ad6:	dd06      	ble.n	8014ae6 <etharp_find_entry+0x256>
 8014ad8:	4b23      	ldr	r3, [pc, #140]	@ (8014b68 <etharp_find_entry+0x2d8>)
 8014ada:	f240 1283 	movw	r2, #387	@ 0x183
 8014ade:	4926      	ldr	r1, [pc, #152]	@ (8014b78 <etharp_find_entry+0x2e8>)
 8014ae0:	4823      	ldr	r0, [pc, #140]	@ (8014b70 <etharp_find_entry+0x2e0>)
 8014ae2:	f002 ff5f 	bl	80179a4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014ae6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014aea:	491e      	ldr	r1, [pc, #120]	@ (8014b64 <etharp_find_entry+0x2d4>)
 8014aec:	4613      	mov	r3, r2
 8014aee:	005b      	lsls	r3, r3, #1
 8014af0:	4413      	add	r3, r2
 8014af2:	00db      	lsls	r3, r3, #3
 8014af4:	440b      	add	r3, r1
 8014af6:	3314      	adds	r3, #20
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d006      	beq.n	8014b0c <etharp_find_entry+0x27c>
 8014afe:	4b1a      	ldr	r3, [pc, #104]	@ (8014b68 <etharp_find_entry+0x2d8>)
 8014b00:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014b04:	491d      	ldr	r1, [pc, #116]	@ (8014b7c <etharp_find_entry+0x2ec>)
 8014b06:	481a      	ldr	r0, [pc, #104]	@ (8014b70 <etharp_find_entry+0x2e0>)
 8014b08:	f002 ff4c 	bl	80179a4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d00b      	beq.n	8014b2a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014b12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	6819      	ldr	r1, [r3, #0]
 8014b1a:	4812      	ldr	r0, [pc, #72]	@ (8014b64 <etharp_find_entry+0x2d4>)
 8014b1c:	4613      	mov	r3, r2
 8014b1e:	005b      	lsls	r3, r3, #1
 8014b20:	4413      	add	r3, r2
 8014b22:	00db      	lsls	r3, r3, #3
 8014b24:	4403      	add	r3, r0
 8014b26:	3304      	adds	r3, #4
 8014b28:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014b2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b2e:	490d      	ldr	r1, [pc, #52]	@ (8014b64 <etharp_find_entry+0x2d4>)
 8014b30:	4613      	mov	r3, r2
 8014b32:	005b      	lsls	r3, r3, #1
 8014b34:	4413      	add	r3, r2
 8014b36:	00db      	lsls	r3, r3, #3
 8014b38:	440b      	add	r3, r1
 8014b3a:	3312      	adds	r3, #18
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014b40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b44:	4907      	ldr	r1, [pc, #28]	@ (8014b64 <etharp_find_entry+0x2d4>)
 8014b46:	4613      	mov	r3, r2
 8014b48:	005b      	lsls	r3, r3, #1
 8014b4a:	4413      	add	r3, r2
 8014b4c:	00db      	lsls	r3, r3, #3
 8014b4e:	440b      	add	r3, r1
 8014b50:	3308      	adds	r3, #8
 8014b52:	687a      	ldr	r2, [r7, #4]
 8014b54:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014b56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3728      	adds	r7, #40	@ 0x28
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	20014678 	.word	0x20014678
 8014b68:	0801c838 	.word	0x0801c838
 8014b6c:	0801c870 	.word	0x0801c870
 8014b70:	0801c8b0 	.word	0x0801c8b0
 8014b74:	0801c8d8 	.word	0x0801c8d8
 8014b78:	0801c8f0 	.word	0x0801c8f0
 8014b7c:	0801c904 	.word	0x0801c904

08014b80 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b088      	sub	sp, #32
 8014b84:	af02      	add	r7, sp, #8
 8014b86:	60f8      	str	r0, [r7, #12]
 8014b88:	60b9      	str	r1, [r7, #8]
 8014b8a:	607a      	str	r2, [r7, #4]
 8014b8c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014b94:	2b06      	cmp	r3, #6
 8014b96:	d006      	beq.n	8014ba6 <etharp_update_arp_entry+0x26>
 8014b98:	4b48      	ldr	r3, [pc, #288]	@ (8014cbc <etharp_update_arp_entry+0x13c>)
 8014b9a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8014b9e:	4948      	ldr	r1, [pc, #288]	@ (8014cc0 <etharp_update_arp_entry+0x140>)
 8014ba0:	4848      	ldr	r0, [pc, #288]	@ (8014cc4 <etharp_update_arp_entry+0x144>)
 8014ba2:	f002 feff 	bl	80179a4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d012      	beq.n	8014bd2 <etharp_update_arp_entry+0x52>
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d00e      	beq.n	8014bd2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	68f9      	ldr	r1, [r7, #12]
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f001 f8fe 	bl	8015dbc <ip4_addr_isbroadcast_u32>
 8014bc0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d105      	bne.n	8014bd2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014bce:	2be0      	cmp	r3, #224	@ 0xe0
 8014bd0:	d102      	bne.n	8014bd8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014bd2:	f06f 030f 	mvn.w	r3, #15
 8014bd6:	e06c      	b.n	8014cb2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014bd8:	78fb      	ldrb	r3, [r7, #3]
 8014bda:	68fa      	ldr	r2, [r7, #12]
 8014bdc:	4619      	mov	r1, r3
 8014bde:	68b8      	ldr	r0, [r7, #8]
 8014be0:	f7ff fe56 	bl	8014890 <etharp_find_entry>
 8014be4:	4603      	mov	r3, r0
 8014be6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014be8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	da02      	bge.n	8014bf6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014bf0:	8afb      	ldrh	r3, [r7, #22]
 8014bf2:	b25b      	sxtb	r3, r3
 8014bf4:	e05d      	b.n	8014cb2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014bf6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bfa:	4933      	ldr	r1, [pc, #204]	@ (8014cc8 <etharp_update_arp_entry+0x148>)
 8014bfc:	4613      	mov	r3, r2
 8014bfe:	005b      	lsls	r3, r3, #1
 8014c00:	4413      	add	r3, r2
 8014c02:	00db      	lsls	r3, r3, #3
 8014c04:	440b      	add	r3, r1
 8014c06:	3314      	adds	r3, #20
 8014c08:	2202      	movs	r2, #2
 8014c0a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014c0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c10:	492d      	ldr	r1, [pc, #180]	@ (8014cc8 <etharp_update_arp_entry+0x148>)
 8014c12:	4613      	mov	r3, r2
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	4413      	add	r3, r2
 8014c18:	00db      	lsls	r3, r3, #3
 8014c1a:	440b      	add	r3, r1
 8014c1c:	3308      	adds	r3, #8
 8014c1e:	68fa      	ldr	r2, [r7, #12]
 8014c20:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014c22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c26:	4613      	mov	r3, r2
 8014c28:	005b      	lsls	r3, r3, #1
 8014c2a:	4413      	add	r3, r2
 8014c2c:	00db      	lsls	r3, r3, #3
 8014c2e:	3308      	adds	r3, #8
 8014c30:	4a25      	ldr	r2, [pc, #148]	@ (8014cc8 <etharp_update_arp_entry+0x148>)
 8014c32:	4413      	add	r3, r2
 8014c34:	3304      	adds	r3, #4
 8014c36:	2206      	movs	r2, #6
 8014c38:	6879      	ldr	r1, [r7, #4]
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f003 f90d 	bl	8017e5a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014c40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c44:	4920      	ldr	r1, [pc, #128]	@ (8014cc8 <etharp_update_arp_entry+0x148>)
 8014c46:	4613      	mov	r3, r2
 8014c48:	005b      	lsls	r3, r3, #1
 8014c4a:	4413      	add	r3, r2
 8014c4c:	00db      	lsls	r3, r3, #3
 8014c4e:	440b      	add	r3, r1
 8014c50:	3312      	adds	r3, #18
 8014c52:	2200      	movs	r2, #0
 8014c54:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014c56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c5a:	491b      	ldr	r1, [pc, #108]	@ (8014cc8 <etharp_update_arp_entry+0x148>)
 8014c5c:	4613      	mov	r3, r2
 8014c5e:	005b      	lsls	r3, r3, #1
 8014c60:	4413      	add	r3, r2
 8014c62:	00db      	lsls	r3, r3, #3
 8014c64:	440b      	add	r3, r1
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d021      	beq.n	8014cb0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014c6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c70:	4915      	ldr	r1, [pc, #84]	@ (8014cc8 <etharp_update_arp_entry+0x148>)
 8014c72:	4613      	mov	r3, r2
 8014c74:	005b      	lsls	r3, r3, #1
 8014c76:	4413      	add	r3, r2
 8014c78:	00db      	lsls	r3, r3, #3
 8014c7a:	440b      	add	r3, r1
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014c80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c84:	4910      	ldr	r1, [pc, #64]	@ (8014cc8 <etharp_update_arp_entry+0x148>)
 8014c86:	4613      	mov	r3, r2
 8014c88:	005b      	lsls	r3, r3, #1
 8014c8a:	4413      	add	r3, r2
 8014c8c:	00db      	lsls	r3, r3, #3
 8014c8e:	440b      	add	r3, r1
 8014c90:	2200      	movs	r2, #0
 8014c92:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014c9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014c9e:	9300      	str	r3, [sp, #0]
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6939      	ldr	r1, [r7, #16]
 8014ca4:	68f8      	ldr	r0, [r7, #12]
 8014ca6:	f001 ff97 	bl	8016bd8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014caa:	6938      	ldr	r0, [r7, #16]
 8014cac:	f7f8 fb3c 	bl	800d328 <pbuf_free>
  }
  return ERR_OK;
 8014cb0:	2300      	movs	r3, #0
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3718      	adds	r7, #24
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	0801c838 	.word	0x0801c838
 8014cc0:	0801c930 	.word	0x0801c930
 8014cc4:	0801c8b0 	.word	0x0801c8b0
 8014cc8:	20014678 	.word	0x20014678

08014ccc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b084      	sub	sp, #16
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	60fb      	str	r3, [r7, #12]
 8014cd8:	e01e      	b.n	8014d18 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014cda:	4913      	ldr	r1, [pc, #76]	@ (8014d28 <etharp_cleanup_netif+0x5c>)
 8014cdc:	68fa      	ldr	r2, [r7, #12]
 8014cde:	4613      	mov	r3, r2
 8014ce0:	005b      	lsls	r3, r3, #1
 8014ce2:	4413      	add	r3, r2
 8014ce4:	00db      	lsls	r3, r3, #3
 8014ce6:	440b      	add	r3, r1
 8014ce8:	3314      	adds	r3, #20
 8014cea:	781b      	ldrb	r3, [r3, #0]
 8014cec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014cee:	7afb      	ldrb	r3, [r7, #11]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d00e      	beq.n	8014d12 <etharp_cleanup_netif+0x46>
 8014cf4:	490c      	ldr	r1, [pc, #48]	@ (8014d28 <etharp_cleanup_netif+0x5c>)
 8014cf6:	68fa      	ldr	r2, [r7, #12]
 8014cf8:	4613      	mov	r3, r2
 8014cfa:	005b      	lsls	r3, r3, #1
 8014cfc:	4413      	add	r3, r2
 8014cfe:	00db      	lsls	r3, r3, #3
 8014d00:	440b      	add	r3, r1
 8014d02:	3308      	adds	r3, #8
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	687a      	ldr	r2, [r7, #4]
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d102      	bne.n	8014d12 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014d0c:	68f8      	ldr	r0, [r7, #12]
 8014d0e:	f7ff fce5 	bl	80146dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	3301      	adds	r3, #1
 8014d16:	60fb      	str	r3, [r7, #12]
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2b09      	cmp	r3, #9
 8014d1c:	dddd      	ble.n	8014cda <etharp_cleanup_netif+0xe>
    }
  }
}
 8014d1e:	bf00      	nop
 8014d20:	bf00      	nop
 8014d22:	3710      	adds	r7, #16
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}
 8014d28:	20014678 	.word	0x20014678

08014d2c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014d2c:	b5b0      	push	{r4, r5, r7, lr}
 8014d2e:	b08a      	sub	sp, #40	@ 0x28
 8014d30:	af04      	add	r7, sp, #16
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d107      	bne.n	8014d4c <etharp_input+0x20>
 8014d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8014e34 <etharp_input+0x108>)
 8014d3e:	f240 228a 	movw	r2, #650	@ 0x28a
 8014d42:	493d      	ldr	r1, [pc, #244]	@ (8014e38 <etharp_input+0x10c>)
 8014d44:	483d      	ldr	r0, [pc, #244]	@ (8014e3c <etharp_input+0x110>)
 8014d46:	f002 fe2d 	bl	80179a4 <iprintf>
 8014d4a:	e06f      	b.n	8014e2c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	685b      	ldr	r3, [r3, #4]
 8014d50:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	881b      	ldrh	r3, [r3, #0]
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014d5c:	d10c      	bne.n	8014d78 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014d62:	2b06      	cmp	r3, #6
 8014d64:	d108      	bne.n	8014d78 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014d6a:	2b04      	cmp	r3, #4
 8014d6c:	d104      	bne.n	8014d78 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	885b      	ldrh	r3, [r3, #2]
 8014d72:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014d74:	2b08      	cmp	r3, #8
 8014d76:	d003      	beq.n	8014d80 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f7f8 fad5 	bl	800d328 <pbuf_free>
    return;
 8014d7e:	e055      	b.n	8014e2c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	330e      	adds	r3, #14
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	3318      	adds	r3, #24
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	3304      	adds	r3, #4
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d102      	bne.n	8014da0 <etharp_input+0x74>
    for_us = 0;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	75fb      	strb	r3, [r7, #23]
 8014d9e:	e009      	b.n	8014db4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014da0:	68ba      	ldr	r2, [r7, #8]
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	3304      	adds	r3, #4
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	429a      	cmp	r2, r3
 8014daa:	bf0c      	ite	eq
 8014dac:	2301      	moveq	r3, #1
 8014dae:	2300      	movne	r3, #0
 8014db0:	b2db      	uxtb	r3, r3
 8014db2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	f103 0208 	add.w	r2, r3, #8
 8014dba:	7dfb      	ldrb	r3, [r7, #23]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d001      	beq.n	8014dc4 <etharp_input+0x98>
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	e000      	b.n	8014dc6 <etharp_input+0x9a>
 8014dc4:	2302      	movs	r3, #2
 8014dc6:	f107 010c 	add.w	r1, r7, #12
 8014dca:	6838      	ldr	r0, [r7, #0]
 8014dcc:	f7ff fed8 	bl	8014b80 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	88db      	ldrh	r3, [r3, #6]
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014dda:	d003      	beq.n	8014de4 <etharp_input+0xb8>
 8014ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014de0:	d01e      	beq.n	8014e20 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014de2:	e020      	b.n	8014e26 <etharp_input+0xfa>
      if (for_us) {
 8014de4:	7dfb      	ldrb	r3, [r7, #23]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d01c      	beq.n	8014e24 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014df0:	693b      	ldr	r3, [r7, #16]
 8014df2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014e00:	693a      	ldr	r2, [r7, #16]
 8014e02:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014e04:	2102      	movs	r1, #2
 8014e06:	9103      	str	r1, [sp, #12]
 8014e08:	f107 010c 	add.w	r1, r7, #12
 8014e0c:	9102      	str	r1, [sp, #8]
 8014e0e:	9201      	str	r2, [sp, #4]
 8014e10:	9300      	str	r3, [sp, #0]
 8014e12:	462b      	mov	r3, r5
 8014e14:	4622      	mov	r2, r4
 8014e16:	4601      	mov	r1, r0
 8014e18:	6838      	ldr	r0, [r7, #0]
 8014e1a:	f000 faeb 	bl	80153f4 <etharp_raw>
      break;
 8014e1e:	e001      	b.n	8014e24 <etharp_input+0xf8>
      break;
 8014e20:	bf00      	nop
 8014e22:	e000      	b.n	8014e26 <etharp_input+0xfa>
      break;
 8014e24:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014e26:	6878      	ldr	r0, [r7, #4]
 8014e28:	f7f8 fa7e 	bl	800d328 <pbuf_free>
}
 8014e2c:	3718      	adds	r7, #24
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bdb0      	pop	{r4, r5, r7, pc}
 8014e32:	bf00      	nop
 8014e34:	0801c838 	.word	0x0801c838
 8014e38:	0801c988 	.word	0x0801c988
 8014e3c:	0801c8b0 	.word	0x0801c8b0

08014e40 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b086      	sub	sp, #24
 8014e44:	af02      	add	r7, sp, #8
 8014e46:	60f8      	str	r0, [r7, #12]
 8014e48:	60b9      	str	r1, [r7, #8]
 8014e4a:	4613      	mov	r3, r2
 8014e4c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014e4e:	79fa      	ldrb	r2, [r7, #7]
 8014e50:	4944      	ldr	r1, [pc, #272]	@ (8014f64 <etharp_output_to_arp_index+0x124>)
 8014e52:	4613      	mov	r3, r2
 8014e54:	005b      	lsls	r3, r3, #1
 8014e56:	4413      	add	r3, r2
 8014e58:	00db      	lsls	r3, r3, #3
 8014e5a:	440b      	add	r3, r1
 8014e5c:	3314      	adds	r3, #20
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	2b01      	cmp	r3, #1
 8014e62:	d806      	bhi.n	8014e72 <etharp_output_to_arp_index+0x32>
 8014e64:	4b40      	ldr	r3, [pc, #256]	@ (8014f68 <etharp_output_to_arp_index+0x128>)
 8014e66:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014e6a:	4940      	ldr	r1, [pc, #256]	@ (8014f6c <etharp_output_to_arp_index+0x12c>)
 8014e6c:	4840      	ldr	r0, [pc, #256]	@ (8014f70 <etharp_output_to_arp_index+0x130>)
 8014e6e:	f002 fd99 	bl	80179a4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014e72:	79fa      	ldrb	r2, [r7, #7]
 8014e74:	493b      	ldr	r1, [pc, #236]	@ (8014f64 <etharp_output_to_arp_index+0x124>)
 8014e76:	4613      	mov	r3, r2
 8014e78:	005b      	lsls	r3, r3, #1
 8014e7a:	4413      	add	r3, r2
 8014e7c:	00db      	lsls	r3, r3, #3
 8014e7e:	440b      	add	r3, r1
 8014e80:	3314      	adds	r3, #20
 8014e82:	781b      	ldrb	r3, [r3, #0]
 8014e84:	2b02      	cmp	r3, #2
 8014e86:	d153      	bne.n	8014f30 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014e88:	79fa      	ldrb	r2, [r7, #7]
 8014e8a:	4936      	ldr	r1, [pc, #216]	@ (8014f64 <etharp_output_to_arp_index+0x124>)
 8014e8c:	4613      	mov	r3, r2
 8014e8e:	005b      	lsls	r3, r3, #1
 8014e90:	4413      	add	r3, r2
 8014e92:	00db      	lsls	r3, r3, #3
 8014e94:	440b      	add	r3, r1
 8014e96:	3312      	adds	r3, #18
 8014e98:	881b      	ldrh	r3, [r3, #0]
 8014e9a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014e9e:	d919      	bls.n	8014ed4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014ea0:	79fa      	ldrb	r2, [r7, #7]
 8014ea2:	4613      	mov	r3, r2
 8014ea4:	005b      	lsls	r3, r3, #1
 8014ea6:	4413      	add	r3, r2
 8014ea8:	00db      	lsls	r3, r3, #3
 8014eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8014f64 <etharp_output_to_arp_index+0x124>)
 8014eac:	4413      	add	r3, r2
 8014eae:	3304      	adds	r3, #4
 8014eb0:	4619      	mov	r1, r3
 8014eb2:	68f8      	ldr	r0, [r7, #12]
 8014eb4:	f000 fb4c 	bl	8015550 <etharp_request>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d138      	bne.n	8014f30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014ebe:	79fa      	ldrb	r2, [r7, #7]
 8014ec0:	4928      	ldr	r1, [pc, #160]	@ (8014f64 <etharp_output_to_arp_index+0x124>)
 8014ec2:	4613      	mov	r3, r2
 8014ec4:	005b      	lsls	r3, r3, #1
 8014ec6:	4413      	add	r3, r2
 8014ec8:	00db      	lsls	r3, r3, #3
 8014eca:	440b      	add	r3, r1
 8014ecc:	3314      	adds	r3, #20
 8014ece:	2203      	movs	r2, #3
 8014ed0:	701a      	strb	r2, [r3, #0]
 8014ed2:	e02d      	b.n	8014f30 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014ed4:	79fa      	ldrb	r2, [r7, #7]
 8014ed6:	4923      	ldr	r1, [pc, #140]	@ (8014f64 <etharp_output_to_arp_index+0x124>)
 8014ed8:	4613      	mov	r3, r2
 8014eda:	005b      	lsls	r3, r3, #1
 8014edc:	4413      	add	r3, r2
 8014ede:	00db      	lsls	r3, r3, #3
 8014ee0:	440b      	add	r3, r1
 8014ee2:	3312      	adds	r3, #18
 8014ee4:	881b      	ldrh	r3, [r3, #0]
 8014ee6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014eea:	d321      	bcc.n	8014f30 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014eec:	79fa      	ldrb	r2, [r7, #7]
 8014eee:	4613      	mov	r3, r2
 8014ef0:	005b      	lsls	r3, r3, #1
 8014ef2:	4413      	add	r3, r2
 8014ef4:	00db      	lsls	r3, r3, #3
 8014ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8014f64 <etharp_output_to_arp_index+0x124>)
 8014ef8:	4413      	add	r3, r2
 8014efa:	1d19      	adds	r1, r3, #4
 8014efc:	79fa      	ldrb	r2, [r7, #7]
 8014efe:	4613      	mov	r3, r2
 8014f00:	005b      	lsls	r3, r3, #1
 8014f02:	4413      	add	r3, r2
 8014f04:	00db      	lsls	r3, r3, #3
 8014f06:	3308      	adds	r3, #8
 8014f08:	4a16      	ldr	r2, [pc, #88]	@ (8014f64 <etharp_output_to_arp_index+0x124>)
 8014f0a:	4413      	add	r3, r2
 8014f0c:	3304      	adds	r3, #4
 8014f0e:	461a      	mov	r2, r3
 8014f10:	68f8      	ldr	r0, [r7, #12]
 8014f12:	f000 fafb 	bl	801550c <etharp_request_dst>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d109      	bne.n	8014f30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014f1c:	79fa      	ldrb	r2, [r7, #7]
 8014f1e:	4911      	ldr	r1, [pc, #68]	@ (8014f64 <etharp_output_to_arp_index+0x124>)
 8014f20:	4613      	mov	r3, r2
 8014f22:	005b      	lsls	r3, r3, #1
 8014f24:	4413      	add	r3, r2
 8014f26:	00db      	lsls	r3, r3, #3
 8014f28:	440b      	add	r3, r1
 8014f2a:	3314      	adds	r3, #20
 8014f2c:	2203      	movs	r2, #3
 8014f2e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014f36:	79fa      	ldrb	r2, [r7, #7]
 8014f38:	4613      	mov	r3, r2
 8014f3a:	005b      	lsls	r3, r3, #1
 8014f3c:	4413      	add	r3, r2
 8014f3e:	00db      	lsls	r3, r3, #3
 8014f40:	3308      	adds	r3, #8
 8014f42:	4a08      	ldr	r2, [pc, #32]	@ (8014f64 <etharp_output_to_arp_index+0x124>)
 8014f44:	4413      	add	r3, r2
 8014f46:	3304      	adds	r3, #4
 8014f48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014f4c:	9200      	str	r2, [sp, #0]
 8014f4e:	460a      	mov	r2, r1
 8014f50:	68b9      	ldr	r1, [r7, #8]
 8014f52:	68f8      	ldr	r0, [r7, #12]
 8014f54:	f001 fe40 	bl	8016bd8 <ethernet_output>
 8014f58:	4603      	mov	r3, r0
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	3710      	adds	r7, #16
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}
 8014f62:	bf00      	nop
 8014f64:	20014678 	.word	0x20014678
 8014f68:	0801c838 	.word	0x0801c838
 8014f6c:	0801c9a8 	.word	0x0801c9a8
 8014f70:	0801c8b0 	.word	0x0801c8b0

08014f74 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b08a      	sub	sp, #40	@ 0x28
 8014f78:	af02      	add	r7, sp, #8
 8014f7a:	60f8      	str	r0, [r7, #12]
 8014f7c:	60b9      	str	r1, [r7, #8]
 8014f7e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d106      	bne.n	8014f98 <etharp_output+0x24>
 8014f8a:	4b73      	ldr	r3, [pc, #460]	@ (8015158 <etharp_output+0x1e4>)
 8014f8c:	f240 321e 	movw	r2, #798	@ 0x31e
 8014f90:	4972      	ldr	r1, [pc, #456]	@ (801515c <etharp_output+0x1e8>)
 8014f92:	4873      	ldr	r0, [pc, #460]	@ (8015160 <etharp_output+0x1ec>)
 8014f94:	f002 fd06 	bl	80179a4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d106      	bne.n	8014fac <etharp_output+0x38>
 8014f9e:	4b6e      	ldr	r3, [pc, #440]	@ (8015158 <etharp_output+0x1e4>)
 8014fa0:	f240 321f 	movw	r2, #799	@ 0x31f
 8014fa4:	496f      	ldr	r1, [pc, #444]	@ (8015164 <etharp_output+0x1f0>)
 8014fa6:	486e      	ldr	r0, [pc, #440]	@ (8015160 <etharp_output+0x1ec>)
 8014fa8:	f002 fcfc 	bl	80179a4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d106      	bne.n	8014fc0 <etharp_output+0x4c>
 8014fb2:	4b69      	ldr	r3, [pc, #420]	@ (8015158 <etharp_output+0x1e4>)
 8014fb4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014fb8:	496b      	ldr	r1, [pc, #428]	@ (8015168 <etharp_output+0x1f4>)
 8014fba:	4869      	ldr	r0, [pc, #420]	@ (8015160 <etharp_output+0x1ec>)
 8014fbc:	f002 fcf2 	bl	80179a4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	68f9      	ldr	r1, [r7, #12]
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f000 fef8 	bl	8015dbc <ip4_addr_isbroadcast_u32>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d002      	beq.n	8014fd8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014fd2:	4b66      	ldr	r3, [pc, #408]	@ (801516c <etharp_output+0x1f8>)
 8014fd4:	61fb      	str	r3, [r7, #28]
 8014fd6:	e0af      	b.n	8015138 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014fe0:	2be0      	cmp	r3, #224	@ 0xe0
 8014fe2:	d118      	bne.n	8015016 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014fec:	235e      	movs	r3, #94	@ 0x5e
 8014fee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	781b      	ldrb	r3, [r3, #0]
 8014ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014ffa:	b2db      	uxtb	r3, r3
 8014ffc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	3302      	adds	r3, #2
 8015002:	781b      	ldrb	r3, [r3, #0]
 8015004:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	3303      	adds	r3, #3
 801500a:	781b      	ldrb	r3, [r3, #0]
 801500c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801500e:	f107 0310 	add.w	r3, r7, #16
 8015012:	61fb      	str	r3, [r7, #28]
 8015014:	e090      	b.n	8015138 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	3304      	adds	r3, #4
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	405a      	eors	r2, r3
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	3308      	adds	r3, #8
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	4013      	ands	r3, r2
 801502a:	2b00      	cmp	r3, #0
 801502c:	d012      	beq.n	8015054 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015034:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8015038:	4293      	cmp	r3, r2
 801503a:	d00b      	beq.n	8015054 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	330c      	adds	r3, #12
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d003      	beq.n	801504e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	330c      	adds	r3, #12
 801504a:	61bb      	str	r3, [r7, #24]
 801504c:	e002      	b.n	8015054 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801504e:	f06f 0303 	mvn.w	r3, #3
 8015052:	e07d      	b.n	8015150 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015054:	4b46      	ldr	r3, [pc, #280]	@ (8015170 <etharp_output+0x1fc>)
 8015056:	781b      	ldrb	r3, [r3, #0]
 8015058:	4619      	mov	r1, r3
 801505a:	4a46      	ldr	r2, [pc, #280]	@ (8015174 <etharp_output+0x200>)
 801505c:	460b      	mov	r3, r1
 801505e:	005b      	lsls	r3, r3, #1
 8015060:	440b      	add	r3, r1
 8015062:	00db      	lsls	r3, r3, #3
 8015064:	4413      	add	r3, r2
 8015066:	3314      	adds	r3, #20
 8015068:	781b      	ldrb	r3, [r3, #0]
 801506a:	2b01      	cmp	r3, #1
 801506c:	d925      	bls.n	80150ba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801506e:	4b40      	ldr	r3, [pc, #256]	@ (8015170 <etharp_output+0x1fc>)
 8015070:	781b      	ldrb	r3, [r3, #0]
 8015072:	4619      	mov	r1, r3
 8015074:	4a3f      	ldr	r2, [pc, #252]	@ (8015174 <etharp_output+0x200>)
 8015076:	460b      	mov	r3, r1
 8015078:	005b      	lsls	r3, r3, #1
 801507a:	440b      	add	r3, r1
 801507c:	00db      	lsls	r3, r3, #3
 801507e:	4413      	add	r3, r2
 8015080:	3308      	adds	r3, #8
 8015082:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015084:	68fa      	ldr	r2, [r7, #12]
 8015086:	429a      	cmp	r2, r3
 8015088:	d117      	bne.n	80150ba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801508a:	69bb      	ldr	r3, [r7, #24]
 801508c:	681a      	ldr	r2, [r3, #0]
 801508e:	4b38      	ldr	r3, [pc, #224]	@ (8015170 <etharp_output+0x1fc>)
 8015090:	781b      	ldrb	r3, [r3, #0]
 8015092:	4618      	mov	r0, r3
 8015094:	4937      	ldr	r1, [pc, #220]	@ (8015174 <etharp_output+0x200>)
 8015096:	4603      	mov	r3, r0
 8015098:	005b      	lsls	r3, r3, #1
 801509a:	4403      	add	r3, r0
 801509c:	00db      	lsls	r3, r3, #3
 801509e:	440b      	add	r3, r1
 80150a0:	3304      	adds	r3, #4
 80150a2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d108      	bne.n	80150ba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80150a8:	4b31      	ldr	r3, [pc, #196]	@ (8015170 <etharp_output+0x1fc>)
 80150aa:	781b      	ldrb	r3, [r3, #0]
 80150ac:	461a      	mov	r2, r3
 80150ae:	68b9      	ldr	r1, [r7, #8]
 80150b0:	68f8      	ldr	r0, [r7, #12]
 80150b2:	f7ff fec5 	bl	8014e40 <etharp_output_to_arp_index>
 80150b6:	4603      	mov	r3, r0
 80150b8:	e04a      	b.n	8015150 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80150ba:	2300      	movs	r3, #0
 80150bc:	75fb      	strb	r3, [r7, #23]
 80150be:	e031      	b.n	8015124 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80150c0:	7dfa      	ldrb	r2, [r7, #23]
 80150c2:	492c      	ldr	r1, [pc, #176]	@ (8015174 <etharp_output+0x200>)
 80150c4:	4613      	mov	r3, r2
 80150c6:	005b      	lsls	r3, r3, #1
 80150c8:	4413      	add	r3, r2
 80150ca:	00db      	lsls	r3, r3, #3
 80150cc:	440b      	add	r3, r1
 80150ce:	3314      	adds	r3, #20
 80150d0:	781b      	ldrb	r3, [r3, #0]
 80150d2:	2b01      	cmp	r3, #1
 80150d4:	d923      	bls.n	801511e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80150d6:	7dfa      	ldrb	r2, [r7, #23]
 80150d8:	4926      	ldr	r1, [pc, #152]	@ (8015174 <etharp_output+0x200>)
 80150da:	4613      	mov	r3, r2
 80150dc:	005b      	lsls	r3, r3, #1
 80150de:	4413      	add	r3, r2
 80150e0:	00db      	lsls	r3, r3, #3
 80150e2:	440b      	add	r3, r1
 80150e4:	3308      	adds	r3, #8
 80150e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80150e8:	68fa      	ldr	r2, [r7, #12]
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d117      	bne.n	801511e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80150ee:	69bb      	ldr	r3, [r7, #24]
 80150f0:	6819      	ldr	r1, [r3, #0]
 80150f2:	7dfa      	ldrb	r2, [r7, #23]
 80150f4:	481f      	ldr	r0, [pc, #124]	@ (8015174 <etharp_output+0x200>)
 80150f6:	4613      	mov	r3, r2
 80150f8:	005b      	lsls	r3, r3, #1
 80150fa:	4413      	add	r3, r2
 80150fc:	00db      	lsls	r3, r3, #3
 80150fe:	4403      	add	r3, r0
 8015100:	3304      	adds	r3, #4
 8015102:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015104:	4299      	cmp	r1, r3
 8015106:	d10a      	bne.n	801511e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015108:	4a19      	ldr	r2, [pc, #100]	@ (8015170 <etharp_output+0x1fc>)
 801510a:	7dfb      	ldrb	r3, [r7, #23]
 801510c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801510e:	7dfb      	ldrb	r3, [r7, #23]
 8015110:	461a      	mov	r2, r3
 8015112:	68b9      	ldr	r1, [r7, #8]
 8015114:	68f8      	ldr	r0, [r7, #12]
 8015116:	f7ff fe93 	bl	8014e40 <etharp_output_to_arp_index>
 801511a:	4603      	mov	r3, r0
 801511c:	e018      	b.n	8015150 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801511e:	7dfb      	ldrb	r3, [r7, #23]
 8015120:	3301      	adds	r3, #1
 8015122:	75fb      	strb	r3, [r7, #23]
 8015124:	7dfb      	ldrb	r3, [r7, #23]
 8015126:	2b09      	cmp	r3, #9
 8015128:	d9ca      	bls.n	80150c0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801512a:	68ba      	ldr	r2, [r7, #8]
 801512c:	69b9      	ldr	r1, [r7, #24]
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	f000 f822 	bl	8015178 <etharp_query>
 8015134:	4603      	mov	r3, r0
 8015136:	e00b      	b.n	8015150 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801513e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015142:	9300      	str	r3, [sp, #0]
 8015144:	69fb      	ldr	r3, [r7, #28]
 8015146:	68b9      	ldr	r1, [r7, #8]
 8015148:	68f8      	ldr	r0, [r7, #12]
 801514a:	f001 fd45 	bl	8016bd8 <ethernet_output>
 801514e:	4603      	mov	r3, r0
}
 8015150:	4618      	mov	r0, r3
 8015152:	3720      	adds	r7, #32
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}
 8015158:	0801c838 	.word	0x0801c838
 801515c:	0801c988 	.word	0x0801c988
 8015160:	0801c8b0 	.word	0x0801c8b0
 8015164:	0801c9d8 	.word	0x0801c9d8
 8015168:	0801c978 	.word	0x0801c978
 801516c:	08054ae4 	.word	0x08054ae4
 8015170:	20014768 	.word	0x20014768
 8015174:	20014678 	.word	0x20014678

08015178 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b08c      	sub	sp, #48	@ 0x30
 801517c:	af02      	add	r7, sp, #8
 801517e:	60f8      	str	r0, [r7, #12]
 8015180:	60b9      	str	r1, [r7, #8]
 8015182:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	3326      	adds	r3, #38	@ 0x26
 8015188:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801518a:	23ff      	movs	r3, #255	@ 0xff
 801518c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8015190:	2300      	movs	r3, #0
 8015192:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	68f9      	ldr	r1, [r7, #12]
 801519a:	4618      	mov	r0, r3
 801519c:	f000 fe0e 	bl	8015dbc <ip4_addr_isbroadcast_u32>
 80151a0:	4603      	mov	r3, r0
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d10c      	bne.n	80151c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80151a6:	68bb      	ldr	r3, [r7, #8]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80151ae:	2be0      	cmp	r3, #224	@ 0xe0
 80151b0:	d006      	beq.n	80151c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80151b2:	68bb      	ldr	r3, [r7, #8]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d003      	beq.n	80151c0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d102      	bne.n	80151c6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80151c0:	f06f 030f 	mvn.w	r3, #15
 80151c4:	e101      	b.n	80153ca <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80151c6:	68fa      	ldr	r2, [r7, #12]
 80151c8:	2101      	movs	r1, #1
 80151ca:	68b8      	ldr	r0, [r7, #8]
 80151cc:	f7ff fb60 	bl	8014890 <etharp_find_entry>
 80151d0:	4603      	mov	r3, r0
 80151d2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80151d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	da02      	bge.n	80151e2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80151dc:	8a7b      	ldrh	r3, [r7, #18]
 80151de:	b25b      	sxtb	r3, r3
 80151e0:	e0f3      	b.n	80153ca <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80151e2:	8a7b      	ldrh	r3, [r7, #18]
 80151e4:	2b7e      	cmp	r3, #126	@ 0x7e
 80151e6:	d906      	bls.n	80151f6 <etharp_query+0x7e>
 80151e8:	4b7a      	ldr	r3, [pc, #488]	@ (80153d4 <etharp_query+0x25c>)
 80151ea:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80151ee:	497a      	ldr	r1, [pc, #488]	@ (80153d8 <etharp_query+0x260>)
 80151f0:	487a      	ldr	r0, [pc, #488]	@ (80153dc <etharp_query+0x264>)
 80151f2:	f002 fbd7 	bl	80179a4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80151f6:	8a7b      	ldrh	r3, [r7, #18]
 80151f8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80151fa:	7c7a      	ldrb	r2, [r7, #17]
 80151fc:	4978      	ldr	r1, [pc, #480]	@ (80153e0 <etharp_query+0x268>)
 80151fe:	4613      	mov	r3, r2
 8015200:	005b      	lsls	r3, r3, #1
 8015202:	4413      	add	r3, r2
 8015204:	00db      	lsls	r3, r3, #3
 8015206:	440b      	add	r3, r1
 8015208:	3314      	adds	r3, #20
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d115      	bne.n	801523c <etharp_query+0xc4>
    is_new_entry = 1;
 8015210:	2301      	movs	r3, #1
 8015212:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015214:	7c7a      	ldrb	r2, [r7, #17]
 8015216:	4972      	ldr	r1, [pc, #456]	@ (80153e0 <etharp_query+0x268>)
 8015218:	4613      	mov	r3, r2
 801521a:	005b      	lsls	r3, r3, #1
 801521c:	4413      	add	r3, r2
 801521e:	00db      	lsls	r3, r3, #3
 8015220:	440b      	add	r3, r1
 8015222:	3314      	adds	r3, #20
 8015224:	2201      	movs	r2, #1
 8015226:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015228:	7c7a      	ldrb	r2, [r7, #17]
 801522a:	496d      	ldr	r1, [pc, #436]	@ (80153e0 <etharp_query+0x268>)
 801522c:	4613      	mov	r3, r2
 801522e:	005b      	lsls	r3, r3, #1
 8015230:	4413      	add	r3, r2
 8015232:	00db      	lsls	r3, r3, #3
 8015234:	440b      	add	r3, r1
 8015236:	3308      	adds	r3, #8
 8015238:	68fa      	ldr	r2, [r7, #12]
 801523a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801523c:	7c7a      	ldrb	r2, [r7, #17]
 801523e:	4968      	ldr	r1, [pc, #416]	@ (80153e0 <etharp_query+0x268>)
 8015240:	4613      	mov	r3, r2
 8015242:	005b      	lsls	r3, r3, #1
 8015244:	4413      	add	r3, r2
 8015246:	00db      	lsls	r3, r3, #3
 8015248:	440b      	add	r3, r1
 801524a:	3314      	adds	r3, #20
 801524c:	781b      	ldrb	r3, [r3, #0]
 801524e:	2b01      	cmp	r3, #1
 8015250:	d011      	beq.n	8015276 <etharp_query+0xfe>
 8015252:	7c7a      	ldrb	r2, [r7, #17]
 8015254:	4962      	ldr	r1, [pc, #392]	@ (80153e0 <etharp_query+0x268>)
 8015256:	4613      	mov	r3, r2
 8015258:	005b      	lsls	r3, r3, #1
 801525a:	4413      	add	r3, r2
 801525c:	00db      	lsls	r3, r3, #3
 801525e:	440b      	add	r3, r1
 8015260:	3314      	adds	r3, #20
 8015262:	781b      	ldrb	r3, [r3, #0]
 8015264:	2b01      	cmp	r3, #1
 8015266:	d806      	bhi.n	8015276 <etharp_query+0xfe>
 8015268:	4b5a      	ldr	r3, [pc, #360]	@ (80153d4 <etharp_query+0x25c>)
 801526a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801526e:	495d      	ldr	r1, [pc, #372]	@ (80153e4 <etharp_query+0x26c>)
 8015270:	485a      	ldr	r0, [pc, #360]	@ (80153dc <etharp_query+0x264>)
 8015272:	f002 fb97 	bl	80179a4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015276:	6a3b      	ldr	r3, [r7, #32]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d102      	bne.n	8015282 <etharp_query+0x10a>
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d10c      	bne.n	801529c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015282:	68b9      	ldr	r1, [r7, #8]
 8015284:	68f8      	ldr	r0, [r7, #12]
 8015286:	f000 f963 	bl	8015550 <etharp_request>
 801528a:	4603      	mov	r3, r0
 801528c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d102      	bne.n	801529c <etharp_query+0x124>
      return result;
 8015296:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801529a:	e096      	b.n	80153ca <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d106      	bne.n	80152b0 <etharp_query+0x138>
 80152a2:	4b4c      	ldr	r3, [pc, #304]	@ (80153d4 <etharp_query+0x25c>)
 80152a4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80152a8:	494f      	ldr	r1, [pc, #316]	@ (80153e8 <etharp_query+0x270>)
 80152aa:	484c      	ldr	r0, [pc, #304]	@ (80153dc <etharp_query+0x264>)
 80152ac:	f002 fb7a 	bl	80179a4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80152b0:	7c7a      	ldrb	r2, [r7, #17]
 80152b2:	494b      	ldr	r1, [pc, #300]	@ (80153e0 <etharp_query+0x268>)
 80152b4:	4613      	mov	r3, r2
 80152b6:	005b      	lsls	r3, r3, #1
 80152b8:	4413      	add	r3, r2
 80152ba:	00db      	lsls	r3, r3, #3
 80152bc:	440b      	add	r3, r1
 80152be:	3314      	adds	r3, #20
 80152c0:	781b      	ldrb	r3, [r3, #0]
 80152c2:	2b01      	cmp	r3, #1
 80152c4:	d917      	bls.n	80152f6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80152c6:	4a49      	ldr	r2, [pc, #292]	@ (80153ec <etharp_query+0x274>)
 80152c8:	7c7b      	ldrb	r3, [r7, #17]
 80152ca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80152cc:	7c7a      	ldrb	r2, [r7, #17]
 80152ce:	4613      	mov	r3, r2
 80152d0:	005b      	lsls	r3, r3, #1
 80152d2:	4413      	add	r3, r2
 80152d4:	00db      	lsls	r3, r3, #3
 80152d6:	3308      	adds	r3, #8
 80152d8:	4a41      	ldr	r2, [pc, #260]	@ (80153e0 <etharp_query+0x268>)
 80152da:	4413      	add	r3, r2
 80152dc:	3304      	adds	r3, #4
 80152de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80152e2:	9200      	str	r2, [sp, #0]
 80152e4:	697a      	ldr	r2, [r7, #20]
 80152e6:	6879      	ldr	r1, [r7, #4]
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	f001 fc75 	bl	8016bd8 <ethernet_output>
 80152ee:	4603      	mov	r3, r0
 80152f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80152f4:	e067      	b.n	80153c6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80152f6:	7c7a      	ldrb	r2, [r7, #17]
 80152f8:	4939      	ldr	r1, [pc, #228]	@ (80153e0 <etharp_query+0x268>)
 80152fa:	4613      	mov	r3, r2
 80152fc:	005b      	lsls	r3, r3, #1
 80152fe:	4413      	add	r3, r2
 8015300:	00db      	lsls	r3, r3, #3
 8015302:	440b      	add	r3, r1
 8015304:	3314      	adds	r3, #20
 8015306:	781b      	ldrb	r3, [r3, #0]
 8015308:	2b01      	cmp	r3, #1
 801530a:	d15c      	bne.n	80153c6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801530c:	2300      	movs	r3, #0
 801530e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015314:	e01c      	b.n	8015350 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015316:	69fb      	ldr	r3, [r7, #28]
 8015318:	895a      	ldrh	r2, [r3, #10]
 801531a:	69fb      	ldr	r3, [r7, #28]
 801531c:	891b      	ldrh	r3, [r3, #8]
 801531e:	429a      	cmp	r2, r3
 8015320:	d10a      	bne.n	8015338 <etharp_query+0x1c0>
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d006      	beq.n	8015338 <etharp_query+0x1c0>
 801532a:	4b2a      	ldr	r3, [pc, #168]	@ (80153d4 <etharp_query+0x25c>)
 801532c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015330:	492f      	ldr	r1, [pc, #188]	@ (80153f0 <etharp_query+0x278>)
 8015332:	482a      	ldr	r0, [pc, #168]	@ (80153dc <etharp_query+0x264>)
 8015334:	f002 fb36 	bl	80179a4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	7b1b      	ldrb	r3, [r3, #12]
 801533c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015340:	2b00      	cmp	r3, #0
 8015342:	d002      	beq.n	801534a <etharp_query+0x1d2>
        copy_needed = 1;
 8015344:	2301      	movs	r3, #1
 8015346:	61bb      	str	r3, [r7, #24]
        break;
 8015348:	e005      	b.n	8015356 <etharp_query+0x1de>
      }
      p = p->next;
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015350:	69fb      	ldr	r3, [r7, #28]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d1df      	bne.n	8015316 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015356:	69bb      	ldr	r3, [r7, #24]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d007      	beq.n	801536c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801535c:	687a      	ldr	r2, [r7, #4]
 801535e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8015362:	200e      	movs	r0, #14
 8015364:	f7f8 fade 	bl	800d924 <pbuf_clone>
 8015368:	61f8      	str	r0, [r7, #28]
 801536a:	e004      	b.n	8015376 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015370:	69f8      	ldr	r0, [r7, #28]
 8015372:	f7f8 f879 	bl	800d468 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d021      	beq.n	80153c0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801537c:	7c7a      	ldrb	r2, [r7, #17]
 801537e:	4918      	ldr	r1, [pc, #96]	@ (80153e0 <etharp_query+0x268>)
 8015380:	4613      	mov	r3, r2
 8015382:	005b      	lsls	r3, r3, #1
 8015384:	4413      	add	r3, r2
 8015386:	00db      	lsls	r3, r3, #3
 8015388:	440b      	add	r3, r1
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d00a      	beq.n	80153a6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015390:	7c7a      	ldrb	r2, [r7, #17]
 8015392:	4913      	ldr	r1, [pc, #76]	@ (80153e0 <etharp_query+0x268>)
 8015394:	4613      	mov	r3, r2
 8015396:	005b      	lsls	r3, r3, #1
 8015398:	4413      	add	r3, r2
 801539a:	00db      	lsls	r3, r3, #3
 801539c:	440b      	add	r3, r1
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7f7 ffc1 	bl	800d328 <pbuf_free>
      }
      arp_table[i].q = p;
 80153a6:	7c7a      	ldrb	r2, [r7, #17]
 80153a8:	490d      	ldr	r1, [pc, #52]	@ (80153e0 <etharp_query+0x268>)
 80153aa:	4613      	mov	r3, r2
 80153ac:	005b      	lsls	r3, r3, #1
 80153ae:	4413      	add	r3, r2
 80153b0:	00db      	lsls	r3, r3, #3
 80153b2:	440b      	add	r3, r1
 80153b4:	69fa      	ldr	r2, [r7, #28]
 80153b6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80153b8:	2300      	movs	r3, #0
 80153ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80153be:	e002      	b.n	80153c6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80153c0:	23ff      	movs	r3, #255	@ 0xff
 80153c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80153c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	3728      	adds	r7, #40	@ 0x28
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}
 80153d2:	bf00      	nop
 80153d4:	0801c838 	.word	0x0801c838
 80153d8:	0801c9e4 	.word	0x0801c9e4
 80153dc:	0801c8b0 	.word	0x0801c8b0
 80153e0:	20014678 	.word	0x20014678
 80153e4:	0801c9f4 	.word	0x0801c9f4
 80153e8:	0801c9d8 	.word	0x0801c9d8
 80153ec:	20014768 	.word	0x20014768
 80153f0:	0801ca1c 	.word	0x0801ca1c

080153f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b08a      	sub	sp, #40	@ 0x28
 80153f8:	af02      	add	r7, sp, #8
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	607a      	str	r2, [r7, #4]
 8015400:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015402:	2300      	movs	r3, #0
 8015404:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d106      	bne.n	801541a <etharp_raw+0x26>
 801540c:	4b3a      	ldr	r3, [pc, #232]	@ (80154f8 <etharp_raw+0x104>)
 801540e:	f240 4257 	movw	r2, #1111	@ 0x457
 8015412:	493a      	ldr	r1, [pc, #232]	@ (80154fc <etharp_raw+0x108>)
 8015414:	483a      	ldr	r0, [pc, #232]	@ (8015500 <etharp_raw+0x10c>)
 8015416:	f002 fac5 	bl	80179a4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801541a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801541e:	211c      	movs	r1, #28
 8015420:	200e      	movs	r0, #14
 8015422:	f7f7 fc9d 	bl	800cd60 <pbuf_alloc>
 8015426:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015428:	69bb      	ldr	r3, [r7, #24]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d102      	bne.n	8015434 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801542e:	f04f 33ff 	mov.w	r3, #4294967295
 8015432:	e05d      	b.n	80154f0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015434:	69bb      	ldr	r3, [r7, #24]
 8015436:	895b      	ldrh	r3, [r3, #10]
 8015438:	2b1b      	cmp	r3, #27
 801543a:	d806      	bhi.n	801544a <etharp_raw+0x56>
 801543c:	4b2e      	ldr	r3, [pc, #184]	@ (80154f8 <etharp_raw+0x104>)
 801543e:	f240 4262 	movw	r2, #1122	@ 0x462
 8015442:	4930      	ldr	r1, [pc, #192]	@ (8015504 <etharp_raw+0x110>)
 8015444:	482e      	ldr	r0, [pc, #184]	@ (8015500 <etharp_raw+0x10c>)
 8015446:	f002 faad 	bl	80179a4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801544a:	69bb      	ldr	r3, [r7, #24]
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015450:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015452:	4618      	mov	r0, r3
 8015454:	f7f6 fb86 	bl	800bb64 <lwip_htons>
 8015458:	4603      	mov	r3, r0
 801545a:	461a      	mov	r2, r3
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015466:	2b06      	cmp	r3, #6
 8015468:	d006      	beq.n	8015478 <etharp_raw+0x84>
 801546a:	4b23      	ldr	r3, [pc, #140]	@ (80154f8 <etharp_raw+0x104>)
 801546c:	f240 4269 	movw	r2, #1129	@ 0x469
 8015470:	4925      	ldr	r1, [pc, #148]	@ (8015508 <etharp_raw+0x114>)
 8015472:	4823      	ldr	r0, [pc, #140]	@ (8015500 <etharp_raw+0x10c>)
 8015474:	f002 fa96 	bl	80179a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	3308      	adds	r3, #8
 801547c:	2206      	movs	r2, #6
 801547e:	6839      	ldr	r1, [r7, #0]
 8015480:	4618      	mov	r0, r3
 8015482:	f002 fcea 	bl	8017e5a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	3312      	adds	r3, #18
 801548a:	2206      	movs	r2, #6
 801548c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801548e:	4618      	mov	r0, r3
 8015490:	f002 fce3 	bl	8017e5a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	330e      	adds	r3, #14
 8015498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801549a:	6812      	ldr	r2, [r2, #0]
 801549c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	3318      	adds	r3, #24
 80154a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80154a4:	6812      	ldr	r2, [r2, #0]
 80154a6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	2200      	movs	r2, #0
 80154ac:	701a      	strb	r2, [r3, #0]
 80154ae:	2200      	movs	r2, #0
 80154b0:	f042 0201 	orr.w	r2, r2, #1
 80154b4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80154b6:	697b      	ldr	r3, [r7, #20]
 80154b8:	2200      	movs	r2, #0
 80154ba:	f042 0208 	orr.w	r2, r2, #8
 80154be:	709a      	strb	r2, [r3, #2]
 80154c0:	2200      	movs	r2, #0
 80154c2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80154c4:	697b      	ldr	r3, [r7, #20]
 80154c6:	2206      	movs	r2, #6
 80154c8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	2204      	movs	r2, #4
 80154ce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80154d0:	f640 0306 	movw	r3, #2054	@ 0x806
 80154d4:	9300      	str	r3, [sp, #0]
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	68ba      	ldr	r2, [r7, #8]
 80154da:	69b9      	ldr	r1, [r7, #24]
 80154dc:	68f8      	ldr	r0, [r7, #12]
 80154de:	f001 fb7b 	bl	8016bd8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80154e2:	69b8      	ldr	r0, [r7, #24]
 80154e4:	f7f7 ff20 	bl	800d328 <pbuf_free>
  p = NULL;
 80154e8:	2300      	movs	r3, #0
 80154ea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80154ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3720      	adds	r7, #32
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	0801c838 	.word	0x0801c838
 80154fc:	0801c988 	.word	0x0801c988
 8015500:	0801c8b0 	.word	0x0801c8b0
 8015504:	0801ca38 	.word	0x0801ca38
 8015508:	0801ca6c 	.word	0x0801ca6c

0801550c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b088      	sub	sp, #32
 8015510:	af04      	add	r7, sp, #16
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015528:	2201      	movs	r2, #1
 801552a:	9203      	str	r2, [sp, #12]
 801552c:	68ba      	ldr	r2, [r7, #8]
 801552e:	9202      	str	r2, [sp, #8]
 8015530:	4a06      	ldr	r2, [pc, #24]	@ (801554c <etharp_request_dst+0x40>)
 8015532:	9201      	str	r2, [sp, #4]
 8015534:	9300      	str	r3, [sp, #0]
 8015536:	4603      	mov	r3, r0
 8015538:	687a      	ldr	r2, [r7, #4]
 801553a:	68f8      	ldr	r0, [r7, #12]
 801553c:	f7ff ff5a 	bl	80153f4 <etharp_raw>
 8015540:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015542:	4618      	mov	r0, r3
 8015544:	3710      	adds	r7, #16
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	08054aec 	.word	0x08054aec

08015550 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b082      	sub	sp, #8
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801555a:	4a05      	ldr	r2, [pc, #20]	@ (8015570 <etharp_request+0x20>)
 801555c:	6839      	ldr	r1, [r7, #0]
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f7ff ffd4 	bl	801550c <etharp_request_dst>
 8015564:	4603      	mov	r3, r0
}
 8015566:	4618      	mov	r0, r3
 8015568:	3708      	adds	r7, #8
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}
 801556e:	bf00      	nop
 8015570:	08054ae4 	.word	0x08054ae4

08015574 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b08e      	sub	sp, #56	@ 0x38
 8015578:	af04      	add	r7, sp, #16
 801557a:	6078      	str	r0, [r7, #4]
 801557c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801557e:	4b79      	ldr	r3, [pc, #484]	@ (8015764 <icmp_input+0x1f0>)
 8015580:	689b      	ldr	r3, [r3, #8]
 8015582:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015586:	781b      	ldrb	r3, [r3, #0]
 8015588:	f003 030f 	and.w	r3, r3, #15
 801558c:	b2db      	uxtb	r3, r3
 801558e:	009b      	lsls	r3, r3, #2
 8015590:	b2db      	uxtb	r3, r3
 8015592:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8015594:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015596:	2b13      	cmp	r3, #19
 8015598:	f240 80cd 	bls.w	8015736 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	895b      	ldrh	r3, [r3, #10]
 80155a0:	2b03      	cmp	r3, #3
 80155a2:	f240 80ca 	bls.w	801573a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	781b      	ldrb	r3, [r3, #0]
 80155ac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80155b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	f000 80b7 	beq.w	8015728 <icmp_input+0x1b4>
 80155ba:	2b08      	cmp	r3, #8
 80155bc:	f040 80b7 	bne.w	801572e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80155c0:	4b69      	ldr	r3, [pc, #420]	@ (8015768 <icmp_input+0x1f4>)
 80155c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80155c4:	4b67      	ldr	r3, [pc, #412]	@ (8015764 <icmp_input+0x1f0>)
 80155c6:	695b      	ldr	r3, [r3, #20]
 80155c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80155cc:	2be0      	cmp	r3, #224	@ 0xe0
 80155ce:	f000 80bb 	beq.w	8015748 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80155d2:	4b64      	ldr	r3, [pc, #400]	@ (8015764 <icmp_input+0x1f0>)
 80155d4:	695b      	ldr	r3, [r3, #20]
 80155d6:	4a63      	ldr	r2, [pc, #396]	@ (8015764 <icmp_input+0x1f0>)
 80155d8:	6812      	ldr	r2, [r2, #0]
 80155da:	4611      	mov	r1, r2
 80155dc:	4618      	mov	r0, r3
 80155de:	f000 fbed 	bl	8015dbc <ip4_addr_isbroadcast_u32>
 80155e2:	4603      	mov	r3, r0
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	f040 80b1 	bne.w	801574c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	891b      	ldrh	r3, [r3, #8]
 80155ee:	2b07      	cmp	r3, #7
 80155f0:	f240 80a5 	bls.w	801573e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80155f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80155f6:	330e      	adds	r3, #14
 80155f8:	4619      	mov	r1, r3
 80155fa:	6878      	ldr	r0, [r7, #4]
 80155fc:	f7f7 fdfe 	bl	800d1fc <pbuf_add_header>
 8015600:	4603      	mov	r3, r0
 8015602:	2b00      	cmp	r3, #0
 8015604:	d04b      	beq.n	801569e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	891a      	ldrh	r2, [r3, #8]
 801560a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801560c:	4413      	add	r3, r2
 801560e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	891b      	ldrh	r3, [r3, #8]
 8015614:	8b7a      	ldrh	r2, [r7, #26]
 8015616:	429a      	cmp	r2, r3
 8015618:	f0c0 809a 	bcc.w	8015750 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801561c:	8b7b      	ldrh	r3, [r7, #26]
 801561e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015622:	4619      	mov	r1, r3
 8015624:	200e      	movs	r0, #14
 8015626:	f7f7 fb9b 	bl	800cd60 <pbuf_alloc>
 801562a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	2b00      	cmp	r3, #0
 8015630:	f000 8090 	beq.w	8015754 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	895b      	ldrh	r3, [r3, #10]
 8015638:	461a      	mov	r2, r3
 801563a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801563c:	3308      	adds	r3, #8
 801563e:	429a      	cmp	r2, r3
 8015640:	d203      	bcs.n	801564a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015642:	6978      	ldr	r0, [r7, #20]
 8015644:	f7f7 fe70 	bl	800d328 <pbuf_free>
          goto icmperr;
 8015648:	e085      	b.n	8015756 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	685b      	ldr	r3, [r3, #4]
 801564e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015652:	4618      	mov	r0, r3
 8015654:	f002 fc01 	bl	8017e5a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015658:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801565a:	4619      	mov	r1, r3
 801565c:	6978      	ldr	r0, [r7, #20]
 801565e:	f7f7 fddd 	bl	800d21c <pbuf_remove_header>
 8015662:	4603      	mov	r3, r0
 8015664:	2b00      	cmp	r3, #0
 8015666:	d009      	beq.n	801567c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015668:	4b40      	ldr	r3, [pc, #256]	@ (801576c <icmp_input+0x1f8>)
 801566a:	22b6      	movs	r2, #182	@ 0xb6
 801566c:	4940      	ldr	r1, [pc, #256]	@ (8015770 <icmp_input+0x1fc>)
 801566e:	4841      	ldr	r0, [pc, #260]	@ (8015774 <icmp_input+0x200>)
 8015670:	f002 f998 	bl	80179a4 <iprintf>
          pbuf_free(r);
 8015674:	6978      	ldr	r0, [r7, #20]
 8015676:	f7f7 fe57 	bl	800d328 <pbuf_free>
          goto icmperr;
 801567a:	e06c      	b.n	8015756 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801567c:	6879      	ldr	r1, [r7, #4]
 801567e:	6978      	ldr	r0, [r7, #20]
 8015680:	f7f7 ff7a 	bl	800d578 <pbuf_copy>
 8015684:	4603      	mov	r3, r0
 8015686:	2b00      	cmp	r3, #0
 8015688:	d003      	beq.n	8015692 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801568a:	6978      	ldr	r0, [r7, #20]
 801568c:	f7f7 fe4c 	bl	800d328 <pbuf_free>
          goto icmperr;
 8015690:	e061      	b.n	8015756 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f7f7 fe48 	bl	800d328 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015698:	697b      	ldr	r3, [r7, #20]
 801569a:	607b      	str	r3, [r7, #4]
 801569c:	e00f      	b.n	80156be <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801569e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80156a0:	330e      	adds	r3, #14
 80156a2:	4619      	mov	r1, r3
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	f7f7 fdb9 	bl	800d21c <pbuf_remove_header>
 80156aa:	4603      	mov	r3, r0
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d006      	beq.n	80156be <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80156b0:	4b2e      	ldr	r3, [pc, #184]	@ (801576c <icmp_input+0x1f8>)
 80156b2:	22c7      	movs	r2, #199	@ 0xc7
 80156b4:	4930      	ldr	r1, [pc, #192]	@ (8015778 <icmp_input+0x204>)
 80156b6:	482f      	ldr	r0, [pc, #188]	@ (8015774 <icmp_input+0x200>)
 80156b8:	f002 f974 	bl	80179a4 <iprintf>
          goto icmperr;
 80156bc:	e04b      	b.n	8015756 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80156c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80156c6:	4619      	mov	r1, r3
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f7f7 fd97 	bl	800d1fc <pbuf_add_header>
 80156ce:	4603      	mov	r3, r0
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d12b      	bne.n	801572c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	685b      	ldr	r3, [r3, #4]
 80156d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80156da:	69fb      	ldr	r3, [r7, #28]
 80156dc:	681a      	ldr	r2, [r3, #0]
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80156e2:	4b20      	ldr	r3, [pc, #128]	@ (8015764 <icmp_input+0x1f0>)
 80156e4:	691a      	ldr	r2, [r3, #16]
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	2200      	movs	r2, #0
 80156ee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80156f0:	693b      	ldr	r3, [r7, #16]
 80156f2:	2200      	movs	r2, #0
 80156f4:	709a      	strb	r2, [r3, #2]
 80156f6:	2200      	movs	r2, #0
 80156f8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	22ff      	movs	r2, #255	@ 0xff
 80156fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	2200      	movs	r2, #0
 8015704:	729a      	strb	r2, [r3, #10]
 8015706:	2200      	movs	r2, #0
 8015708:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	9302      	str	r3, [sp, #8]
 801570e:	2301      	movs	r3, #1
 8015710:	9301      	str	r3, [sp, #4]
 8015712:	2300      	movs	r3, #0
 8015714:	9300      	str	r3, [sp, #0]
 8015716:	23ff      	movs	r3, #255	@ 0xff
 8015718:	2200      	movs	r2, #0
 801571a:	69f9      	ldr	r1, [r7, #28]
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f000 fa75 	bl	8015c0c <ip4_output_if>
 8015722:	4603      	mov	r3, r0
 8015724:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015726:	e001      	b.n	801572c <icmp_input+0x1b8>
      break;
 8015728:	bf00      	nop
 801572a:	e000      	b.n	801572e <icmp_input+0x1ba>
      break;
 801572c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f7f7 fdfa 	bl	800d328 <pbuf_free>
  return;
 8015734:	e013      	b.n	801575e <icmp_input+0x1ea>
    goto lenerr;
 8015736:	bf00      	nop
 8015738:	e002      	b.n	8015740 <icmp_input+0x1cc>
    goto lenerr;
 801573a:	bf00      	nop
 801573c:	e000      	b.n	8015740 <icmp_input+0x1cc>
        goto lenerr;
 801573e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f7f7 fdf1 	bl	800d328 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015746:	e00a      	b.n	801575e <icmp_input+0x1ea>
        goto icmperr;
 8015748:	bf00      	nop
 801574a:	e004      	b.n	8015756 <icmp_input+0x1e2>
        goto icmperr;
 801574c:	bf00      	nop
 801574e:	e002      	b.n	8015756 <icmp_input+0x1e2>
          goto icmperr;
 8015750:	bf00      	nop
 8015752:	e000      	b.n	8015756 <icmp_input+0x1e2>
          goto icmperr;
 8015754:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f7f7 fde6 	bl	800d328 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801575c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801575e:	3728      	adds	r7, #40	@ 0x28
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}
 8015764:	2000eee8 	.word	0x2000eee8
 8015768:	2000eefc 	.word	0x2000eefc
 801576c:	0801cab0 	.word	0x0801cab0
 8015770:	0801cae8 	.word	0x0801cae8
 8015774:	0801cb20 	.word	0x0801cb20
 8015778:	0801cb48 	.word	0x0801cb48

0801577c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b082      	sub	sp, #8
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
 8015784:	460b      	mov	r3, r1
 8015786:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015788:	78fb      	ldrb	r3, [r7, #3]
 801578a:	461a      	mov	r2, r3
 801578c:	2103      	movs	r1, #3
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f000 f814 	bl	80157bc <icmp_send_response>
}
 8015794:	bf00      	nop
 8015796:	3708      	adds	r7, #8
 8015798:	46bd      	mov	sp, r7
 801579a:	bd80      	pop	{r7, pc}

0801579c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
 80157a4:	460b      	mov	r3, r1
 80157a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80157a8:	78fb      	ldrb	r3, [r7, #3]
 80157aa:	461a      	mov	r2, r3
 80157ac:	210b      	movs	r1, #11
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	f000 f804 	bl	80157bc <icmp_send_response>
}
 80157b4:	bf00      	nop
 80157b6:	3708      	adds	r7, #8
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b08c      	sub	sp, #48	@ 0x30
 80157c0:	af04      	add	r7, sp, #16
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	460b      	mov	r3, r1
 80157c6:	70fb      	strb	r3, [r7, #3]
 80157c8:	4613      	mov	r3, r2
 80157ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80157cc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80157d0:	2124      	movs	r1, #36	@ 0x24
 80157d2:	2022      	movs	r0, #34	@ 0x22
 80157d4:	f7f7 fac4 	bl	800cd60 <pbuf_alloc>
 80157d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80157da:	69fb      	ldr	r3, [r7, #28]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d04c      	beq.n	801587a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	895b      	ldrh	r3, [r3, #10]
 80157e4:	2b23      	cmp	r3, #35	@ 0x23
 80157e6:	d806      	bhi.n	80157f6 <icmp_send_response+0x3a>
 80157e8:	4b26      	ldr	r3, [pc, #152]	@ (8015884 <icmp_send_response+0xc8>)
 80157ea:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80157ee:	4926      	ldr	r1, [pc, #152]	@ (8015888 <icmp_send_response+0xcc>)
 80157f0:	4826      	ldr	r0, [pc, #152]	@ (801588c <icmp_send_response+0xd0>)
 80157f2:	f002 f8d7 	bl	80179a4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	685b      	ldr	r3, [r3, #4]
 80157fa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80157fc:	69fb      	ldr	r3, [r7, #28]
 80157fe:	685b      	ldr	r3, [r3, #4]
 8015800:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	78fa      	ldrb	r2, [r7, #3]
 8015806:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015808:	697b      	ldr	r3, [r7, #20]
 801580a:	78ba      	ldrb	r2, [r7, #2]
 801580c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801580e:	697b      	ldr	r3, [r7, #20]
 8015810:	2200      	movs	r2, #0
 8015812:	711a      	strb	r2, [r3, #4]
 8015814:	2200      	movs	r2, #0
 8015816:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	2200      	movs	r2, #0
 801581c:	719a      	strb	r2, [r3, #6]
 801581e:	2200      	movs	r2, #0
 8015820:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	f103 0008 	add.w	r0, r3, #8
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	221c      	movs	r2, #28
 8015830:	4619      	mov	r1, r3
 8015832:	f002 fb12 	bl	8017e5a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801583c:	f107 030c 	add.w	r3, r7, #12
 8015840:	4618      	mov	r0, r3
 8015842:	f000 f825 	bl	8015890 <ip4_route>
 8015846:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015848:	693b      	ldr	r3, [r7, #16]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d011      	beq.n	8015872 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	2200      	movs	r2, #0
 8015852:	709a      	strb	r2, [r3, #2]
 8015854:	2200      	movs	r2, #0
 8015856:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015858:	f107 020c 	add.w	r2, r7, #12
 801585c:	693b      	ldr	r3, [r7, #16]
 801585e:	9302      	str	r3, [sp, #8]
 8015860:	2301      	movs	r3, #1
 8015862:	9301      	str	r3, [sp, #4]
 8015864:	2300      	movs	r3, #0
 8015866:	9300      	str	r3, [sp, #0]
 8015868:	23ff      	movs	r3, #255	@ 0xff
 801586a:	2100      	movs	r1, #0
 801586c:	69f8      	ldr	r0, [r7, #28]
 801586e:	f000 f9cd 	bl	8015c0c <ip4_output_if>
  }
  pbuf_free(q);
 8015872:	69f8      	ldr	r0, [r7, #28]
 8015874:	f7f7 fd58 	bl	800d328 <pbuf_free>
 8015878:	e000      	b.n	801587c <icmp_send_response+0xc0>
    return;
 801587a:	bf00      	nop
}
 801587c:	3720      	adds	r7, #32
 801587e:	46bd      	mov	sp, r7
 8015880:	bd80      	pop	{r7, pc}
 8015882:	bf00      	nop
 8015884:	0801cab0 	.word	0x0801cab0
 8015888:	0801cb7c 	.word	0x0801cb7c
 801588c:	0801cb20 	.word	0x0801cb20

08015890 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015890:	b480      	push	{r7}
 8015892:	b085      	sub	sp, #20
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015898:	4b33      	ldr	r3, [pc, #204]	@ (8015968 <ip4_route+0xd8>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	60fb      	str	r3, [r7, #12]
 801589e:	e036      	b.n	801590e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80158a6:	f003 0301 	and.w	r3, r3, #1
 80158aa:	b2db      	uxtb	r3, r3
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d02b      	beq.n	8015908 <ip4_route+0x78>
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80158b6:	089b      	lsrs	r3, r3, #2
 80158b8:	f003 0301 	and.w	r3, r3, #1
 80158bc:	b2db      	uxtb	r3, r3
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d022      	beq.n	8015908 <ip4_route+0x78>
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	3304      	adds	r3, #4
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d01d      	beq.n	8015908 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	681a      	ldr	r2, [r3, #0]
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	3304      	adds	r3, #4
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	405a      	eors	r2, r3
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	3308      	adds	r3, #8
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	4013      	ands	r3, r2
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d101      	bne.n	80158e8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	e038      	b.n	801595a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80158ee:	f003 0302 	and.w	r3, r3, #2
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d108      	bne.n	8015908 <ip4_route+0x78>
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	681a      	ldr	r2, [r3, #0]
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	330c      	adds	r3, #12
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	429a      	cmp	r2, r3
 8015902:	d101      	bne.n	8015908 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	e028      	b.n	801595a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	60fb      	str	r3, [r7, #12]
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d1c5      	bne.n	80158a0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015914:	4b15      	ldr	r3, [pc, #84]	@ (801596c <ip4_route+0xdc>)
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d01a      	beq.n	8015952 <ip4_route+0xc2>
 801591c:	4b13      	ldr	r3, [pc, #76]	@ (801596c <ip4_route+0xdc>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015924:	f003 0301 	and.w	r3, r3, #1
 8015928:	2b00      	cmp	r3, #0
 801592a:	d012      	beq.n	8015952 <ip4_route+0xc2>
 801592c:	4b0f      	ldr	r3, [pc, #60]	@ (801596c <ip4_route+0xdc>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015934:	f003 0304 	and.w	r3, r3, #4
 8015938:	2b00      	cmp	r3, #0
 801593a:	d00a      	beq.n	8015952 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801593c:	4b0b      	ldr	r3, [pc, #44]	@ (801596c <ip4_route+0xdc>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	3304      	adds	r3, #4
 8015942:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015944:	2b00      	cmp	r3, #0
 8015946:	d004      	beq.n	8015952 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	b2db      	uxtb	r3, r3
 801594e:	2b7f      	cmp	r3, #127	@ 0x7f
 8015950:	d101      	bne.n	8015956 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015952:	2300      	movs	r3, #0
 8015954:	e001      	b.n	801595a <ip4_route+0xca>
  }

  return netif_default;
 8015956:	4b05      	ldr	r3, [pc, #20]	@ (801596c <ip4_route+0xdc>)
 8015958:	681b      	ldr	r3, [r3, #0]
}
 801595a:	4618      	mov	r0, r3
 801595c:	3714      	adds	r7, #20
 801595e:	46bd      	mov	sp, r7
 8015960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015964:	4770      	bx	lr
 8015966:	bf00      	nop
 8015968:	2001460c 	.word	0x2001460c
 801596c:	20014610 	.word	0x20014610

08015970 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801597e:	f003 0301 	and.w	r3, r3, #1
 8015982:	b2db      	uxtb	r3, r3
 8015984:	2b00      	cmp	r3, #0
 8015986:	d016      	beq.n	80159b6 <ip4_input_accept+0x46>
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	3304      	adds	r3, #4
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d011      	beq.n	80159b6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015992:	4b0b      	ldr	r3, [pc, #44]	@ (80159c0 <ip4_input_accept+0x50>)
 8015994:	695a      	ldr	r2, [r3, #20]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	3304      	adds	r3, #4
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	429a      	cmp	r2, r3
 801599e:	d008      	beq.n	80159b2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80159a0:	4b07      	ldr	r3, [pc, #28]	@ (80159c0 <ip4_input_accept+0x50>)
 80159a2:	695b      	ldr	r3, [r3, #20]
 80159a4:	6879      	ldr	r1, [r7, #4]
 80159a6:	4618      	mov	r0, r3
 80159a8:	f000 fa08 	bl	8015dbc <ip4_addr_isbroadcast_u32>
 80159ac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d001      	beq.n	80159b6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80159b2:	2301      	movs	r3, #1
 80159b4:	e000      	b.n	80159b8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80159b6:	2300      	movs	r3, #0
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3708      	adds	r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}
 80159c0:	2000eee8 	.word	0x2000eee8

080159c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b086      	sub	sp, #24
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
 80159cc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80159d4:	697b      	ldr	r3, [r7, #20]
 80159d6:	781b      	ldrb	r3, [r3, #0]
 80159d8:	091b      	lsrs	r3, r3, #4
 80159da:	b2db      	uxtb	r3, r3
 80159dc:	2b04      	cmp	r3, #4
 80159de:	d004      	beq.n	80159ea <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f7f7 fca1 	bl	800d328 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80159e6:	2300      	movs	r3, #0
 80159e8:	e107      	b.n	8015bfa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80159ea:	697b      	ldr	r3, [r7, #20]
 80159ec:	781b      	ldrb	r3, [r3, #0]
 80159ee:	f003 030f 	and.w	r3, r3, #15
 80159f2:	b2db      	uxtb	r3, r3
 80159f4:	009b      	lsls	r3, r3, #2
 80159f6:	b2db      	uxtb	r3, r3
 80159f8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	885b      	ldrh	r3, [r3, #2]
 80159fe:	b29b      	uxth	r3, r3
 8015a00:	4618      	mov	r0, r3
 8015a02:	f7f6 f8af 	bl	800bb64 <lwip_htons>
 8015a06:	4603      	mov	r3, r0
 8015a08:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	891b      	ldrh	r3, [r3, #8]
 8015a0e:	89ba      	ldrh	r2, [r7, #12]
 8015a10:	429a      	cmp	r2, r3
 8015a12:	d204      	bcs.n	8015a1e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015a14:	89bb      	ldrh	r3, [r7, #12]
 8015a16:	4619      	mov	r1, r3
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	f7f7 faff 	bl	800d01c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	895b      	ldrh	r3, [r3, #10]
 8015a22:	89fa      	ldrh	r2, [r7, #14]
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d807      	bhi.n	8015a38 <ip4_input+0x74>
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	891b      	ldrh	r3, [r3, #8]
 8015a2c:	89ba      	ldrh	r2, [r7, #12]
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	d802      	bhi.n	8015a38 <ip4_input+0x74>
 8015a32:	89fb      	ldrh	r3, [r7, #14]
 8015a34:	2b13      	cmp	r3, #19
 8015a36:	d804      	bhi.n	8015a42 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f7f7 fc75 	bl	800d328 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	e0db      	b.n	8015bfa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015a42:	697b      	ldr	r3, [r7, #20]
 8015a44:	691b      	ldr	r3, [r3, #16]
 8015a46:	4a6f      	ldr	r2, [pc, #444]	@ (8015c04 <ip4_input+0x240>)
 8015a48:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	68db      	ldr	r3, [r3, #12]
 8015a4e:	4a6d      	ldr	r2, [pc, #436]	@ (8015c04 <ip4_input+0x240>)
 8015a50:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015a52:	4b6c      	ldr	r3, [pc, #432]	@ (8015c04 <ip4_input+0x240>)
 8015a54:	695b      	ldr	r3, [r3, #20]
 8015a56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015a5a:	2be0      	cmp	r3, #224	@ 0xe0
 8015a5c:	d112      	bne.n	8015a84 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015a64:	f003 0301 	and.w	r3, r3, #1
 8015a68:	b2db      	uxtb	r3, r3
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d007      	beq.n	8015a7e <ip4_input+0xba>
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	3304      	adds	r3, #4
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d002      	beq.n	8015a7e <ip4_input+0xba>
      netif = inp;
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	613b      	str	r3, [r7, #16]
 8015a7c:	e02a      	b.n	8015ad4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	613b      	str	r3, [r7, #16]
 8015a82:	e027      	b.n	8015ad4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015a84:	6838      	ldr	r0, [r7, #0]
 8015a86:	f7ff ff73 	bl	8015970 <ip4_input_accept>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d002      	beq.n	8015a96 <ip4_input+0xd2>
      netif = inp;
 8015a90:	683b      	ldr	r3, [r7, #0]
 8015a92:	613b      	str	r3, [r7, #16]
 8015a94:	e01e      	b.n	8015ad4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015a96:	2300      	movs	r3, #0
 8015a98:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8015c04 <ip4_input+0x240>)
 8015a9c:	695b      	ldr	r3, [r3, #20]
 8015a9e:	b2db      	uxtb	r3, r3
 8015aa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8015aa2:	d017      	beq.n	8015ad4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015aa4:	4b58      	ldr	r3, [pc, #352]	@ (8015c08 <ip4_input+0x244>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	613b      	str	r3, [r7, #16]
 8015aaa:	e00e      	b.n	8015aca <ip4_input+0x106>
          if (netif == inp) {
 8015aac:	693a      	ldr	r2, [r7, #16]
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d006      	beq.n	8015ac2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015ab4:	6938      	ldr	r0, [r7, #16]
 8015ab6:	f7ff ff5b 	bl	8015970 <ip4_input_accept>
 8015aba:	4603      	mov	r3, r0
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d108      	bne.n	8015ad2 <ip4_input+0x10e>
 8015ac0:	e000      	b.n	8015ac4 <ip4_input+0x100>
            continue;
 8015ac2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	613b      	str	r3, [r7, #16]
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d1ed      	bne.n	8015aac <ip4_input+0xe8>
 8015ad0:	e000      	b.n	8015ad4 <ip4_input+0x110>
            break;
 8015ad2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8015c04 <ip4_input+0x240>)
 8015ad6:	691b      	ldr	r3, [r3, #16]
 8015ad8:	6839      	ldr	r1, [r7, #0]
 8015ada:	4618      	mov	r0, r3
 8015adc:	f000 f96e 	bl	8015dbc <ip4_addr_isbroadcast_u32>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d105      	bne.n	8015af2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015ae6:	4b47      	ldr	r3, [pc, #284]	@ (8015c04 <ip4_input+0x240>)
 8015ae8:	691b      	ldr	r3, [r3, #16]
 8015aea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015aee:	2be0      	cmp	r3, #224	@ 0xe0
 8015af0:	d104      	bne.n	8015afc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f7f7 fc18 	bl	800d328 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015af8:	2300      	movs	r3, #0
 8015afa:	e07e      	b.n	8015bfa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015afc:	693b      	ldr	r3, [r7, #16]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d104      	bne.n	8015b0c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f7f7 fc10 	bl	800d328 <pbuf_free>
    return ERR_OK;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	e076      	b.n	8015bfa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	88db      	ldrh	r3, [r3, #6]
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	461a      	mov	r2, r3
 8015b14:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015b18:	4013      	ands	r3, r2
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d00b      	beq.n	8015b36 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f000 fc92 	bl	8016448 <ip4_reass>
 8015b24:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d101      	bne.n	8015b30 <ip4_input+0x16c>
      return ERR_OK;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	e064      	b.n	8015bfa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	685b      	ldr	r3, [r3, #4]
 8015b34:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015b36:	4a33      	ldr	r2, [pc, #204]	@ (8015c04 <ip4_input+0x240>)
 8015b38:	693b      	ldr	r3, [r7, #16]
 8015b3a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015b3c:	4a31      	ldr	r2, [pc, #196]	@ (8015c04 <ip4_input+0x240>)
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015b42:	4a30      	ldr	r2, [pc, #192]	@ (8015c04 <ip4_input+0x240>)
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	781b      	ldrb	r3, [r3, #0]
 8015b4c:	f003 030f 	and.w	r3, r3, #15
 8015b50:	b2db      	uxtb	r3, r3
 8015b52:	009b      	lsls	r3, r3, #2
 8015b54:	b2db      	uxtb	r3, r3
 8015b56:	461a      	mov	r2, r3
 8015b58:	4b2a      	ldr	r3, [pc, #168]	@ (8015c04 <ip4_input+0x240>)
 8015b5a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015b5c:	89fb      	ldrh	r3, [r7, #14]
 8015b5e:	4619      	mov	r1, r3
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	f7f7 fb5b 	bl	800d21c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015b66:	697b      	ldr	r3, [r7, #20]
 8015b68:	7a5b      	ldrb	r3, [r3, #9]
 8015b6a:	2b11      	cmp	r3, #17
 8015b6c:	d006      	beq.n	8015b7c <ip4_input+0x1b8>
 8015b6e:	2b11      	cmp	r3, #17
 8015b70:	dc13      	bgt.n	8015b9a <ip4_input+0x1d6>
 8015b72:	2b01      	cmp	r3, #1
 8015b74:	d00c      	beq.n	8015b90 <ip4_input+0x1cc>
 8015b76:	2b06      	cmp	r3, #6
 8015b78:	d005      	beq.n	8015b86 <ip4_input+0x1c2>
 8015b7a:	e00e      	b.n	8015b9a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015b7c:	6839      	ldr	r1, [r7, #0]
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	f7fe f950 	bl	8013e24 <udp_input>
        break;
 8015b84:	e026      	b.n	8015bd4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015b86:	6839      	ldr	r1, [r7, #0]
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f7f9 fd3f 	bl	800f60c <tcp_input>
        break;
 8015b8e:	e021      	b.n	8015bd4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015b90:	6839      	ldr	r1, [r7, #0]
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f7ff fcee 	bl	8015574 <icmp_input>
        break;
 8015b98:	e01c      	b.n	8015bd4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8015c04 <ip4_input+0x240>)
 8015b9c:	695b      	ldr	r3, [r3, #20]
 8015b9e:	6939      	ldr	r1, [r7, #16]
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f000 f90b 	bl	8015dbc <ip4_addr_isbroadcast_u32>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d10f      	bne.n	8015bcc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015bac:	4b15      	ldr	r3, [pc, #84]	@ (8015c04 <ip4_input+0x240>)
 8015bae:	695b      	ldr	r3, [r3, #20]
 8015bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015bb4:	2be0      	cmp	r3, #224	@ 0xe0
 8015bb6:	d009      	beq.n	8015bcc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015bb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f7f7 fb9f 	bl	800d302 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015bc4:	2102      	movs	r1, #2
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f7ff fdd8 	bl	801577c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f7f7 fbab 	bl	800d328 <pbuf_free>
        break;
 8015bd2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8015c04 <ip4_input+0x240>)
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015bda:	4b0a      	ldr	r3, [pc, #40]	@ (8015c04 <ip4_input+0x240>)
 8015bdc:	2200      	movs	r2, #0
 8015bde:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015be0:	4b08      	ldr	r3, [pc, #32]	@ (8015c04 <ip4_input+0x240>)
 8015be2:	2200      	movs	r2, #0
 8015be4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015be6:	4b07      	ldr	r3, [pc, #28]	@ (8015c04 <ip4_input+0x240>)
 8015be8:	2200      	movs	r2, #0
 8015bea:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015bec:	4b05      	ldr	r3, [pc, #20]	@ (8015c04 <ip4_input+0x240>)
 8015bee:	2200      	movs	r2, #0
 8015bf0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015bf2:	4b04      	ldr	r3, [pc, #16]	@ (8015c04 <ip4_input+0x240>)
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015bf8:	2300      	movs	r3, #0
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3718      	adds	r7, #24
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	2000eee8 	.word	0x2000eee8
 8015c08:	2001460c 	.word	0x2001460c

08015c0c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b08a      	sub	sp, #40	@ 0x28
 8015c10:	af04      	add	r7, sp, #16
 8015c12:	60f8      	str	r0, [r7, #12]
 8015c14:	60b9      	str	r1, [r7, #8]
 8015c16:	607a      	str	r2, [r7, #4]
 8015c18:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d009      	beq.n	8015c38 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015c24:	68bb      	ldr	r3, [r7, #8]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d003      	beq.n	8015c32 <ip4_output_if+0x26>
 8015c2a:	68bb      	ldr	r3, [r7, #8]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d102      	bne.n	8015c38 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c34:	3304      	adds	r3, #4
 8015c36:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015c38:	78fa      	ldrb	r2, [r7, #3]
 8015c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c3c:	9302      	str	r3, [sp, #8]
 8015c3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015c42:	9301      	str	r3, [sp, #4]
 8015c44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	4613      	mov	r3, r2
 8015c4c:	687a      	ldr	r2, [r7, #4]
 8015c4e:	6979      	ldr	r1, [r7, #20]
 8015c50:	68f8      	ldr	r0, [r7, #12]
 8015c52:	f000 f805 	bl	8015c60 <ip4_output_if_src>
 8015c56:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015c58:	4618      	mov	r0, r3
 8015c5a:	3718      	adds	r7, #24
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}

08015c60 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b088      	sub	sp, #32
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	60f8      	str	r0, [r7, #12]
 8015c68:	60b9      	str	r1, [r7, #8]
 8015c6a:	607a      	str	r2, [r7, #4]
 8015c6c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	7b9b      	ldrb	r3, [r3, #14]
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	d006      	beq.n	8015c84 <ip4_output_if_src+0x24>
 8015c76:	4b4b      	ldr	r3, [pc, #300]	@ (8015da4 <ip4_output_if_src+0x144>)
 8015c78:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015c7c:	494a      	ldr	r1, [pc, #296]	@ (8015da8 <ip4_output_if_src+0x148>)
 8015c7e:	484b      	ldr	r0, [pc, #300]	@ (8015dac <ip4_output_if_src+0x14c>)
 8015c80:	f001 fe90 	bl	80179a4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d060      	beq.n	8015d4c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015c8a:	2314      	movs	r3, #20
 8015c8c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015c8e:	2114      	movs	r1, #20
 8015c90:	68f8      	ldr	r0, [r7, #12]
 8015c92:	f7f7 fab3 	bl	800d1fc <pbuf_add_header>
 8015c96:	4603      	mov	r3, r0
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d002      	beq.n	8015ca2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015c9c:	f06f 0301 	mvn.w	r3, #1
 8015ca0:	e07c      	b.n	8015d9c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	895b      	ldrh	r3, [r3, #10]
 8015cac:	2b13      	cmp	r3, #19
 8015cae:	d806      	bhi.n	8015cbe <ip4_output_if_src+0x5e>
 8015cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8015da4 <ip4_output_if_src+0x144>)
 8015cb2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015cb6:	493e      	ldr	r1, [pc, #248]	@ (8015db0 <ip4_output_if_src+0x150>)
 8015cb8:	483c      	ldr	r0, [pc, #240]	@ (8015dac <ip4_output_if_src+0x14c>)
 8015cba:	f001 fe73 	bl	80179a4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	78fa      	ldrb	r2, [r7, #3]
 8015cc2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015cc4:	69fb      	ldr	r3, [r7, #28]
 8015cc6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015cca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681a      	ldr	r2, [r3, #0]
 8015cd0:	69fb      	ldr	r3, [r7, #28]
 8015cd2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015cd4:	8b7b      	ldrh	r3, [r7, #26]
 8015cd6:	089b      	lsrs	r3, r3, #2
 8015cd8:	b29b      	uxth	r3, r3
 8015cda:	b2db      	uxtb	r3, r3
 8015cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ce0:	b2da      	uxtb	r2, r3
 8015ce2:	69fb      	ldr	r3, [r7, #28]
 8015ce4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015ce6:	69fb      	ldr	r3, [r7, #28]
 8015ce8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015cec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	891b      	ldrh	r3, [r3, #8]
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7f5 ff36 	bl	800bb64 <lwip_htons>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	69fb      	ldr	r3, [r7, #28]
 8015cfe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015d00:	69fb      	ldr	r3, [r7, #28]
 8015d02:	2200      	movs	r2, #0
 8015d04:	719a      	strb	r2, [r3, #6]
 8015d06:	2200      	movs	r2, #0
 8015d08:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8015db4 <ip4_output_if_src+0x154>)
 8015d0c:	881b      	ldrh	r3, [r3, #0]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f7f5 ff28 	bl	800bb64 <lwip_htons>
 8015d14:	4603      	mov	r3, r0
 8015d16:	461a      	mov	r2, r3
 8015d18:	69fb      	ldr	r3, [r7, #28]
 8015d1a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015d1c:	4b25      	ldr	r3, [pc, #148]	@ (8015db4 <ip4_output_if_src+0x154>)
 8015d1e:	881b      	ldrh	r3, [r3, #0]
 8015d20:	3301      	adds	r3, #1
 8015d22:	b29a      	uxth	r2, r3
 8015d24:	4b23      	ldr	r3, [pc, #140]	@ (8015db4 <ip4_output_if_src+0x154>)
 8015d26:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015d28:	68bb      	ldr	r3, [r7, #8]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d104      	bne.n	8015d38 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015d2e:	4b22      	ldr	r3, [pc, #136]	@ (8015db8 <ip4_output_if_src+0x158>)
 8015d30:	681a      	ldr	r2, [r3, #0]
 8015d32:	69fb      	ldr	r3, [r7, #28]
 8015d34:	60da      	str	r2, [r3, #12]
 8015d36:	e003      	b.n	8015d40 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	681a      	ldr	r2, [r3, #0]
 8015d3c:	69fb      	ldr	r3, [r7, #28]
 8015d3e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015d40:	69fb      	ldr	r3, [r7, #28]
 8015d42:	2200      	movs	r2, #0
 8015d44:	729a      	strb	r2, [r3, #10]
 8015d46:	2200      	movs	r2, #0
 8015d48:	72da      	strb	r2, [r3, #11]
 8015d4a:	e00f      	b.n	8015d6c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	895b      	ldrh	r3, [r3, #10]
 8015d50:	2b13      	cmp	r3, #19
 8015d52:	d802      	bhi.n	8015d5a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015d54:	f06f 0301 	mvn.w	r3, #1
 8015d58:	e020      	b.n	8015d9c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015d60:	69fb      	ldr	r3, [r7, #28]
 8015d62:	691b      	ldr	r3, [r3, #16]
 8015d64:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015d66:	f107 0314 	add.w	r3, r7, #20
 8015d6a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d00c      	beq.n	8015d8e <ip4_output_if_src+0x12e>
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	891a      	ldrh	r2, [r3, #8]
 8015d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d906      	bls.n	8015d8e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015d80:	687a      	ldr	r2, [r7, #4]
 8015d82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015d84:	68f8      	ldr	r0, [r7, #12]
 8015d86:	f000 fd53 	bl	8016830 <ip4_frag>
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	e006      	b.n	8015d9c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d90:	695b      	ldr	r3, [r3, #20]
 8015d92:	687a      	ldr	r2, [r7, #4]
 8015d94:	68f9      	ldr	r1, [r7, #12]
 8015d96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015d98:	4798      	blx	r3
 8015d9a:	4603      	mov	r3, r0
}
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	3720      	adds	r7, #32
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}
 8015da4:	0801cba8 	.word	0x0801cba8
 8015da8:	0801cbdc 	.word	0x0801cbdc
 8015dac:	0801cbe8 	.word	0x0801cbe8
 8015db0:	0801cc10 	.word	0x0801cc10
 8015db4:	2001476a 	.word	0x2001476a
 8015db8:	08054ae0 	.word	0x08054ae0

08015dbc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015dbc:	b480      	push	{r7}
 8015dbe:	b085      	sub	sp, #20
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
 8015dc4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dd0:	d002      	beq.n	8015dd8 <ip4_addr_isbroadcast_u32+0x1c>
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d101      	bne.n	8015ddc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015dd8:	2301      	movs	r3, #1
 8015dda:	e02a      	b.n	8015e32 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015de2:	f003 0302 	and.w	r3, r3, #2
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d101      	bne.n	8015dee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015dea:	2300      	movs	r3, #0
 8015dec:	e021      	b.n	8015e32 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015dee:	683b      	ldr	r3, [r7, #0]
 8015df0:	3304      	adds	r3, #4
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	687a      	ldr	r2, [r7, #4]
 8015df6:	429a      	cmp	r2, r3
 8015df8:	d101      	bne.n	8015dfe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	e019      	b.n	8015e32 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015dfe:	68fa      	ldr	r2, [r7, #12]
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	3304      	adds	r3, #4
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	405a      	eors	r2, r3
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	3308      	adds	r3, #8
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	4013      	ands	r3, r2
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d10d      	bne.n	8015e30 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	3308      	adds	r3, #8
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	43da      	mvns	r2, r3
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	3308      	adds	r3, #8
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d101      	bne.n	8015e30 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015e2c:	2301      	movs	r3, #1
 8015e2e:	e000      	b.n	8015e32 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015e30:	2300      	movs	r3, #0
  }
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3714      	adds	r7, #20
 8015e36:	46bd      	mov	sp, r7
 8015e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3c:	4770      	bx	lr
	...

08015e40 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b084      	sub	sp, #16
 8015e44:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015e46:	2300      	movs	r3, #0
 8015e48:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015e4a:	4b12      	ldr	r3, [pc, #72]	@ (8015e94 <ip_reass_tmr+0x54>)
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015e50:	e018      	b.n	8015e84 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	7fdb      	ldrb	r3, [r3, #31]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d00b      	beq.n	8015e72 <ip_reass_tmr+0x32>
      r->timer--;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	7fdb      	ldrb	r3, [r3, #31]
 8015e5e:	3b01      	subs	r3, #1
 8015e60:	b2da      	uxtb	r2, r3
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	60fb      	str	r3, [r7, #12]
 8015e70:	e008      	b.n	8015e84 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015e7c:	68b9      	ldr	r1, [r7, #8]
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f000 f80a 	bl	8015e98 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d1e3      	bne.n	8015e52 <ip_reass_tmr+0x12>
    }
  }
}
 8015e8a:	bf00      	nop
 8015e8c:	bf00      	nop
 8015e8e:	3710      	adds	r7, #16
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}
 8015e94:	2001476c 	.word	0x2001476c

08015e98 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b088      	sub	sp, #32
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
 8015ea0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015ea6:	683a      	ldr	r2, [r7, #0]
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	d105      	bne.n	8015eba <ip_reass_free_complete_datagram+0x22>
 8015eae:	4b45      	ldr	r3, [pc, #276]	@ (8015fc4 <ip_reass_free_complete_datagram+0x12c>)
 8015eb0:	22ab      	movs	r2, #171	@ 0xab
 8015eb2:	4945      	ldr	r1, [pc, #276]	@ (8015fc8 <ip_reass_free_complete_datagram+0x130>)
 8015eb4:	4845      	ldr	r0, [pc, #276]	@ (8015fcc <ip_reass_free_complete_datagram+0x134>)
 8015eb6:	f001 fd75 	bl	80179a4 <iprintf>
  if (prev != NULL) {
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d00a      	beq.n	8015ed6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	687a      	ldr	r2, [r7, #4]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d005      	beq.n	8015ed6 <ip_reass_free_complete_datagram+0x3e>
 8015eca:	4b3e      	ldr	r3, [pc, #248]	@ (8015fc4 <ip_reass_free_complete_datagram+0x12c>)
 8015ecc:	22ad      	movs	r2, #173	@ 0xad
 8015ece:	4940      	ldr	r1, [pc, #256]	@ (8015fd0 <ip_reass_free_complete_datagram+0x138>)
 8015ed0:	483e      	ldr	r0, [pc, #248]	@ (8015fcc <ip_reass_free_complete_datagram+0x134>)
 8015ed2:	f001 fd67 	bl	80179a4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	685b      	ldr	r3, [r3, #4]
 8015eda:	685b      	ldr	r3, [r3, #4]
 8015edc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	889b      	ldrh	r3, [r3, #4]
 8015ee2:	b29b      	uxth	r3, r3
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d12a      	bne.n	8015f3e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015eee:	697b      	ldr	r3, [r7, #20]
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015ef6:	69bb      	ldr	r3, [r7, #24]
 8015ef8:	6858      	ldr	r0, [r3, #4]
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	3308      	adds	r3, #8
 8015efe:	2214      	movs	r2, #20
 8015f00:	4619      	mov	r1, r3
 8015f02:	f001 ffaa 	bl	8017e5a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015f06:	2101      	movs	r1, #1
 8015f08:	69b8      	ldr	r0, [r7, #24]
 8015f0a:	f7ff fc47 	bl	801579c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015f0e:	69b8      	ldr	r0, [r7, #24]
 8015f10:	f7f7 fa92 	bl	800d438 <pbuf_clen>
 8015f14:	4603      	mov	r3, r0
 8015f16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015f18:	8bfa      	ldrh	r2, [r7, #30]
 8015f1a:	8a7b      	ldrh	r3, [r7, #18]
 8015f1c:	4413      	add	r3, r2
 8015f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f22:	db05      	blt.n	8015f30 <ip_reass_free_complete_datagram+0x98>
 8015f24:	4b27      	ldr	r3, [pc, #156]	@ (8015fc4 <ip_reass_free_complete_datagram+0x12c>)
 8015f26:	22bc      	movs	r2, #188	@ 0xbc
 8015f28:	492a      	ldr	r1, [pc, #168]	@ (8015fd4 <ip_reass_free_complete_datagram+0x13c>)
 8015f2a:	4828      	ldr	r0, [pc, #160]	@ (8015fcc <ip_reass_free_complete_datagram+0x134>)
 8015f2c:	f001 fd3a 	bl	80179a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015f30:	8bfa      	ldrh	r2, [r7, #30]
 8015f32:	8a7b      	ldrh	r3, [r7, #18]
 8015f34:	4413      	add	r3, r2
 8015f36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015f38:	69b8      	ldr	r0, [r7, #24]
 8015f3a:	f7f7 f9f5 	bl	800d328 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	685b      	ldr	r3, [r3, #4]
 8015f42:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015f44:	e01f      	b.n	8015f86 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015f46:	69bb      	ldr	r3, [r7, #24]
 8015f48:	685b      	ldr	r3, [r3, #4]
 8015f4a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015f4c:	69bb      	ldr	r3, [r7, #24]
 8015f4e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015f56:	68f8      	ldr	r0, [r7, #12]
 8015f58:	f7f7 fa6e 	bl	800d438 <pbuf_clen>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015f60:	8bfa      	ldrh	r2, [r7, #30]
 8015f62:	8a7b      	ldrh	r3, [r7, #18]
 8015f64:	4413      	add	r3, r2
 8015f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f6a:	db05      	blt.n	8015f78 <ip_reass_free_complete_datagram+0xe0>
 8015f6c:	4b15      	ldr	r3, [pc, #84]	@ (8015fc4 <ip_reass_free_complete_datagram+0x12c>)
 8015f6e:	22cc      	movs	r2, #204	@ 0xcc
 8015f70:	4918      	ldr	r1, [pc, #96]	@ (8015fd4 <ip_reass_free_complete_datagram+0x13c>)
 8015f72:	4816      	ldr	r0, [pc, #88]	@ (8015fcc <ip_reass_free_complete_datagram+0x134>)
 8015f74:	f001 fd16 	bl	80179a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015f78:	8bfa      	ldrh	r2, [r7, #30]
 8015f7a:	8a7b      	ldrh	r3, [r7, #18]
 8015f7c:	4413      	add	r3, r2
 8015f7e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015f80:	68f8      	ldr	r0, [r7, #12]
 8015f82:	f7f7 f9d1 	bl	800d328 <pbuf_free>
  while (p != NULL) {
 8015f86:	69bb      	ldr	r3, [r7, #24]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d1dc      	bne.n	8015f46 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015f8c:	6839      	ldr	r1, [r7, #0]
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f000 f8c2 	bl	8016118 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015f94:	4b10      	ldr	r3, [pc, #64]	@ (8015fd8 <ip_reass_free_complete_datagram+0x140>)
 8015f96:	881b      	ldrh	r3, [r3, #0]
 8015f98:	8bfa      	ldrh	r2, [r7, #30]
 8015f9a:	429a      	cmp	r2, r3
 8015f9c:	d905      	bls.n	8015faa <ip_reass_free_complete_datagram+0x112>
 8015f9e:	4b09      	ldr	r3, [pc, #36]	@ (8015fc4 <ip_reass_free_complete_datagram+0x12c>)
 8015fa0:	22d2      	movs	r2, #210	@ 0xd2
 8015fa2:	490e      	ldr	r1, [pc, #56]	@ (8015fdc <ip_reass_free_complete_datagram+0x144>)
 8015fa4:	4809      	ldr	r0, [pc, #36]	@ (8015fcc <ip_reass_free_complete_datagram+0x134>)
 8015fa6:	f001 fcfd 	bl	80179a4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015faa:	4b0b      	ldr	r3, [pc, #44]	@ (8015fd8 <ip_reass_free_complete_datagram+0x140>)
 8015fac:	881a      	ldrh	r2, [r3, #0]
 8015fae:	8bfb      	ldrh	r3, [r7, #30]
 8015fb0:	1ad3      	subs	r3, r2, r3
 8015fb2:	b29a      	uxth	r2, r3
 8015fb4:	4b08      	ldr	r3, [pc, #32]	@ (8015fd8 <ip_reass_free_complete_datagram+0x140>)
 8015fb6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015fb8:	8bfb      	ldrh	r3, [r7, #30]
}
 8015fba:	4618      	mov	r0, r3
 8015fbc:	3720      	adds	r7, #32
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	bd80      	pop	{r7, pc}
 8015fc2:	bf00      	nop
 8015fc4:	0801cc40 	.word	0x0801cc40
 8015fc8:	0801cc7c 	.word	0x0801cc7c
 8015fcc:	0801cc88 	.word	0x0801cc88
 8015fd0:	0801ccb0 	.word	0x0801ccb0
 8015fd4:	0801ccc4 	.word	0x0801ccc4
 8015fd8:	20014770 	.word	0x20014770
 8015fdc:	0801cce4 	.word	0x0801cce4

08015fe0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b08a      	sub	sp, #40	@ 0x28
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015fea:	2300      	movs	r3, #0
 8015fec:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015ffe:	4b28      	ldr	r3, [pc, #160]	@ (80160a0 <ip_reass_remove_oldest_datagram+0xc0>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016004:	e030      	b.n	8016068 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016008:	695a      	ldr	r2, [r3, #20]
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	68db      	ldr	r3, [r3, #12]
 801600e:	429a      	cmp	r2, r3
 8016010:	d10c      	bne.n	801602c <ip_reass_remove_oldest_datagram+0x4c>
 8016012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016014:	699a      	ldr	r2, [r3, #24]
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	691b      	ldr	r3, [r3, #16]
 801601a:	429a      	cmp	r2, r3
 801601c:	d106      	bne.n	801602c <ip_reass_remove_oldest_datagram+0x4c>
 801601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016020:	899a      	ldrh	r2, [r3, #12]
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	889b      	ldrh	r3, [r3, #4]
 8016026:	b29b      	uxth	r3, r3
 8016028:	429a      	cmp	r2, r3
 801602a:	d014      	beq.n	8016056 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	3301      	adds	r3, #1
 8016030:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016032:	6a3b      	ldr	r3, [r7, #32]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d104      	bne.n	8016042 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801603a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801603c:	69fb      	ldr	r3, [r7, #28]
 801603e:	61bb      	str	r3, [r7, #24]
 8016040:	e009      	b.n	8016056 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016044:	7fda      	ldrb	r2, [r3, #31]
 8016046:	6a3b      	ldr	r3, [r7, #32]
 8016048:	7fdb      	ldrb	r3, [r3, #31]
 801604a:	429a      	cmp	r2, r3
 801604c:	d803      	bhi.n	8016056 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016050:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016052:	69fb      	ldr	r3, [r7, #28]
 8016054:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d001      	beq.n	8016062 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016060:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801606a:	2b00      	cmp	r3, #0
 801606c:	d1cb      	bne.n	8016006 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801606e:	6a3b      	ldr	r3, [r7, #32]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d008      	beq.n	8016086 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016074:	69b9      	ldr	r1, [r7, #24]
 8016076:	6a38      	ldr	r0, [r7, #32]
 8016078:	f7ff ff0e 	bl	8015e98 <ip_reass_free_complete_datagram>
 801607c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801607e:	697a      	ldr	r2, [r7, #20]
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	4413      	add	r3, r2
 8016084:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016086:	697a      	ldr	r2, [r7, #20]
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	429a      	cmp	r2, r3
 801608c:	da02      	bge.n	8016094 <ip_reass_remove_oldest_datagram+0xb4>
 801608e:	693b      	ldr	r3, [r7, #16]
 8016090:	2b01      	cmp	r3, #1
 8016092:	dcac      	bgt.n	8015fee <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016094:	697b      	ldr	r3, [r7, #20]
}
 8016096:	4618      	mov	r0, r3
 8016098:	3728      	adds	r7, #40	@ 0x28
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	2001476c 	.word	0x2001476c

080160a4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b084      	sub	sp, #16
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
 80160ac:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80160ae:	2004      	movs	r0, #4
 80160b0:	f7f6 fa06 	bl	800c4c0 <memp_malloc>
 80160b4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d110      	bne.n	80160de <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80160bc:	6839      	ldr	r1, [r7, #0]
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f7ff ff8e 	bl	8015fe0 <ip_reass_remove_oldest_datagram>
 80160c4:	4602      	mov	r2, r0
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	4293      	cmp	r3, r2
 80160ca:	dc03      	bgt.n	80160d4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80160cc:	2004      	movs	r0, #4
 80160ce:	f7f6 f9f7 	bl	800c4c0 <memp_malloc>
 80160d2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d101      	bne.n	80160de <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80160da:	2300      	movs	r3, #0
 80160dc:	e016      	b.n	801610c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80160de:	2220      	movs	r2, #32
 80160e0:	2100      	movs	r1, #0
 80160e2:	68f8      	ldr	r0, [r7, #12]
 80160e4:	f001 fdf0 	bl	8017cc8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	220f      	movs	r2, #15
 80160ec:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80160ee:	4b09      	ldr	r3, [pc, #36]	@ (8016114 <ip_reass_enqueue_new_datagram+0x70>)
 80160f0:	681a      	ldr	r2, [r3, #0]
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80160f6:	4a07      	ldr	r2, [pc, #28]	@ (8016114 <ip_reass_enqueue_new_datagram+0x70>)
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	3308      	adds	r3, #8
 8016100:	2214      	movs	r2, #20
 8016102:	6879      	ldr	r1, [r7, #4]
 8016104:	4618      	mov	r0, r3
 8016106:	f001 fea8 	bl	8017e5a <memcpy>
  return ipr;
 801610a:	68fb      	ldr	r3, [r7, #12]
}
 801610c:	4618      	mov	r0, r3
 801610e:	3710      	adds	r7, #16
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}
 8016114:	2001476c 	.word	0x2001476c

08016118 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b082      	sub	sp, #8
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
 8016120:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016122:	4b10      	ldr	r3, [pc, #64]	@ (8016164 <ip_reass_dequeue_datagram+0x4c>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	687a      	ldr	r2, [r7, #4]
 8016128:	429a      	cmp	r2, r3
 801612a:	d104      	bne.n	8016136 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	4a0c      	ldr	r2, [pc, #48]	@ (8016164 <ip_reass_dequeue_datagram+0x4c>)
 8016132:	6013      	str	r3, [r2, #0]
 8016134:	e00d      	b.n	8016152 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d106      	bne.n	801614a <ip_reass_dequeue_datagram+0x32>
 801613c:	4b0a      	ldr	r3, [pc, #40]	@ (8016168 <ip_reass_dequeue_datagram+0x50>)
 801613e:	f240 1245 	movw	r2, #325	@ 0x145
 8016142:	490a      	ldr	r1, [pc, #40]	@ (801616c <ip_reass_dequeue_datagram+0x54>)
 8016144:	480a      	ldr	r0, [pc, #40]	@ (8016170 <ip_reass_dequeue_datagram+0x58>)
 8016146:	f001 fc2d 	bl	80179a4 <iprintf>
    prev->next = ipr->next;
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681a      	ldr	r2, [r3, #0]
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016152:	6879      	ldr	r1, [r7, #4]
 8016154:	2004      	movs	r0, #4
 8016156:	f7f6 fa23 	bl	800c5a0 <memp_free>
}
 801615a:	bf00      	nop
 801615c:	3708      	adds	r7, #8
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}
 8016162:	bf00      	nop
 8016164:	2001476c 	.word	0x2001476c
 8016168:	0801cc40 	.word	0x0801cc40
 801616c:	0801cd08 	.word	0x0801cd08
 8016170:	0801cc88 	.word	0x0801cc88

08016174 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b08c      	sub	sp, #48	@ 0x30
 8016178:	af00      	add	r7, sp, #0
 801617a:	60f8      	str	r0, [r7, #12]
 801617c:	60b9      	str	r1, [r7, #8]
 801617e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016180:	2300      	movs	r3, #0
 8016182:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016184:	2301      	movs	r3, #1
 8016186:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	685b      	ldr	r3, [r3, #4]
 801618c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801618e:	69fb      	ldr	r3, [r7, #28]
 8016190:	885b      	ldrh	r3, [r3, #2]
 8016192:	b29b      	uxth	r3, r3
 8016194:	4618      	mov	r0, r3
 8016196:	f7f5 fce5 	bl	800bb64 <lwip_htons>
 801619a:	4603      	mov	r3, r0
 801619c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801619e:	69fb      	ldr	r3, [r7, #28]
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	f003 030f 	and.w	r3, r3, #15
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	009b      	lsls	r3, r3, #2
 80161aa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80161ac:	7e7b      	ldrb	r3, [r7, #25]
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	8b7a      	ldrh	r2, [r7, #26]
 80161b2:	429a      	cmp	r2, r3
 80161b4:	d202      	bcs.n	80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161b6:	f04f 33ff 	mov.w	r3, #4294967295
 80161ba:	e135      	b.n	8016428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80161bc:	7e7b      	ldrb	r3, [r7, #25]
 80161be:	b29b      	uxth	r3, r3
 80161c0:	8b7a      	ldrh	r2, [r7, #26]
 80161c2:	1ad3      	subs	r3, r2, r3
 80161c4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80161c6:	69fb      	ldr	r3, [r7, #28]
 80161c8:	88db      	ldrh	r3, [r3, #6]
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7f5 fcc9 	bl	800bb64 <lwip_htons>
 80161d2:	4603      	mov	r3, r0
 80161d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161d8:	b29b      	uxth	r3, r3
 80161da:	00db      	lsls	r3, r3, #3
 80161dc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80161de:	68bb      	ldr	r3, [r7, #8]
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80161e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161e6:	2200      	movs	r2, #0
 80161e8:	701a      	strb	r2, [r3, #0]
 80161ea:	2200      	movs	r2, #0
 80161ec:	705a      	strb	r2, [r3, #1]
 80161ee:	2200      	movs	r2, #0
 80161f0:	709a      	strb	r2, [r3, #2]
 80161f2:	2200      	movs	r2, #0
 80161f4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80161f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161f8:	8afa      	ldrh	r2, [r7, #22]
 80161fa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80161fc:	8afa      	ldrh	r2, [r7, #22]
 80161fe:	8b7b      	ldrh	r3, [r7, #26]
 8016200:	4413      	add	r3, r2
 8016202:	b29a      	uxth	r2, r3
 8016204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016206:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801620a:	88db      	ldrh	r3, [r3, #6]
 801620c:	b29b      	uxth	r3, r3
 801620e:	8afa      	ldrh	r2, [r7, #22]
 8016210:	429a      	cmp	r2, r3
 8016212:	d902      	bls.n	801621a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016214:	f04f 33ff 	mov.w	r3, #4294967295
 8016218:	e106      	b.n	8016428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	685b      	ldr	r3, [r3, #4]
 801621e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016220:	e068      	b.n	80162f4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801622a:	889b      	ldrh	r3, [r3, #4]
 801622c:	b29a      	uxth	r2, r3
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	889b      	ldrh	r3, [r3, #4]
 8016232:	b29b      	uxth	r3, r3
 8016234:	429a      	cmp	r2, r3
 8016236:	d235      	bcs.n	80162a4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801623a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801623c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801623e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016240:	2b00      	cmp	r3, #0
 8016242:	d020      	beq.n	8016286 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016246:	889b      	ldrh	r3, [r3, #4]
 8016248:	b29a      	uxth	r2, r3
 801624a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801624c:	88db      	ldrh	r3, [r3, #6]
 801624e:	b29b      	uxth	r3, r3
 8016250:	429a      	cmp	r2, r3
 8016252:	d307      	bcc.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016256:	88db      	ldrh	r3, [r3, #6]
 8016258:	b29a      	uxth	r2, r3
 801625a:	693b      	ldr	r3, [r7, #16]
 801625c:	889b      	ldrh	r3, [r3, #4]
 801625e:	b29b      	uxth	r3, r3
 8016260:	429a      	cmp	r2, r3
 8016262:	d902      	bls.n	801626a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016264:	f04f 33ff 	mov.w	r3, #4294967295
 8016268:	e0de      	b.n	8016428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801626a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801626c:	68ba      	ldr	r2, [r7, #8]
 801626e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016272:	88db      	ldrh	r3, [r3, #6]
 8016274:	b29a      	uxth	r2, r3
 8016276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016278:	889b      	ldrh	r3, [r3, #4]
 801627a:	b29b      	uxth	r3, r3
 801627c:	429a      	cmp	r2, r3
 801627e:	d03d      	beq.n	80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016280:	2300      	movs	r3, #0
 8016282:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016284:	e03a      	b.n	80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016288:	88db      	ldrh	r3, [r3, #6]
 801628a:	b29a      	uxth	r2, r3
 801628c:	693b      	ldr	r3, [r7, #16]
 801628e:	889b      	ldrh	r3, [r3, #4]
 8016290:	b29b      	uxth	r3, r3
 8016292:	429a      	cmp	r2, r3
 8016294:	d902      	bls.n	801629c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016296:	f04f 33ff 	mov.w	r3, #4294967295
 801629a:	e0c5      	b.n	8016428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	68ba      	ldr	r2, [r7, #8]
 80162a0:	605a      	str	r2, [r3, #4]
      break;
 80162a2:	e02b      	b.n	80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80162a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162a6:	889b      	ldrh	r3, [r3, #4]
 80162a8:	b29a      	uxth	r2, r3
 80162aa:	693b      	ldr	r3, [r7, #16]
 80162ac:	889b      	ldrh	r3, [r3, #4]
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d102      	bne.n	80162ba <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162b4:	f04f 33ff 	mov.w	r3, #4294967295
 80162b8:	e0b6      	b.n	8016428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80162ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162bc:	889b      	ldrh	r3, [r3, #4]
 80162be:	b29a      	uxth	r2, r3
 80162c0:	693b      	ldr	r3, [r7, #16]
 80162c2:	88db      	ldrh	r3, [r3, #6]
 80162c4:	b29b      	uxth	r3, r3
 80162c6:	429a      	cmp	r2, r3
 80162c8:	d202      	bcs.n	80162d0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162ca:	f04f 33ff 	mov.w	r3, #4294967295
 80162ce:	e0ab      	b.n	8016428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80162d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d009      	beq.n	80162ea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80162d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162d8:	88db      	ldrh	r3, [r3, #6]
 80162da:	b29a      	uxth	r2, r3
 80162dc:	693b      	ldr	r3, [r7, #16]
 80162de:	889b      	ldrh	r3, [r3, #4]
 80162e0:	b29b      	uxth	r3, r3
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d001      	beq.n	80162ea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80162e6:	2300      	movs	r3, #0
 80162e8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80162ea:	693b      	ldr	r3, [r7, #16]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80162f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d193      	bne.n	8016222 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80162fa:	e000      	b.n	80162fe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80162fc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80162fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016300:	2b00      	cmp	r3, #0
 8016302:	d12d      	bne.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016306:	2b00      	cmp	r3, #0
 8016308:	d01c      	beq.n	8016344 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801630a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801630c:	88db      	ldrh	r3, [r3, #6]
 801630e:	b29a      	uxth	r2, r3
 8016310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016312:	889b      	ldrh	r3, [r3, #4]
 8016314:	b29b      	uxth	r3, r3
 8016316:	429a      	cmp	r2, r3
 8016318:	d906      	bls.n	8016328 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801631a:	4b45      	ldr	r3, [pc, #276]	@ (8016430 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801631c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016320:	4944      	ldr	r1, [pc, #272]	@ (8016434 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016322:	4845      	ldr	r0, [pc, #276]	@ (8016438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016324:	f001 fb3e 	bl	80179a4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801632a:	68ba      	ldr	r2, [r7, #8]
 801632c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801632e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016330:	88db      	ldrh	r3, [r3, #6]
 8016332:	b29a      	uxth	r2, r3
 8016334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016336:	889b      	ldrh	r3, [r3, #4]
 8016338:	b29b      	uxth	r3, r3
 801633a:	429a      	cmp	r2, r3
 801633c:	d010      	beq.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801633e:	2300      	movs	r3, #0
 8016340:	623b      	str	r3, [r7, #32]
 8016342:	e00d      	b.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	685b      	ldr	r3, [r3, #4]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d006      	beq.n	801635a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801634c:	4b38      	ldr	r3, [pc, #224]	@ (8016430 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801634e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016352:	493a      	ldr	r1, [pc, #232]	@ (801643c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016354:	4838      	ldr	r0, [pc, #224]	@ (8016438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016356:	f001 fb25 	bl	80179a4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	68ba      	ldr	r2, [r7, #8]
 801635e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d105      	bne.n	8016372 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	7f9b      	ldrb	r3, [r3, #30]
 801636a:	f003 0301 	and.w	r3, r3, #1
 801636e:	2b00      	cmp	r3, #0
 8016370:	d059      	beq.n	8016426 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016372:	6a3b      	ldr	r3, [r7, #32]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d04f      	beq.n	8016418 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	685b      	ldr	r3, [r3, #4]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d006      	beq.n	801638e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	685b      	ldr	r3, [r3, #4]
 8016386:	889b      	ldrh	r3, [r3, #4]
 8016388:	b29b      	uxth	r3, r3
 801638a:	2b00      	cmp	r3, #0
 801638c:	d002      	beq.n	8016394 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801638e:	2300      	movs	r3, #0
 8016390:	623b      	str	r3, [r7, #32]
 8016392:	e041      	b.n	8016418 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016396:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801639e:	e012      	b.n	80163c6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80163a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80163a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163a8:	88db      	ldrh	r3, [r3, #6]
 80163aa:	b29a      	uxth	r2, r3
 80163ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163ae:	889b      	ldrh	r3, [r3, #4]
 80163b0:	b29b      	uxth	r3, r3
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d002      	beq.n	80163bc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80163b6:	2300      	movs	r3, #0
 80163b8:	623b      	str	r3, [r7, #32]
            break;
 80163ba:	e007      	b.n	80163cc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80163bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163be:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80163c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80163c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d1e9      	bne.n	80163a0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80163cc:	6a3b      	ldr	r3, [r7, #32]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d022      	beq.n	8016418 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	685b      	ldr	r3, [r3, #4]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d106      	bne.n	80163e8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80163da:	4b15      	ldr	r3, [pc, #84]	@ (8016430 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80163dc:	f240 12df 	movw	r2, #479	@ 0x1df
 80163e0:	4917      	ldr	r1, [pc, #92]	@ (8016440 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80163e2:	4815      	ldr	r0, [pc, #84]	@ (8016438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80163e4:	f001 fade 	bl	80179a4 <iprintf>
          LWIP_ASSERT("sanity check",
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	685b      	ldr	r3, [r3, #4]
 80163ec:	685b      	ldr	r3, [r3, #4]
 80163ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80163f0:	429a      	cmp	r2, r3
 80163f2:	d106      	bne.n	8016402 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80163f4:	4b0e      	ldr	r3, [pc, #56]	@ (8016430 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80163f6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80163fa:	4911      	ldr	r1, [pc, #68]	@ (8016440 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80163fc:	480e      	ldr	r0, [pc, #56]	@ (8016438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80163fe:	f001 fad1 	bl	80179a4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d006      	beq.n	8016418 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801640a:	4b09      	ldr	r3, [pc, #36]	@ (8016430 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801640c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016410:	490c      	ldr	r1, [pc, #48]	@ (8016444 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016412:	4809      	ldr	r0, [pc, #36]	@ (8016438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016414:	f001 fac6 	bl	80179a4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016418:	6a3b      	ldr	r3, [r7, #32]
 801641a:	2b00      	cmp	r3, #0
 801641c:	bf14      	ite	ne
 801641e:	2301      	movne	r3, #1
 8016420:	2300      	moveq	r3, #0
 8016422:	b2db      	uxtb	r3, r3
 8016424:	e000      	b.n	8016428 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016426:	2300      	movs	r3, #0
}
 8016428:	4618      	mov	r0, r3
 801642a:	3730      	adds	r7, #48	@ 0x30
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	0801cc40 	.word	0x0801cc40
 8016434:	0801cd24 	.word	0x0801cd24
 8016438:	0801cc88 	.word	0x0801cc88
 801643c:	0801cd44 	.word	0x0801cd44
 8016440:	0801cd7c 	.word	0x0801cd7c
 8016444:	0801cd8c 	.word	0x0801cd8c

08016448 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b08e      	sub	sp, #56	@ 0x38
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	685b      	ldr	r3, [r3, #4]
 8016454:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	f003 030f 	and.w	r3, r3, #15
 801645e:	b2db      	uxtb	r3, r3
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	b2db      	uxtb	r3, r3
 8016464:	2b14      	cmp	r3, #20
 8016466:	f040 8171 	bne.w	801674c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801646a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801646c:	88db      	ldrh	r3, [r3, #6]
 801646e:	b29b      	uxth	r3, r3
 8016470:	4618      	mov	r0, r3
 8016472:	f7f5 fb77 	bl	800bb64 <lwip_htons>
 8016476:	4603      	mov	r3, r0
 8016478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801647c:	b29b      	uxth	r3, r3
 801647e:	00db      	lsls	r3, r3, #3
 8016480:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016484:	885b      	ldrh	r3, [r3, #2]
 8016486:	b29b      	uxth	r3, r3
 8016488:	4618      	mov	r0, r3
 801648a:	f7f5 fb6b 	bl	800bb64 <lwip_htons>
 801648e:	4603      	mov	r3, r0
 8016490:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016494:	781b      	ldrb	r3, [r3, #0]
 8016496:	f003 030f 	and.w	r3, r3, #15
 801649a:	b2db      	uxtb	r3, r3
 801649c:	009b      	lsls	r3, r3, #2
 801649e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80164a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80164a6:	b29b      	uxth	r3, r3
 80164a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80164aa:	429a      	cmp	r2, r3
 80164ac:	f0c0 8150 	bcc.w	8016750 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80164b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80164b4:	b29b      	uxth	r3, r3
 80164b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80164b8:	1ad3      	subs	r3, r2, r3
 80164ba:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f7f6 ffbb 	bl	800d438 <pbuf_clen>
 80164c2:	4603      	mov	r3, r0
 80164c4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80164c6:	4b8c      	ldr	r3, [pc, #560]	@ (80166f8 <ip4_reass+0x2b0>)
 80164c8:	881b      	ldrh	r3, [r3, #0]
 80164ca:	461a      	mov	r2, r3
 80164cc:	8c3b      	ldrh	r3, [r7, #32]
 80164ce:	4413      	add	r3, r2
 80164d0:	2b0a      	cmp	r3, #10
 80164d2:	dd10      	ble.n	80164f6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80164d4:	8c3b      	ldrh	r3, [r7, #32]
 80164d6:	4619      	mov	r1, r3
 80164d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80164da:	f7ff fd81 	bl	8015fe0 <ip_reass_remove_oldest_datagram>
 80164de:	4603      	mov	r3, r0
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	f000 8137 	beq.w	8016754 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80164e6:	4b84      	ldr	r3, [pc, #528]	@ (80166f8 <ip4_reass+0x2b0>)
 80164e8:	881b      	ldrh	r3, [r3, #0]
 80164ea:	461a      	mov	r2, r3
 80164ec:	8c3b      	ldrh	r3, [r7, #32]
 80164ee:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80164f0:	2b0a      	cmp	r3, #10
 80164f2:	f300 812f 	bgt.w	8016754 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80164f6:	4b81      	ldr	r3, [pc, #516]	@ (80166fc <ip4_reass+0x2b4>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80164fc:	e015      	b.n	801652a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80164fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016500:	695a      	ldr	r2, [r3, #20]
 8016502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016504:	68db      	ldr	r3, [r3, #12]
 8016506:	429a      	cmp	r2, r3
 8016508:	d10c      	bne.n	8016524 <ip4_reass+0xdc>
 801650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801650c:	699a      	ldr	r2, [r3, #24]
 801650e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016510:	691b      	ldr	r3, [r3, #16]
 8016512:	429a      	cmp	r2, r3
 8016514:	d106      	bne.n	8016524 <ip4_reass+0xdc>
 8016516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016518:	899a      	ldrh	r2, [r3, #12]
 801651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801651c:	889b      	ldrh	r3, [r3, #4]
 801651e:	b29b      	uxth	r3, r3
 8016520:	429a      	cmp	r2, r3
 8016522:	d006      	beq.n	8016532 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	633b      	str	r3, [r7, #48]	@ 0x30
 801652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801652c:	2b00      	cmp	r3, #0
 801652e:	d1e6      	bne.n	80164fe <ip4_reass+0xb6>
 8016530:	e000      	b.n	8016534 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016532:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016536:	2b00      	cmp	r3, #0
 8016538:	d109      	bne.n	801654e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801653a:	8c3b      	ldrh	r3, [r7, #32]
 801653c:	4619      	mov	r1, r3
 801653e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016540:	f7ff fdb0 	bl	80160a4 <ip_reass_enqueue_new_datagram>
 8016544:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016548:	2b00      	cmp	r3, #0
 801654a:	d11c      	bne.n	8016586 <ip4_reass+0x13e>
      goto nullreturn;
 801654c:	e105      	b.n	801675a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016550:	88db      	ldrh	r3, [r3, #6]
 8016552:	b29b      	uxth	r3, r3
 8016554:	4618      	mov	r0, r3
 8016556:	f7f5 fb05 	bl	800bb64 <lwip_htons>
 801655a:	4603      	mov	r3, r0
 801655c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016560:	2b00      	cmp	r3, #0
 8016562:	d110      	bne.n	8016586 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016566:	89db      	ldrh	r3, [r3, #14]
 8016568:	4618      	mov	r0, r3
 801656a:	f7f5 fafb 	bl	800bb64 <lwip_htons>
 801656e:	4603      	mov	r3, r0
 8016570:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016574:	2b00      	cmp	r3, #0
 8016576:	d006      	beq.n	8016586 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801657a:	3308      	adds	r3, #8
 801657c:	2214      	movs	r2, #20
 801657e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016580:	4618      	mov	r0, r3
 8016582:	f001 fc6a 	bl	8017e5a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016588:	88db      	ldrh	r3, [r3, #6]
 801658a:	b29b      	uxth	r3, r3
 801658c:	f003 0320 	and.w	r3, r3, #32
 8016590:	2b00      	cmp	r3, #0
 8016592:	bf0c      	ite	eq
 8016594:	2301      	moveq	r3, #1
 8016596:	2300      	movne	r3, #0
 8016598:	b2db      	uxtb	r3, r3
 801659a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801659c:	69fb      	ldr	r3, [r7, #28]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d00e      	beq.n	80165c0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80165a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80165a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80165a6:	4413      	add	r3, r2
 80165a8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80165aa:	8b7a      	ldrh	r2, [r7, #26]
 80165ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80165ae:	429a      	cmp	r2, r3
 80165b0:	f0c0 80a0 	bcc.w	80166f4 <ip4_reass+0x2ac>
 80165b4:	8b7b      	ldrh	r3, [r7, #26]
 80165b6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80165ba:	4293      	cmp	r3, r2
 80165bc:	f200 809a 	bhi.w	80166f4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80165c0:	69fa      	ldr	r2, [r7, #28]
 80165c2:	6879      	ldr	r1, [r7, #4]
 80165c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80165c6:	f7ff fdd5 	bl	8016174 <ip_reass_chain_frag_into_datagram_and_validate>
 80165ca:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80165cc:	697b      	ldr	r3, [r7, #20]
 80165ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165d2:	f000 809b 	beq.w	801670c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80165d6:	4b48      	ldr	r3, [pc, #288]	@ (80166f8 <ip4_reass+0x2b0>)
 80165d8:	881a      	ldrh	r2, [r3, #0]
 80165da:	8c3b      	ldrh	r3, [r7, #32]
 80165dc:	4413      	add	r3, r2
 80165de:	b29a      	uxth	r2, r3
 80165e0:	4b45      	ldr	r3, [pc, #276]	@ (80166f8 <ip4_reass+0x2b0>)
 80165e2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80165e4:	69fb      	ldr	r3, [r7, #28]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d00d      	beq.n	8016606 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80165ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80165ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80165ee:	4413      	add	r3, r2
 80165f0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80165f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165f4:	8a7a      	ldrh	r2, [r7, #18]
 80165f6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80165f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165fa:	7f9b      	ldrb	r3, [r3, #30]
 80165fc:	f043 0301 	orr.w	r3, r3, #1
 8016600:	b2da      	uxtb	r2, r3
 8016602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016604:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016606:	697b      	ldr	r3, [r7, #20]
 8016608:	2b01      	cmp	r3, #1
 801660a:	d171      	bne.n	80166f0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801660e:	8b9b      	ldrh	r3, [r3, #28]
 8016610:	3314      	adds	r3, #20
 8016612:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016616:	685b      	ldr	r3, [r3, #4]
 8016618:	685b      	ldr	r3, [r3, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016620:	685b      	ldr	r3, [r3, #4]
 8016622:	685b      	ldr	r3, [r3, #4]
 8016624:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016628:	3308      	adds	r3, #8
 801662a:	2214      	movs	r2, #20
 801662c:	4619      	mov	r1, r3
 801662e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016630:	f001 fc13 	bl	8017e5a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016634:	8a3b      	ldrh	r3, [r7, #16]
 8016636:	4618      	mov	r0, r3
 8016638:	f7f5 fa94 	bl	800bb64 <lwip_htons>
 801663c:	4603      	mov	r3, r0
 801663e:	461a      	mov	r2, r3
 8016640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016642:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016646:	2200      	movs	r2, #0
 8016648:	719a      	strb	r2, [r3, #6]
 801664a:	2200      	movs	r2, #0
 801664c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801664e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016650:	2200      	movs	r2, #0
 8016652:	729a      	strb	r2, [r3, #10]
 8016654:	2200      	movs	r2, #0
 8016656:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801665a:	685b      	ldr	r3, [r3, #4]
 801665c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801665e:	e00d      	b.n	801667c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016662:	685b      	ldr	r3, [r3, #4]
 8016664:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016666:	2114      	movs	r1, #20
 8016668:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801666a:	f7f6 fdd7 	bl	800d21c <pbuf_remove_header>
      pbuf_cat(p, r);
 801666e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f7f6 ff1b 	bl	800d4ac <pbuf_cat>
      r = iprh->next_pbuf;
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801667c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801667e:	2b00      	cmp	r3, #0
 8016680:	d1ee      	bne.n	8016660 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016682:	4b1e      	ldr	r3, [pc, #120]	@ (80166fc <ip4_reass+0x2b4>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016688:	429a      	cmp	r2, r3
 801668a:	d102      	bne.n	8016692 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801668c:	2300      	movs	r3, #0
 801668e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016690:	e010      	b.n	80166b4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016692:	4b1a      	ldr	r3, [pc, #104]	@ (80166fc <ip4_reass+0x2b4>)
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016698:	e007      	b.n	80166aa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801669a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d006      	beq.n	80166b2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80166a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80166aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d1f4      	bne.n	801669a <ip4_reass+0x252>
 80166b0:	e000      	b.n	80166b4 <ip4_reass+0x26c>
          break;
 80166b2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80166b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80166b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80166b8:	f7ff fd2e 	bl	8016118 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80166bc:	6878      	ldr	r0, [r7, #4]
 80166be:	f7f6 febb 	bl	800d438 <pbuf_clen>
 80166c2:	4603      	mov	r3, r0
 80166c4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80166c6:	4b0c      	ldr	r3, [pc, #48]	@ (80166f8 <ip4_reass+0x2b0>)
 80166c8:	881b      	ldrh	r3, [r3, #0]
 80166ca:	8c3a      	ldrh	r2, [r7, #32]
 80166cc:	429a      	cmp	r2, r3
 80166ce:	d906      	bls.n	80166de <ip4_reass+0x296>
 80166d0:	4b0b      	ldr	r3, [pc, #44]	@ (8016700 <ip4_reass+0x2b8>)
 80166d2:	f240 229b 	movw	r2, #667	@ 0x29b
 80166d6:	490b      	ldr	r1, [pc, #44]	@ (8016704 <ip4_reass+0x2bc>)
 80166d8:	480b      	ldr	r0, [pc, #44]	@ (8016708 <ip4_reass+0x2c0>)
 80166da:	f001 f963 	bl	80179a4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80166de:	4b06      	ldr	r3, [pc, #24]	@ (80166f8 <ip4_reass+0x2b0>)
 80166e0:	881a      	ldrh	r2, [r3, #0]
 80166e2:	8c3b      	ldrh	r3, [r7, #32]
 80166e4:	1ad3      	subs	r3, r2, r3
 80166e6:	b29a      	uxth	r2, r3
 80166e8:	4b03      	ldr	r3, [pc, #12]	@ (80166f8 <ip4_reass+0x2b0>)
 80166ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	e038      	b.n	8016762 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80166f0:	2300      	movs	r3, #0
 80166f2:	e036      	b.n	8016762 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80166f4:	bf00      	nop
 80166f6:	e00a      	b.n	801670e <ip4_reass+0x2c6>
 80166f8:	20014770 	.word	0x20014770
 80166fc:	2001476c 	.word	0x2001476c
 8016700:	0801cc40 	.word	0x0801cc40
 8016704:	0801cdb0 	.word	0x0801cdb0
 8016708:	0801cc88 	.word	0x0801cc88
    goto nullreturn_ipr;
 801670c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016710:	2b00      	cmp	r3, #0
 8016712:	d106      	bne.n	8016722 <ip4_reass+0x2da>
 8016714:	4b15      	ldr	r3, [pc, #84]	@ (801676c <ip4_reass+0x324>)
 8016716:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801671a:	4915      	ldr	r1, [pc, #84]	@ (8016770 <ip4_reass+0x328>)
 801671c:	4815      	ldr	r0, [pc, #84]	@ (8016774 <ip4_reass+0x32c>)
 801671e:	f001 f941 	bl	80179a4 <iprintf>
  if (ipr->p == NULL) {
 8016722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016724:	685b      	ldr	r3, [r3, #4]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d116      	bne.n	8016758 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801672a:	4b13      	ldr	r3, [pc, #76]	@ (8016778 <ip4_reass+0x330>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016730:	429a      	cmp	r2, r3
 8016732:	d006      	beq.n	8016742 <ip4_reass+0x2fa>
 8016734:	4b0d      	ldr	r3, [pc, #52]	@ (801676c <ip4_reass+0x324>)
 8016736:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801673a:	4910      	ldr	r1, [pc, #64]	@ (801677c <ip4_reass+0x334>)
 801673c:	480d      	ldr	r0, [pc, #52]	@ (8016774 <ip4_reass+0x32c>)
 801673e:	f001 f931 	bl	80179a4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016742:	2100      	movs	r1, #0
 8016744:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016746:	f7ff fce7 	bl	8016118 <ip_reass_dequeue_datagram>
 801674a:	e006      	b.n	801675a <ip4_reass+0x312>
    goto nullreturn;
 801674c:	bf00      	nop
 801674e:	e004      	b.n	801675a <ip4_reass+0x312>
    goto nullreturn;
 8016750:	bf00      	nop
 8016752:	e002      	b.n	801675a <ip4_reass+0x312>
      goto nullreturn;
 8016754:	bf00      	nop
 8016756:	e000      	b.n	801675a <ip4_reass+0x312>
  }

nullreturn:
 8016758:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f7f6 fde4 	bl	800d328 <pbuf_free>
  return NULL;
 8016760:	2300      	movs	r3, #0
}
 8016762:	4618      	mov	r0, r3
 8016764:	3738      	adds	r7, #56	@ 0x38
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	0801cc40 	.word	0x0801cc40
 8016770:	0801cdcc 	.word	0x0801cdcc
 8016774:	0801cc88 	.word	0x0801cc88
 8016778:	2001476c 	.word	0x2001476c
 801677c:	0801cdd8 	.word	0x0801cdd8

08016780 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016784:	2005      	movs	r0, #5
 8016786:	f7f5 fe9b 	bl	800c4c0 <memp_malloc>
 801678a:	4603      	mov	r3, r0
}
 801678c:	4618      	mov	r0, r3
 801678e:	bd80      	pop	{r7, pc}

08016790 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d106      	bne.n	80167ac <ip_frag_free_pbuf_custom_ref+0x1c>
 801679e:	4b07      	ldr	r3, [pc, #28]	@ (80167bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80167a0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80167a4:	4906      	ldr	r1, [pc, #24]	@ (80167c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80167a6:	4807      	ldr	r0, [pc, #28]	@ (80167c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80167a8:	f001 f8fc 	bl	80179a4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80167ac:	6879      	ldr	r1, [r7, #4]
 80167ae:	2005      	movs	r0, #5
 80167b0:	f7f5 fef6 	bl	800c5a0 <memp_free>
}
 80167b4:	bf00      	nop
 80167b6:	3708      	adds	r7, #8
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}
 80167bc:	0801cc40 	.word	0x0801cc40
 80167c0:	0801cdf8 	.word	0x0801cdf8
 80167c4:	0801cc88 	.word	0x0801cc88

080167c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d106      	bne.n	80167e8 <ipfrag_free_pbuf_custom+0x20>
 80167da:	4b11      	ldr	r3, [pc, #68]	@ (8016820 <ipfrag_free_pbuf_custom+0x58>)
 80167dc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80167e0:	4910      	ldr	r1, [pc, #64]	@ (8016824 <ipfrag_free_pbuf_custom+0x5c>)
 80167e2:	4811      	ldr	r0, [pc, #68]	@ (8016828 <ipfrag_free_pbuf_custom+0x60>)
 80167e4:	f001 f8de 	bl	80179a4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80167e8:	68fa      	ldr	r2, [r7, #12]
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d006      	beq.n	80167fe <ipfrag_free_pbuf_custom+0x36>
 80167f0:	4b0b      	ldr	r3, [pc, #44]	@ (8016820 <ipfrag_free_pbuf_custom+0x58>)
 80167f2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80167f6:	490d      	ldr	r1, [pc, #52]	@ (801682c <ipfrag_free_pbuf_custom+0x64>)
 80167f8:	480b      	ldr	r0, [pc, #44]	@ (8016828 <ipfrag_free_pbuf_custom+0x60>)
 80167fa:	f001 f8d3 	bl	80179a4 <iprintf>
  if (pcr->original != NULL) {
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	695b      	ldr	r3, [r3, #20]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d004      	beq.n	8016810 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	695b      	ldr	r3, [r3, #20]
 801680a:	4618      	mov	r0, r3
 801680c:	f7f6 fd8c 	bl	800d328 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016810:	68f8      	ldr	r0, [r7, #12]
 8016812:	f7ff ffbd 	bl	8016790 <ip_frag_free_pbuf_custom_ref>
}
 8016816:	bf00      	nop
 8016818:	3710      	adds	r7, #16
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
 801681e:	bf00      	nop
 8016820:	0801cc40 	.word	0x0801cc40
 8016824:	0801ce04 	.word	0x0801ce04
 8016828:	0801cc88 	.word	0x0801cc88
 801682c:	0801ce10 	.word	0x0801ce10

08016830 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b094      	sub	sp, #80	@ 0x50
 8016834:	af02      	add	r7, sp, #8
 8016836:	60f8      	str	r0, [r7, #12]
 8016838:	60b9      	str	r1, [r7, #8]
 801683a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801683c:	2300      	movs	r3, #0
 801683e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016842:	68bb      	ldr	r3, [r7, #8]
 8016844:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016846:	3b14      	subs	r3, #20
 8016848:	2b00      	cmp	r3, #0
 801684a:	da00      	bge.n	801684e <ip4_frag+0x1e>
 801684c:	3307      	adds	r3, #7
 801684e:	10db      	asrs	r3, r3, #3
 8016850:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016852:	2314      	movs	r3, #20
 8016854:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801685c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801685e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016862:	781b      	ldrb	r3, [r3, #0]
 8016864:	f003 030f 	and.w	r3, r3, #15
 8016868:	b2db      	uxtb	r3, r3
 801686a:	009b      	lsls	r3, r3, #2
 801686c:	b2db      	uxtb	r3, r3
 801686e:	2b14      	cmp	r3, #20
 8016870:	d002      	beq.n	8016878 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016872:	f06f 0305 	mvn.w	r3, #5
 8016876:	e110      	b.n	8016a9a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	895b      	ldrh	r3, [r3, #10]
 801687c:	2b13      	cmp	r3, #19
 801687e:	d809      	bhi.n	8016894 <ip4_frag+0x64>
 8016880:	4b88      	ldr	r3, [pc, #544]	@ (8016aa4 <ip4_frag+0x274>)
 8016882:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016886:	4988      	ldr	r1, [pc, #544]	@ (8016aa8 <ip4_frag+0x278>)
 8016888:	4888      	ldr	r0, [pc, #544]	@ (8016aac <ip4_frag+0x27c>)
 801688a:	f001 f88b 	bl	80179a4 <iprintf>
 801688e:	f06f 0305 	mvn.w	r3, #5
 8016892:	e102      	b.n	8016a9a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016896:	88db      	ldrh	r3, [r3, #6]
 8016898:	b29b      	uxth	r3, r3
 801689a:	4618      	mov	r0, r3
 801689c:	f7f5 f962 	bl	800bb64 <lwip_htons>
 80168a0:	4603      	mov	r3, r0
 80168a2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80168a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80168a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80168ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80168b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80168b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	891b      	ldrh	r3, [r3, #8]
 80168ba:	3b14      	subs	r3, #20
 80168bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80168c0:	e0e1      	b.n	8016a86 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80168c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80168c4:	00db      	lsls	r3, r3, #3
 80168c6:	b29b      	uxth	r3, r3
 80168c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80168cc:	4293      	cmp	r3, r2
 80168ce:	bf28      	it	cs
 80168d0:	4613      	movcs	r3, r2
 80168d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80168d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80168d8:	2114      	movs	r1, #20
 80168da:	200e      	movs	r0, #14
 80168dc:	f7f6 fa40 	bl	800cd60 <pbuf_alloc>
 80168e0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80168e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	f000 80d5 	beq.w	8016a94 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80168ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168ec:	895b      	ldrh	r3, [r3, #10]
 80168ee:	2b13      	cmp	r3, #19
 80168f0:	d806      	bhi.n	8016900 <ip4_frag+0xd0>
 80168f2:	4b6c      	ldr	r3, [pc, #432]	@ (8016aa4 <ip4_frag+0x274>)
 80168f4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80168f8:	496d      	ldr	r1, [pc, #436]	@ (8016ab0 <ip4_frag+0x280>)
 80168fa:	486c      	ldr	r0, [pc, #432]	@ (8016aac <ip4_frag+0x27c>)
 80168fc:	f001 f852 	bl	80179a4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016902:	685b      	ldr	r3, [r3, #4]
 8016904:	2214      	movs	r2, #20
 8016906:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016908:	4618      	mov	r0, r3
 801690a:	f001 faa6 	bl	8017e5a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016914:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016916:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801691a:	e064      	b.n	80169e6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	895a      	ldrh	r2, [r3, #10]
 8016920:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016922:	1ad3      	subs	r3, r2, r3
 8016924:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	895b      	ldrh	r3, [r3, #10]
 801692a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801692c:	429a      	cmp	r2, r3
 801692e:	d906      	bls.n	801693e <ip4_frag+0x10e>
 8016930:	4b5c      	ldr	r3, [pc, #368]	@ (8016aa4 <ip4_frag+0x274>)
 8016932:	f240 322d 	movw	r2, #813	@ 0x32d
 8016936:	495f      	ldr	r1, [pc, #380]	@ (8016ab4 <ip4_frag+0x284>)
 8016938:	485c      	ldr	r0, [pc, #368]	@ (8016aac <ip4_frag+0x27c>)
 801693a:	f001 f833 	bl	80179a4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801693e:	8bfa      	ldrh	r2, [r7, #30]
 8016940:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016944:	4293      	cmp	r3, r2
 8016946:	bf28      	it	cs
 8016948:	4613      	movcs	r3, r2
 801694a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801694e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016952:	2b00      	cmp	r3, #0
 8016954:	d105      	bne.n	8016962 <ip4_frag+0x132>
        poff = 0;
 8016956:	2300      	movs	r3, #0
 8016958:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	60fb      	str	r3, [r7, #12]
        continue;
 8016960:	e041      	b.n	80169e6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016962:	f7ff ff0d 	bl	8016780 <ip_frag_alloc_pbuf_custom_ref>
 8016966:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016968:	69bb      	ldr	r3, [r7, #24]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d103      	bne.n	8016976 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801696e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016970:	f7f6 fcda 	bl	800d328 <pbuf_free>
        goto memerr;
 8016974:	e08f      	b.n	8016a96 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016976:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801697c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801697e:	4413      	add	r3, r2
 8016980:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016984:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016988:	9201      	str	r2, [sp, #4]
 801698a:	9300      	str	r3, [sp, #0]
 801698c:	4603      	mov	r3, r0
 801698e:	2241      	movs	r2, #65	@ 0x41
 8016990:	2000      	movs	r0, #0
 8016992:	f7f6 fb0f 	bl	800cfb4 <pbuf_alloced_custom>
 8016996:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016998:	697b      	ldr	r3, [r7, #20]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d106      	bne.n	80169ac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801699e:	69b8      	ldr	r0, [r7, #24]
 80169a0:	f7ff fef6 	bl	8016790 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80169a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80169a6:	f7f6 fcbf 	bl	800d328 <pbuf_free>
        goto memerr;
 80169aa:	e074      	b.n	8016a96 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80169ac:	68f8      	ldr	r0, [r7, #12]
 80169ae:	f7f6 fd5b 	bl	800d468 <pbuf_ref>
      pcr->original = p;
 80169b2:	69bb      	ldr	r3, [r7, #24]
 80169b4:	68fa      	ldr	r2, [r7, #12]
 80169b6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80169b8:	69bb      	ldr	r3, [r7, #24]
 80169ba:	4a3f      	ldr	r2, [pc, #252]	@ (8016ab8 <ip4_frag+0x288>)
 80169bc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80169be:	6979      	ldr	r1, [r7, #20]
 80169c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80169c2:	f7f6 fd73 	bl	800d4ac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80169c6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80169ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80169ce:	1ad3      	subs	r3, r2, r3
 80169d0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80169d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d004      	beq.n	80169e6 <ip4_frag+0x1b6>
        poff = 0;
 80169dc:	2300      	movs	r3, #0
 80169de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80169e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d196      	bne.n	801691c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80169ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80169f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80169f4:	4413      	add	r3, r2
 80169f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80169f8:	68bb      	ldr	r3, [r7, #8]
 80169fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80169fc:	f1a3 0213 	sub.w	r2, r3, #19
 8016a00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016a04:	429a      	cmp	r2, r3
 8016a06:	bfcc      	ite	gt
 8016a08:	2301      	movgt	r3, #1
 8016a0a:	2300      	movle	r3, #0
 8016a0c:	b2db      	uxtb	r3, r3
 8016a0e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016a10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016a1a:	6a3b      	ldr	r3, [r7, #32]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d002      	beq.n	8016a26 <ip4_frag+0x1f6>
 8016a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d003      	beq.n	8016a2e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016a26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016a28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016a2c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016a2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016a30:	4618      	mov	r0, r3
 8016a32:	f7f5 f897 	bl	800bb64 <lwip_htons>
 8016a36:	4603      	mov	r3, r0
 8016a38:	461a      	mov	r2, r3
 8016a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a3c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016a3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016a40:	3314      	adds	r3, #20
 8016a42:	b29b      	uxth	r3, r3
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7f5 f88d 	bl	800bb64 <lwip_htons>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	461a      	mov	r2, r3
 8016a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a50:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a54:	2200      	movs	r2, #0
 8016a56:	729a      	strb	r2, [r3, #10]
 8016a58:	2200      	movs	r2, #0
 8016a5a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016a5c:	68bb      	ldr	r3, [r7, #8]
 8016a5e:	695b      	ldr	r3, [r3, #20]
 8016a60:	687a      	ldr	r2, [r7, #4]
 8016a62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016a64:	68b8      	ldr	r0, [r7, #8]
 8016a66:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016a68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016a6a:	f7f6 fc5d 	bl	800d328 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016a6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016a72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016a74:	1ad3      	subs	r3, r2, r3
 8016a76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016a7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8016a7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016a80:	4413      	add	r3, r2
 8016a82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016a86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	f47f af19 	bne.w	80168c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016a90:	2300      	movs	r3, #0
 8016a92:	e002      	b.n	8016a9a <ip4_frag+0x26a>
      goto memerr;
 8016a94:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3748      	adds	r7, #72	@ 0x48
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
 8016aa2:	bf00      	nop
 8016aa4:	0801cc40 	.word	0x0801cc40
 8016aa8:	0801ce1c 	.word	0x0801ce1c
 8016aac:	0801cc88 	.word	0x0801cc88
 8016ab0:	0801ce38 	.word	0x0801ce38
 8016ab4:	0801ce58 	.word	0x0801ce58
 8016ab8:	080167c9 	.word	0x080167c9

08016abc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b086      	sub	sp, #24
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016ac6:	230e      	movs	r3, #14
 8016ac8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	895b      	ldrh	r3, [r3, #10]
 8016ace:	2b0e      	cmp	r3, #14
 8016ad0:	d96e      	bls.n	8016bb0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	7bdb      	ldrb	r3, [r3, #15]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d106      	bne.n	8016ae8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016ada:	683b      	ldr	r3, [r7, #0]
 8016adc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016ae0:	3301      	adds	r3, #1
 8016ae2:	b2da      	uxtb	r2, r3
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	685b      	ldr	r3, [r3, #4]
 8016aec:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	7b1a      	ldrb	r2, [r3, #12]
 8016af2:	7b5b      	ldrb	r3, [r3, #13]
 8016af4:	021b      	lsls	r3, r3, #8
 8016af6:	4313      	orrs	r3, r2
 8016af8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	781b      	ldrb	r3, [r3, #0]
 8016afe:	f003 0301 	and.w	r3, r3, #1
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d023      	beq.n	8016b4e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016b06:	693b      	ldr	r3, [r7, #16]
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	2b01      	cmp	r3, #1
 8016b0c:	d10f      	bne.n	8016b2e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	785b      	ldrb	r3, [r3, #1]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d11b      	bne.n	8016b4e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016b16:	693b      	ldr	r3, [r7, #16]
 8016b18:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016b1a:	2b5e      	cmp	r3, #94	@ 0x5e
 8016b1c:	d117      	bne.n	8016b4e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	7b5b      	ldrb	r3, [r3, #13]
 8016b22:	f043 0310 	orr.w	r3, r3, #16
 8016b26:	b2da      	uxtb	r2, r3
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	735a      	strb	r2, [r3, #13]
 8016b2c:	e00f      	b.n	8016b4e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016b2e:	693b      	ldr	r3, [r7, #16]
 8016b30:	2206      	movs	r2, #6
 8016b32:	4928      	ldr	r1, [pc, #160]	@ (8016bd4 <ethernet_input+0x118>)
 8016b34:	4618      	mov	r0, r3
 8016b36:	f001 f89d 	bl	8017c74 <memcmp>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d106      	bne.n	8016b4e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	7b5b      	ldrb	r3, [r3, #13]
 8016b44:	f043 0308 	orr.w	r3, r3, #8
 8016b48:	b2da      	uxtb	r2, r3
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016b4e:	89fb      	ldrh	r3, [r7, #14]
 8016b50:	2b08      	cmp	r3, #8
 8016b52:	d003      	beq.n	8016b5c <ethernet_input+0xa0>
 8016b54:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016b58:	d014      	beq.n	8016b84 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016b5a:	e032      	b.n	8016bc2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016b5c:	683b      	ldr	r3, [r7, #0]
 8016b5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016b62:	f003 0308 	and.w	r3, r3, #8
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d024      	beq.n	8016bb4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016b6a:	8afb      	ldrh	r3, [r7, #22]
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f7f6 fb54 	bl	800d21c <pbuf_remove_header>
 8016b74:	4603      	mov	r3, r0
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d11e      	bne.n	8016bb8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016b7a:	6839      	ldr	r1, [r7, #0]
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f7fe ff21 	bl	80159c4 <ip4_input>
      break;
 8016b82:	e013      	b.n	8016bac <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016b8a:	f003 0308 	and.w	r3, r3, #8
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d014      	beq.n	8016bbc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016b92:	8afb      	ldrh	r3, [r7, #22]
 8016b94:	4619      	mov	r1, r3
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f7f6 fb40 	bl	800d21c <pbuf_remove_header>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d10e      	bne.n	8016bc0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016ba2:	6839      	ldr	r1, [r7, #0]
 8016ba4:	6878      	ldr	r0, [r7, #4]
 8016ba6:	f7fe f8c1 	bl	8014d2c <etharp_input>
      break;
 8016baa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016bac:	2300      	movs	r3, #0
 8016bae:	e00c      	b.n	8016bca <ethernet_input+0x10e>
    goto free_and_return;
 8016bb0:	bf00      	nop
 8016bb2:	e006      	b.n	8016bc2 <ethernet_input+0x106>
        goto free_and_return;
 8016bb4:	bf00      	nop
 8016bb6:	e004      	b.n	8016bc2 <ethernet_input+0x106>
        goto free_and_return;
 8016bb8:	bf00      	nop
 8016bba:	e002      	b.n	8016bc2 <ethernet_input+0x106>
        goto free_and_return;
 8016bbc:	bf00      	nop
 8016bbe:	e000      	b.n	8016bc2 <ethernet_input+0x106>
        goto free_and_return;
 8016bc0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016bc2:	6878      	ldr	r0, [r7, #4]
 8016bc4:	f7f6 fbb0 	bl	800d328 <pbuf_free>
  return ERR_OK;
 8016bc8:	2300      	movs	r3, #0
}
 8016bca:	4618      	mov	r0, r3
 8016bcc:	3718      	adds	r7, #24
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}
 8016bd2:	bf00      	nop
 8016bd4:	08054ae4 	.word	0x08054ae4

08016bd8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b086      	sub	sp, #24
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	60f8      	str	r0, [r7, #12]
 8016be0:	60b9      	str	r1, [r7, #8]
 8016be2:	607a      	str	r2, [r7, #4]
 8016be4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016be6:	8c3b      	ldrh	r3, [r7, #32]
 8016be8:	4618      	mov	r0, r3
 8016bea:	f7f4 ffbb 	bl	800bb64 <lwip_htons>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016bf2:	210e      	movs	r1, #14
 8016bf4:	68b8      	ldr	r0, [r7, #8]
 8016bf6:	f7f6 fb01 	bl	800d1fc <pbuf_add_header>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d125      	bne.n	8016c4c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	685b      	ldr	r3, [r3, #4]
 8016c04:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016c06:	693b      	ldr	r3, [r7, #16]
 8016c08:	8afa      	ldrh	r2, [r7, #22]
 8016c0a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016c0c:	693b      	ldr	r3, [r7, #16]
 8016c0e:	2206      	movs	r2, #6
 8016c10:	6839      	ldr	r1, [r7, #0]
 8016c12:	4618      	mov	r0, r3
 8016c14:	f001 f921 	bl	8017e5a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016c18:	693b      	ldr	r3, [r7, #16]
 8016c1a:	3306      	adds	r3, #6
 8016c1c:	2206      	movs	r2, #6
 8016c1e:	6879      	ldr	r1, [r7, #4]
 8016c20:	4618      	mov	r0, r3
 8016c22:	f001 f91a 	bl	8017e5a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016c2c:	2b06      	cmp	r3, #6
 8016c2e:	d006      	beq.n	8016c3e <ethernet_output+0x66>
 8016c30:	4b0a      	ldr	r3, [pc, #40]	@ (8016c5c <ethernet_output+0x84>)
 8016c32:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016c36:	490a      	ldr	r1, [pc, #40]	@ (8016c60 <ethernet_output+0x88>)
 8016c38:	480a      	ldr	r0, [pc, #40]	@ (8016c64 <ethernet_output+0x8c>)
 8016c3a:	f000 feb3 	bl	80179a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	699b      	ldr	r3, [r3, #24]
 8016c42:	68b9      	ldr	r1, [r7, #8]
 8016c44:	68f8      	ldr	r0, [r7, #12]
 8016c46:	4798      	blx	r3
 8016c48:	4603      	mov	r3, r0
 8016c4a:	e002      	b.n	8016c52 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016c4c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016c4e:	f06f 0301 	mvn.w	r3, #1
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	3718      	adds	r7, #24
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	0801ce68 	.word	0x0801ce68
 8016c60:	0801cea0 	.word	0x0801cea0
 8016c64:	0801ced4 	.word	0x0801ced4

08016c68 <atoi>:
 8016c68:	220a      	movs	r2, #10
 8016c6a:	2100      	movs	r1, #0
 8016c6c:	f000 b976 	b.w	8016f5c <strtol>

08016c70 <malloc>:
 8016c70:	4b02      	ldr	r3, [pc, #8]	@ (8016c7c <malloc+0xc>)
 8016c72:	4601      	mov	r1, r0
 8016c74:	6818      	ldr	r0, [r3, #0]
 8016c76:	f000 b82d 	b.w	8016cd4 <_malloc_r>
 8016c7a:	bf00      	nop
 8016c7c:	2000968c 	.word	0x2000968c

08016c80 <free>:
 8016c80:	4b02      	ldr	r3, [pc, #8]	@ (8016c8c <free+0xc>)
 8016c82:	4601      	mov	r1, r0
 8016c84:	6818      	ldr	r0, [r3, #0]
 8016c86:	f001 bf63 	b.w	8018b50 <_free_r>
 8016c8a:	bf00      	nop
 8016c8c:	2000968c 	.word	0x2000968c

08016c90 <sbrk_aligned>:
 8016c90:	b570      	push	{r4, r5, r6, lr}
 8016c92:	4e0f      	ldr	r6, [pc, #60]	@ (8016cd0 <sbrk_aligned+0x40>)
 8016c94:	460c      	mov	r4, r1
 8016c96:	6831      	ldr	r1, [r6, #0]
 8016c98:	4605      	mov	r5, r0
 8016c9a:	b911      	cbnz	r1, 8016ca2 <sbrk_aligned+0x12>
 8016c9c:	f001 f886 	bl	8017dac <_sbrk_r>
 8016ca0:	6030      	str	r0, [r6, #0]
 8016ca2:	4621      	mov	r1, r4
 8016ca4:	4628      	mov	r0, r5
 8016ca6:	f001 f881 	bl	8017dac <_sbrk_r>
 8016caa:	1c43      	adds	r3, r0, #1
 8016cac:	d103      	bne.n	8016cb6 <sbrk_aligned+0x26>
 8016cae:	f04f 34ff 	mov.w	r4, #4294967295
 8016cb2:	4620      	mov	r0, r4
 8016cb4:	bd70      	pop	{r4, r5, r6, pc}
 8016cb6:	1cc4      	adds	r4, r0, #3
 8016cb8:	f024 0403 	bic.w	r4, r4, #3
 8016cbc:	42a0      	cmp	r0, r4
 8016cbe:	d0f8      	beq.n	8016cb2 <sbrk_aligned+0x22>
 8016cc0:	1a21      	subs	r1, r4, r0
 8016cc2:	4628      	mov	r0, r5
 8016cc4:	f001 f872 	bl	8017dac <_sbrk_r>
 8016cc8:	3001      	adds	r0, #1
 8016cca:	d1f2      	bne.n	8016cb2 <sbrk_aligned+0x22>
 8016ccc:	e7ef      	b.n	8016cae <sbrk_aligned+0x1e>
 8016cce:	bf00      	nop
 8016cd0:	20014774 	.word	0x20014774

08016cd4 <_malloc_r>:
 8016cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cd8:	1ccd      	adds	r5, r1, #3
 8016cda:	f025 0503 	bic.w	r5, r5, #3
 8016cde:	3508      	adds	r5, #8
 8016ce0:	2d0c      	cmp	r5, #12
 8016ce2:	bf38      	it	cc
 8016ce4:	250c      	movcc	r5, #12
 8016ce6:	2d00      	cmp	r5, #0
 8016ce8:	4606      	mov	r6, r0
 8016cea:	db01      	blt.n	8016cf0 <_malloc_r+0x1c>
 8016cec:	42a9      	cmp	r1, r5
 8016cee:	d904      	bls.n	8016cfa <_malloc_r+0x26>
 8016cf0:	230c      	movs	r3, #12
 8016cf2:	6033      	str	r3, [r6, #0]
 8016cf4:	2000      	movs	r0, #0
 8016cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016dd0 <_malloc_r+0xfc>
 8016cfe:	f000 f869 	bl	8016dd4 <__malloc_lock>
 8016d02:	f8d8 3000 	ldr.w	r3, [r8]
 8016d06:	461c      	mov	r4, r3
 8016d08:	bb44      	cbnz	r4, 8016d5c <_malloc_r+0x88>
 8016d0a:	4629      	mov	r1, r5
 8016d0c:	4630      	mov	r0, r6
 8016d0e:	f7ff ffbf 	bl	8016c90 <sbrk_aligned>
 8016d12:	1c43      	adds	r3, r0, #1
 8016d14:	4604      	mov	r4, r0
 8016d16:	d158      	bne.n	8016dca <_malloc_r+0xf6>
 8016d18:	f8d8 4000 	ldr.w	r4, [r8]
 8016d1c:	4627      	mov	r7, r4
 8016d1e:	2f00      	cmp	r7, #0
 8016d20:	d143      	bne.n	8016daa <_malloc_r+0xd6>
 8016d22:	2c00      	cmp	r4, #0
 8016d24:	d04b      	beq.n	8016dbe <_malloc_r+0xea>
 8016d26:	6823      	ldr	r3, [r4, #0]
 8016d28:	4639      	mov	r1, r7
 8016d2a:	4630      	mov	r0, r6
 8016d2c:	eb04 0903 	add.w	r9, r4, r3
 8016d30:	f001 f83c 	bl	8017dac <_sbrk_r>
 8016d34:	4581      	cmp	r9, r0
 8016d36:	d142      	bne.n	8016dbe <_malloc_r+0xea>
 8016d38:	6821      	ldr	r1, [r4, #0]
 8016d3a:	1a6d      	subs	r5, r5, r1
 8016d3c:	4629      	mov	r1, r5
 8016d3e:	4630      	mov	r0, r6
 8016d40:	f7ff ffa6 	bl	8016c90 <sbrk_aligned>
 8016d44:	3001      	adds	r0, #1
 8016d46:	d03a      	beq.n	8016dbe <_malloc_r+0xea>
 8016d48:	6823      	ldr	r3, [r4, #0]
 8016d4a:	442b      	add	r3, r5
 8016d4c:	6023      	str	r3, [r4, #0]
 8016d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8016d52:	685a      	ldr	r2, [r3, #4]
 8016d54:	bb62      	cbnz	r2, 8016db0 <_malloc_r+0xdc>
 8016d56:	f8c8 7000 	str.w	r7, [r8]
 8016d5a:	e00f      	b.n	8016d7c <_malloc_r+0xa8>
 8016d5c:	6822      	ldr	r2, [r4, #0]
 8016d5e:	1b52      	subs	r2, r2, r5
 8016d60:	d420      	bmi.n	8016da4 <_malloc_r+0xd0>
 8016d62:	2a0b      	cmp	r2, #11
 8016d64:	d917      	bls.n	8016d96 <_malloc_r+0xc2>
 8016d66:	1961      	adds	r1, r4, r5
 8016d68:	42a3      	cmp	r3, r4
 8016d6a:	6025      	str	r5, [r4, #0]
 8016d6c:	bf18      	it	ne
 8016d6e:	6059      	strne	r1, [r3, #4]
 8016d70:	6863      	ldr	r3, [r4, #4]
 8016d72:	bf08      	it	eq
 8016d74:	f8c8 1000 	streq.w	r1, [r8]
 8016d78:	5162      	str	r2, [r4, r5]
 8016d7a:	604b      	str	r3, [r1, #4]
 8016d7c:	4630      	mov	r0, r6
 8016d7e:	f000 f82f 	bl	8016de0 <__malloc_unlock>
 8016d82:	f104 000b 	add.w	r0, r4, #11
 8016d86:	1d23      	adds	r3, r4, #4
 8016d88:	f020 0007 	bic.w	r0, r0, #7
 8016d8c:	1ac2      	subs	r2, r0, r3
 8016d8e:	bf1c      	itt	ne
 8016d90:	1a1b      	subne	r3, r3, r0
 8016d92:	50a3      	strne	r3, [r4, r2]
 8016d94:	e7af      	b.n	8016cf6 <_malloc_r+0x22>
 8016d96:	6862      	ldr	r2, [r4, #4]
 8016d98:	42a3      	cmp	r3, r4
 8016d9a:	bf0c      	ite	eq
 8016d9c:	f8c8 2000 	streq.w	r2, [r8]
 8016da0:	605a      	strne	r2, [r3, #4]
 8016da2:	e7eb      	b.n	8016d7c <_malloc_r+0xa8>
 8016da4:	4623      	mov	r3, r4
 8016da6:	6864      	ldr	r4, [r4, #4]
 8016da8:	e7ae      	b.n	8016d08 <_malloc_r+0x34>
 8016daa:	463c      	mov	r4, r7
 8016dac:	687f      	ldr	r7, [r7, #4]
 8016dae:	e7b6      	b.n	8016d1e <_malloc_r+0x4a>
 8016db0:	461a      	mov	r2, r3
 8016db2:	685b      	ldr	r3, [r3, #4]
 8016db4:	42a3      	cmp	r3, r4
 8016db6:	d1fb      	bne.n	8016db0 <_malloc_r+0xdc>
 8016db8:	2300      	movs	r3, #0
 8016dba:	6053      	str	r3, [r2, #4]
 8016dbc:	e7de      	b.n	8016d7c <_malloc_r+0xa8>
 8016dbe:	230c      	movs	r3, #12
 8016dc0:	6033      	str	r3, [r6, #0]
 8016dc2:	4630      	mov	r0, r6
 8016dc4:	f000 f80c 	bl	8016de0 <__malloc_unlock>
 8016dc8:	e794      	b.n	8016cf4 <_malloc_r+0x20>
 8016dca:	6005      	str	r5, [r0, #0]
 8016dcc:	e7d6      	b.n	8016d7c <_malloc_r+0xa8>
 8016dce:	bf00      	nop
 8016dd0:	20014778 	.word	0x20014778

08016dd4 <__malloc_lock>:
 8016dd4:	4801      	ldr	r0, [pc, #4]	@ (8016ddc <__malloc_lock+0x8>)
 8016dd6:	f001 b836 	b.w	8017e46 <__retarget_lock_acquire_recursive>
 8016dda:	bf00      	nop
 8016ddc:	200148bc 	.word	0x200148bc

08016de0 <__malloc_unlock>:
 8016de0:	4801      	ldr	r0, [pc, #4]	@ (8016de8 <__malloc_unlock+0x8>)
 8016de2:	f001 b831 	b.w	8017e48 <__retarget_lock_release_recursive>
 8016de6:	bf00      	nop
 8016de8:	200148bc 	.word	0x200148bc

08016dec <rand>:
 8016dec:	4b16      	ldr	r3, [pc, #88]	@ (8016e48 <rand+0x5c>)
 8016dee:	b510      	push	{r4, lr}
 8016df0:	681c      	ldr	r4, [r3, #0]
 8016df2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016df4:	b9b3      	cbnz	r3, 8016e24 <rand+0x38>
 8016df6:	2018      	movs	r0, #24
 8016df8:	f7ff ff3a 	bl	8016c70 <malloc>
 8016dfc:	4602      	mov	r2, r0
 8016dfe:	6320      	str	r0, [r4, #48]	@ 0x30
 8016e00:	b920      	cbnz	r0, 8016e0c <rand+0x20>
 8016e02:	4b12      	ldr	r3, [pc, #72]	@ (8016e4c <rand+0x60>)
 8016e04:	4812      	ldr	r0, [pc, #72]	@ (8016e50 <rand+0x64>)
 8016e06:	2152      	movs	r1, #82	@ 0x52
 8016e08:	f001 f836 	bl	8017e78 <__assert_func>
 8016e0c:	4911      	ldr	r1, [pc, #68]	@ (8016e54 <rand+0x68>)
 8016e0e:	4b12      	ldr	r3, [pc, #72]	@ (8016e58 <rand+0x6c>)
 8016e10:	e9c0 1300 	strd	r1, r3, [r0]
 8016e14:	4b11      	ldr	r3, [pc, #68]	@ (8016e5c <rand+0x70>)
 8016e16:	6083      	str	r3, [r0, #8]
 8016e18:	230b      	movs	r3, #11
 8016e1a:	8183      	strh	r3, [r0, #12]
 8016e1c:	2100      	movs	r1, #0
 8016e1e:	2001      	movs	r0, #1
 8016e20:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016e24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016e26:	480e      	ldr	r0, [pc, #56]	@ (8016e60 <rand+0x74>)
 8016e28:	690b      	ldr	r3, [r1, #16]
 8016e2a:	694c      	ldr	r4, [r1, #20]
 8016e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8016e64 <rand+0x78>)
 8016e2e:	4358      	muls	r0, r3
 8016e30:	fb02 0004 	mla	r0, r2, r4, r0
 8016e34:	fba3 3202 	umull	r3, r2, r3, r2
 8016e38:	3301      	adds	r3, #1
 8016e3a:	eb40 0002 	adc.w	r0, r0, r2
 8016e3e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016e42:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016e46:	bd10      	pop	{r4, pc}
 8016e48:	2000968c 	.word	0x2000968c
 8016e4c:	08054af2 	.word	0x08054af2
 8016e50:	08054b09 	.word	0x08054b09
 8016e54:	abcd330e 	.word	0xabcd330e
 8016e58:	e66d1234 	.word	0xe66d1234
 8016e5c:	0005deec 	.word	0x0005deec
 8016e60:	5851f42d 	.word	0x5851f42d
 8016e64:	4c957f2d 	.word	0x4c957f2d

08016e68 <_strtol_l.constprop.0>:
 8016e68:	2b24      	cmp	r3, #36	@ 0x24
 8016e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e6e:	4686      	mov	lr, r0
 8016e70:	4690      	mov	r8, r2
 8016e72:	d801      	bhi.n	8016e78 <_strtol_l.constprop.0+0x10>
 8016e74:	2b01      	cmp	r3, #1
 8016e76:	d106      	bne.n	8016e86 <_strtol_l.constprop.0+0x1e>
 8016e78:	f000 ffba 	bl	8017df0 <__errno>
 8016e7c:	2316      	movs	r3, #22
 8016e7e:	6003      	str	r3, [r0, #0]
 8016e80:	2000      	movs	r0, #0
 8016e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e86:	4834      	ldr	r0, [pc, #208]	@ (8016f58 <_strtol_l.constprop.0+0xf0>)
 8016e88:	460d      	mov	r5, r1
 8016e8a:	462a      	mov	r2, r5
 8016e8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e90:	5d06      	ldrb	r6, [r0, r4]
 8016e92:	f016 0608 	ands.w	r6, r6, #8
 8016e96:	d1f8      	bne.n	8016e8a <_strtol_l.constprop.0+0x22>
 8016e98:	2c2d      	cmp	r4, #45	@ 0x2d
 8016e9a:	d12d      	bne.n	8016ef8 <_strtol_l.constprop.0+0x90>
 8016e9c:	782c      	ldrb	r4, [r5, #0]
 8016e9e:	2601      	movs	r6, #1
 8016ea0:	1c95      	adds	r5, r2, #2
 8016ea2:	f033 0210 	bics.w	r2, r3, #16
 8016ea6:	d109      	bne.n	8016ebc <_strtol_l.constprop.0+0x54>
 8016ea8:	2c30      	cmp	r4, #48	@ 0x30
 8016eaa:	d12a      	bne.n	8016f02 <_strtol_l.constprop.0+0x9a>
 8016eac:	782a      	ldrb	r2, [r5, #0]
 8016eae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016eb2:	2a58      	cmp	r2, #88	@ 0x58
 8016eb4:	d125      	bne.n	8016f02 <_strtol_l.constprop.0+0x9a>
 8016eb6:	786c      	ldrb	r4, [r5, #1]
 8016eb8:	2310      	movs	r3, #16
 8016eba:	3502      	adds	r5, #2
 8016ebc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016ec0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	fbbc f9f3 	udiv	r9, ip, r3
 8016eca:	4610      	mov	r0, r2
 8016ecc:	fb03 ca19 	mls	sl, r3, r9, ip
 8016ed0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016ed4:	2f09      	cmp	r7, #9
 8016ed6:	d81b      	bhi.n	8016f10 <_strtol_l.constprop.0+0xa8>
 8016ed8:	463c      	mov	r4, r7
 8016eda:	42a3      	cmp	r3, r4
 8016edc:	dd27      	ble.n	8016f2e <_strtol_l.constprop.0+0xc6>
 8016ede:	1c57      	adds	r7, r2, #1
 8016ee0:	d007      	beq.n	8016ef2 <_strtol_l.constprop.0+0x8a>
 8016ee2:	4581      	cmp	r9, r0
 8016ee4:	d320      	bcc.n	8016f28 <_strtol_l.constprop.0+0xc0>
 8016ee6:	d101      	bne.n	8016eec <_strtol_l.constprop.0+0x84>
 8016ee8:	45a2      	cmp	sl, r4
 8016eea:	db1d      	blt.n	8016f28 <_strtol_l.constprop.0+0xc0>
 8016eec:	fb00 4003 	mla	r0, r0, r3, r4
 8016ef0:	2201      	movs	r2, #1
 8016ef2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ef6:	e7eb      	b.n	8016ed0 <_strtol_l.constprop.0+0x68>
 8016ef8:	2c2b      	cmp	r4, #43	@ 0x2b
 8016efa:	bf04      	itt	eq
 8016efc:	782c      	ldrbeq	r4, [r5, #0]
 8016efe:	1c95      	addeq	r5, r2, #2
 8016f00:	e7cf      	b.n	8016ea2 <_strtol_l.constprop.0+0x3a>
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d1da      	bne.n	8016ebc <_strtol_l.constprop.0+0x54>
 8016f06:	2c30      	cmp	r4, #48	@ 0x30
 8016f08:	bf0c      	ite	eq
 8016f0a:	2308      	moveq	r3, #8
 8016f0c:	230a      	movne	r3, #10
 8016f0e:	e7d5      	b.n	8016ebc <_strtol_l.constprop.0+0x54>
 8016f10:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016f14:	2f19      	cmp	r7, #25
 8016f16:	d801      	bhi.n	8016f1c <_strtol_l.constprop.0+0xb4>
 8016f18:	3c37      	subs	r4, #55	@ 0x37
 8016f1a:	e7de      	b.n	8016eda <_strtol_l.constprop.0+0x72>
 8016f1c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016f20:	2f19      	cmp	r7, #25
 8016f22:	d804      	bhi.n	8016f2e <_strtol_l.constprop.0+0xc6>
 8016f24:	3c57      	subs	r4, #87	@ 0x57
 8016f26:	e7d8      	b.n	8016eda <_strtol_l.constprop.0+0x72>
 8016f28:	f04f 32ff 	mov.w	r2, #4294967295
 8016f2c:	e7e1      	b.n	8016ef2 <_strtol_l.constprop.0+0x8a>
 8016f2e:	1c53      	adds	r3, r2, #1
 8016f30:	d108      	bne.n	8016f44 <_strtol_l.constprop.0+0xdc>
 8016f32:	2322      	movs	r3, #34	@ 0x22
 8016f34:	f8ce 3000 	str.w	r3, [lr]
 8016f38:	4660      	mov	r0, ip
 8016f3a:	f1b8 0f00 	cmp.w	r8, #0
 8016f3e:	d0a0      	beq.n	8016e82 <_strtol_l.constprop.0+0x1a>
 8016f40:	1e69      	subs	r1, r5, #1
 8016f42:	e006      	b.n	8016f52 <_strtol_l.constprop.0+0xea>
 8016f44:	b106      	cbz	r6, 8016f48 <_strtol_l.constprop.0+0xe0>
 8016f46:	4240      	negs	r0, r0
 8016f48:	f1b8 0f00 	cmp.w	r8, #0
 8016f4c:	d099      	beq.n	8016e82 <_strtol_l.constprop.0+0x1a>
 8016f4e:	2a00      	cmp	r2, #0
 8016f50:	d1f6      	bne.n	8016f40 <_strtol_l.constprop.0+0xd8>
 8016f52:	f8c8 1000 	str.w	r1, [r8]
 8016f56:	e794      	b.n	8016e82 <_strtol_l.constprop.0+0x1a>
 8016f58:	08054b62 	.word	0x08054b62

08016f5c <strtol>:
 8016f5c:	4613      	mov	r3, r2
 8016f5e:	460a      	mov	r2, r1
 8016f60:	4601      	mov	r1, r0
 8016f62:	4802      	ldr	r0, [pc, #8]	@ (8016f6c <strtol+0x10>)
 8016f64:	6800      	ldr	r0, [r0, #0]
 8016f66:	f7ff bf7f 	b.w	8016e68 <_strtol_l.constprop.0>
 8016f6a:	bf00      	nop
 8016f6c:	2000968c 	.word	0x2000968c

08016f70 <__cvt>:
 8016f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016f74:	ec57 6b10 	vmov	r6, r7, d0
 8016f78:	2f00      	cmp	r7, #0
 8016f7a:	460c      	mov	r4, r1
 8016f7c:	4619      	mov	r1, r3
 8016f7e:	463b      	mov	r3, r7
 8016f80:	bfbb      	ittet	lt
 8016f82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8016f86:	461f      	movlt	r7, r3
 8016f88:	2300      	movge	r3, #0
 8016f8a:	232d      	movlt	r3, #45	@ 0x2d
 8016f8c:	700b      	strb	r3, [r1, #0]
 8016f8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016f90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016f94:	4691      	mov	r9, r2
 8016f96:	f023 0820 	bic.w	r8, r3, #32
 8016f9a:	bfbc      	itt	lt
 8016f9c:	4632      	movlt	r2, r6
 8016f9e:	4616      	movlt	r6, r2
 8016fa0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016fa4:	d005      	beq.n	8016fb2 <__cvt+0x42>
 8016fa6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016faa:	d100      	bne.n	8016fae <__cvt+0x3e>
 8016fac:	3401      	adds	r4, #1
 8016fae:	2102      	movs	r1, #2
 8016fb0:	e000      	b.n	8016fb4 <__cvt+0x44>
 8016fb2:	2103      	movs	r1, #3
 8016fb4:	ab03      	add	r3, sp, #12
 8016fb6:	9301      	str	r3, [sp, #4]
 8016fb8:	ab02      	add	r3, sp, #8
 8016fba:	9300      	str	r3, [sp, #0]
 8016fbc:	ec47 6b10 	vmov	d0, r6, r7
 8016fc0:	4653      	mov	r3, sl
 8016fc2:	4622      	mov	r2, r4
 8016fc4:	f001 f800 	bl	8017fc8 <_dtoa_r>
 8016fc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016fcc:	4605      	mov	r5, r0
 8016fce:	d119      	bne.n	8017004 <__cvt+0x94>
 8016fd0:	f019 0f01 	tst.w	r9, #1
 8016fd4:	d00e      	beq.n	8016ff4 <__cvt+0x84>
 8016fd6:	eb00 0904 	add.w	r9, r0, r4
 8016fda:	2200      	movs	r2, #0
 8016fdc:	2300      	movs	r3, #0
 8016fde:	4630      	mov	r0, r6
 8016fe0:	4639      	mov	r1, r7
 8016fe2:	f7e9 fda1 	bl	8000b28 <__aeabi_dcmpeq>
 8016fe6:	b108      	cbz	r0, 8016fec <__cvt+0x7c>
 8016fe8:	f8cd 900c 	str.w	r9, [sp, #12]
 8016fec:	2230      	movs	r2, #48	@ 0x30
 8016fee:	9b03      	ldr	r3, [sp, #12]
 8016ff0:	454b      	cmp	r3, r9
 8016ff2:	d31e      	bcc.n	8017032 <__cvt+0xc2>
 8016ff4:	9b03      	ldr	r3, [sp, #12]
 8016ff6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016ff8:	1b5b      	subs	r3, r3, r5
 8016ffa:	4628      	mov	r0, r5
 8016ffc:	6013      	str	r3, [r2, #0]
 8016ffe:	b004      	add	sp, #16
 8017000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017004:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017008:	eb00 0904 	add.w	r9, r0, r4
 801700c:	d1e5      	bne.n	8016fda <__cvt+0x6a>
 801700e:	7803      	ldrb	r3, [r0, #0]
 8017010:	2b30      	cmp	r3, #48	@ 0x30
 8017012:	d10a      	bne.n	801702a <__cvt+0xba>
 8017014:	2200      	movs	r2, #0
 8017016:	2300      	movs	r3, #0
 8017018:	4630      	mov	r0, r6
 801701a:	4639      	mov	r1, r7
 801701c:	f7e9 fd84 	bl	8000b28 <__aeabi_dcmpeq>
 8017020:	b918      	cbnz	r0, 801702a <__cvt+0xba>
 8017022:	f1c4 0401 	rsb	r4, r4, #1
 8017026:	f8ca 4000 	str.w	r4, [sl]
 801702a:	f8da 3000 	ldr.w	r3, [sl]
 801702e:	4499      	add	r9, r3
 8017030:	e7d3      	b.n	8016fda <__cvt+0x6a>
 8017032:	1c59      	adds	r1, r3, #1
 8017034:	9103      	str	r1, [sp, #12]
 8017036:	701a      	strb	r2, [r3, #0]
 8017038:	e7d9      	b.n	8016fee <__cvt+0x7e>

0801703a <__exponent>:
 801703a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801703c:	2900      	cmp	r1, #0
 801703e:	bfba      	itte	lt
 8017040:	4249      	neglt	r1, r1
 8017042:	232d      	movlt	r3, #45	@ 0x2d
 8017044:	232b      	movge	r3, #43	@ 0x2b
 8017046:	2909      	cmp	r1, #9
 8017048:	7002      	strb	r2, [r0, #0]
 801704a:	7043      	strb	r3, [r0, #1]
 801704c:	dd29      	ble.n	80170a2 <__exponent+0x68>
 801704e:	f10d 0307 	add.w	r3, sp, #7
 8017052:	461d      	mov	r5, r3
 8017054:	270a      	movs	r7, #10
 8017056:	461a      	mov	r2, r3
 8017058:	fbb1 f6f7 	udiv	r6, r1, r7
 801705c:	fb07 1416 	mls	r4, r7, r6, r1
 8017060:	3430      	adds	r4, #48	@ 0x30
 8017062:	f802 4c01 	strb.w	r4, [r2, #-1]
 8017066:	460c      	mov	r4, r1
 8017068:	2c63      	cmp	r4, #99	@ 0x63
 801706a:	f103 33ff 	add.w	r3, r3, #4294967295
 801706e:	4631      	mov	r1, r6
 8017070:	dcf1      	bgt.n	8017056 <__exponent+0x1c>
 8017072:	3130      	adds	r1, #48	@ 0x30
 8017074:	1e94      	subs	r4, r2, #2
 8017076:	f803 1c01 	strb.w	r1, [r3, #-1]
 801707a:	1c41      	adds	r1, r0, #1
 801707c:	4623      	mov	r3, r4
 801707e:	42ab      	cmp	r3, r5
 8017080:	d30a      	bcc.n	8017098 <__exponent+0x5e>
 8017082:	f10d 0309 	add.w	r3, sp, #9
 8017086:	1a9b      	subs	r3, r3, r2
 8017088:	42ac      	cmp	r4, r5
 801708a:	bf88      	it	hi
 801708c:	2300      	movhi	r3, #0
 801708e:	3302      	adds	r3, #2
 8017090:	4403      	add	r3, r0
 8017092:	1a18      	subs	r0, r3, r0
 8017094:	b003      	add	sp, #12
 8017096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017098:	f813 6b01 	ldrb.w	r6, [r3], #1
 801709c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80170a0:	e7ed      	b.n	801707e <__exponent+0x44>
 80170a2:	2330      	movs	r3, #48	@ 0x30
 80170a4:	3130      	adds	r1, #48	@ 0x30
 80170a6:	7083      	strb	r3, [r0, #2]
 80170a8:	70c1      	strb	r1, [r0, #3]
 80170aa:	1d03      	adds	r3, r0, #4
 80170ac:	e7f1      	b.n	8017092 <__exponent+0x58>
	...

080170b0 <_printf_float>:
 80170b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170b4:	b08d      	sub	sp, #52	@ 0x34
 80170b6:	460c      	mov	r4, r1
 80170b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80170bc:	4616      	mov	r6, r2
 80170be:	461f      	mov	r7, r3
 80170c0:	4605      	mov	r5, r0
 80170c2:	f000 fe3b 	bl	8017d3c <_localeconv_r>
 80170c6:	6803      	ldr	r3, [r0, #0]
 80170c8:	9304      	str	r3, [sp, #16]
 80170ca:	4618      	mov	r0, r3
 80170cc:	f7e9 f900 	bl	80002d0 <strlen>
 80170d0:	2300      	movs	r3, #0
 80170d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80170d4:	f8d8 3000 	ldr.w	r3, [r8]
 80170d8:	9005      	str	r0, [sp, #20]
 80170da:	3307      	adds	r3, #7
 80170dc:	f023 0307 	bic.w	r3, r3, #7
 80170e0:	f103 0208 	add.w	r2, r3, #8
 80170e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80170e8:	f8d4 b000 	ldr.w	fp, [r4]
 80170ec:	f8c8 2000 	str.w	r2, [r8]
 80170f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80170f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80170f8:	9307      	str	r3, [sp, #28]
 80170fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80170fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8017102:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017106:	4b9c      	ldr	r3, [pc, #624]	@ (8017378 <_printf_float+0x2c8>)
 8017108:	f04f 32ff 	mov.w	r2, #4294967295
 801710c:	f7e9 fd3e 	bl	8000b8c <__aeabi_dcmpun>
 8017110:	bb70      	cbnz	r0, 8017170 <_printf_float+0xc0>
 8017112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017116:	4b98      	ldr	r3, [pc, #608]	@ (8017378 <_printf_float+0x2c8>)
 8017118:	f04f 32ff 	mov.w	r2, #4294967295
 801711c:	f7e9 fd18 	bl	8000b50 <__aeabi_dcmple>
 8017120:	bb30      	cbnz	r0, 8017170 <_printf_float+0xc0>
 8017122:	2200      	movs	r2, #0
 8017124:	2300      	movs	r3, #0
 8017126:	4640      	mov	r0, r8
 8017128:	4649      	mov	r1, r9
 801712a:	f7e9 fd07 	bl	8000b3c <__aeabi_dcmplt>
 801712e:	b110      	cbz	r0, 8017136 <_printf_float+0x86>
 8017130:	232d      	movs	r3, #45	@ 0x2d
 8017132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017136:	4a91      	ldr	r2, [pc, #580]	@ (801737c <_printf_float+0x2cc>)
 8017138:	4b91      	ldr	r3, [pc, #580]	@ (8017380 <_printf_float+0x2d0>)
 801713a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801713e:	bf94      	ite	ls
 8017140:	4690      	movls	r8, r2
 8017142:	4698      	movhi	r8, r3
 8017144:	2303      	movs	r3, #3
 8017146:	6123      	str	r3, [r4, #16]
 8017148:	f02b 0304 	bic.w	r3, fp, #4
 801714c:	6023      	str	r3, [r4, #0]
 801714e:	f04f 0900 	mov.w	r9, #0
 8017152:	9700      	str	r7, [sp, #0]
 8017154:	4633      	mov	r3, r6
 8017156:	aa0b      	add	r2, sp, #44	@ 0x2c
 8017158:	4621      	mov	r1, r4
 801715a:	4628      	mov	r0, r5
 801715c:	f000 f9d2 	bl	8017504 <_printf_common>
 8017160:	3001      	adds	r0, #1
 8017162:	f040 808d 	bne.w	8017280 <_printf_float+0x1d0>
 8017166:	f04f 30ff 	mov.w	r0, #4294967295
 801716a:	b00d      	add	sp, #52	@ 0x34
 801716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017170:	4642      	mov	r2, r8
 8017172:	464b      	mov	r3, r9
 8017174:	4640      	mov	r0, r8
 8017176:	4649      	mov	r1, r9
 8017178:	f7e9 fd08 	bl	8000b8c <__aeabi_dcmpun>
 801717c:	b140      	cbz	r0, 8017190 <_printf_float+0xe0>
 801717e:	464b      	mov	r3, r9
 8017180:	2b00      	cmp	r3, #0
 8017182:	bfbc      	itt	lt
 8017184:	232d      	movlt	r3, #45	@ 0x2d
 8017186:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801718a:	4a7e      	ldr	r2, [pc, #504]	@ (8017384 <_printf_float+0x2d4>)
 801718c:	4b7e      	ldr	r3, [pc, #504]	@ (8017388 <_printf_float+0x2d8>)
 801718e:	e7d4      	b.n	801713a <_printf_float+0x8a>
 8017190:	6863      	ldr	r3, [r4, #4]
 8017192:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8017196:	9206      	str	r2, [sp, #24]
 8017198:	1c5a      	adds	r2, r3, #1
 801719a:	d13b      	bne.n	8017214 <_printf_float+0x164>
 801719c:	2306      	movs	r3, #6
 801719e:	6063      	str	r3, [r4, #4]
 80171a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80171a4:	2300      	movs	r3, #0
 80171a6:	6022      	str	r2, [r4, #0]
 80171a8:	9303      	str	r3, [sp, #12]
 80171aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80171ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80171b0:	ab09      	add	r3, sp, #36	@ 0x24
 80171b2:	9300      	str	r3, [sp, #0]
 80171b4:	6861      	ldr	r1, [r4, #4]
 80171b6:	ec49 8b10 	vmov	d0, r8, r9
 80171ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80171be:	4628      	mov	r0, r5
 80171c0:	f7ff fed6 	bl	8016f70 <__cvt>
 80171c4:	9b06      	ldr	r3, [sp, #24]
 80171c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80171c8:	2b47      	cmp	r3, #71	@ 0x47
 80171ca:	4680      	mov	r8, r0
 80171cc:	d129      	bne.n	8017222 <_printf_float+0x172>
 80171ce:	1cc8      	adds	r0, r1, #3
 80171d0:	db02      	blt.n	80171d8 <_printf_float+0x128>
 80171d2:	6863      	ldr	r3, [r4, #4]
 80171d4:	4299      	cmp	r1, r3
 80171d6:	dd41      	ble.n	801725c <_printf_float+0x1ac>
 80171d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80171dc:	fa5f fa8a 	uxtb.w	sl, sl
 80171e0:	3901      	subs	r1, #1
 80171e2:	4652      	mov	r2, sl
 80171e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80171e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80171ea:	f7ff ff26 	bl	801703a <__exponent>
 80171ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80171f0:	1813      	adds	r3, r2, r0
 80171f2:	2a01      	cmp	r2, #1
 80171f4:	4681      	mov	r9, r0
 80171f6:	6123      	str	r3, [r4, #16]
 80171f8:	dc02      	bgt.n	8017200 <_printf_float+0x150>
 80171fa:	6822      	ldr	r2, [r4, #0]
 80171fc:	07d2      	lsls	r2, r2, #31
 80171fe:	d501      	bpl.n	8017204 <_printf_float+0x154>
 8017200:	3301      	adds	r3, #1
 8017202:	6123      	str	r3, [r4, #16]
 8017204:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017208:	2b00      	cmp	r3, #0
 801720a:	d0a2      	beq.n	8017152 <_printf_float+0xa2>
 801720c:	232d      	movs	r3, #45	@ 0x2d
 801720e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017212:	e79e      	b.n	8017152 <_printf_float+0xa2>
 8017214:	9a06      	ldr	r2, [sp, #24]
 8017216:	2a47      	cmp	r2, #71	@ 0x47
 8017218:	d1c2      	bne.n	80171a0 <_printf_float+0xf0>
 801721a:	2b00      	cmp	r3, #0
 801721c:	d1c0      	bne.n	80171a0 <_printf_float+0xf0>
 801721e:	2301      	movs	r3, #1
 8017220:	e7bd      	b.n	801719e <_printf_float+0xee>
 8017222:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017226:	d9db      	bls.n	80171e0 <_printf_float+0x130>
 8017228:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801722c:	d118      	bne.n	8017260 <_printf_float+0x1b0>
 801722e:	2900      	cmp	r1, #0
 8017230:	6863      	ldr	r3, [r4, #4]
 8017232:	dd0b      	ble.n	801724c <_printf_float+0x19c>
 8017234:	6121      	str	r1, [r4, #16]
 8017236:	b913      	cbnz	r3, 801723e <_printf_float+0x18e>
 8017238:	6822      	ldr	r2, [r4, #0]
 801723a:	07d0      	lsls	r0, r2, #31
 801723c:	d502      	bpl.n	8017244 <_printf_float+0x194>
 801723e:	3301      	adds	r3, #1
 8017240:	440b      	add	r3, r1
 8017242:	6123      	str	r3, [r4, #16]
 8017244:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017246:	f04f 0900 	mov.w	r9, #0
 801724a:	e7db      	b.n	8017204 <_printf_float+0x154>
 801724c:	b913      	cbnz	r3, 8017254 <_printf_float+0x1a4>
 801724e:	6822      	ldr	r2, [r4, #0]
 8017250:	07d2      	lsls	r2, r2, #31
 8017252:	d501      	bpl.n	8017258 <_printf_float+0x1a8>
 8017254:	3302      	adds	r3, #2
 8017256:	e7f4      	b.n	8017242 <_printf_float+0x192>
 8017258:	2301      	movs	r3, #1
 801725a:	e7f2      	b.n	8017242 <_printf_float+0x192>
 801725c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8017260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017262:	4299      	cmp	r1, r3
 8017264:	db05      	blt.n	8017272 <_printf_float+0x1c2>
 8017266:	6823      	ldr	r3, [r4, #0]
 8017268:	6121      	str	r1, [r4, #16]
 801726a:	07d8      	lsls	r0, r3, #31
 801726c:	d5ea      	bpl.n	8017244 <_printf_float+0x194>
 801726e:	1c4b      	adds	r3, r1, #1
 8017270:	e7e7      	b.n	8017242 <_printf_float+0x192>
 8017272:	2900      	cmp	r1, #0
 8017274:	bfd4      	ite	le
 8017276:	f1c1 0202 	rsble	r2, r1, #2
 801727a:	2201      	movgt	r2, #1
 801727c:	4413      	add	r3, r2
 801727e:	e7e0      	b.n	8017242 <_printf_float+0x192>
 8017280:	6823      	ldr	r3, [r4, #0]
 8017282:	055a      	lsls	r2, r3, #21
 8017284:	d407      	bmi.n	8017296 <_printf_float+0x1e6>
 8017286:	6923      	ldr	r3, [r4, #16]
 8017288:	4642      	mov	r2, r8
 801728a:	4631      	mov	r1, r6
 801728c:	4628      	mov	r0, r5
 801728e:	47b8      	blx	r7
 8017290:	3001      	adds	r0, #1
 8017292:	d12b      	bne.n	80172ec <_printf_float+0x23c>
 8017294:	e767      	b.n	8017166 <_printf_float+0xb6>
 8017296:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801729a:	f240 80dd 	bls.w	8017458 <_printf_float+0x3a8>
 801729e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80172a2:	2200      	movs	r2, #0
 80172a4:	2300      	movs	r3, #0
 80172a6:	f7e9 fc3f 	bl	8000b28 <__aeabi_dcmpeq>
 80172aa:	2800      	cmp	r0, #0
 80172ac:	d033      	beq.n	8017316 <_printf_float+0x266>
 80172ae:	4a37      	ldr	r2, [pc, #220]	@ (801738c <_printf_float+0x2dc>)
 80172b0:	2301      	movs	r3, #1
 80172b2:	4631      	mov	r1, r6
 80172b4:	4628      	mov	r0, r5
 80172b6:	47b8      	blx	r7
 80172b8:	3001      	adds	r0, #1
 80172ba:	f43f af54 	beq.w	8017166 <_printf_float+0xb6>
 80172be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80172c2:	4543      	cmp	r3, r8
 80172c4:	db02      	blt.n	80172cc <_printf_float+0x21c>
 80172c6:	6823      	ldr	r3, [r4, #0]
 80172c8:	07d8      	lsls	r0, r3, #31
 80172ca:	d50f      	bpl.n	80172ec <_printf_float+0x23c>
 80172cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80172d0:	4631      	mov	r1, r6
 80172d2:	4628      	mov	r0, r5
 80172d4:	47b8      	blx	r7
 80172d6:	3001      	adds	r0, #1
 80172d8:	f43f af45 	beq.w	8017166 <_printf_float+0xb6>
 80172dc:	f04f 0900 	mov.w	r9, #0
 80172e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80172e4:	f104 0a1a 	add.w	sl, r4, #26
 80172e8:	45c8      	cmp	r8, r9
 80172ea:	dc09      	bgt.n	8017300 <_printf_float+0x250>
 80172ec:	6823      	ldr	r3, [r4, #0]
 80172ee:	079b      	lsls	r3, r3, #30
 80172f0:	f100 8103 	bmi.w	80174fa <_printf_float+0x44a>
 80172f4:	68e0      	ldr	r0, [r4, #12]
 80172f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80172f8:	4298      	cmp	r0, r3
 80172fa:	bfb8      	it	lt
 80172fc:	4618      	movlt	r0, r3
 80172fe:	e734      	b.n	801716a <_printf_float+0xba>
 8017300:	2301      	movs	r3, #1
 8017302:	4652      	mov	r2, sl
 8017304:	4631      	mov	r1, r6
 8017306:	4628      	mov	r0, r5
 8017308:	47b8      	blx	r7
 801730a:	3001      	adds	r0, #1
 801730c:	f43f af2b 	beq.w	8017166 <_printf_float+0xb6>
 8017310:	f109 0901 	add.w	r9, r9, #1
 8017314:	e7e8      	b.n	80172e8 <_printf_float+0x238>
 8017316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017318:	2b00      	cmp	r3, #0
 801731a:	dc39      	bgt.n	8017390 <_printf_float+0x2e0>
 801731c:	4a1b      	ldr	r2, [pc, #108]	@ (801738c <_printf_float+0x2dc>)
 801731e:	2301      	movs	r3, #1
 8017320:	4631      	mov	r1, r6
 8017322:	4628      	mov	r0, r5
 8017324:	47b8      	blx	r7
 8017326:	3001      	adds	r0, #1
 8017328:	f43f af1d 	beq.w	8017166 <_printf_float+0xb6>
 801732c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017330:	ea59 0303 	orrs.w	r3, r9, r3
 8017334:	d102      	bne.n	801733c <_printf_float+0x28c>
 8017336:	6823      	ldr	r3, [r4, #0]
 8017338:	07d9      	lsls	r1, r3, #31
 801733a:	d5d7      	bpl.n	80172ec <_printf_float+0x23c>
 801733c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017340:	4631      	mov	r1, r6
 8017342:	4628      	mov	r0, r5
 8017344:	47b8      	blx	r7
 8017346:	3001      	adds	r0, #1
 8017348:	f43f af0d 	beq.w	8017166 <_printf_float+0xb6>
 801734c:	f04f 0a00 	mov.w	sl, #0
 8017350:	f104 0b1a 	add.w	fp, r4, #26
 8017354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017356:	425b      	negs	r3, r3
 8017358:	4553      	cmp	r3, sl
 801735a:	dc01      	bgt.n	8017360 <_printf_float+0x2b0>
 801735c:	464b      	mov	r3, r9
 801735e:	e793      	b.n	8017288 <_printf_float+0x1d8>
 8017360:	2301      	movs	r3, #1
 8017362:	465a      	mov	r2, fp
 8017364:	4631      	mov	r1, r6
 8017366:	4628      	mov	r0, r5
 8017368:	47b8      	blx	r7
 801736a:	3001      	adds	r0, #1
 801736c:	f43f aefb 	beq.w	8017166 <_printf_float+0xb6>
 8017370:	f10a 0a01 	add.w	sl, sl, #1
 8017374:	e7ee      	b.n	8017354 <_printf_float+0x2a4>
 8017376:	bf00      	nop
 8017378:	7fefffff 	.word	0x7fefffff
 801737c:	08054c62 	.word	0x08054c62
 8017380:	08054c66 	.word	0x08054c66
 8017384:	08054c6a 	.word	0x08054c6a
 8017388:	08054c6e 	.word	0x08054c6e
 801738c:	08054c72 	.word	0x08054c72
 8017390:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017392:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017396:	4553      	cmp	r3, sl
 8017398:	bfa8      	it	ge
 801739a:	4653      	movge	r3, sl
 801739c:	2b00      	cmp	r3, #0
 801739e:	4699      	mov	r9, r3
 80173a0:	dc36      	bgt.n	8017410 <_printf_float+0x360>
 80173a2:	f04f 0b00 	mov.w	fp, #0
 80173a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80173aa:	f104 021a 	add.w	r2, r4, #26
 80173ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80173b0:	9306      	str	r3, [sp, #24]
 80173b2:	eba3 0309 	sub.w	r3, r3, r9
 80173b6:	455b      	cmp	r3, fp
 80173b8:	dc31      	bgt.n	801741e <_printf_float+0x36e>
 80173ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173bc:	459a      	cmp	sl, r3
 80173be:	dc3a      	bgt.n	8017436 <_printf_float+0x386>
 80173c0:	6823      	ldr	r3, [r4, #0]
 80173c2:	07da      	lsls	r2, r3, #31
 80173c4:	d437      	bmi.n	8017436 <_printf_float+0x386>
 80173c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173c8:	ebaa 0903 	sub.w	r9, sl, r3
 80173cc:	9b06      	ldr	r3, [sp, #24]
 80173ce:	ebaa 0303 	sub.w	r3, sl, r3
 80173d2:	4599      	cmp	r9, r3
 80173d4:	bfa8      	it	ge
 80173d6:	4699      	movge	r9, r3
 80173d8:	f1b9 0f00 	cmp.w	r9, #0
 80173dc:	dc33      	bgt.n	8017446 <_printf_float+0x396>
 80173de:	f04f 0800 	mov.w	r8, #0
 80173e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80173e6:	f104 0b1a 	add.w	fp, r4, #26
 80173ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173ec:	ebaa 0303 	sub.w	r3, sl, r3
 80173f0:	eba3 0309 	sub.w	r3, r3, r9
 80173f4:	4543      	cmp	r3, r8
 80173f6:	f77f af79 	ble.w	80172ec <_printf_float+0x23c>
 80173fa:	2301      	movs	r3, #1
 80173fc:	465a      	mov	r2, fp
 80173fe:	4631      	mov	r1, r6
 8017400:	4628      	mov	r0, r5
 8017402:	47b8      	blx	r7
 8017404:	3001      	adds	r0, #1
 8017406:	f43f aeae 	beq.w	8017166 <_printf_float+0xb6>
 801740a:	f108 0801 	add.w	r8, r8, #1
 801740e:	e7ec      	b.n	80173ea <_printf_float+0x33a>
 8017410:	4642      	mov	r2, r8
 8017412:	4631      	mov	r1, r6
 8017414:	4628      	mov	r0, r5
 8017416:	47b8      	blx	r7
 8017418:	3001      	adds	r0, #1
 801741a:	d1c2      	bne.n	80173a2 <_printf_float+0x2f2>
 801741c:	e6a3      	b.n	8017166 <_printf_float+0xb6>
 801741e:	2301      	movs	r3, #1
 8017420:	4631      	mov	r1, r6
 8017422:	4628      	mov	r0, r5
 8017424:	9206      	str	r2, [sp, #24]
 8017426:	47b8      	blx	r7
 8017428:	3001      	adds	r0, #1
 801742a:	f43f ae9c 	beq.w	8017166 <_printf_float+0xb6>
 801742e:	9a06      	ldr	r2, [sp, #24]
 8017430:	f10b 0b01 	add.w	fp, fp, #1
 8017434:	e7bb      	b.n	80173ae <_printf_float+0x2fe>
 8017436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801743a:	4631      	mov	r1, r6
 801743c:	4628      	mov	r0, r5
 801743e:	47b8      	blx	r7
 8017440:	3001      	adds	r0, #1
 8017442:	d1c0      	bne.n	80173c6 <_printf_float+0x316>
 8017444:	e68f      	b.n	8017166 <_printf_float+0xb6>
 8017446:	9a06      	ldr	r2, [sp, #24]
 8017448:	464b      	mov	r3, r9
 801744a:	4442      	add	r2, r8
 801744c:	4631      	mov	r1, r6
 801744e:	4628      	mov	r0, r5
 8017450:	47b8      	blx	r7
 8017452:	3001      	adds	r0, #1
 8017454:	d1c3      	bne.n	80173de <_printf_float+0x32e>
 8017456:	e686      	b.n	8017166 <_printf_float+0xb6>
 8017458:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801745c:	f1ba 0f01 	cmp.w	sl, #1
 8017460:	dc01      	bgt.n	8017466 <_printf_float+0x3b6>
 8017462:	07db      	lsls	r3, r3, #31
 8017464:	d536      	bpl.n	80174d4 <_printf_float+0x424>
 8017466:	2301      	movs	r3, #1
 8017468:	4642      	mov	r2, r8
 801746a:	4631      	mov	r1, r6
 801746c:	4628      	mov	r0, r5
 801746e:	47b8      	blx	r7
 8017470:	3001      	adds	r0, #1
 8017472:	f43f ae78 	beq.w	8017166 <_printf_float+0xb6>
 8017476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801747a:	4631      	mov	r1, r6
 801747c:	4628      	mov	r0, r5
 801747e:	47b8      	blx	r7
 8017480:	3001      	adds	r0, #1
 8017482:	f43f ae70 	beq.w	8017166 <_printf_float+0xb6>
 8017486:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801748a:	2200      	movs	r2, #0
 801748c:	2300      	movs	r3, #0
 801748e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017492:	f7e9 fb49 	bl	8000b28 <__aeabi_dcmpeq>
 8017496:	b9c0      	cbnz	r0, 80174ca <_printf_float+0x41a>
 8017498:	4653      	mov	r3, sl
 801749a:	f108 0201 	add.w	r2, r8, #1
 801749e:	4631      	mov	r1, r6
 80174a0:	4628      	mov	r0, r5
 80174a2:	47b8      	blx	r7
 80174a4:	3001      	adds	r0, #1
 80174a6:	d10c      	bne.n	80174c2 <_printf_float+0x412>
 80174a8:	e65d      	b.n	8017166 <_printf_float+0xb6>
 80174aa:	2301      	movs	r3, #1
 80174ac:	465a      	mov	r2, fp
 80174ae:	4631      	mov	r1, r6
 80174b0:	4628      	mov	r0, r5
 80174b2:	47b8      	blx	r7
 80174b4:	3001      	adds	r0, #1
 80174b6:	f43f ae56 	beq.w	8017166 <_printf_float+0xb6>
 80174ba:	f108 0801 	add.w	r8, r8, #1
 80174be:	45d0      	cmp	r8, sl
 80174c0:	dbf3      	blt.n	80174aa <_printf_float+0x3fa>
 80174c2:	464b      	mov	r3, r9
 80174c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80174c8:	e6df      	b.n	801728a <_printf_float+0x1da>
 80174ca:	f04f 0800 	mov.w	r8, #0
 80174ce:	f104 0b1a 	add.w	fp, r4, #26
 80174d2:	e7f4      	b.n	80174be <_printf_float+0x40e>
 80174d4:	2301      	movs	r3, #1
 80174d6:	4642      	mov	r2, r8
 80174d8:	e7e1      	b.n	801749e <_printf_float+0x3ee>
 80174da:	2301      	movs	r3, #1
 80174dc:	464a      	mov	r2, r9
 80174de:	4631      	mov	r1, r6
 80174e0:	4628      	mov	r0, r5
 80174e2:	47b8      	blx	r7
 80174e4:	3001      	adds	r0, #1
 80174e6:	f43f ae3e 	beq.w	8017166 <_printf_float+0xb6>
 80174ea:	f108 0801 	add.w	r8, r8, #1
 80174ee:	68e3      	ldr	r3, [r4, #12]
 80174f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80174f2:	1a5b      	subs	r3, r3, r1
 80174f4:	4543      	cmp	r3, r8
 80174f6:	dcf0      	bgt.n	80174da <_printf_float+0x42a>
 80174f8:	e6fc      	b.n	80172f4 <_printf_float+0x244>
 80174fa:	f04f 0800 	mov.w	r8, #0
 80174fe:	f104 0919 	add.w	r9, r4, #25
 8017502:	e7f4      	b.n	80174ee <_printf_float+0x43e>

08017504 <_printf_common>:
 8017504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017508:	4616      	mov	r6, r2
 801750a:	4698      	mov	r8, r3
 801750c:	688a      	ldr	r2, [r1, #8]
 801750e:	690b      	ldr	r3, [r1, #16]
 8017510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017514:	4293      	cmp	r3, r2
 8017516:	bfb8      	it	lt
 8017518:	4613      	movlt	r3, r2
 801751a:	6033      	str	r3, [r6, #0]
 801751c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017520:	4607      	mov	r7, r0
 8017522:	460c      	mov	r4, r1
 8017524:	b10a      	cbz	r2, 801752a <_printf_common+0x26>
 8017526:	3301      	adds	r3, #1
 8017528:	6033      	str	r3, [r6, #0]
 801752a:	6823      	ldr	r3, [r4, #0]
 801752c:	0699      	lsls	r1, r3, #26
 801752e:	bf42      	ittt	mi
 8017530:	6833      	ldrmi	r3, [r6, #0]
 8017532:	3302      	addmi	r3, #2
 8017534:	6033      	strmi	r3, [r6, #0]
 8017536:	6825      	ldr	r5, [r4, #0]
 8017538:	f015 0506 	ands.w	r5, r5, #6
 801753c:	d106      	bne.n	801754c <_printf_common+0x48>
 801753e:	f104 0a19 	add.w	sl, r4, #25
 8017542:	68e3      	ldr	r3, [r4, #12]
 8017544:	6832      	ldr	r2, [r6, #0]
 8017546:	1a9b      	subs	r3, r3, r2
 8017548:	42ab      	cmp	r3, r5
 801754a:	dc26      	bgt.n	801759a <_printf_common+0x96>
 801754c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017550:	6822      	ldr	r2, [r4, #0]
 8017552:	3b00      	subs	r3, #0
 8017554:	bf18      	it	ne
 8017556:	2301      	movne	r3, #1
 8017558:	0692      	lsls	r2, r2, #26
 801755a:	d42b      	bmi.n	80175b4 <_printf_common+0xb0>
 801755c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017560:	4641      	mov	r1, r8
 8017562:	4638      	mov	r0, r7
 8017564:	47c8      	blx	r9
 8017566:	3001      	adds	r0, #1
 8017568:	d01e      	beq.n	80175a8 <_printf_common+0xa4>
 801756a:	6823      	ldr	r3, [r4, #0]
 801756c:	6922      	ldr	r2, [r4, #16]
 801756e:	f003 0306 	and.w	r3, r3, #6
 8017572:	2b04      	cmp	r3, #4
 8017574:	bf02      	ittt	eq
 8017576:	68e5      	ldreq	r5, [r4, #12]
 8017578:	6833      	ldreq	r3, [r6, #0]
 801757a:	1aed      	subeq	r5, r5, r3
 801757c:	68a3      	ldr	r3, [r4, #8]
 801757e:	bf0c      	ite	eq
 8017580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017584:	2500      	movne	r5, #0
 8017586:	4293      	cmp	r3, r2
 8017588:	bfc4      	itt	gt
 801758a:	1a9b      	subgt	r3, r3, r2
 801758c:	18ed      	addgt	r5, r5, r3
 801758e:	2600      	movs	r6, #0
 8017590:	341a      	adds	r4, #26
 8017592:	42b5      	cmp	r5, r6
 8017594:	d11a      	bne.n	80175cc <_printf_common+0xc8>
 8017596:	2000      	movs	r0, #0
 8017598:	e008      	b.n	80175ac <_printf_common+0xa8>
 801759a:	2301      	movs	r3, #1
 801759c:	4652      	mov	r2, sl
 801759e:	4641      	mov	r1, r8
 80175a0:	4638      	mov	r0, r7
 80175a2:	47c8      	blx	r9
 80175a4:	3001      	adds	r0, #1
 80175a6:	d103      	bne.n	80175b0 <_printf_common+0xac>
 80175a8:	f04f 30ff 	mov.w	r0, #4294967295
 80175ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175b0:	3501      	adds	r5, #1
 80175b2:	e7c6      	b.n	8017542 <_printf_common+0x3e>
 80175b4:	18e1      	adds	r1, r4, r3
 80175b6:	1c5a      	adds	r2, r3, #1
 80175b8:	2030      	movs	r0, #48	@ 0x30
 80175ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80175be:	4422      	add	r2, r4
 80175c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80175c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80175c8:	3302      	adds	r3, #2
 80175ca:	e7c7      	b.n	801755c <_printf_common+0x58>
 80175cc:	2301      	movs	r3, #1
 80175ce:	4622      	mov	r2, r4
 80175d0:	4641      	mov	r1, r8
 80175d2:	4638      	mov	r0, r7
 80175d4:	47c8      	blx	r9
 80175d6:	3001      	adds	r0, #1
 80175d8:	d0e6      	beq.n	80175a8 <_printf_common+0xa4>
 80175da:	3601      	adds	r6, #1
 80175dc:	e7d9      	b.n	8017592 <_printf_common+0x8e>
	...

080175e0 <_printf_i>:
 80175e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80175e4:	7e0f      	ldrb	r7, [r1, #24]
 80175e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80175e8:	2f78      	cmp	r7, #120	@ 0x78
 80175ea:	4691      	mov	r9, r2
 80175ec:	4680      	mov	r8, r0
 80175ee:	460c      	mov	r4, r1
 80175f0:	469a      	mov	sl, r3
 80175f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80175f6:	d807      	bhi.n	8017608 <_printf_i+0x28>
 80175f8:	2f62      	cmp	r7, #98	@ 0x62
 80175fa:	d80a      	bhi.n	8017612 <_printf_i+0x32>
 80175fc:	2f00      	cmp	r7, #0
 80175fe:	f000 80d2 	beq.w	80177a6 <_printf_i+0x1c6>
 8017602:	2f58      	cmp	r7, #88	@ 0x58
 8017604:	f000 80b9 	beq.w	801777a <_printf_i+0x19a>
 8017608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801760c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017610:	e03a      	b.n	8017688 <_printf_i+0xa8>
 8017612:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017616:	2b15      	cmp	r3, #21
 8017618:	d8f6      	bhi.n	8017608 <_printf_i+0x28>
 801761a:	a101      	add	r1, pc, #4	@ (adr r1, 8017620 <_printf_i+0x40>)
 801761c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017620:	08017679 	.word	0x08017679
 8017624:	0801768d 	.word	0x0801768d
 8017628:	08017609 	.word	0x08017609
 801762c:	08017609 	.word	0x08017609
 8017630:	08017609 	.word	0x08017609
 8017634:	08017609 	.word	0x08017609
 8017638:	0801768d 	.word	0x0801768d
 801763c:	08017609 	.word	0x08017609
 8017640:	08017609 	.word	0x08017609
 8017644:	08017609 	.word	0x08017609
 8017648:	08017609 	.word	0x08017609
 801764c:	0801778d 	.word	0x0801778d
 8017650:	080176b7 	.word	0x080176b7
 8017654:	08017747 	.word	0x08017747
 8017658:	08017609 	.word	0x08017609
 801765c:	08017609 	.word	0x08017609
 8017660:	080177af 	.word	0x080177af
 8017664:	08017609 	.word	0x08017609
 8017668:	080176b7 	.word	0x080176b7
 801766c:	08017609 	.word	0x08017609
 8017670:	08017609 	.word	0x08017609
 8017674:	0801774f 	.word	0x0801774f
 8017678:	6833      	ldr	r3, [r6, #0]
 801767a:	1d1a      	adds	r2, r3, #4
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	6032      	str	r2, [r6, #0]
 8017680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017684:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017688:	2301      	movs	r3, #1
 801768a:	e09d      	b.n	80177c8 <_printf_i+0x1e8>
 801768c:	6833      	ldr	r3, [r6, #0]
 801768e:	6820      	ldr	r0, [r4, #0]
 8017690:	1d19      	adds	r1, r3, #4
 8017692:	6031      	str	r1, [r6, #0]
 8017694:	0606      	lsls	r6, r0, #24
 8017696:	d501      	bpl.n	801769c <_printf_i+0xbc>
 8017698:	681d      	ldr	r5, [r3, #0]
 801769a:	e003      	b.n	80176a4 <_printf_i+0xc4>
 801769c:	0645      	lsls	r5, r0, #25
 801769e:	d5fb      	bpl.n	8017698 <_printf_i+0xb8>
 80176a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80176a4:	2d00      	cmp	r5, #0
 80176a6:	da03      	bge.n	80176b0 <_printf_i+0xd0>
 80176a8:	232d      	movs	r3, #45	@ 0x2d
 80176aa:	426d      	negs	r5, r5
 80176ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80176b0:	4859      	ldr	r0, [pc, #356]	@ (8017818 <_printf_i+0x238>)
 80176b2:	230a      	movs	r3, #10
 80176b4:	e011      	b.n	80176da <_printf_i+0xfa>
 80176b6:	6821      	ldr	r1, [r4, #0]
 80176b8:	6833      	ldr	r3, [r6, #0]
 80176ba:	0608      	lsls	r0, r1, #24
 80176bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80176c0:	d402      	bmi.n	80176c8 <_printf_i+0xe8>
 80176c2:	0649      	lsls	r1, r1, #25
 80176c4:	bf48      	it	mi
 80176c6:	b2ad      	uxthmi	r5, r5
 80176c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80176ca:	4853      	ldr	r0, [pc, #332]	@ (8017818 <_printf_i+0x238>)
 80176cc:	6033      	str	r3, [r6, #0]
 80176ce:	bf14      	ite	ne
 80176d0:	230a      	movne	r3, #10
 80176d2:	2308      	moveq	r3, #8
 80176d4:	2100      	movs	r1, #0
 80176d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80176da:	6866      	ldr	r6, [r4, #4]
 80176dc:	60a6      	str	r6, [r4, #8]
 80176de:	2e00      	cmp	r6, #0
 80176e0:	bfa2      	ittt	ge
 80176e2:	6821      	ldrge	r1, [r4, #0]
 80176e4:	f021 0104 	bicge.w	r1, r1, #4
 80176e8:	6021      	strge	r1, [r4, #0]
 80176ea:	b90d      	cbnz	r5, 80176f0 <_printf_i+0x110>
 80176ec:	2e00      	cmp	r6, #0
 80176ee:	d04b      	beq.n	8017788 <_printf_i+0x1a8>
 80176f0:	4616      	mov	r6, r2
 80176f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80176f6:	fb03 5711 	mls	r7, r3, r1, r5
 80176fa:	5dc7      	ldrb	r7, [r0, r7]
 80176fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017700:	462f      	mov	r7, r5
 8017702:	42bb      	cmp	r3, r7
 8017704:	460d      	mov	r5, r1
 8017706:	d9f4      	bls.n	80176f2 <_printf_i+0x112>
 8017708:	2b08      	cmp	r3, #8
 801770a:	d10b      	bne.n	8017724 <_printf_i+0x144>
 801770c:	6823      	ldr	r3, [r4, #0]
 801770e:	07df      	lsls	r7, r3, #31
 8017710:	d508      	bpl.n	8017724 <_printf_i+0x144>
 8017712:	6923      	ldr	r3, [r4, #16]
 8017714:	6861      	ldr	r1, [r4, #4]
 8017716:	4299      	cmp	r1, r3
 8017718:	bfde      	ittt	le
 801771a:	2330      	movle	r3, #48	@ 0x30
 801771c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017720:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017724:	1b92      	subs	r2, r2, r6
 8017726:	6122      	str	r2, [r4, #16]
 8017728:	f8cd a000 	str.w	sl, [sp]
 801772c:	464b      	mov	r3, r9
 801772e:	aa03      	add	r2, sp, #12
 8017730:	4621      	mov	r1, r4
 8017732:	4640      	mov	r0, r8
 8017734:	f7ff fee6 	bl	8017504 <_printf_common>
 8017738:	3001      	adds	r0, #1
 801773a:	d14a      	bne.n	80177d2 <_printf_i+0x1f2>
 801773c:	f04f 30ff 	mov.w	r0, #4294967295
 8017740:	b004      	add	sp, #16
 8017742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017746:	6823      	ldr	r3, [r4, #0]
 8017748:	f043 0320 	orr.w	r3, r3, #32
 801774c:	6023      	str	r3, [r4, #0]
 801774e:	4833      	ldr	r0, [pc, #204]	@ (801781c <_printf_i+0x23c>)
 8017750:	2778      	movs	r7, #120	@ 0x78
 8017752:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017756:	6823      	ldr	r3, [r4, #0]
 8017758:	6831      	ldr	r1, [r6, #0]
 801775a:	061f      	lsls	r7, r3, #24
 801775c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017760:	d402      	bmi.n	8017768 <_printf_i+0x188>
 8017762:	065f      	lsls	r7, r3, #25
 8017764:	bf48      	it	mi
 8017766:	b2ad      	uxthmi	r5, r5
 8017768:	6031      	str	r1, [r6, #0]
 801776a:	07d9      	lsls	r1, r3, #31
 801776c:	bf44      	itt	mi
 801776e:	f043 0320 	orrmi.w	r3, r3, #32
 8017772:	6023      	strmi	r3, [r4, #0]
 8017774:	b11d      	cbz	r5, 801777e <_printf_i+0x19e>
 8017776:	2310      	movs	r3, #16
 8017778:	e7ac      	b.n	80176d4 <_printf_i+0xf4>
 801777a:	4827      	ldr	r0, [pc, #156]	@ (8017818 <_printf_i+0x238>)
 801777c:	e7e9      	b.n	8017752 <_printf_i+0x172>
 801777e:	6823      	ldr	r3, [r4, #0]
 8017780:	f023 0320 	bic.w	r3, r3, #32
 8017784:	6023      	str	r3, [r4, #0]
 8017786:	e7f6      	b.n	8017776 <_printf_i+0x196>
 8017788:	4616      	mov	r6, r2
 801778a:	e7bd      	b.n	8017708 <_printf_i+0x128>
 801778c:	6833      	ldr	r3, [r6, #0]
 801778e:	6825      	ldr	r5, [r4, #0]
 8017790:	6961      	ldr	r1, [r4, #20]
 8017792:	1d18      	adds	r0, r3, #4
 8017794:	6030      	str	r0, [r6, #0]
 8017796:	062e      	lsls	r6, r5, #24
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	d501      	bpl.n	80177a0 <_printf_i+0x1c0>
 801779c:	6019      	str	r1, [r3, #0]
 801779e:	e002      	b.n	80177a6 <_printf_i+0x1c6>
 80177a0:	0668      	lsls	r0, r5, #25
 80177a2:	d5fb      	bpl.n	801779c <_printf_i+0x1bc>
 80177a4:	8019      	strh	r1, [r3, #0]
 80177a6:	2300      	movs	r3, #0
 80177a8:	6123      	str	r3, [r4, #16]
 80177aa:	4616      	mov	r6, r2
 80177ac:	e7bc      	b.n	8017728 <_printf_i+0x148>
 80177ae:	6833      	ldr	r3, [r6, #0]
 80177b0:	1d1a      	adds	r2, r3, #4
 80177b2:	6032      	str	r2, [r6, #0]
 80177b4:	681e      	ldr	r6, [r3, #0]
 80177b6:	6862      	ldr	r2, [r4, #4]
 80177b8:	2100      	movs	r1, #0
 80177ba:	4630      	mov	r0, r6
 80177bc:	f7e8 fd38 	bl	8000230 <memchr>
 80177c0:	b108      	cbz	r0, 80177c6 <_printf_i+0x1e6>
 80177c2:	1b80      	subs	r0, r0, r6
 80177c4:	6060      	str	r0, [r4, #4]
 80177c6:	6863      	ldr	r3, [r4, #4]
 80177c8:	6123      	str	r3, [r4, #16]
 80177ca:	2300      	movs	r3, #0
 80177cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80177d0:	e7aa      	b.n	8017728 <_printf_i+0x148>
 80177d2:	6923      	ldr	r3, [r4, #16]
 80177d4:	4632      	mov	r2, r6
 80177d6:	4649      	mov	r1, r9
 80177d8:	4640      	mov	r0, r8
 80177da:	47d0      	blx	sl
 80177dc:	3001      	adds	r0, #1
 80177de:	d0ad      	beq.n	801773c <_printf_i+0x15c>
 80177e0:	6823      	ldr	r3, [r4, #0]
 80177e2:	079b      	lsls	r3, r3, #30
 80177e4:	d413      	bmi.n	801780e <_printf_i+0x22e>
 80177e6:	68e0      	ldr	r0, [r4, #12]
 80177e8:	9b03      	ldr	r3, [sp, #12]
 80177ea:	4298      	cmp	r0, r3
 80177ec:	bfb8      	it	lt
 80177ee:	4618      	movlt	r0, r3
 80177f0:	e7a6      	b.n	8017740 <_printf_i+0x160>
 80177f2:	2301      	movs	r3, #1
 80177f4:	4632      	mov	r2, r6
 80177f6:	4649      	mov	r1, r9
 80177f8:	4640      	mov	r0, r8
 80177fa:	47d0      	blx	sl
 80177fc:	3001      	adds	r0, #1
 80177fe:	d09d      	beq.n	801773c <_printf_i+0x15c>
 8017800:	3501      	adds	r5, #1
 8017802:	68e3      	ldr	r3, [r4, #12]
 8017804:	9903      	ldr	r1, [sp, #12]
 8017806:	1a5b      	subs	r3, r3, r1
 8017808:	42ab      	cmp	r3, r5
 801780a:	dcf2      	bgt.n	80177f2 <_printf_i+0x212>
 801780c:	e7eb      	b.n	80177e6 <_printf_i+0x206>
 801780e:	2500      	movs	r5, #0
 8017810:	f104 0619 	add.w	r6, r4, #25
 8017814:	e7f5      	b.n	8017802 <_printf_i+0x222>
 8017816:	bf00      	nop
 8017818:	08054c74 	.word	0x08054c74
 801781c:	08054c85 	.word	0x08054c85

08017820 <std>:
 8017820:	2300      	movs	r3, #0
 8017822:	b510      	push	{r4, lr}
 8017824:	4604      	mov	r4, r0
 8017826:	e9c0 3300 	strd	r3, r3, [r0]
 801782a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801782e:	6083      	str	r3, [r0, #8]
 8017830:	8181      	strh	r1, [r0, #12]
 8017832:	6643      	str	r3, [r0, #100]	@ 0x64
 8017834:	81c2      	strh	r2, [r0, #14]
 8017836:	6183      	str	r3, [r0, #24]
 8017838:	4619      	mov	r1, r3
 801783a:	2208      	movs	r2, #8
 801783c:	305c      	adds	r0, #92	@ 0x5c
 801783e:	f000 fa43 	bl	8017cc8 <memset>
 8017842:	4b0d      	ldr	r3, [pc, #52]	@ (8017878 <std+0x58>)
 8017844:	6263      	str	r3, [r4, #36]	@ 0x24
 8017846:	4b0d      	ldr	r3, [pc, #52]	@ (801787c <std+0x5c>)
 8017848:	62a3      	str	r3, [r4, #40]	@ 0x28
 801784a:	4b0d      	ldr	r3, [pc, #52]	@ (8017880 <std+0x60>)
 801784c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801784e:	4b0d      	ldr	r3, [pc, #52]	@ (8017884 <std+0x64>)
 8017850:	6323      	str	r3, [r4, #48]	@ 0x30
 8017852:	4b0d      	ldr	r3, [pc, #52]	@ (8017888 <std+0x68>)
 8017854:	6224      	str	r4, [r4, #32]
 8017856:	429c      	cmp	r4, r3
 8017858:	d006      	beq.n	8017868 <std+0x48>
 801785a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801785e:	4294      	cmp	r4, r2
 8017860:	d002      	beq.n	8017868 <std+0x48>
 8017862:	33d0      	adds	r3, #208	@ 0xd0
 8017864:	429c      	cmp	r4, r3
 8017866:	d105      	bne.n	8017874 <std+0x54>
 8017868:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801786c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017870:	f000 bae8 	b.w	8017e44 <__retarget_lock_init_recursive>
 8017874:	bd10      	pop	{r4, pc}
 8017876:	bf00      	nop
 8017878:	08017ac5 	.word	0x08017ac5
 801787c:	08017ae7 	.word	0x08017ae7
 8017880:	08017b1f 	.word	0x08017b1f
 8017884:	08017b43 	.word	0x08017b43
 8017888:	2001477c 	.word	0x2001477c

0801788c <stdio_exit_handler>:
 801788c:	4a02      	ldr	r2, [pc, #8]	@ (8017898 <stdio_exit_handler+0xc>)
 801788e:	4903      	ldr	r1, [pc, #12]	@ (801789c <stdio_exit_handler+0x10>)
 8017890:	4803      	ldr	r0, [pc, #12]	@ (80178a0 <stdio_exit_handler+0x14>)
 8017892:	f000 b869 	b.w	8017968 <_fwalk_sglue>
 8017896:	bf00      	nop
 8017898:	20009680 	.word	0x20009680
 801789c:	08019925 	.word	0x08019925
 80178a0:	20009690 	.word	0x20009690

080178a4 <cleanup_stdio>:
 80178a4:	6841      	ldr	r1, [r0, #4]
 80178a6:	4b0c      	ldr	r3, [pc, #48]	@ (80178d8 <cleanup_stdio+0x34>)
 80178a8:	4299      	cmp	r1, r3
 80178aa:	b510      	push	{r4, lr}
 80178ac:	4604      	mov	r4, r0
 80178ae:	d001      	beq.n	80178b4 <cleanup_stdio+0x10>
 80178b0:	f002 f838 	bl	8019924 <_fflush_r>
 80178b4:	68a1      	ldr	r1, [r4, #8]
 80178b6:	4b09      	ldr	r3, [pc, #36]	@ (80178dc <cleanup_stdio+0x38>)
 80178b8:	4299      	cmp	r1, r3
 80178ba:	d002      	beq.n	80178c2 <cleanup_stdio+0x1e>
 80178bc:	4620      	mov	r0, r4
 80178be:	f002 f831 	bl	8019924 <_fflush_r>
 80178c2:	68e1      	ldr	r1, [r4, #12]
 80178c4:	4b06      	ldr	r3, [pc, #24]	@ (80178e0 <cleanup_stdio+0x3c>)
 80178c6:	4299      	cmp	r1, r3
 80178c8:	d004      	beq.n	80178d4 <cleanup_stdio+0x30>
 80178ca:	4620      	mov	r0, r4
 80178cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178d0:	f002 b828 	b.w	8019924 <_fflush_r>
 80178d4:	bd10      	pop	{r4, pc}
 80178d6:	bf00      	nop
 80178d8:	2001477c 	.word	0x2001477c
 80178dc:	200147e4 	.word	0x200147e4
 80178e0:	2001484c 	.word	0x2001484c

080178e4 <global_stdio_init.part.0>:
 80178e4:	b510      	push	{r4, lr}
 80178e6:	4b0b      	ldr	r3, [pc, #44]	@ (8017914 <global_stdio_init.part.0+0x30>)
 80178e8:	4c0b      	ldr	r4, [pc, #44]	@ (8017918 <global_stdio_init.part.0+0x34>)
 80178ea:	4a0c      	ldr	r2, [pc, #48]	@ (801791c <global_stdio_init.part.0+0x38>)
 80178ec:	601a      	str	r2, [r3, #0]
 80178ee:	4620      	mov	r0, r4
 80178f0:	2200      	movs	r2, #0
 80178f2:	2104      	movs	r1, #4
 80178f4:	f7ff ff94 	bl	8017820 <std>
 80178f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80178fc:	2201      	movs	r2, #1
 80178fe:	2109      	movs	r1, #9
 8017900:	f7ff ff8e 	bl	8017820 <std>
 8017904:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017908:	2202      	movs	r2, #2
 801790a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801790e:	2112      	movs	r1, #18
 8017910:	f7ff bf86 	b.w	8017820 <std>
 8017914:	200148b4 	.word	0x200148b4
 8017918:	2001477c 	.word	0x2001477c
 801791c:	0801788d 	.word	0x0801788d

08017920 <__sfp_lock_acquire>:
 8017920:	4801      	ldr	r0, [pc, #4]	@ (8017928 <__sfp_lock_acquire+0x8>)
 8017922:	f000 ba90 	b.w	8017e46 <__retarget_lock_acquire_recursive>
 8017926:	bf00      	nop
 8017928:	200148bd 	.word	0x200148bd

0801792c <__sfp_lock_release>:
 801792c:	4801      	ldr	r0, [pc, #4]	@ (8017934 <__sfp_lock_release+0x8>)
 801792e:	f000 ba8b 	b.w	8017e48 <__retarget_lock_release_recursive>
 8017932:	bf00      	nop
 8017934:	200148bd 	.word	0x200148bd

08017938 <__sinit>:
 8017938:	b510      	push	{r4, lr}
 801793a:	4604      	mov	r4, r0
 801793c:	f7ff fff0 	bl	8017920 <__sfp_lock_acquire>
 8017940:	6a23      	ldr	r3, [r4, #32]
 8017942:	b11b      	cbz	r3, 801794c <__sinit+0x14>
 8017944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017948:	f7ff bff0 	b.w	801792c <__sfp_lock_release>
 801794c:	4b04      	ldr	r3, [pc, #16]	@ (8017960 <__sinit+0x28>)
 801794e:	6223      	str	r3, [r4, #32]
 8017950:	4b04      	ldr	r3, [pc, #16]	@ (8017964 <__sinit+0x2c>)
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d1f5      	bne.n	8017944 <__sinit+0xc>
 8017958:	f7ff ffc4 	bl	80178e4 <global_stdio_init.part.0>
 801795c:	e7f2      	b.n	8017944 <__sinit+0xc>
 801795e:	bf00      	nop
 8017960:	080178a5 	.word	0x080178a5
 8017964:	200148b4 	.word	0x200148b4

08017968 <_fwalk_sglue>:
 8017968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801796c:	4607      	mov	r7, r0
 801796e:	4688      	mov	r8, r1
 8017970:	4614      	mov	r4, r2
 8017972:	2600      	movs	r6, #0
 8017974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017978:	f1b9 0901 	subs.w	r9, r9, #1
 801797c:	d505      	bpl.n	801798a <_fwalk_sglue+0x22>
 801797e:	6824      	ldr	r4, [r4, #0]
 8017980:	2c00      	cmp	r4, #0
 8017982:	d1f7      	bne.n	8017974 <_fwalk_sglue+0xc>
 8017984:	4630      	mov	r0, r6
 8017986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801798a:	89ab      	ldrh	r3, [r5, #12]
 801798c:	2b01      	cmp	r3, #1
 801798e:	d907      	bls.n	80179a0 <_fwalk_sglue+0x38>
 8017990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017994:	3301      	adds	r3, #1
 8017996:	d003      	beq.n	80179a0 <_fwalk_sglue+0x38>
 8017998:	4629      	mov	r1, r5
 801799a:	4638      	mov	r0, r7
 801799c:	47c0      	blx	r8
 801799e:	4306      	orrs	r6, r0
 80179a0:	3568      	adds	r5, #104	@ 0x68
 80179a2:	e7e9      	b.n	8017978 <_fwalk_sglue+0x10>

080179a4 <iprintf>:
 80179a4:	b40f      	push	{r0, r1, r2, r3}
 80179a6:	b507      	push	{r0, r1, r2, lr}
 80179a8:	4906      	ldr	r1, [pc, #24]	@ (80179c4 <iprintf+0x20>)
 80179aa:	ab04      	add	r3, sp, #16
 80179ac:	6808      	ldr	r0, [r1, #0]
 80179ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80179b2:	6881      	ldr	r1, [r0, #8]
 80179b4:	9301      	str	r3, [sp, #4]
 80179b6:	f001 fe19 	bl	80195ec <_vfiprintf_r>
 80179ba:	b003      	add	sp, #12
 80179bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80179c0:	b004      	add	sp, #16
 80179c2:	4770      	bx	lr
 80179c4:	2000968c 	.word	0x2000968c

080179c8 <_puts_r>:
 80179c8:	6a03      	ldr	r3, [r0, #32]
 80179ca:	b570      	push	{r4, r5, r6, lr}
 80179cc:	6884      	ldr	r4, [r0, #8]
 80179ce:	4605      	mov	r5, r0
 80179d0:	460e      	mov	r6, r1
 80179d2:	b90b      	cbnz	r3, 80179d8 <_puts_r+0x10>
 80179d4:	f7ff ffb0 	bl	8017938 <__sinit>
 80179d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80179da:	07db      	lsls	r3, r3, #31
 80179dc:	d405      	bmi.n	80179ea <_puts_r+0x22>
 80179de:	89a3      	ldrh	r3, [r4, #12]
 80179e0:	0598      	lsls	r0, r3, #22
 80179e2:	d402      	bmi.n	80179ea <_puts_r+0x22>
 80179e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80179e6:	f000 fa2e 	bl	8017e46 <__retarget_lock_acquire_recursive>
 80179ea:	89a3      	ldrh	r3, [r4, #12]
 80179ec:	0719      	lsls	r1, r3, #28
 80179ee:	d502      	bpl.n	80179f6 <_puts_r+0x2e>
 80179f0:	6923      	ldr	r3, [r4, #16]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d135      	bne.n	8017a62 <_puts_r+0x9a>
 80179f6:	4621      	mov	r1, r4
 80179f8:	4628      	mov	r0, r5
 80179fa:	f000 f8e5 	bl	8017bc8 <__swsetup_r>
 80179fe:	b380      	cbz	r0, 8017a62 <_puts_r+0x9a>
 8017a00:	f04f 35ff 	mov.w	r5, #4294967295
 8017a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017a06:	07da      	lsls	r2, r3, #31
 8017a08:	d405      	bmi.n	8017a16 <_puts_r+0x4e>
 8017a0a:	89a3      	ldrh	r3, [r4, #12]
 8017a0c:	059b      	lsls	r3, r3, #22
 8017a0e:	d402      	bmi.n	8017a16 <_puts_r+0x4e>
 8017a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017a12:	f000 fa19 	bl	8017e48 <__retarget_lock_release_recursive>
 8017a16:	4628      	mov	r0, r5
 8017a18:	bd70      	pop	{r4, r5, r6, pc}
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	da04      	bge.n	8017a28 <_puts_r+0x60>
 8017a1e:	69a2      	ldr	r2, [r4, #24]
 8017a20:	429a      	cmp	r2, r3
 8017a22:	dc17      	bgt.n	8017a54 <_puts_r+0x8c>
 8017a24:	290a      	cmp	r1, #10
 8017a26:	d015      	beq.n	8017a54 <_puts_r+0x8c>
 8017a28:	6823      	ldr	r3, [r4, #0]
 8017a2a:	1c5a      	adds	r2, r3, #1
 8017a2c:	6022      	str	r2, [r4, #0]
 8017a2e:	7019      	strb	r1, [r3, #0]
 8017a30:	68a3      	ldr	r3, [r4, #8]
 8017a32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017a36:	3b01      	subs	r3, #1
 8017a38:	60a3      	str	r3, [r4, #8]
 8017a3a:	2900      	cmp	r1, #0
 8017a3c:	d1ed      	bne.n	8017a1a <_puts_r+0x52>
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	da11      	bge.n	8017a66 <_puts_r+0x9e>
 8017a42:	4622      	mov	r2, r4
 8017a44:	210a      	movs	r1, #10
 8017a46:	4628      	mov	r0, r5
 8017a48:	f000 f87f 	bl	8017b4a <__swbuf_r>
 8017a4c:	3001      	adds	r0, #1
 8017a4e:	d0d7      	beq.n	8017a00 <_puts_r+0x38>
 8017a50:	250a      	movs	r5, #10
 8017a52:	e7d7      	b.n	8017a04 <_puts_r+0x3c>
 8017a54:	4622      	mov	r2, r4
 8017a56:	4628      	mov	r0, r5
 8017a58:	f000 f877 	bl	8017b4a <__swbuf_r>
 8017a5c:	3001      	adds	r0, #1
 8017a5e:	d1e7      	bne.n	8017a30 <_puts_r+0x68>
 8017a60:	e7ce      	b.n	8017a00 <_puts_r+0x38>
 8017a62:	3e01      	subs	r6, #1
 8017a64:	e7e4      	b.n	8017a30 <_puts_r+0x68>
 8017a66:	6823      	ldr	r3, [r4, #0]
 8017a68:	1c5a      	adds	r2, r3, #1
 8017a6a:	6022      	str	r2, [r4, #0]
 8017a6c:	220a      	movs	r2, #10
 8017a6e:	701a      	strb	r2, [r3, #0]
 8017a70:	e7ee      	b.n	8017a50 <_puts_r+0x88>
	...

08017a74 <puts>:
 8017a74:	4b02      	ldr	r3, [pc, #8]	@ (8017a80 <puts+0xc>)
 8017a76:	4601      	mov	r1, r0
 8017a78:	6818      	ldr	r0, [r3, #0]
 8017a7a:	f7ff bfa5 	b.w	80179c8 <_puts_r>
 8017a7e:	bf00      	nop
 8017a80:	2000968c 	.word	0x2000968c

08017a84 <siprintf>:
 8017a84:	b40e      	push	{r1, r2, r3}
 8017a86:	b500      	push	{lr}
 8017a88:	b09c      	sub	sp, #112	@ 0x70
 8017a8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8017a8c:	9002      	str	r0, [sp, #8]
 8017a8e:	9006      	str	r0, [sp, #24]
 8017a90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017a94:	4809      	ldr	r0, [pc, #36]	@ (8017abc <siprintf+0x38>)
 8017a96:	9107      	str	r1, [sp, #28]
 8017a98:	9104      	str	r1, [sp, #16]
 8017a9a:	4909      	ldr	r1, [pc, #36]	@ (8017ac0 <siprintf+0x3c>)
 8017a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017aa0:	9105      	str	r1, [sp, #20]
 8017aa2:	6800      	ldr	r0, [r0, #0]
 8017aa4:	9301      	str	r3, [sp, #4]
 8017aa6:	a902      	add	r1, sp, #8
 8017aa8:	f001 fc7a 	bl	80193a0 <_svfiprintf_r>
 8017aac:	9b02      	ldr	r3, [sp, #8]
 8017aae:	2200      	movs	r2, #0
 8017ab0:	701a      	strb	r2, [r3, #0]
 8017ab2:	b01c      	add	sp, #112	@ 0x70
 8017ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ab8:	b003      	add	sp, #12
 8017aba:	4770      	bx	lr
 8017abc:	2000968c 	.word	0x2000968c
 8017ac0:	ffff0208 	.word	0xffff0208

08017ac4 <__sread>:
 8017ac4:	b510      	push	{r4, lr}
 8017ac6:	460c      	mov	r4, r1
 8017ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017acc:	f000 f95c 	bl	8017d88 <_read_r>
 8017ad0:	2800      	cmp	r0, #0
 8017ad2:	bfab      	itete	ge
 8017ad4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8017ad8:	181b      	addge	r3, r3, r0
 8017ada:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017ade:	bfac      	ite	ge
 8017ae0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017ae2:	81a3      	strhlt	r3, [r4, #12]
 8017ae4:	bd10      	pop	{r4, pc}

08017ae6 <__swrite>:
 8017ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aea:	461f      	mov	r7, r3
 8017aec:	898b      	ldrh	r3, [r1, #12]
 8017aee:	05db      	lsls	r3, r3, #23
 8017af0:	4605      	mov	r5, r0
 8017af2:	460c      	mov	r4, r1
 8017af4:	4616      	mov	r6, r2
 8017af6:	d505      	bpl.n	8017b04 <__swrite+0x1e>
 8017af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017afc:	2302      	movs	r3, #2
 8017afe:	2200      	movs	r2, #0
 8017b00:	f000 f930 	bl	8017d64 <_lseek_r>
 8017b04:	89a3      	ldrh	r3, [r4, #12]
 8017b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017b0e:	81a3      	strh	r3, [r4, #12]
 8017b10:	4632      	mov	r2, r6
 8017b12:	463b      	mov	r3, r7
 8017b14:	4628      	mov	r0, r5
 8017b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b1a:	f000 b957 	b.w	8017dcc <_write_r>

08017b1e <__sseek>:
 8017b1e:	b510      	push	{r4, lr}
 8017b20:	460c      	mov	r4, r1
 8017b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b26:	f000 f91d 	bl	8017d64 <_lseek_r>
 8017b2a:	1c43      	adds	r3, r0, #1
 8017b2c:	89a3      	ldrh	r3, [r4, #12]
 8017b2e:	bf15      	itete	ne
 8017b30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017b32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017b36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017b3a:	81a3      	strheq	r3, [r4, #12]
 8017b3c:	bf18      	it	ne
 8017b3e:	81a3      	strhne	r3, [r4, #12]
 8017b40:	bd10      	pop	{r4, pc}

08017b42 <__sclose>:
 8017b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b46:	f000 b8fd 	b.w	8017d44 <_close_r>

08017b4a <__swbuf_r>:
 8017b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b4c:	460e      	mov	r6, r1
 8017b4e:	4614      	mov	r4, r2
 8017b50:	4605      	mov	r5, r0
 8017b52:	b118      	cbz	r0, 8017b5c <__swbuf_r+0x12>
 8017b54:	6a03      	ldr	r3, [r0, #32]
 8017b56:	b90b      	cbnz	r3, 8017b5c <__swbuf_r+0x12>
 8017b58:	f7ff feee 	bl	8017938 <__sinit>
 8017b5c:	69a3      	ldr	r3, [r4, #24]
 8017b5e:	60a3      	str	r3, [r4, #8]
 8017b60:	89a3      	ldrh	r3, [r4, #12]
 8017b62:	071a      	lsls	r2, r3, #28
 8017b64:	d501      	bpl.n	8017b6a <__swbuf_r+0x20>
 8017b66:	6923      	ldr	r3, [r4, #16]
 8017b68:	b943      	cbnz	r3, 8017b7c <__swbuf_r+0x32>
 8017b6a:	4621      	mov	r1, r4
 8017b6c:	4628      	mov	r0, r5
 8017b6e:	f000 f82b 	bl	8017bc8 <__swsetup_r>
 8017b72:	b118      	cbz	r0, 8017b7c <__swbuf_r+0x32>
 8017b74:	f04f 37ff 	mov.w	r7, #4294967295
 8017b78:	4638      	mov	r0, r7
 8017b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b7c:	6823      	ldr	r3, [r4, #0]
 8017b7e:	6922      	ldr	r2, [r4, #16]
 8017b80:	1a98      	subs	r0, r3, r2
 8017b82:	6963      	ldr	r3, [r4, #20]
 8017b84:	b2f6      	uxtb	r6, r6
 8017b86:	4283      	cmp	r3, r0
 8017b88:	4637      	mov	r7, r6
 8017b8a:	dc05      	bgt.n	8017b98 <__swbuf_r+0x4e>
 8017b8c:	4621      	mov	r1, r4
 8017b8e:	4628      	mov	r0, r5
 8017b90:	f001 fec8 	bl	8019924 <_fflush_r>
 8017b94:	2800      	cmp	r0, #0
 8017b96:	d1ed      	bne.n	8017b74 <__swbuf_r+0x2a>
 8017b98:	68a3      	ldr	r3, [r4, #8]
 8017b9a:	3b01      	subs	r3, #1
 8017b9c:	60a3      	str	r3, [r4, #8]
 8017b9e:	6823      	ldr	r3, [r4, #0]
 8017ba0:	1c5a      	adds	r2, r3, #1
 8017ba2:	6022      	str	r2, [r4, #0]
 8017ba4:	701e      	strb	r6, [r3, #0]
 8017ba6:	6962      	ldr	r2, [r4, #20]
 8017ba8:	1c43      	adds	r3, r0, #1
 8017baa:	429a      	cmp	r2, r3
 8017bac:	d004      	beq.n	8017bb8 <__swbuf_r+0x6e>
 8017bae:	89a3      	ldrh	r3, [r4, #12]
 8017bb0:	07db      	lsls	r3, r3, #31
 8017bb2:	d5e1      	bpl.n	8017b78 <__swbuf_r+0x2e>
 8017bb4:	2e0a      	cmp	r6, #10
 8017bb6:	d1df      	bne.n	8017b78 <__swbuf_r+0x2e>
 8017bb8:	4621      	mov	r1, r4
 8017bba:	4628      	mov	r0, r5
 8017bbc:	f001 feb2 	bl	8019924 <_fflush_r>
 8017bc0:	2800      	cmp	r0, #0
 8017bc2:	d0d9      	beq.n	8017b78 <__swbuf_r+0x2e>
 8017bc4:	e7d6      	b.n	8017b74 <__swbuf_r+0x2a>
	...

08017bc8 <__swsetup_r>:
 8017bc8:	b538      	push	{r3, r4, r5, lr}
 8017bca:	4b29      	ldr	r3, [pc, #164]	@ (8017c70 <__swsetup_r+0xa8>)
 8017bcc:	4605      	mov	r5, r0
 8017bce:	6818      	ldr	r0, [r3, #0]
 8017bd0:	460c      	mov	r4, r1
 8017bd2:	b118      	cbz	r0, 8017bdc <__swsetup_r+0x14>
 8017bd4:	6a03      	ldr	r3, [r0, #32]
 8017bd6:	b90b      	cbnz	r3, 8017bdc <__swsetup_r+0x14>
 8017bd8:	f7ff feae 	bl	8017938 <__sinit>
 8017bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017be0:	0719      	lsls	r1, r3, #28
 8017be2:	d422      	bmi.n	8017c2a <__swsetup_r+0x62>
 8017be4:	06da      	lsls	r2, r3, #27
 8017be6:	d407      	bmi.n	8017bf8 <__swsetup_r+0x30>
 8017be8:	2209      	movs	r2, #9
 8017bea:	602a      	str	r2, [r5, #0]
 8017bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017bf0:	81a3      	strh	r3, [r4, #12]
 8017bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8017bf6:	e033      	b.n	8017c60 <__swsetup_r+0x98>
 8017bf8:	0758      	lsls	r0, r3, #29
 8017bfa:	d512      	bpl.n	8017c22 <__swsetup_r+0x5a>
 8017bfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017bfe:	b141      	cbz	r1, 8017c12 <__swsetup_r+0x4a>
 8017c00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017c04:	4299      	cmp	r1, r3
 8017c06:	d002      	beq.n	8017c0e <__swsetup_r+0x46>
 8017c08:	4628      	mov	r0, r5
 8017c0a:	f000 ffa1 	bl	8018b50 <_free_r>
 8017c0e:	2300      	movs	r3, #0
 8017c10:	6363      	str	r3, [r4, #52]	@ 0x34
 8017c12:	89a3      	ldrh	r3, [r4, #12]
 8017c14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017c18:	81a3      	strh	r3, [r4, #12]
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	6063      	str	r3, [r4, #4]
 8017c1e:	6923      	ldr	r3, [r4, #16]
 8017c20:	6023      	str	r3, [r4, #0]
 8017c22:	89a3      	ldrh	r3, [r4, #12]
 8017c24:	f043 0308 	orr.w	r3, r3, #8
 8017c28:	81a3      	strh	r3, [r4, #12]
 8017c2a:	6923      	ldr	r3, [r4, #16]
 8017c2c:	b94b      	cbnz	r3, 8017c42 <__swsetup_r+0x7a>
 8017c2e:	89a3      	ldrh	r3, [r4, #12]
 8017c30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017c38:	d003      	beq.n	8017c42 <__swsetup_r+0x7a>
 8017c3a:	4621      	mov	r1, r4
 8017c3c:	4628      	mov	r0, r5
 8017c3e:	f001 fed1 	bl	80199e4 <__smakebuf_r>
 8017c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c46:	f013 0201 	ands.w	r2, r3, #1
 8017c4a:	d00a      	beq.n	8017c62 <__swsetup_r+0x9a>
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	60a2      	str	r2, [r4, #8]
 8017c50:	6962      	ldr	r2, [r4, #20]
 8017c52:	4252      	negs	r2, r2
 8017c54:	61a2      	str	r2, [r4, #24]
 8017c56:	6922      	ldr	r2, [r4, #16]
 8017c58:	b942      	cbnz	r2, 8017c6c <__swsetup_r+0xa4>
 8017c5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017c5e:	d1c5      	bne.n	8017bec <__swsetup_r+0x24>
 8017c60:	bd38      	pop	{r3, r4, r5, pc}
 8017c62:	0799      	lsls	r1, r3, #30
 8017c64:	bf58      	it	pl
 8017c66:	6962      	ldrpl	r2, [r4, #20]
 8017c68:	60a2      	str	r2, [r4, #8]
 8017c6a:	e7f4      	b.n	8017c56 <__swsetup_r+0x8e>
 8017c6c:	2000      	movs	r0, #0
 8017c6e:	e7f7      	b.n	8017c60 <__swsetup_r+0x98>
 8017c70:	2000968c 	.word	0x2000968c

08017c74 <memcmp>:
 8017c74:	b510      	push	{r4, lr}
 8017c76:	3901      	subs	r1, #1
 8017c78:	4402      	add	r2, r0
 8017c7a:	4290      	cmp	r0, r2
 8017c7c:	d101      	bne.n	8017c82 <memcmp+0xe>
 8017c7e:	2000      	movs	r0, #0
 8017c80:	e005      	b.n	8017c8e <memcmp+0x1a>
 8017c82:	7803      	ldrb	r3, [r0, #0]
 8017c84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017c88:	42a3      	cmp	r3, r4
 8017c8a:	d001      	beq.n	8017c90 <memcmp+0x1c>
 8017c8c:	1b18      	subs	r0, r3, r4
 8017c8e:	bd10      	pop	{r4, pc}
 8017c90:	3001      	adds	r0, #1
 8017c92:	e7f2      	b.n	8017c7a <memcmp+0x6>

08017c94 <memmove>:
 8017c94:	4288      	cmp	r0, r1
 8017c96:	b510      	push	{r4, lr}
 8017c98:	eb01 0402 	add.w	r4, r1, r2
 8017c9c:	d902      	bls.n	8017ca4 <memmove+0x10>
 8017c9e:	4284      	cmp	r4, r0
 8017ca0:	4623      	mov	r3, r4
 8017ca2:	d807      	bhi.n	8017cb4 <memmove+0x20>
 8017ca4:	1e43      	subs	r3, r0, #1
 8017ca6:	42a1      	cmp	r1, r4
 8017ca8:	d008      	beq.n	8017cbc <memmove+0x28>
 8017caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017cb2:	e7f8      	b.n	8017ca6 <memmove+0x12>
 8017cb4:	4402      	add	r2, r0
 8017cb6:	4601      	mov	r1, r0
 8017cb8:	428a      	cmp	r2, r1
 8017cba:	d100      	bne.n	8017cbe <memmove+0x2a>
 8017cbc:	bd10      	pop	{r4, pc}
 8017cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017cc6:	e7f7      	b.n	8017cb8 <memmove+0x24>

08017cc8 <memset>:
 8017cc8:	4402      	add	r2, r0
 8017cca:	4603      	mov	r3, r0
 8017ccc:	4293      	cmp	r3, r2
 8017cce:	d100      	bne.n	8017cd2 <memset+0xa>
 8017cd0:	4770      	bx	lr
 8017cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8017cd6:	e7f9      	b.n	8017ccc <memset+0x4>

08017cd8 <strchr>:
 8017cd8:	b2c9      	uxtb	r1, r1
 8017cda:	4603      	mov	r3, r0
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ce2:	b112      	cbz	r2, 8017cea <strchr+0x12>
 8017ce4:	428a      	cmp	r2, r1
 8017ce6:	d1f9      	bne.n	8017cdc <strchr+0x4>
 8017ce8:	4770      	bx	lr
 8017cea:	2900      	cmp	r1, #0
 8017cec:	bf18      	it	ne
 8017cee:	2000      	movne	r0, #0
 8017cf0:	4770      	bx	lr

08017cf2 <strncmp>:
 8017cf2:	b510      	push	{r4, lr}
 8017cf4:	b16a      	cbz	r2, 8017d12 <strncmp+0x20>
 8017cf6:	3901      	subs	r1, #1
 8017cf8:	1884      	adds	r4, r0, r2
 8017cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cfe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017d02:	429a      	cmp	r2, r3
 8017d04:	d103      	bne.n	8017d0e <strncmp+0x1c>
 8017d06:	42a0      	cmp	r0, r4
 8017d08:	d001      	beq.n	8017d0e <strncmp+0x1c>
 8017d0a:	2a00      	cmp	r2, #0
 8017d0c:	d1f5      	bne.n	8017cfa <strncmp+0x8>
 8017d0e:	1ad0      	subs	r0, r2, r3
 8017d10:	bd10      	pop	{r4, pc}
 8017d12:	4610      	mov	r0, r2
 8017d14:	e7fc      	b.n	8017d10 <strncmp+0x1e>

08017d16 <strncpy>:
 8017d16:	b510      	push	{r4, lr}
 8017d18:	3901      	subs	r1, #1
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	b132      	cbz	r2, 8017d2c <strncpy+0x16>
 8017d1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d22:	f803 4b01 	strb.w	r4, [r3], #1
 8017d26:	3a01      	subs	r2, #1
 8017d28:	2c00      	cmp	r4, #0
 8017d2a:	d1f7      	bne.n	8017d1c <strncpy+0x6>
 8017d2c:	441a      	add	r2, r3
 8017d2e:	2100      	movs	r1, #0
 8017d30:	4293      	cmp	r3, r2
 8017d32:	d100      	bne.n	8017d36 <strncpy+0x20>
 8017d34:	bd10      	pop	{r4, pc}
 8017d36:	f803 1b01 	strb.w	r1, [r3], #1
 8017d3a:	e7f9      	b.n	8017d30 <strncpy+0x1a>

08017d3c <_localeconv_r>:
 8017d3c:	4800      	ldr	r0, [pc, #0]	@ (8017d40 <_localeconv_r+0x4>)
 8017d3e:	4770      	bx	lr
 8017d40:	200097cc 	.word	0x200097cc

08017d44 <_close_r>:
 8017d44:	b538      	push	{r3, r4, r5, lr}
 8017d46:	4d06      	ldr	r5, [pc, #24]	@ (8017d60 <_close_r+0x1c>)
 8017d48:	2300      	movs	r3, #0
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	4608      	mov	r0, r1
 8017d4e:	602b      	str	r3, [r5, #0]
 8017d50:	f7ec ff2e 	bl	8004bb0 <_close>
 8017d54:	1c43      	adds	r3, r0, #1
 8017d56:	d102      	bne.n	8017d5e <_close_r+0x1a>
 8017d58:	682b      	ldr	r3, [r5, #0]
 8017d5a:	b103      	cbz	r3, 8017d5e <_close_r+0x1a>
 8017d5c:	6023      	str	r3, [r4, #0]
 8017d5e:	bd38      	pop	{r3, r4, r5, pc}
 8017d60:	200148b8 	.word	0x200148b8

08017d64 <_lseek_r>:
 8017d64:	b538      	push	{r3, r4, r5, lr}
 8017d66:	4d07      	ldr	r5, [pc, #28]	@ (8017d84 <_lseek_r+0x20>)
 8017d68:	4604      	mov	r4, r0
 8017d6a:	4608      	mov	r0, r1
 8017d6c:	4611      	mov	r1, r2
 8017d6e:	2200      	movs	r2, #0
 8017d70:	602a      	str	r2, [r5, #0]
 8017d72:	461a      	mov	r2, r3
 8017d74:	f7ec ff43 	bl	8004bfe <_lseek>
 8017d78:	1c43      	adds	r3, r0, #1
 8017d7a:	d102      	bne.n	8017d82 <_lseek_r+0x1e>
 8017d7c:	682b      	ldr	r3, [r5, #0]
 8017d7e:	b103      	cbz	r3, 8017d82 <_lseek_r+0x1e>
 8017d80:	6023      	str	r3, [r4, #0]
 8017d82:	bd38      	pop	{r3, r4, r5, pc}
 8017d84:	200148b8 	.word	0x200148b8

08017d88 <_read_r>:
 8017d88:	b538      	push	{r3, r4, r5, lr}
 8017d8a:	4d07      	ldr	r5, [pc, #28]	@ (8017da8 <_read_r+0x20>)
 8017d8c:	4604      	mov	r4, r0
 8017d8e:	4608      	mov	r0, r1
 8017d90:	4611      	mov	r1, r2
 8017d92:	2200      	movs	r2, #0
 8017d94:	602a      	str	r2, [r5, #0]
 8017d96:	461a      	mov	r2, r3
 8017d98:	f7ec fed1 	bl	8004b3e <_read>
 8017d9c:	1c43      	adds	r3, r0, #1
 8017d9e:	d102      	bne.n	8017da6 <_read_r+0x1e>
 8017da0:	682b      	ldr	r3, [r5, #0]
 8017da2:	b103      	cbz	r3, 8017da6 <_read_r+0x1e>
 8017da4:	6023      	str	r3, [r4, #0]
 8017da6:	bd38      	pop	{r3, r4, r5, pc}
 8017da8:	200148b8 	.word	0x200148b8

08017dac <_sbrk_r>:
 8017dac:	b538      	push	{r3, r4, r5, lr}
 8017dae:	4d06      	ldr	r5, [pc, #24]	@ (8017dc8 <_sbrk_r+0x1c>)
 8017db0:	2300      	movs	r3, #0
 8017db2:	4604      	mov	r4, r0
 8017db4:	4608      	mov	r0, r1
 8017db6:	602b      	str	r3, [r5, #0]
 8017db8:	f7ec ff2e 	bl	8004c18 <_sbrk>
 8017dbc:	1c43      	adds	r3, r0, #1
 8017dbe:	d102      	bne.n	8017dc6 <_sbrk_r+0x1a>
 8017dc0:	682b      	ldr	r3, [r5, #0]
 8017dc2:	b103      	cbz	r3, 8017dc6 <_sbrk_r+0x1a>
 8017dc4:	6023      	str	r3, [r4, #0]
 8017dc6:	bd38      	pop	{r3, r4, r5, pc}
 8017dc8:	200148b8 	.word	0x200148b8

08017dcc <_write_r>:
 8017dcc:	b538      	push	{r3, r4, r5, lr}
 8017dce:	4d07      	ldr	r5, [pc, #28]	@ (8017dec <_write_r+0x20>)
 8017dd0:	4604      	mov	r4, r0
 8017dd2:	4608      	mov	r0, r1
 8017dd4:	4611      	mov	r1, r2
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	602a      	str	r2, [r5, #0]
 8017dda:	461a      	mov	r2, r3
 8017ddc:	f7ec fecc 	bl	8004b78 <_write>
 8017de0:	1c43      	adds	r3, r0, #1
 8017de2:	d102      	bne.n	8017dea <_write_r+0x1e>
 8017de4:	682b      	ldr	r3, [r5, #0]
 8017de6:	b103      	cbz	r3, 8017dea <_write_r+0x1e>
 8017de8:	6023      	str	r3, [r4, #0]
 8017dea:	bd38      	pop	{r3, r4, r5, pc}
 8017dec:	200148b8 	.word	0x200148b8

08017df0 <__errno>:
 8017df0:	4b01      	ldr	r3, [pc, #4]	@ (8017df8 <__errno+0x8>)
 8017df2:	6818      	ldr	r0, [r3, #0]
 8017df4:	4770      	bx	lr
 8017df6:	bf00      	nop
 8017df8:	2000968c 	.word	0x2000968c

08017dfc <__libc_init_array>:
 8017dfc:	b570      	push	{r4, r5, r6, lr}
 8017dfe:	4d0d      	ldr	r5, [pc, #52]	@ (8017e34 <__libc_init_array+0x38>)
 8017e00:	4c0d      	ldr	r4, [pc, #52]	@ (8017e38 <__libc_init_array+0x3c>)
 8017e02:	1b64      	subs	r4, r4, r5
 8017e04:	10a4      	asrs	r4, r4, #2
 8017e06:	2600      	movs	r6, #0
 8017e08:	42a6      	cmp	r6, r4
 8017e0a:	d109      	bne.n	8017e20 <__libc_init_array+0x24>
 8017e0c:	4d0b      	ldr	r5, [pc, #44]	@ (8017e3c <__libc_init_array+0x40>)
 8017e0e:	4c0c      	ldr	r4, [pc, #48]	@ (8017e40 <__libc_init_array+0x44>)
 8017e10:	f001 fefa 	bl	8019c08 <_init>
 8017e14:	1b64      	subs	r4, r4, r5
 8017e16:	10a4      	asrs	r4, r4, #2
 8017e18:	2600      	movs	r6, #0
 8017e1a:	42a6      	cmp	r6, r4
 8017e1c:	d105      	bne.n	8017e2a <__libc_init_array+0x2e>
 8017e1e:	bd70      	pop	{r4, r5, r6, pc}
 8017e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e24:	4798      	blx	r3
 8017e26:	3601      	adds	r6, #1
 8017e28:	e7ee      	b.n	8017e08 <__libc_init_array+0xc>
 8017e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e2e:	4798      	blx	r3
 8017e30:	3601      	adds	r6, #1
 8017e32:	e7f2      	b.n	8017e1a <__libc_init_array+0x1e>
 8017e34:	08054ec4 	.word	0x08054ec4
 8017e38:	08054ec4 	.word	0x08054ec4
 8017e3c:	08054ec4 	.word	0x08054ec4
 8017e40:	08054ec8 	.word	0x08054ec8

08017e44 <__retarget_lock_init_recursive>:
 8017e44:	4770      	bx	lr

08017e46 <__retarget_lock_acquire_recursive>:
 8017e46:	4770      	bx	lr

08017e48 <__retarget_lock_release_recursive>:
 8017e48:	4770      	bx	lr

08017e4a <strcpy>:
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e50:	f803 2b01 	strb.w	r2, [r3], #1
 8017e54:	2a00      	cmp	r2, #0
 8017e56:	d1f9      	bne.n	8017e4c <strcpy+0x2>
 8017e58:	4770      	bx	lr

08017e5a <memcpy>:
 8017e5a:	440a      	add	r2, r1
 8017e5c:	4291      	cmp	r1, r2
 8017e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017e62:	d100      	bne.n	8017e66 <memcpy+0xc>
 8017e64:	4770      	bx	lr
 8017e66:	b510      	push	{r4, lr}
 8017e68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e70:	4291      	cmp	r1, r2
 8017e72:	d1f9      	bne.n	8017e68 <memcpy+0xe>
 8017e74:	bd10      	pop	{r4, pc}
	...

08017e78 <__assert_func>:
 8017e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e7a:	4614      	mov	r4, r2
 8017e7c:	461a      	mov	r2, r3
 8017e7e:	4b09      	ldr	r3, [pc, #36]	@ (8017ea4 <__assert_func+0x2c>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	4605      	mov	r5, r0
 8017e84:	68d8      	ldr	r0, [r3, #12]
 8017e86:	b954      	cbnz	r4, 8017e9e <__assert_func+0x26>
 8017e88:	4b07      	ldr	r3, [pc, #28]	@ (8017ea8 <__assert_func+0x30>)
 8017e8a:	461c      	mov	r4, r3
 8017e8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017e90:	9100      	str	r1, [sp, #0]
 8017e92:	462b      	mov	r3, r5
 8017e94:	4905      	ldr	r1, [pc, #20]	@ (8017eac <__assert_func+0x34>)
 8017e96:	f001 fd6d 	bl	8019974 <fiprintf>
 8017e9a:	f001 fe01 	bl	8019aa0 <abort>
 8017e9e:	4b04      	ldr	r3, [pc, #16]	@ (8017eb0 <__assert_func+0x38>)
 8017ea0:	e7f4      	b.n	8017e8c <__assert_func+0x14>
 8017ea2:	bf00      	nop
 8017ea4:	2000968c 	.word	0x2000968c
 8017ea8:	08054cd1 	.word	0x08054cd1
 8017eac:	08054ca3 	.word	0x08054ca3
 8017eb0:	08054c96 	.word	0x08054c96

08017eb4 <quorem>:
 8017eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb8:	6903      	ldr	r3, [r0, #16]
 8017eba:	690c      	ldr	r4, [r1, #16]
 8017ebc:	42a3      	cmp	r3, r4
 8017ebe:	4607      	mov	r7, r0
 8017ec0:	db7e      	blt.n	8017fc0 <quorem+0x10c>
 8017ec2:	3c01      	subs	r4, #1
 8017ec4:	f101 0814 	add.w	r8, r1, #20
 8017ec8:	00a3      	lsls	r3, r4, #2
 8017eca:	f100 0514 	add.w	r5, r0, #20
 8017ece:	9300      	str	r3, [sp, #0]
 8017ed0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ed4:	9301      	str	r3, [sp, #4]
 8017ed6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017eda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ede:	3301      	adds	r3, #1
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017ee6:	fbb2 f6f3 	udiv	r6, r2, r3
 8017eea:	d32e      	bcc.n	8017f4a <quorem+0x96>
 8017eec:	f04f 0a00 	mov.w	sl, #0
 8017ef0:	46c4      	mov	ip, r8
 8017ef2:	46ae      	mov	lr, r5
 8017ef4:	46d3      	mov	fp, sl
 8017ef6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017efa:	b298      	uxth	r0, r3
 8017efc:	fb06 a000 	mla	r0, r6, r0, sl
 8017f00:	0c02      	lsrs	r2, r0, #16
 8017f02:	0c1b      	lsrs	r3, r3, #16
 8017f04:	fb06 2303 	mla	r3, r6, r3, r2
 8017f08:	f8de 2000 	ldr.w	r2, [lr]
 8017f0c:	b280      	uxth	r0, r0
 8017f0e:	b292      	uxth	r2, r2
 8017f10:	1a12      	subs	r2, r2, r0
 8017f12:	445a      	add	r2, fp
 8017f14:	f8de 0000 	ldr.w	r0, [lr]
 8017f18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017f1c:	b29b      	uxth	r3, r3
 8017f1e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017f22:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8017f26:	b292      	uxth	r2, r2
 8017f28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8017f2c:	45e1      	cmp	r9, ip
 8017f2e:	f84e 2b04 	str.w	r2, [lr], #4
 8017f32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8017f36:	d2de      	bcs.n	8017ef6 <quorem+0x42>
 8017f38:	9b00      	ldr	r3, [sp, #0]
 8017f3a:	58eb      	ldr	r3, [r5, r3]
 8017f3c:	b92b      	cbnz	r3, 8017f4a <quorem+0x96>
 8017f3e:	9b01      	ldr	r3, [sp, #4]
 8017f40:	3b04      	subs	r3, #4
 8017f42:	429d      	cmp	r5, r3
 8017f44:	461a      	mov	r2, r3
 8017f46:	d32f      	bcc.n	8017fa8 <quorem+0xf4>
 8017f48:	613c      	str	r4, [r7, #16]
 8017f4a:	4638      	mov	r0, r7
 8017f4c:	f001 f8c4 	bl	80190d8 <__mcmp>
 8017f50:	2800      	cmp	r0, #0
 8017f52:	db25      	blt.n	8017fa0 <quorem+0xec>
 8017f54:	4629      	mov	r1, r5
 8017f56:	2000      	movs	r0, #0
 8017f58:	f858 2b04 	ldr.w	r2, [r8], #4
 8017f5c:	f8d1 c000 	ldr.w	ip, [r1]
 8017f60:	fa1f fe82 	uxth.w	lr, r2
 8017f64:	fa1f f38c 	uxth.w	r3, ip
 8017f68:	eba3 030e 	sub.w	r3, r3, lr
 8017f6c:	4403      	add	r3, r0
 8017f6e:	0c12      	lsrs	r2, r2, #16
 8017f70:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017f74:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8017f78:	b29b      	uxth	r3, r3
 8017f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f7e:	45c1      	cmp	r9, r8
 8017f80:	f841 3b04 	str.w	r3, [r1], #4
 8017f84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017f88:	d2e6      	bcs.n	8017f58 <quorem+0xa4>
 8017f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017f92:	b922      	cbnz	r2, 8017f9e <quorem+0xea>
 8017f94:	3b04      	subs	r3, #4
 8017f96:	429d      	cmp	r5, r3
 8017f98:	461a      	mov	r2, r3
 8017f9a:	d30b      	bcc.n	8017fb4 <quorem+0x100>
 8017f9c:	613c      	str	r4, [r7, #16]
 8017f9e:	3601      	adds	r6, #1
 8017fa0:	4630      	mov	r0, r6
 8017fa2:	b003      	add	sp, #12
 8017fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa8:	6812      	ldr	r2, [r2, #0]
 8017faa:	3b04      	subs	r3, #4
 8017fac:	2a00      	cmp	r2, #0
 8017fae:	d1cb      	bne.n	8017f48 <quorem+0x94>
 8017fb0:	3c01      	subs	r4, #1
 8017fb2:	e7c6      	b.n	8017f42 <quorem+0x8e>
 8017fb4:	6812      	ldr	r2, [r2, #0]
 8017fb6:	3b04      	subs	r3, #4
 8017fb8:	2a00      	cmp	r2, #0
 8017fba:	d1ef      	bne.n	8017f9c <quorem+0xe8>
 8017fbc:	3c01      	subs	r4, #1
 8017fbe:	e7ea      	b.n	8017f96 <quorem+0xe2>
 8017fc0:	2000      	movs	r0, #0
 8017fc2:	e7ee      	b.n	8017fa2 <quorem+0xee>
 8017fc4:	0000      	movs	r0, r0
	...

08017fc8 <_dtoa_r>:
 8017fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fcc:	69c7      	ldr	r7, [r0, #28]
 8017fce:	b099      	sub	sp, #100	@ 0x64
 8017fd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017fd4:	ec55 4b10 	vmov	r4, r5, d0
 8017fd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8017fda:	9109      	str	r1, [sp, #36]	@ 0x24
 8017fdc:	4683      	mov	fp, r0
 8017fde:	920e      	str	r2, [sp, #56]	@ 0x38
 8017fe0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017fe2:	b97f      	cbnz	r7, 8018004 <_dtoa_r+0x3c>
 8017fe4:	2010      	movs	r0, #16
 8017fe6:	f7fe fe43 	bl	8016c70 <malloc>
 8017fea:	4602      	mov	r2, r0
 8017fec:	f8cb 001c 	str.w	r0, [fp, #28]
 8017ff0:	b920      	cbnz	r0, 8017ffc <_dtoa_r+0x34>
 8017ff2:	4ba7      	ldr	r3, [pc, #668]	@ (8018290 <_dtoa_r+0x2c8>)
 8017ff4:	21ef      	movs	r1, #239	@ 0xef
 8017ff6:	48a7      	ldr	r0, [pc, #668]	@ (8018294 <_dtoa_r+0x2cc>)
 8017ff8:	f7ff ff3e 	bl	8017e78 <__assert_func>
 8017ffc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018000:	6007      	str	r7, [r0, #0]
 8018002:	60c7      	str	r7, [r0, #12]
 8018004:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018008:	6819      	ldr	r1, [r3, #0]
 801800a:	b159      	cbz	r1, 8018024 <_dtoa_r+0x5c>
 801800c:	685a      	ldr	r2, [r3, #4]
 801800e:	604a      	str	r2, [r1, #4]
 8018010:	2301      	movs	r3, #1
 8018012:	4093      	lsls	r3, r2
 8018014:	608b      	str	r3, [r1, #8]
 8018016:	4658      	mov	r0, fp
 8018018:	f000 fe24 	bl	8018c64 <_Bfree>
 801801c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018020:	2200      	movs	r2, #0
 8018022:	601a      	str	r2, [r3, #0]
 8018024:	1e2b      	subs	r3, r5, #0
 8018026:	bfb9      	ittee	lt
 8018028:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801802c:	9303      	strlt	r3, [sp, #12]
 801802e:	2300      	movge	r3, #0
 8018030:	6033      	strge	r3, [r6, #0]
 8018032:	9f03      	ldr	r7, [sp, #12]
 8018034:	4b98      	ldr	r3, [pc, #608]	@ (8018298 <_dtoa_r+0x2d0>)
 8018036:	bfbc      	itt	lt
 8018038:	2201      	movlt	r2, #1
 801803a:	6032      	strlt	r2, [r6, #0]
 801803c:	43bb      	bics	r3, r7
 801803e:	d112      	bne.n	8018066 <_dtoa_r+0x9e>
 8018040:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018042:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018046:	6013      	str	r3, [r2, #0]
 8018048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801804c:	4323      	orrs	r3, r4
 801804e:	f000 854d 	beq.w	8018aec <_dtoa_r+0xb24>
 8018052:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018054:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80182ac <_dtoa_r+0x2e4>
 8018058:	2b00      	cmp	r3, #0
 801805a:	f000 854f 	beq.w	8018afc <_dtoa_r+0xb34>
 801805e:	f10a 0303 	add.w	r3, sl, #3
 8018062:	f000 bd49 	b.w	8018af8 <_dtoa_r+0xb30>
 8018066:	ed9d 7b02 	vldr	d7, [sp, #8]
 801806a:	2200      	movs	r2, #0
 801806c:	ec51 0b17 	vmov	r0, r1, d7
 8018070:	2300      	movs	r3, #0
 8018072:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8018076:	f7e8 fd57 	bl	8000b28 <__aeabi_dcmpeq>
 801807a:	4680      	mov	r8, r0
 801807c:	b158      	cbz	r0, 8018096 <_dtoa_r+0xce>
 801807e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018080:	2301      	movs	r3, #1
 8018082:	6013      	str	r3, [r2, #0]
 8018084:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018086:	b113      	cbz	r3, 801808e <_dtoa_r+0xc6>
 8018088:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801808a:	4b84      	ldr	r3, [pc, #528]	@ (801829c <_dtoa_r+0x2d4>)
 801808c:	6013      	str	r3, [r2, #0]
 801808e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80182b0 <_dtoa_r+0x2e8>
 8018092:	f000 bd33 	b.w	8018afc <_dtoa_r+0xb34>
 8018096:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801809a:	aa16      	add	r2, sp, #88	@ 0x58
 801809c:	a917      	add	r1, sp, #92	@ 0x5c
 801809e:	4658      	mov	r0, fp
 80180a0:	f001 f8ca 	bl	8019238 <__d2b>
 80180a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80180a8:	4681      	mov	r9, r0
 80180aa:	2e00      	cmp	r6, #0
 80180ac:	d077      	beq.n	801819e <_dtoa_r+0x1d6>
 80180ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80180b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80180b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80180b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80180bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80180c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80180c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80180c8:	4619      	mov	r1, r3
 80180ca:	2200      	movs	r2, #0
 80180cc:	4b74      	ldr	r3, [pc, #464]	@ (80182a0 <_dtoa_r+0x2d8>)
 80180ce:	f7e8 f90b 	bl	80002e8 <__aeabi_dsub>
 80180d2:	a369      	add	r3, pc, #420	@ (adr r3, 8018278 <_dtoa_r+0x2b0>)
 80180d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d8:	f7e8 fabe 	bl	8000658 <__aeabi_dmul>
 80180dc:	a368      	add	r3, pc, #416	@ (adr r3, 8018280 <_dtoa_r+0x2b8>)
 80180de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180e2:	f7e8 f903 	bl	80002ec <__adddf3>
 80180e6:	4604      	mov	r4, r0
 80180e8:	4630      	mov	r0, r6
 80180ea:	460d      	mov	r5, r1
 80180ec:	f7e8 fa4a 	bl	8000584 <__aeabi_i2d>
 80180f0:	a365      	add	r3, pc, #404	@ (adr r3, 8018288 <_dtoa_r+0x2c0>)
 80180f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180f6:	f7e8 faaf 	bl	8000658 <__aeabi_dmul>
 80180fa:	4602      	mov	r2, r0
 80180fc:	460b      	mov	r3, r1
 80180fe:	4620      	mov	r0, r4
 8018100:	4629      	mov	r1, r5
 8018102:	f7e8 f8f3 	bl	80002ec <__adddf3>
 8018106:	4604      	mov	r4, r0
 8018108:	460d      	mov	r5, r1
 801810a:	f7e8 fd55 	bl	8000bb8 <__aeabi_d2iz>
 801810e:	2200      	movs	r2, #0
 8018110:	4607      	mov	r7, r0
 8018112:	2300      	movs	r3, #0
 8018114:	4620      	mov	r0, r4
 8018116:	4629      	mov	r1, r5
 8018118:	f7e8 fd10 	bl	8000b3c <__aeabi_dcmplt>
 801811c:	b140      	cbz	r0, 8018130 <_dtoa_r+0x168>
 801811e:	4638      	mov	r0, r7
 8018120:	f7e8 fa30 	bl	8000584 <__aeabi_i2d>
 8018124:	4622      	mov	r2, r4
 8018126:	462b      	mov	r3, r5
 8018128:	f7e8 fcfe 	bl	8000b28 <__aeabi_dcmpeq>
 801812c:	b900      	cbnz	r0, 8018130 <_dtoa_r+0x168>
 801812e:	3f01      	subs	r7, #1
 8018130:	2f16      	cmp	r7, #22
 8018132:	d851      	bhi.n	80181d8 <_dtoa_r+0x210>
 8018134:	4b5b      	ldr	r3, [pc, #364]	@ (80182a4 <_dtoa_r+0x2dc>)
 8018136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801813e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018142:	f7e8 fcfb 	bl	8000b3c <__aeabi_dcmplt>
 8018146:	2800      	cmp	r0, #0
 8018148:	d048      	beq.n	80181dc <_dtoa_r+0x214>
 801814a:	3f01      	subs	r7, #1
 801814c:	2300      	movs	r3, #0
 801814e:	9312      	str	r3, [sp, #72]	@ 0x48
 8018150:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018152:	1b9b      	subs	r3, r3, r6
 8018154:	1e5a      	subs	r2, r3, #1
 8018156:	bf44      	itt	mi
 8018158:	f1c3 0801 	rsbmi	r8, r3, #1
 801815c:	2300      	movmi	r3, #0
 801815e:	9208      	str	r2, [sp, #32]
 8018160:	bf54      	ite	pl
 8018162:	f04f 0800 	movpl.w	r8, #0
 8018166:	9308      	strmi	r3, [sp, #32]
 8018168:	2f00      	cmp	r7, #0
 801816a:	db39      	blt.n	80181e0 <_dtoa_r+0x218>
 801816c:	9b08      	ldr	r3, [sp, #32]
 801816e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8018170:	443b      	add	r3, r7
 8018172:	9308      	str	r3, [sp, #32]
 8018174:	2300      	movs	r3, #0
 8018176:	930a      	str	r3, [sp, #40]	@ 0x28
 8018178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801817a:	2b09      	cmp	r3, #9
 801817c:	d864      	bhi.n	8018248 <_dtoa_r+0x280>
 801817e:	2b05      	cmp	r3, #5
 8018180:	bfc4      	itt	gt
 8018182:	3b04      	subgt	r3, #4
 8018184:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8018186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018188:	f1a3 0302 	sub.w	r3, r3, #2
 801818c:	bfcc      	ite	gt
 801818e:	2400      	movgt	r4, #0
 8018190:	2401      	movle	r4, #1
 8018192:	2b03      	cmp	r3, #3
 8018194:	d863      	bhi.n	801825e <_dtoa_r+0x296>
 8018196:	e8df f003 	tbb	[pc, r3]
 801819a:	372a      	.short	0x372a
 801819c:	5535      	.short	0x5535
 801819e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80181a2:	441e      	add	r6, r3
 80181a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80181a8:	2b20      	cmp	r3, #32
 80181aa:	bfc1      	itttt	gt
 80181ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80181b0:	409f      	lslgt	r7, r3
 80181b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80181b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80181ba:	bfd6      	itet	le
 80181bc:	f1c3 0320 	rsble	r3, r3, #32
 80181c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80181c4:	fa04 f003 	lslle.w	r0, r4, r3
 80181c8:	f7e8 f9cc 	bl	8000564 <__aeabi_ui2d>
 80181cc:	2201      	movs	r2, #1
 80181ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80181d2:	3e01      	subs	r6, #1
 80181d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80181d6:	e777      	b.n	80180c8 <_dtoa_r+0x100>
 80181d8:	2301      	movs	r3, #1
 80181da:	e7b8      	b.n	801814e <_dtoa_r+0x186>
 80181dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80181de:	e7b7      	b.n	8018150 <_dtoa_r+0x188>
 80181e0:	427b      	negs	r3, r7
 80181e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80181e4:	2300      	movs	r3, #0
 80181e6:	eba8 0807 	sub.w	r8, r8, r7
 80181ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80181ec:	e7c4      	b.n	8018178 <_dtoa_r+0x1b0>
 80181ee:	2300      	movs	r3, #0
 80181f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80181f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	dc35      	bgt.n	8018264 <_dtoa_r+0x29c>
 80181f8:	2301      	movs	r3, #1
 80181fa:	9300      	str	r3, [sp, #0]
 80181fc:	9307      	str	r3, [sp, #28]
 80181fe:	461a      	mov	r2, r3
 8018200:	920e      	str	r2, [sp, #56]	@ 0x38
 8018202:	e00b      	b.n	801821c <_dtoa_r+0x254>
 8018204:	2301      	movs	r3, #1
 8018206:	e7f3      	b.n	80181f0 <_dtoa_r+0x228>
 8018208:	2300      	movs	r3, #0
 801820a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801820c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801820e:	18fb      	adds	r3, r7, r3
 8018210:	9300      	str	r3, [sp, #0]
 8018212:	3301      	adds	r3, #1
 8018214:	2b01      	cmp	r3, #1
 8018216:	9307      	str	r3, [sp, #28]
 8018218:	bfb8      	it	lt
 801821a:	2301      	movlt	r3, #1
 801821c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8018220:	2100      	movs	r1, #0
 8018222:	2204      	movs	r2, #4
 8018224:	f102 0514 	add.w	r5, r2, #20
 8018228:	429d      	cmp	r5, r3
 801822a:	d91f      	bls.n	801826c <_dtoa_r+0x2a4>
 801822c:	6041      	str	r1, [r0, #4]
 801822e:	4658      	mov	r0, fp
 8018230:	f000 fcd8 	bl	8018be4 <_Balloc>
 8018234:	4682      	mov	sl, r0
 8018236:	2800      	cmp	r0, #0
 8018238:	d13c      	bne.n	80182b4 <_dtoa_r+0x2ec>
 801823a:	4b1b      	ldr	r3, [pc, #108]	@ (80182a8 <_dtoa_r+0x2e0>)
 801823c:	4602      	mov	r2, r0
 801823e:	f240 11af 	movw	r1, #431	@ 0x1af
 8018242:	e6d8      	b.n	8017ff6 <_dtoa_r+0x2e>
 8018244:	2301      	movs	r3, #1
 8018246:	e7e0      	b.n	801820a <_dtoa_r+0x242>
 8018248:	2401      	movs	r4, #1
 801824a:	2300      	movs	r3, #0
 801824c:	9309      	str	r3, [sp, #36]	@ 0x24
 801824e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018250:	f04f 33ff 	mov.w	r3, #4294967295
 8018254:	9300      	str	r3, [sp, #0]
 8018256:	9307      	str	r3, [sp, #28]
 8018258:	2200      	movs	r2, #0
 801825a:	2312      	movs	r3, #18
 801825c:	e7d0      	b.n	8018200 <_dtoa_r+0x238>
 801825e:	2301      	movs	r3, #1
 8018260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018262:	e7f5      	b.n	8018250 <_dtoa_r+0x288>
 8018264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018266:	9300      	str	r3, [sp, #0]
 8018268:	9307      	str	r3, [sp, #28]
 801826a:	e7d7      	b.n	801821c <_dtoa_r+0x254>
 801826c:	3101      	adds	r1, #1
 801826e:	0052      	lsls	r2, r2, #1
 8018270:	e7d8      	b.n	8018224 <_dtoa_r+0x25c>
 8018272:	bf00      	nop
 8018274:	f3af 8000 	nop.w
 8018278:	636f4361 	.word	0x636f4361
 801827c:	3fd287a7 	.word	0x3fd287a7
 8018280:	8b60c8b3 	.word	0x8b60c8b3
 8018284:	3fc68a28 	.word	0x3fc68a28
 8018288:	509f79fb 	.word	0x509f79fb
 801828c:	3fd34413 	.word	0x3fd34413
 8018290:	08054af2 	.word	0x08054af2
 8018294:	08054cdf 	.word	0x08054cdf
 8018298:	7ff00000 	.word	0x7ff00000
 801829c:	08054c73 	.word	0x08054c73
 80182a0:	3ff80000 	.word	0x3ff80000
 80182a4:	08054dd8 	.word	0x08054dd8
 80182a8:	08054d37 	.word	0x08054d37
 80182ac:	08054cdb 	.word	0x08054cdb
 80182b0:	08054c72 	.word	0x08054c72
 80182b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80182b8:	6018      	str	r0, [r3, #0]
 80182ba:	9b07      	ldr	r3, [sp, #28]
 80182bc:	2b0e      	cmp	r3, #14
 80182be:	f200 80a4 	bhi.w	801840a <_dtoa_r+0x442>
 80182c2:	2c00      	cmp	r4, #0
 80182c4:	f000 80a1 	beq.w	801840a <_dtoa_r+0x442>
 80182c8:	2f00      	cmp	r7, #0
 80182ca:	dd33      	ble.n	8018334 <_dtoa_r+0x36c>
 80182cc:	4bad      	ldr	r3, [pc, #692]	@ (8018584 <_dtoa_r+0x5bc>)
 80182ce:	f007 020f 	and.w	r2, r7, #15
 80182d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80182d6:	ed93 7b00 	vldr	d7, [r3]
 80182da:	05f8      	lsls	r0, r7, #23
 80182dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80182e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80182e4:	d516      	bpl.n	8018314 <_dtoa_r+0x34c>
 80182e6:	4ba8      	ldr	r3, [pc, #672]	@ (8018588 <_dtoa_r+0x5c0>)
 80182e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80182ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80182f0:	f7e8 fadc 	bl	80008ac <__aeabi_ddiv>
 80182f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182f8:	f004 040f 	and.w	r4, r4, #15
 80182fc:	2603      	movs	r6, #3
 80182fe:	4da2      	ldr	r5, [pc, #648]	@ (8018588 <_dtoa_r+0x5c0>)
 8018300:	b954      	cbnz	r4, 8018318 <_dtoa_r+0x350>
 8018302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801830a:	f7e8 facf 	bl	80008ac <__aeabi_ddiv>
 801830e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018312:	e028      	b.n	8018366 <_dtoa_r+0x39e>
 8018314:	2602      	movs	r6, #2
 8018316:	e7f2      	b.n	80182fe <_dtoa_r+0x336>
 8018318:	07e1      	lsls	r1, r4, #31
 801831a:	d508      	bpl.n	801832e <_dtoa_r+0x366>
 801831c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018320:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018324:	f7e8 f998 	bl	8000658 <__aeabi_dmul>
 8018328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801832c:	3601      	adds	r6, #1
 801832e:	1064      	asrs	r4, r4, #1
 8018330:	3508      	adds	r5, #8
 8018332:	e7e5      	b.n	8018300 <_dtoa_r+0x338>
 8018334:	f000 80d2 	beq.w	80184dc <_dtoa_r+0x514>
 8018338:	427c      	negs	r4, r7
 801833a:	4b92      	ldr	r3, [pc, #584]	@ (8018584 <_dtoa_r+0x5bc>)
 801833c:	4d92      	ldr	r5, [pc, #584]	@ (8018588 <_dtoa_r+0x5c0>)
 801833e:	f004 020f 	and.w	r2, r4, #15
 8018342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801834a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801834e:	f7e8 f983 	bl	8000658 <__aeabi_dmul>
 8018352:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018356:	1124      	asrs	r4, r4, #4
 8018358:	2300      	movs	r3, #0
 801835a:	2602      	movs	r6, #2
 801835c:	2c00      	cmp	r4, #0
 801835e:	f040 80b2 	bne.w	80184c6 <_dtoa_r+0x4fe>
 8018362:	2b00      	cmp	r3, #0
 8018364:	d1d3      	bne.n	801830e <_dtoa_r+0x346>
 8018366:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018368:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801836c:	2b00      	cmp	r3, #0
 801836e:	f000 80b7 	beq.w	80184e0 <_dtoa_r+0x518>
 8018372:	4b86      	ldr	r3, [pc, #536]	@ (801858c <_dtoa_r+0x5c4>)
 8018374:	2200      	movs	r2, #0
 8018376:	4620      	mov	r0, r4
 8018378:	4629      	mov	r1, r5
 801837a:	f7e8 fbdf 	bl	8000b3c <__aeabi_dcmplt>
 801837e:	2800      	cmp	r0, #0
 8018380:	f000 80ae 	beq.w	80184e0 <_dtoa_r+0x518>
 8018384:	9b07      	ldr	r3, [sp, #28]
 8018386:	2b00      	cmp	r3, #0
 8018388:	f000 80aa 	beq.w	80184e0 <_dtoa_r+0x518>
 801838c:	9b00      	ldr	r3, [sp, #0]
 801838e:	2b00      	cmp	r3, #0
 8018390:	dd37      	ble.n	8018402 <_dtoa_r+0x43a>
 8018392:	1e7b      	subs	r3, r7, #1
 8018394:	9304      	str	r3, [sp, #16]
 8018396:	4620      	mov	r0, r4
 8018398:	4b7d      	ldr	r3, [pc, #500]	@ (8018590 <_dtoa_r+0x5c8>)
 801839a:	2200      	movs	r2, #0
 801839c:	4629      	mov	r1, r5
 801839e:	f7e8 f95b 	bl	8000658 <__aeabi_dmul>
 80183a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183a6:	9c00      	ldr	r4, [sp, #0]
 80183a8:	3601      	adds	r6, #1
 80183aa:	4630      	mov	r0, r6
 80183ac:	f7e8 f8ea 	bl	8000584 <__aeabi_i2d>
 80183b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80183b4:	f7e8 f950 	bl	8000658 <__aeabi_dmul>
 80183b8:	4b76      	ldr	r3, [pc, #472]	@ (8018594 <_dtoa_r+0x5cc>)
 80183ba:	2200      	movs	r2, #0
 80183bc:	f7e7 ff96 	bl	80002ec <__adddf3>
 80183c0:	4605      	mov	r5, r0
 80183c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80183c6:	2c00      	cmp	r4, #0
 80183c8:	f040 808d 	bne.w	80184e6 <_dtoa_r+0x51e>
 80183cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80183d0:	4b71      	ldr	r3, [pc, #452]	@ (8018598 <_dtoa_r+0x5d0>)
 80183d2:	2200      	movs	r2, #0
 80183d4:	f7e7 ff88 	bl	80002e8 <__aeabi_dsub>
 80183d8:	4602      	mov	r2, r0
 80183da:	460b      	mov	r3, r1
 80183dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80183e0:	462a      	mov	r2, r5
 80183e2:	4633      	mov	r3, r6
 80183e4:	f7e8 fbc8 	bl	8000b78 <__aeabi_dcmpgt>
 80183e8:	2800      	cmp	r0, #0
 80183ea:	f040 828b 	bne.w	8018904 <_dtoa_r+0x93c>
 80183ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80183f2:	462a      	mov	r2, r5
 80183f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80183f8:	f7e8 fba0 	bl	8000b3c <__aeabi_dcmplt>
 80183fc:	2800      	cmp	r0, #0
 80183fe:	f040 8128 	bne.w	8018652 <_dtoa_r+0x68a>
 8018402:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8018406:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801840a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801840c:	2b00      	cmp	r3, #0
 801840e:	f2c0 815a 	blt.w	80186c6 <_dtoa_r+0x6fe>
 8018412:	2f0e      	cmp	r7, #14
 8018414:	f300 8157 	bgt.w	80186c6 <_dtoa_r+0x6fe>
 8018418:	4b5a      	ldr	r3, [pc, #360]	@ (8018584 <_dtoa_r+0x5bc>)
 801841a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801841e:	ed93 7b00 	vldr	d7, [r3]
 8018422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018424:	2b00      	cmp	r3, #0
 8018426:	ed8d 7b00 	vstr	d7, [sp]
 801842a:	da03      	bge.n	8018434 <_dtoa_r+0x46c>
 801842c:	9b07      	ldr	r3, [sp, #28]
 801842e:	2b00      	cmp	r3, #0
 8018430:	f340 8101 	ble.w	8018636 <_dtoa_r+0x66e>
 8018434:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8018438:	4656      	mov	r6, sl
 801843a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801843e:	4620      	mov	r0, r4
 8018440:	4629      	mov	r1, r5
 8018442:	f7e8 fa33 	bl	80008ac <__aeabi_ddiv>
 8018446:	f7e8 fbb7 	bl	8000bb8 <__aeabi_d2iz>
 801844a:	4680      	mov	r8, r0
 801844c:	f7e8 f89a 	bl	8000584 <__aeabi_i2d>
 8018450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018454:	f7e8 f900 	bl	8000658 <__aeabi_dmul>
 8018458:	4602      	mov	r2, r0
 801845a:	460b      	mov	r3, r1
 801845c:	4620      	mov	r0, r4
 801845e:	4629      	mov	r1, r5
 8018460:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8018464:	f7e7 ff40 	bl	80002e8 <__aeabi_dsub>
 8018468:	f806 4b01 	strb.w	r4, [r6], #1
 801846c:	9d07      	ldr	r5, [sp, #28]
 801846e:	eba6 040a 	sub.w	r4, r6, sl
 8018472:	42a5      	cmp	r5, r4
 8018474:	4602      	mov	r2, r0
 8018476:	460b      	mov	r3, r1
 8018478:	f040 8117 	bne.w	80186aa <_dtoa_r+0x6e2>
 801847c:	f7e7 ff36 	bl	80002ec <__adddf3>
 8018480:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018484:	4604      	mov	r4, r0
 8018486:	460d      	mov	r5, r1
 8018488:	f7e8 fb76 	bl	8000b78 <__aeabi_dcmpgt>
 801848c:	2800      	cmp	r0, #0
 801848e:	f040 80f9 	bne.w	8018684 <_dtoa_r+0x6bc>
 8018492:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018496:	4620      	mov	r0, r4
 8018498:	4629      	mov	r1, r5
 801849a:	f7e8 fb45 	bl	8000b28 <__aeabi_dcmpeq>
 801849e:	b118      	cbz	r0, 80184a8 <_dtoa_r+0x4e0>
 80184a0:	f018 0f01 	tst.w	r8, #1
 80184a4:	f040 80ee 	bne.w	8018684 <_dtoa_r+0x6bc>
 80184a8:	4649      	mov	r1, r9
 80184aa:	4658      	mov	r0, fp
 80184ac:	f000 fbda 	bl	8018c64 <_Bfree>
 80184b0:	2300      	movs	r3, #0
 80184b2:	7033      	strb	r3, [r6, #0]
 80184b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80184b6:	3701      	adds	r7, #1
 80184b8:	601f      	str	r7, [r3, #0]
 80184ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80184bc:	2b00      	cmp	r3, #0
 80184be:	f000 831d 	beq.w	8018afc <_dtoa_r+0xb34>
 80184c2:	601e      	str	r6, [r3, #0]
 80184c4:	e31a      	b.n	8018afc <_dtoa_r+0xb34>
 80184c6:	07e2      	lsls	r2, r4, #31
 80184c8:	d505      	bpl.n	80184d6 <_dtoa_r+0x50e>
 80184ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80184ce:	f7e8 f8c3 	bl	8000658 <__aeabi_dmul>
 80184d2:	3601      	adds	r6, #1
 80184d4:	2301      	movs	r3, #1
 80184d6:	1064      	asrs	r4, r4, #1
 80184d8:	3508      	adds	r5, #8
 80184da:	e73f      	b.n	801835c <_dtoa_r+0x394>
 80184dc:	2602      	movs	r6, #2
 80184de:	e742      	b.n	8018366 <_dtoa_r+0x39e>
 80184e0:	9c07      	ldr	r4, [sp, #28]
 80184e2:	9704      	str	r7, [sp, #16]
 80184e4:	e761      	b.n	80183aa <_dtoa_r+0x3e2>
 80184e6:	4b27      	ldr	r3, [pc, #156]	@ (8018584 <_dtoa_r+0x5bc>)
 80184e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80184ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80184ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80184f2:	4454      	add	r4, sl
 80184f4:	2900      	cmp	r1, #0
 80184f6:	d053      	beq.n	80185a0 <_dtoa_r+0x5d8>
 80184f8:	4928      	ldr	r1, [pc, #160]	@ (801859c <_dtoa_r+0x5d4>)
 80184fa:	2000      	movs	r0, #0
 80184fc:	f7e8 f9d6 	bl	80008ac <__aeabi_ddiv>
 8018500:	4633      	mov	r3, r6
 8018502:	462a      	mov	r2, r5
 8018504:	f7e7 fef0 	bl	80002e8 <__aeabi_dsub>
 8018508:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801850c:	4656      	mov	r6, sl
 801850e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018512:	f7e8 fb51 	bl	8000bb8 <__aeabi_d2iz>
 8018516:	4605      	mov	r5, r0
 8018518:	f7e8 f834 	bl	8000584 <__aeabi_i2d>
 801851c:	4602      	mov	r2, r0
 801851e:	460b      	mov	r3, r1
 8018520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018524:	f7e7 fee0 	bl	80002e8 <__aeabi_dsub>
 8018528:	3530      	adds	r5, #48	@ 0x30
 801852a:	4602      	mov	r2, r0
 801852c:	460b      	mov	r3, r1
 801852e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018532:	f806 5b01 	strb.w	r5, [r6], #1
 8018536:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801853a:	f7e8 faff 	bl	8000b3c <__aeabi_dcmplt>
 801853e:	2800      	cmp	r0, #0
 8018540:	d171      	bne.n	8018626 <_dtoa_r+0x65e>
 8018542:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018546:	4911      	ldr	r1, [pc, #68]	@ (801858c <_dtoa_r+0x5c4>)
 8018548:	2000      	movs	r0, #0
 801854a:	f7e7 fecd 	bl	80002e8 <__aeabi_dsub>
 801854e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8018552:	f7e8 faf3 	bl	8000b3c <__aeabi_dcmplt>
 8018556:	2800      	cmp	r0, #0
 8018558:	f040 8095 	bne.w	8018686 <_dtoa_r+0x6be>
 801855c:	42a6      	cmp	r6, r4
 801855e:	f43f af50 	beq.w	8018402 <_dtoa_r+0x43a>
 8018562:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8018566:	4b0a      	ldr	r3, [pc, #40]	@ (8018590 <_dtoa_r+0x5c8>)
 8018568:	2200      	movs	r2, #0
 801856a:	f7e8 f875 	bl	8000658 <__aeabi_dmul>
 801856e:	4b08      	ldr	r3, [pc, #32]	@ (8018590 <_dtoa_r+0x5c8>)
 8018570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8018574:	2200      	movs	r2, #0
 8018576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801857a:	f7e8 f86d 	bl	8000658 <__aeabi_dmul>
 801857e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018582:	e7c4      	b.n	801850e <_dtoa_r+0x546>
 8018584:	08054dd8 	.word	0x08054dd8
 8018588:	08054db0 	.word	0x08054db0
 801858c:	3ff00000 	.word	0x3ff00000
 8018590:	40240000 	.word	0x40240000
 8018594:	401c0000 	.word	0x401c0000
 8018598:	40140000 	.word	0x40140000
 801859c:	3fe00000 	.word	0x3fe00000
 80185a0:	4631      	mov	r1, r6
 80185a2:	4628      	mov	r0, r5
 80185a4:	f7e8 f858 	bl	8000658 <__aeabi_dmul>
 80185a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80185ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80185ae:	4656      	mov	r6, sl
 80185b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80185b4:	f7e8 fb00 	bl	8000bb8 <__aeabi_d2iz>
 80185b8:	4605      	mov	r5, r0
 80185ba:	f7e7 ffe3 	bl	8000584 <__aeabi_i2d>
 80185be:	4602      	mov	r2, r0
 80185c0:	460b      	mov	r3, r1
 80185c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80185c6:	f7e7 fe8f 	bl	80002e8 <__aeabi_dsub>
 80185ca:	3530      	adds	r5, #48	@ 0x30
 80185cc:	f806 5b01 	strb.w	r5, [r6], #1
 80185d0:	4602      	mov	r2, r0
 80185d2:	460b      	mov	r3, r1
 80185d4:	42a6      	cmp	r6, r4
 80185d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80185da:	f04f 0200 	mov.w	r2, #0
 80185de:	d124      	bne.n	801862a <_dtoa_r+0x662>
 80185e0:	4bac      	ldr	r3, [pc, #688]	@ (8018894 <_dtoa_r+0x8cc>)
 80185e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80185e6:	f7e7 fe81 	bl	80002ec <__adddf3>
 80185ea:	4602      	mov	r2, r0
 80185ec:	460b      	mov	r3, r1
 80185ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80185f2:	f7e8 fac1 	bl	8000b78 <__aeabi_dcmpgt>
 80185f6:	2800      	cmp	r0, #0
 80185f8:	d145      	bne.n	8018686 <_dtoa_r+0x6be>
 80185fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80185fe:	49a5      	ldr	r1, [pc, #660]	@ (8018894 <_dtoa_r+0x8cc>)
 8018600:	2000      	movs	r0, #0
 8018602:	f7e7 fe71 	bl	80002e8 <__aeabi_dsub>
 8018606:	4602      	mov	r2, r0
 8018608:	460b      	mov	r3, r1
 801860a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801860e:	f7e8 fa95 	bl	8000b3c <__aeabi_dcmplt>
 8018612:	2800      	cmp	r0, #0
 8018614:	f43f aef5 	beq.w	8018402 <_dtoa_r+0x43a>
 8018618:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801861a:	1e73      	subs	r3, r6, #1
 801861c:	9315      	str	r3, [sp, #84]	@ 0x54
 801861e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018622:	2b30      	cmp	r3, #48	@ 0x30
 8018624:	d0f8      	beq.n	8018618 <_dtoa_r+0x650>
 8018626:	9f04      	ldr	r7, [sp, #16]
 8018628:	e73e      	b.n	80184a8 <_dtoa_r+0x4e0>
 801862a:	4b9b      	ldr	r3, [pc, #620]	@ (8018898 <_dtoa_r+0x8d0>)
 801862c:	f7e8 f814 	bl	8000658 <__aeabi_dmul>
 8018630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018634:	e7bc      	b.n	80185b0 <_dtoa_r+0x5e8>
 8018636:	d10c      	bne.n	8018652 <_dtoa_r+0x68a>
 8018638:	4b98      	ldr	r3, [pc, #608]	@ (801889c <_dtoa_r+0x8d4>)
 801863a:	2200      	movs	r2, #0
 801863c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018640:	f7e8 f80a 	bl	8000658 <__aeabi_dmul>
 8018644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018648:	f7e8 fa8c 	bl	8000b64 <__aeabi_dcmpge>
 801864c:	2800      	cmp	r0, #0
 801864e:	f000 8157 	beq.w	8018900 <_dtoa_r+0x938>
 8018652:	2400      	movs	r4, #0
 8018654:	4625      	mov	r5, r4
 8018656:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018658:	43db      	mvns	r3, r3
 801865a:	9304      	str	r3, [sp, #16]
 801865c:	4656      	mov	r6, sl
 801865e:	2700      	movs	r7, #0
 8018660:	4621      	mov	r1, r4
 8018662:	4658      	mov	r0, fp
 8018664:	f000 fafe 	bl	8018c64 <_Bfree>
 8018668:	2d00      	cmp	r5, #0
 801866a:	d0dc      	beq.n	8018626 <_dtoa_r+0x65e>
 801866c:	b12f      	cbz	r7, 801867a <_dtoa_r+0x6b2>
 801866e:	42af      	cmp	r7, r5
 8018670:	d003      	beq.n	801867a <_dtoa_r+0x6b2>
 8018672:	4639      	mov	r1, r7
 8018674:	4658      	mov	r0, fp
 8018676:	f000 faf5 	bl	8018c64 <_Bfree>
 801867a:	4629      	mov	r1, r5
 801867c:	4658      	mov	r0, fp
 801867e:	f000 faf1 	bl	8018c64 <_Bfree>
 8018682:	e7d0      	b.n	8018626 <_dtoa_r+0x65e>
 8018684:	9704      	str	r7, [sp, #16]
 8018686:	4633      	mov	r3, r6
 8018688:	461e      	mov	r6, r3
 801868a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801868e:	2a39      	cmp	r2, #57	@ 0x39
 8018690:	d107      	bne.n	80186a2 <_dtoa_r+0x6da>
 8018692:	459a      	cmp	sl, r3
 8018694:	d1f8      	bne.n	8018688 <_dtoa_r+0x6c0>
 8018696:	9a04      	ldr	r2, [sp, #16]
 8018698:	3201      	adds	r2, #1
 801869a:	9204      	str	r2, [sp, #16]
 801869c:	2230      	movs	r2, #48	@ 0x30
 801869e:	f88a 2000 	strb.w	r2, [sl]
 80186a2:	781a      	ldrb	r2, [r3, #0]
 80186a4:	3201      	adds	r2, #1
 80186a6:	701a      	strb	r2, [r3, #0]
 80186a8:	e7bd      	b.n	8018626 <_dtoa_r+0x65e>
 80186aa:	4b7b      	ldr	r3, [pc, #492]	@ (8018898 <_dtoa_r+0x8d0>)
 80186ac:	2200      	movs	r2, #0
 80186ae:	f7e7 ffd3 	bl	8000658 <__aeabi_dmul>
 80186b2:	2200      	movs	r2, #0
 80186b4:	2300      	movs	r3, #0
 80186b6:	4604      	mov	r4, r0
 80186b8:	460d      	mov	r5, r1
 80186ba:	f7e8 fa35 	bl	8000b28 <__aeabi_dcmpeq>
 80186be:	2800      	cmp	r0, #0
 80186c0:	f43f aebb 	beq.w	801843a <_dtoa_r+0x472>
 80186c4:	e6f0      	b.n	80184a8 <_dtoa_r+0x4e0>
 80186c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80186c8:	2a00      	cmp	r2, #0
 80186ca:	f000 80db 	beq.w	8018884 <_dtoa_r+0x8bc>
 80186ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80186d0:	2a01      	cmp	r2, #1
 80186d2:	f300 80bf 	bgt.w	8018854 <_dtoa_r+0x88c>
 80186d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80186d8:	2a00      	cmp	r2, #0
 80186da:	f000 80b7 	beq.w	801884c <_dtoa_r+0x884>
 80186de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80186e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80186e4:	4646      	mov	r6, r8
 80186e6:	9a08      	ldr	r2, [sp, #32]
 80186e8:	2101      	movs	r1, #1
 80186ea:	441a      	add	r2, r3
 80186ec:	4658      	mov	r0, fp
 80186ee:	4498      	add	r8, r3
 80186f0:	9208      	str	r2, [sp, #32]
 80186f2:	f000 fb6b 	bl	8018dcc <__i2b>
 80186f6:	4605      	mov	r5, r0
 80186f8:	b15e      	cbz	r6, 8018712 <_dtoa_r+0x74a>
 80186fa:	9b08      	ldr	r3, [sp, #32]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	dd08      	ble.n	8018712 <_dtoa_r+0x74a>
 8018700:	42b3      	cmp	r3, r6
 8018702:	9a08      	ldr	r2, [sp, #32]
 8018704:	bfa8      	it	ge
 8018706:	4633      	movge	r3, r6
 8018708:	eba8 0803 	sub.w	r8, r8, r3
 801870c:	1af6      	subs	r6, r6, r3
 801870e:	1ad3      	subs	r3, r2, r3
 8018710:	9308      	str	r3, [sp, #32]
 8018712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018714:	b1f3      	cbz	r3, 8018754 <_dtoa_r+0x78c>
 8018716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018718:	2b00      	cmp	r3, #0
 801871a:	f000 80b7 	beq.w	801888c <_dtoa_r+0x8c4>
 801871e:	b18c      	cbz	r4, 8018744 <_dtoa_r+0x77c>
 8018720:	4629      	mov	r1, r5
 8018722:	4622      	mov	r2, r4
 8018724:	4658      	mov	r0, fp
 8018726:	f000 fc11 	bl	8018f4c <__pow5mult>
 801872a:	464a      	mov	r2, r9
 801872c:	4601      	mov	r1, r0
 801872e:	4605      	mov	r5, r0
 8018730:	4658      	mov	r0, fp
 8018732:	f000 fb61 	bl	8018df8 <__multiply>
 8018736:	4649      	mov	r1, r9
 8018738:	9004      	str	r0, [sp, #16]
 801873a:	4658      	mov	r0, fp
 801873c:	f000 fa92 	bl	8018c64 <_Bfree>
 8018740:	9b04      	ldr	r3, [sp, #16]
 8018742:	4699      	mov	r9, r3
 8018744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018746:	1b1a      	subs	r2, r3, r4
 8018748:	d004      	beq.n	8018754 <_dtoa_r+0x78c>
 801874a:	4649      	mov	r1, r9
 801874c:	4658      	mov	r0, fp
 801874e:	f000 fbfd 	bl	8018f4c <__pow5mult>
 8018752:	4681      	mov	r9, r0
 8018754:	2101      	movs	r1, #1
 8018756:	4658      	mov	r0, fp
 8018758:	f000 fb38 	bl	8018dcc <__i2b>
 801875c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801875e:	4604      	mov	r4, r0
 8018760:	2b00      	cmp	r3, #0
 8018762:	f000 81cf 	beq.w	8018b04 <_dtoa_r+0xb3c>
 8018766:	461a      	mov	r2, r3
 8018768:	4601      	mov	r1, r0
 801876a:	4658      	mov	r0, fp
 801876c:	f000 fbee 	bl	8018f4c <__pow5mult>
 8018770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018772:	2b01      	cmp	r3, #1
 8018774:	4604      	mov	r4, r0
 8018776:	f300 8095 	bgt.w	80188a4 <_dtoa_r+0x8dc>
 801877a:	9b02      	ldr	r3, [sp, #8]
 801877c:	2b00      	cmp	r3, #0
 801877e:	f040 8087 	bne.w	8018890 <_dtoa_r+0x8c8>
 8018782:	9b03      	ldr	r3, [sp, #12]
 8018784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018788:	2b00      	cmp	r3, #0
 801878a:	f040 8089 	bne.w	80188a0 <_dtoa_r+0x8d8>
 801878e:	9b03      	ldr	r3, [sp, #12]
 8018790:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018794:	0d1b      	lsrs	r3, r3, #20
 8018796:	051b      	lsls	r3, r3, #20
 8018798:	b12b      	cbz	r3, 80187a6 <_dtoa_r+0x7de>
 801879a:	9b08      	ldr	r3, [sp, #32]
 801879c:	3301      	adds	r3, #1
 801879e:	9308      	str	r3, [sp, #32]
 80187a0:	f108 0801 	add.w	r8, r8, #1
 80187a4:	2301      	movs	r3, #1
 80187a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80187a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	f000 81b0 	beq.w	8018b10 <_dtoa_r+0xb48>
 80187b0:	6923      	ldr	r3, [r4, #16]
 80187b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80187b6:	6918      	ldr	r0, [r3, #16]
 80187b8:	f000 fabc 	bl	8018d34 <__hi0bits>
 80187bc:	f1c0 0020 	rsb	r0, r0, #32
 80187c0:	9b08      	ldr	r3, [sp, #32]
 80187c2:	4418      	add	r0, r3
 80187c4:	f010 001f 	ands.w	r0, r0, #31
 80187c8:	d077      	beq.n	80188ba <_dtoa_r+0x8f2>
 80187ca:	f1c0 0320 	rsb	r3, r0, #32
 80187ce:	2b04      	cmp	r3, #4
 80187d0:	dd6b      	ble.n	80188aa <_dtoa_r+0x8e2>
 80187d2:	9b08      	ldr	r3, [sp, #32]
 80187d4:	f1c0 001c 	rsb	r0, r0, #28
 80187d8:	4403      	add	r3, r0
 80187da:	4480      	add	r8, r0
 80187dc:	4406      	add	r6, r0
 80187de:	9308      	str	r3, [sp, #32]
 80187e0:	f1b8 0f00 	cmp.w	r8, #0
 80187e4:	dd05      	ble.n	80187f2 <_dtoa_r+0x82a>
 80187e6:	4649      	mov	r1, r9
 80187e8:	4642      	mov	r2, r8
 80187ea:	4658      	mov	r0, fp
 80187ec:	f000 fc08 	bl	8019000 <__lshift>
 80187f0:	4681      	mov	r9, r0
 80187f2:	9b08      	ldr	r3, [sp, #32]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	dd05      	ble.n	8018804 <_dtoa_r+0x83c>
 80187f8:	4621      	mov	r1, r4
 80187fa:	461a      	mov	r2, r3
 80187fc:	4658      	mov	r0, fp
 80187fe:	f000 fbff 	bl	8019000 <__lshift>
 8018802:	4604      	mov	r4, r0
 8018804:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018806:	2b00      	cmp	r3, #0
 8018808:	d059      	beq.n	80188be <_dtoa_r+0x8f6>
 801880a:	4621      	mov	r1, r4
 801880c:	4648      	mov	r0, r9
 801880e:	f000 fc63 	bl	80190d8 <__mcmp>
 8018812:	2800      	cmp	r0, #0
 8018814:	da53      	bge.n	80188be <_dtoa_r+0x8f6>
 8018816:	1e7b      	subs	r3, r7, #1
 8018818:	9304      	str	r3, [sp, #16]
 801881a:	4649      	mov	r1, r9
 801881c:	2300      	movs	r3, #0
 801881e:	220a      	movs	r2, #10
 8018820:	4658      	mov	r0, fp
 8018822:	f000 fa41 	bl	8018ca8 <__multadd>
 8018826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018828:	4681      	mov	r9, r0
 801882a:	2b00      	cmp	r3, #0
 801882c:	f000 8172 	beq.w	8018b14 <_dtoa_r+0xb4c>
 8018830:	2300      	movs	r3, #0
 8018832:	4629      	mov	r1, r5
 8018834:	220a      	movs	r2, #10
 8018836:	4658      	mov	r0, fp
 8018838:	f000 fa36 	bl	8018ca8 <__multadd>
 801883c:	9b00      	ldr	r3, [sp, #0]
 801883e:	2b00      	cmp	r3, #0
 8018840:	4605      	mov	r5, r0
 8018842:	dc67      	bgt.n	8018914 <_dtoa_r+0x94c>
 8018844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018846:	2b02      	cmp	r3, #2
 8018848:	dc41      	bgt.n	80188ce <_dtoa_r+0x906>
 801884a:	e063      	b.n	8018914 <_dtoa_r+0x94c>
 801884c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801884e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8018852:	e746      	b.n	80186e2 <_dtoa_r+0x71a>
 8018854:	9b07      	ldr	r3, [sp, #28]
 8018856:	1e5c      	subs	r4, r3, #1
 8018858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801885a:	42a3      	cmp	r3, r4
 801885c:	bfbf      	itttt	lt
 801885e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8018860:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8018862:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8018864:	1ae3      	sublt	r3, r4, r3
 8018866:	bfb4      	ite	lt
 8018868:	18d2      	addlt	r2, r2, r3
 801886a:	1b1c      	subge	r4, r3, r4
 801886c:	9b07      	ldr	r3, [sp, #28]
 801886e:	bfbc      	itt	lt
 8018870:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8018872:	2400      	movlt	r4, #0
 8018874:	2b00      	cmp	r3, #0
 8018876:	bfb5      	itete	lt
 8018878:	eba8 0603 	sublt.w	r6, r8, r3
 801887c:	9b07      	ldrge	r3, [sp, #28]
 801887e:	2300      	movlt	r3, #0
 8018880:	4646      	movge	r6, r8
 8018882:	e730      	b.n	80186e6 <_dtoa_r+0x71e>
 8018884:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018886:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8018888:	4646      	mov	r6, r8
 801888a:	e735      	b.n	80186f8 <_dtoa_r+0x730>
 801888c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801888e:	e75c      	b.n	801874a <_dtoa_r+0x782>
 8018890:	2300      	movs	r3, #0
 8018892:	e788      	b.n	80187a6 <_dtoa_r+0x7de>
 8018894:	3fe00000 	.word	0x3fe00000
 8018898:	40240000 	.word	0x40240000
 801889c:	40140000 	.word	0x40140000
 80188a0:	9b02      	ldr	r3, [sp, #8]
 80188a2:	e780      	b.n	80187a6 <_dtoa_r+0x7de>
 80188a4:	2300      	movs	r3, #0
 80188a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80188a8:	e782      	b.n	80187b0 <_dtoa_r+0x7e8>
 80188aa:	d099      	beq.n	80187e0 <_dtoa_r+0x818>
 80188ac:	9a08      	ldr	r2, [sp, #32]
 80188ae:	331c      	adds	r3, #28
 80188b0:	441a      	add	r2, r3
 80188b2:	4498      	add	r8, r3
 80188b4:	441e      	add	r6, r3
 80188b6:	9208      	str	r2, [sp, #32]
 80188b8:	e792      	b.n	80187e0 <_dtoa_r+0x818>
 80188ba:	4603      	mov	r3, r0
 80188bc:	e7f6      	b.n	80188ac <_dtoa_r+0x8e4>
 80188be:	9b07      	ldr	r3, [sp, #28]
 80188c0:	9704      	str	r7, [sp, #16]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	dc20      	bgt.n	8018908 <_dtoa_r+0x940>
 80188c6:	9300      	str	r3, [sp, #0]
 80188c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188ca:	2b02      	cmp	r3, #2
 80188cc:	dd1e      	ble.n	801890c <_dtoa_r+0x944>
 80188ce:	9b00      	ldr	r3, [sp, #0]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	f47f aec0 	bne.w	8018656 <_dtoa_r+0x68e>
 80188d6:	4621      	mov	r1, r4
 80188d8:	2205      	movs	r2, #5
 80188da:	4658      	mov	r0, fp
 80188dc:	f000 f9e4 	bl	8018ca8 <__multadd>
 80188e0:	4601      	mov	r1, r0
 80188e2:	4604      	mov	r4, r0
 80188e4:	4648      	mov	r0, r9
 80188e6:	f000 fbf7 	bl	80190d8 <__mcmp>
 80188ea:	2800      	cmp	r0, #0
 80188ec:	f77f aeb3 	ble.w	8018656 <_dtoa_r+0x68e>
 80188f0:	4656      	mov	r6, sl
 80188f2:	2331      	movs	r3, #49	@ 0x31
 80188f4:	f806 3b01 	strb.w	r3, [r6], #1
 80188f8:	9b04      	ldr	r3, [sp, #16]
 80188fa:	3301      	adds	r3, #1
 80188fc:	9304      	str	r3, [sp, #16]
 80188fe:	e6ae      	b.n	801865e <_dtoa_r+0x696>
 8018900:	9c07      	ldr	r4, [sp, #28]
 8018902:	9704      	str	r7, [sp, #16]
 8018904:	4625      	mov	r5, r4
 8018906:	e7f3      	b.n	80188f0 <_dtoa_r+0x928>
 8018908:	9b07      	ldr	r3, [sp, #28]
 801890a:	9300      	str	r3, [sp, #0]
 801890c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801890e:	2b00      	cmp	r3, #0
 8018910:	f000 8104 	beq.w	8018b1c <_dtoa_r+0xb54>
 8018914:	2e00      	cmp	r6, #0
 8018916:	dd05      	ble.n	8018924 <_dtoa_r+0x95c>
 8018918:	4629      	mov	r1, r5
 801891a:	4632      	mov	r2, r6
 801891c:	4658      	mov	r0, fp
 801891e:	f000 fb6f 	bl	8019000 <__lshift>
 8018922:	4605      	mov	r5, r0
 8018924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018926:	2b00      	cmp	r3, #0
 8018928:	d05a      	beq.n	80189e0 <_dtoa_r+0xa18>
 801892a:	6869      	ldr	r1, [r5, #4]
 801892c:	4658      	mov	r0, fp
 801892e:	f000 f959 	bl	8018be4 <_Balloc>
 8018932:	4606      	mov	r6, r0
 8018934:	b928      	cbnz	r0, 8018942 <_dtoa_r+0x97a>
 8018936:	4b84      	ldr	r3, [pc, #528]	@ (8018b48 <_dtoa_r+0xb80>)
 8018938:	4602      	mov	r2, r0
 801893a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801893e:	f7ff bb5a 	b.w	8017ff6 <_dtoa_r+0x2e>
 8018942:	692a      	ldr	r2, [r5, #16]
 8018944:	3202      	adds	r2, #2
 8018946:	0092      	lsls	r2, r2, #2
 8018948:	f105 010c 	add.w	r1, r5, #12
 801894c:	300c      	adds	r0, #12
 801894e:	f7ff fa84 	bl	8017e5a <memcpy>
 8018952:	2201      	movs	r2, #1
 8018954:	4631      	mov	r1, r6
 8018956:	4658      	mov	r0, fp
 8018958:	f000 fb52 	bl	8019000 <__lshift>
 801895c:	f10a 0301 	add.w	r3, sl, #1
 8018960:	9307      	str	r3, [sp, #28]
 8018962:	9b00      	ldr	r3, [sp, #0]
 8018964:	4453      	add	r3, sl
 8018966:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018968:	9b02      	ldr	r3, [sp, #8]
 801896a:	f003 0301 	and.w	r3, r3, #1
 801896e:	462f      	mov	r7, r5
 8018970:	930a      	str	r3, [sp, #40]	@ 0x28
 8018972:	4605      	mov	r5, r0
 8018974:	9b07      	ldr	r3, [sp, #28]
 8018976:	4621      	mov	r1, r4
 8018978:	3b01      	subs	r3, #1
 801897a:	4648      	mov	r0, r9
 801897c:	9300      	str	r3, [sp, #0]
 801897e:	f7ff fa99 	bl	8017eb4 <quorem>
 8018982:	4639      	mov	r1, r7
 8018984:	9002      	str	r0, [sp, #8]
 8018986:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801898a:	4648      	mov	r0, r9
 801898c:	f000 fba4 	bl	80190d8 <__mcmp>
 8018990:	462a      	mov	r2, r5
 8018992:	9008      	str	r0, [sp, #32]
 8018994:	4621      	mov	r1, r4
 8018996:	4658      	mov	r0, fp
 8018998:	f000 fbba 	bl	8019110 <__mdiff>
 801899c:	68c2      	ldr	r2, [r0, #12]
 801899e:	4606      	mov	r6, r0
 80189a0:	bb02      	cbnz	r2, 80189e4 <_dtoa_r+0xa1c>
 80189a2:	4601      	mov	r1, r0
 80189a4:	4648      	mov	r0, r9
 80189a6:	f000 fb97 	bl	80190d8 <__mcmp>
 80189aa:	4602      	mov	r2, r0
 80189ac:	4631      	mov	r1, r6
 80189ae:	4658      	mov	r0, fp
 80189b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80189b2:	f000 f957 	bl	8018c64 <_Bfree>
 80189b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80189ba:	9e07      	ldr	r6, [sp, #28]
 80189bc:	ea43 0102 	orr.w	r1, r3, r2
 80189c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80189c2:	4319      	orrs	r1, r3
 80189c4:	d110      	bne.n	80189e8 <_dtoa_r+0xa20>
 80189c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80189ca:	d029      	beq.n	8018a20 <_dtoa_r+0xa58>
 80189cc:	9b08      	ldr	r3, [sp, #32]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	dd02      	ble.n	80189d8 <_dtoa_r+0xa10>
 80189d2:	9b02      	ldr	r3, [sp, #8]
 80189d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80189d8:	9b00      	ldr	r3, [sp, #0]
 80189da:	f883 8000 	strb.w	r8, [r3]
 80189de:	e63f      	b.n	8018660 <_dtoa_r+0x698>
 80189e0:	4628      	mov	r0, r5
 80189e2:	e7bb      	b.n	801895c <_dtoa_r+0x994>
 80189e4:	2201      	movs	r2, #1
 80189e6:	e7e1      	b.n	80189ac <_dtoa_r+0x9e4>
 80189e8:	9b08      	ldr	r3, [sp, #32]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	db04      	blt.n	80189f8 <_dtoa_r+0xa30>
 80189ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80189f0:	430b      	orrs	r3, r1
 80189f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80189f4:	430b      	orrs	r3, r1
 80189f6:	d120      	bne.n	8018a3a <_dtoa_r+0xa72>
 80189f8:	2a00      	cmp	r2, #0
 80189fa:	dded      	ble.n	80189d8 <_dtoa_r+0xa10>
 80189fc:	4649      	mov	r1, r9
 80189fe:	2201      	movs	r2, #1
 8018a00:	4658      	mov	r0, fp
 8018a02:	f000 fafd 	bl	8019000 <__lshift>
 8018a06:	4621      	mov	r1, r4
 8018a08:	4681      	mov	r9, r0
 8018a0a:	f000 fb65 	bl	80190d8 <__mcmp>
 8018a0e:	2800      	cmp	r0, #0
 8018a10:	dc03      	bgt.n	8018a1a <_dtoa_r+0xa52>
 8018a12:	d1e1      	bne.n	80189d8 <_dtoa_r+0xa10>
 8018a14:	f018 0f01 	tst.w	r8, #1
 8018a18:	d0de      	beq.n	80189d8 <_dtoa_r+0xa10>
 8018a1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018a1e:	d1d8      	bne.n	80189d2 <_dtoa_r+0xa0a>
 8018a20:	9a00      	ldr	r2, [sp, #0]
 8018a22:	2339      	movs	r3, #57	@ 0x39
 8018a24:	7013      	strb	r3, [r2, #0]
 8018a26:	4633      	mov	r3, r6
 8018a28:	461e      	mov	r6, r3
 8018a2a:	3b01      	subs	r3, #1
 8018a2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8018a30:	2a39      	cmp	r2, #57	@ 0x39
 8018a32:	d052      	beq.n	8018ada <_dtoa_r+0xb12>
 8018a34:	3201      	adds	r2, #1
 8018a36:	701a      	strb	r2, [r3, #0]
 8018a38:	e612      	b.n	8018660 <_dtoa_r+0x698>
 8018a3a:	2a00      	cmp	r2, #0
 8018a3c:	dd07      	ble.n	8018a4e <_dtoa_r+0xa86>
 8018a3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018a42:	d0ed      	beq.n	8018a20 <_dtoa_r+0xa58>
 8018a44:	9a00      	ldr	r2, [sp, #0]
 8018a46:	f108 0301 	add.w	r3, r8, #1
 8018a4a:	7013      	strb	r3, [r2, #0]
 8018a4c:	e608      	b.n	8018660 <_dtoa_r+0x698>
 8018a4e:	9b07      	ldr	r3, [sp, #28]
 8018a50:	9a07      	ldr	r2, [sp, #28]
 8018a52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8018a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018a58:	4293      	cmp	r3, r2
 8018a5a:	d028      	beq.n	8018aae <_dtoa_r+0xae6>
 8018a5c:	4649      	mov	r1, r9
 8018a5e:	2300      	movs	r3, #0
 8018a60:	220a      	movs	r2, #10
 8018a62:	4658      	mov	r0, fp
 8018a64:	f000 f920 	bl	8018ca8 <__multadd>
 8018a68:	42af      	cmp	r7, r5
 8018a6a:	4681      	mov	r9, r0
 8018a6c:	f04f 0300 	mov.w	r3, #0
 8018a70:	f04f 020a 	mov.w	r2, #10
 8018a74:	4639      	mov	r1, r7
 8018a76:	4658      	mov	r0, fp
 8018a78:	d107      	bne.n	8018a8a <_dtoa_r+0xac2>
 8018a7a:	f000 f915 	bl	8018ca8 <__multadd>
 8018a7e:	4607      	mov	r7, r0
 8018a80:	4605      	mov	r5, r0
 8018a82:	9b07      	ldr	r3, [sp, #28]
 8018a84:	3301      	adds	r3, #1
 8018a86:	9307      	str	r3, [sp, #28]
 8018a88:	e774      	b.n	8018974 <_dtoa_r+0x9ac>
 8018a8a:	f000 f90d 	bl	8018ca8 <__multadd>
 8018a8e:	4629      	mov	r1, r5
 8018a90:	4607      	mov	r7, r0
 8018a92:	2300      	movs	r3, #0
 8018a94:	220a      	movs	r2, #10
 8018a96:	4658      	mov	r0, fp
 8018a98:	f000 f906 	bl	8018ca8 <__multadd>
 8018a9c:	4605      	mov	r5, r0
 8018a9e:	e7f0      	b.n	8018a82 <_dtoa_r+0xaba>
 8018aa0:	9b00      	ldr	r3, [sp, #0]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	bfcc      	ite	gt
 8018aa6:	461e      	movgt	r6, r3
 8018aa8:	2601      	movle	r6, #1
 8018aaa:	4456      	add	r6, sl
 8018aac:	2700      	movs	r7, #0
 8018aae:	4649      	mov	r1, r9
 8018ab0:	2201      	movs	r2, #1
 8018ab2:	4658      	mov	r0, fp
 8018ab4:	f000 faa4 	bl	8019000 <__lshift>
 8018ab8:	4621      	mov	r1, r4
 8018aba:	4681      	mov	r9, r0
 8018abc:	f000 fb0c 	bl	80190d8 <__mcmp>
 8018ac0:	2800      	cmp	r0, #0
 8018ac2:	dcb0      	bgt.n	8018a26 <_dtoa_r+0xa5e>
 8018ac4:	d102      	bne.n	8018acc <_dtoa_r+0xb04>
 8018ac6:	f018 0f01 	tst.w	r8, #1
 8018aca:	d1ac      	bne.n	8018a26 <_dtoa_r+0xa5e>
 8018acc:	4633      	mov	r3, r6
 8018ace:	461e      	mov	r6, r3
 8018ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ad4:	2a30      	cmp	r2, #48	@ 0x30
 8018ad6:	d0fa      	beq.n	8018ace <_dtoa_r+0xb06>
 8018ad8:	e5c2      	b.n	8018660 <_dtoa_r+0x698>
 8018ada:	459a      	cmp	sl, r3
 8018adc:	d1a4      	bne.n	8018a28 <_dtoa_r+0xa60>
 8018ade:	9b04      	ldr	r3, [sp, #16]
 8018ae0:	3301      	adds	r3, #1
 8018ae2:	9304      	str	r3, [sp, #16]
 8018ae4:	2331      	movs	r3, #49	@ 0x31
 8018ae6:	f88a 3000 	strb.w	r3, [sl]
 8018aea:	e5b9      	b.n	8018660 <_dtoa_r+0x698>
 8018aec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018aee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8018b4c <_dtoa_r+0xb84>
 8018af2:	b11b      	cbz	r3, 8018afc <_dtoa_r+0xb34>
 8018af4:	f10a 0308 	add.w	r3, sl, #8
 8018af8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018afa:	6013      	str	r3, [r2, #0]
 8018afc:	4650      	mov	r0, sl
 8018afe:	b019      	add	sp, #100	@ 0x64
 8018b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b06:	2b01      	cmp	r3, #1
 8018b08:	f77f ae37 	ble.w	801877a <_dtoa_r+0x7b2>
 8018b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018b10:	2001      	movs	r0, #1
 8018b12:	e655      	b.n	80187c0 <_dtoa_r+0x7f8>
 8018b14:	9b00      	ldr	r3, [sp, #0]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	f77f aed6 	ble.w	80188c8 <_dtoa_r+0x900>
 8018b1c:	4656      	mov	r6, sl
 8018b1e:	4621      	mov	r1, r4
 8018b20:	4648      	mov	r0, r9
 8018b22:	f7ff f9c7 	bl	8017eb4 <quorem>
 8018b26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018b2a:	f806 8b01 	strb.w	r8, [r6], #1
 8018b2e:	9b00      	ldr	r3, [sp, #0]
 8018b30:	eba6 020a 	sub.w	r2, r6, sl
 8018b34:	4293      	cmp	r3, r2
 8018b36:	ddb3      	ble.n	8018aa0 <_dtoa_r+0xad8>
 8018b38:	4649      	mov	r1, r9
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	220a      	movs	r2, #10
 8018b3e:	4658      	mov	r0, fp
 8018b40:	f000 f8b2 	bl	8018ca8 <__multadd>
 8018b44:	4681      	mov	r9, r0
 8018b46:	e7ea      	b.n	8018b1e <_dtoa_r+0xb56>
 8018b48:	08054d37 	.word	0x08054d37
 8018b4c:	08054cd2 	.word	0x08054cd2

08018b50 <_free_r>:
 8018b50:	b538      	push	{r3, r4, r5, lr}
 8018b52:	4605      	mov	r5, r0
 8018b54:	2900      	cmp	r1, #0
 8018b56:	d041      	beq.n	8018bdc <_free_r+0x8c>
 8018b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b5c:	1f0c      	subs	r4, r1, #4
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	bfb8      	it	lt
 8018b62:	18e4      	addlt	r4, r4, r3
 8018b64:	f7fe f936 	bl	8016dd4 <__malloc_lock>
 8018b68:	4a1d      	ldr	r2, [pc, #116]	@ (8018be0 <_free_r+0x90>)
 8018b6a:	6813      	ldr	r3, [r2, #0]
 8018b6c:	b933      	cbnz	r3, 8018b7c <_free_r+0x2c>
 8018b6e:	6063      	str	r3, [r4, #4]
 8018b70:	6014      	str	r4, [r2, #0]
 8018b72:	4628      	mov	r0, r5
 8018b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b78:	f7fe b932 	b.w	8016de0 <__malloc_unlock>
 8018b7c:	42a3      	cmp	r3, r4
 8018b7e:	d908      	bls.n	8018b92 <_free_r+0x42>
 8018b80:	6820      	ldr	r0, [r4, #0]
 8018b82:	1821      	adds	r1, r4, r0
 8018b84:	428b      	cmp	r3, r1
 8018b86:	bf01      	itttt	eq
 8018b88:	6819      	ldreq	r1, [r3, #0]
 8018b8a:	685b      	ldreq	r3, [r3, #4]
 8018b8c:	1809      	addeq	r1, r1, r0
 8018b8e:	6021      	streq	r1, [r4, #0]
 8018b90:	e7ed      	b.n	8018b6e <_free_r+0x1e>
 8018b92:	461a      	mov	r2, r3
 8018b94:	685b      	ldr	r3, [r3, #4]
 8018b96:	b10b      	cbz	r3, 8018b9c <_free_r+0x4c>
 8018b98:	42a3      	cmp	r3, r4
 8018b9a:	d9fa      	bls.n	8018b92 <_free_r+0x42>
 8018b9c:	6811      	ldr	r1, [r2, #0]
 8018b9e:	1850      	adds	r0, r2, r1
 8018ba0:	42a0      	cmp	r0, r4
 8018ba2:	d10b      	bne.n	8018bbc <_free_r+0x6c>
 8018ba4:	6820      	ldr	r0, [r4, #0]
 8018ba6:	4401      	add	r1, r0
 8018ba8:	1850      	adds	r0, r2, r1
 8018baa:	4283      	cmp	r3, r0
 8018bac:	6011      	str	r1, [r2, #0]
 8018bae:	d1e0      	bne.n	8018b72 <_free_r+0x22>
 8018bb0:	6818      	ldr	r0, [r3, #0]
 8018bb2:	685b      	ldr	r3, [r3, #4]
 8018bb4:	6053      	str	r3, [r2, #4]
 8018bb6:	4408      	add	r0, r1
 8018bb8:	6010      	str	r0, [r2, #0]
 8018bba:	e7da      	b.n	8018b72 <_free_r+0x22>
 8018bbc:	d902      	bls.n	8018bc4 <_free_r+0x74>
 8018bbe:	230c      	movs	r3, #12
 8018bc0:	602b      	str	r3, [r5, #0]
 8018bc2:	e7d6      	b.n	8018b72 <_free_r+0x22>
 8018bc4:	6820      	ldr	r0, [r4, #0]
 8018bc6:	1821      	adds	r1, r4, r0
 8018bc8:	428b      	cmp	r3, r1
 8018bca:	bf04      	itt	eq
 8018bcc:	6819      	ldreq	r1, [r3, #0]
 8018bce:	685b      	ldreq	r3, [r3, #4]
 8018bd0:	6063      	str	r3, [r4, #4]
 8018bd2:	bf04      	itt	eq
 8018bd4:	1809      	addeq	r1, r1, r0
 8018bd6:	6021      	streq	r1, [r4, #0]
 8018bd8:	6054      	str	r4, [r2, #4]
 8018bda:	e7ca      	b.n	8018b72 <_free_r+0x22>
 8018bdc:	bd38      	pop	{r3, r4, r5, pc}
 8018bde:	bf00      	nop
 8018be0:	20014778 	.word	0x20014778

08018be4 <_Balloc>:
 8018be4:	b570      	push	{r4, r5, r6, lr}
 8018be6:	69c6      	ldr	r6, [r0, #28]
 8018be8:	4604      	mov	r4, r0
 8018bea:	460d      	mov	r5, r1
 8018bec:	b976      	cbnz	r6, 8018c0c <_Balloc+0x28>
 8018bee:	2010      	movs	r0, #16
 8018bf0:	f7fe f83e 	bl	8016c70 <malloc>
 8018bf4:	4602      	mov	r2, r0
 8018bf6:	61e0      	str	r0, [r4, #28]
 8018bf8:	b920      	cbnz	r0, 8018c04 <_Balloc+0x20>
 8018bfa:	4b18      	ldr	r3, [pc, #96]	@ (8018c5c <_Balloc+0x78>)
 8018bfc:	4818      	ldr	r0, [pc, #96]	@ (8018c60 <_Balloc+0x7c>)
 8018bfe:	216b      	movs	r1, #107	@ 0x6b
 8018c00:	f7ff f93a 	bl	8017e78 <__assert_func>
 8018c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c08:	6006      	str	r6, [r0, #0]
 8018c0a:	60c6      	str	r6, [r0, #12]
 8018c0c:	69e6      	ldr	r6, [r4, #28]
 8018c0e:	68f3      	ldr	r3, [r6, #12]
 8018c10:	b183      	cbz	r3, 8018c34 <_Balloc+0x50>
 8018c12:	69e3      	ldr	r3, [r4, #28]
 8018c14:	68db      	ldr	r3, [r3, #12]
 8018c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018c1a:	b9b8      	cbnz	r0, 8018c4c <_Balloc+0x68>
 8018c1c:	2101      	movs	r1, #1
 8018c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8018c22:	1d72      	adds	r2, r6, #5
 8018c24:	0092      	lsls	r2, r2, #2
 8018c26:	4620      	mov	r0, r4
 8018c28:	f000 ff41 	bl	8019aae <_calloc_r>
 8018c2c:	b160      	cbz	r0, 8018c48 <_Balloc+0x64>
 8018c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018c32:	e00e      	b.n	8018c52 <_Balloc+0x6e>
 8018c34:	2221      	movs	r2, #33	@ 0x21
 8018c36:	2104      	movs	r1, #4
 8018c38:	4620      	mov	r0, r4
 8018c3a:	f000 ff38 	bl	8019aae <_calloc_r>
 8018c3e:	69e3      	ldr	r3, [r4, #28]
 8018c40:	60f0      	str	r0, [r6, #12]
 8018c42:	68db      	ldr	r3, [r3, #12]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d1e4      	bne.n	8018c12 <_Balloc+0x2e>
 8018c48:	2000      	movs	r0, #0
 8018c4a:	bd70      	pop	{r4, r5, r6, pc}
 8018c4c:	6802      	ldr	r2, [r0, #0]
 8018c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c52:	2300      	movs	r3, #0
 8018c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018c58:	e7f7      	b.n	8018c4a <_Balloc+0x66>
 8018c5a:	bf00      	nop
 8018c5c:	08054af2 	.word	0x08054af2
 8018c60:	08054d48 	.word	0x08054d48

08018c64 <_Bfree>:
 8018c64:	b570      	push	{r4, r5, r6, lr}
 8018c66:	69c6      	ldr	r6, [r0, #28]
 8018c68:	4605      	mov	r5, r0
 8018c6a:	460c      	mov	r4, r1
 8018c6c:	b976      	cbnz	r6, 8018c8c <_Bfree+0x28>
 8018c6e:	2010      	movs	r0, #16
 8018c70:	f7fd fffe 	bl	8016c70 <malloc>
 8018c74:	4602      	mov	r2, r0
 8018c76:	61e8      	str	r0, [r5, #28]
 8018c78:	b920      	cbnz	r0, 8018c84 <_Bfree+0x20>
 8018c7a:	4b09      	ldr	r3, [pc, #36]	@ (8018ca0 <_Bfree+0x3c>)
 8018c7c:	4809      	ldr	r0, [pc, #36]	@ (8018ca4 <_Bfree+0x40>)
 8018c7e:	218f      	movs	r1, #143	@ 0x8f
 8018c80:	f7ff f8fa 	bl	8017e78 <__assert_func>
 8018c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c88:	6006      	str	r6, [r0, #0]
 8018c8a:	60c6      	str	r6, [r0, #12]
 8018c8c:	b13c      	cbz	r4, 8018c9e <_Bfree+0x3a>
 8018c8e:	69eb      	ldr	r3, [r5, #28]
 8018c90:	6862      	ldr	r2, [r4, #4]
 8018c92:	68db      	ldr	r3, [r3, #12]
 8018c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018c98:	6021      	str	r1, [r4, #0]
 8018c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018c9e:	bd70      	pop	{r4, r5, r6, pc}
 8018ca0:	08054af2 	.word	0x08054af2
 8018ca4:	08054d48 	.word	0x08054d48

08018ca8 <__multadd>:
 8018ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cac:	690d      	ldr	r5, [r1, #16]
 8018cae:	4607      	mov	r7, r0
 8018cb0:	460c      	mov	r4, r1
 8018cb2:	461e      	mov	r6, r3
 8018cb4:	f101 0c14 	add.w	ip, r1, #20
 8018cb8:	2000      	movs	r0, #0
 8018cba:	f8dc 3000 	ldr.w	r3, [ip]
 8018cbe:	b299      	uxth	r1, r3
 8018cc0:	fb02 6101 	mla	r1, r2, r1, r6
 8018cc4:	0c1e      	lsrs	r6, r3, #16
 8018cc6:	0c0b      	lsrs	r3, r1, #16
 8018cc8:	fb02 3306 	mla	r3, r2, r6, r3
 8018ccc:	b289      	uxth	r1, r1
 8018cce:	3001      	adds	r0, #1
 8018cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018cd4:	4285      	cmp	r5, r0
 8018cd6:	f84c 1b04 	str.w	r1, [ip], #4
 8018cda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018cde:	dcec      	bgt.n	8018cba <__multadd+0x12>
 8018ce0:	b30e      	cbz	r6, 8018d26 <__multadd+0x7e>
 8018ce2:	68a3      	ldr	r3, [r4, #8]
 8018ce4:	42ab      	cmp	r3, r5
 8018ce6:	dc19      	bgt.n	8018d1c <__multadd+0x74>
 8018ce8:	6861      	ldr	r1, [r4, #4]
 8018cea:	4638      	mov	r0, r7
 8018cec:	3101      	adds	r1, #1
 8018cee:	f7ff ff79 	bl	8018be4 <_Balloc>
 8018cf2:	4680      	mov	r8, r0
 8018cf4:	b928      	cbnz	r0, 8018d02 <__multadd+0x5a>
 8018cf6:	4602      	mov	r2, r0
 8018cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8018d2c <__multadd+0x84>)
 8018cfa:	480d      	ldr	r0, [pc, #52]	@ (8018d30 <__multadd+0x88>)
 8018cfc:	21ba      	movs	r1, #186	@ 0xba
 8018cfe:	f7ff f8bb 	bl	8017e78 <__assert_func>
 8018d02:	6922      	ldr	r2, [r4, #16]
 8018d04:	3202      	adds	r2, #2
 8018d06:	f104 010c 	add.w	r1, r4, #12
 8018d0a:	0092      	lsls	r2, r2, #2
 8018d0c:	300c      	adds	r0, #12
 8018d0e:	f7ff f8a4 	bl	8017e5a <memcpy>
 8018d12:	4621      	mov	r1, r4
 8018d14:	4638      	mov	r0, r7
 8018d16:	f7ff ffa5 	bl	8018c64 <_Bfree>
 8018d1a:	4644      	mov	r4, r8
 8018d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018d20:	3501      	adds	r5, #1
 8018d22:	615e      	str	r6, [r3, #20]
 8018d24:	6125      	str	r5, [r4, #16]
 8018d26:	4620      	mov	r0, r4
 8018d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d2c:	08054d37 	.word	0x08054d37
 8018d30:	08054d48 	.word	0x08054d48

08018d34 <__hi0bits>:
 8018d34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018d38:	4603      	mov	r3, r0
 8018d3a:	bf36      	itet	cc
 8018d3c:	0403      	lslcc	r3, r0, #16
 8018d3e:	2000      	movcs	r0, #0
 8018d40:	2010      	movcc	r0, #16
 8018d42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018d46:	bf3c      	itt	cc
 8018d48:	021b      	lslcc	r3, r3, #8
 8018d4a:	3008      	addcc	r0, #8
 8018d4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018d50:	bf3c      	itt	cc
 8018d52:	011b      	lslcc	r3, r3, #4
 8018d54:	3004      	addcc	r0, #4
 8018d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018d5a:	bf3c      	itt	cc
 8018d5c:	009b      	lslcc	r3, r3, #2
 8018d5e:	3002      	addcc	r0, #2
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	db05      	blt.n	8018d70 <__hi0bits+0x3c>
 8018d64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018d68:	f100 0001 	add.w	r0, r0, #1
 8018d6c:	bf08      	it	eq
 8018d6e:	2020      	moveq	r0, #32
 8018d70:	4770      	bx	lr

08018d72 <__lo0bits>:
 8018d72:	6803      	ldr	r3, [r0, #0]
 8018d74:	4602      	mov	r2, r0
 8018d76:	f013 0007 	ands.w	r0, r3, #7
 8018d7a:	d00b      	beq.n	8018d94 <__lo0bits+0x22>
 8018d7c:	07d9      	lsls	r1, r3, #31
 8018d7e:	d421      	bmi.n	8018dc4 <__lo0bits+0x52>
 8018d80:	0798      	lsls	r0, r3, #30
 8018d82:	bf49      	itett	mi
 8018d84:	085b      	lsrmi	r3, r3, #1
 8018d86:	089b      	lsrpl	r3, r3, #2
 8018d88:	2001      	movmi	r0, #1
 8018d8a:	6013      	strmi	r3, [r2, #0]
 8018d8c:	bf5c      	itt	pl
 8018d8e:	6013      	strpl	r3, [r2, #0]
 8018d90:	2002      	movpl	r0, #2
 8018d92:	4770      	bx	lr
 8018d94:	b299      	uxth	r1, r3
 8018d96:	b909      	cbnz	r1, 8018d9c <__lo0bits+0x2a>
 8018d98:	0c1b      	lsrs	r3, r3, #16
 8018d9a:	2010      	movs	r0, #16
 8018d9c:	b2d9      	uxtb	r1, r3
 8018d9e:	b909      	cbnz	r1, 8018da4 <__lo0bits+0x32>
 8018da0:	3008      	adds	r0, #8
 8018da2:	0a1b      	lsrs	r3, r3, #8
 8018da4:	0719      	lsls	r1, r3, #28
 8018da6:	bf04      	itt	eq
 8018da8:	091b      	lsreq	r3, r3, #4
 8018daa:	3004      	addeq	r0, #4
 8018dac:	0799      	lsls	r1, r3, #30
 8018dae:	bf04      	itt	eq
 8018db0:	089b      	lsreq	r3, r3, #2
 8018db2:	3002      	addeq	r0, #2
 8018db4:	07d9      	lsls	r1, r3, #31
 8018db6:	d403      	bmi.n	8018dc0 <__lo0bits+0x4e>
 8018db8:	085b      	lsrs	r3, r3, #1
 8018dba:	f100 0001 	add.w	r0, r0, #1
 8018dbe:	d003      	beq.n	8018dc8 <__lo0bits+0x56>
 8018dc0:	6013      	str	r3, [r2, #0]
 8018dc2:	4770      	bx	lr
 8018dc4:	2000      	movs	r0, #0
 8018dc6:	4770      	bx	lr
 8018dc8:	2020      	movs	r0, #32
 8018dca:	4770      	bx	lr

08018dcc <__i2b>:
 8018dcc:	b510      	push	{r4, lr}
 8018dce:	460c      	mov	r4, r1
 8018dd0:	2101      	movs	r1, #1
 8018dd2:	f7ff ff07 	bl	8018be4 <_Balloc>
 8018dd6:	4602      	mov	r2, r0
 8018dd8:	b928      	cbnz	r0, 8018de6 <__i2b+0x1a>
 8018dda:	4b05      	ldr	r3, [pc, #20]	@ (8018df0 <__i2b+0x24>)
 8018ddc:	4805      	ldr	r0, [pc, #20]	@ (8018df4 <__i2b+0x28>)
 8018dde:	f240 1145 	movw	r1, #325	@ 0x145
 8018de2:	f7ff f849 	bl	8017e78 <__assert_func>
 8018de6:	2301      	movs	r3, #1
 8018de8:	6144      	str	r4, [r0, #20]
 8018dea:	6103      	str	r3, [r0, #16]
 8018dec:	bd10      	pop	{r4, pc}
 8018dee:	bf00      	nop
 8018df0:	08054d37 	.word	0x08054d37
 8018df4:	08054d48 	.word	0x08054d48

08018df8 <__multiply>:
 8018df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dfc:	4614      	mov	r4, r2
 8018dfe:	690a      	ldr	r2, [r1, #16]
 8018e00:	6923      	ldr	r3, [r4, #16]
 8018e02:	429a      	cmp	r2, r3
 8018e04:	bfa8      	it	ge
 8018e06:	4623      	movge	r3, r4
 8018e08:	460f      	mov	r7, r1
 8018e0a:	bfa4      	itt	ge
 8018e0c:	460c      	movge	r4, r1
 8018e0e:	461f      	movge	r7, r3
 8018e10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018e14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018e18:	68a3      	ldr	r3, [r4, #8]
 8018e1a:	6861      	ldr	r1, [r4, #4]
 8018e1c:	eb0a 0609 	add.w	r6, sl, r9
 8018e20:	42b3      	cmp	r3, r6
 8018e22:	b085      	sub	sp, #20
 8018e24:	bfb8      	it	lt
 8018e26:	3101      	addlt	r1, #1
 8018e28:	f7ff fedc 	bl	8018be4 <_Balloc>
 8018e2c:	b930      	cbnz	r0, 8018e3c <__multiply+0x44>
 8018e2e:	4602      	mov	r2, r0
 8018e30:	4b44      	ldr	r3, [pc, #272]	@ (8018f44 <__multiply+0x14c>)
 8018e32:	4845      	ldr	r0, [pc, #276]	@ (8018f48 <__multiply+0x150>)
 8018e34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018e38:	f7ff f81e 	bl	8017e78 <__assert_func>
 8018e3c:	f100 0514 	add.w	r5, r0, #20
 8018e40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018e44:	462b      	mov	r3, r5
 8018e46:	2200      	movs	r2, #0
 8018e48:	4543      	cmp	r3, r8
 8018e4a:	d321      	bcc.n	8018e90 <__multiply+0x98>
 8018e4c:	f107 0114 	add.w	r1, r7, #20
 8018e50:	f104 0214 	add.w	r2, r4, #20
 8018e54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018e58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018e5c:	9302      	str	r3, [sp, #8]
 8018e5e:	1b13      	subs	r3, r2, r4
 8018e60:	3b15      	subs	r3, #21
 8018e62:	f023 0303 	bic.w	r3, r3, #3
 8018e66:	3304      	adds	r3, #4
 8018e68:	f104 0715 	add.w	r7, r4, #21
 8018e6c:	42ba      	cmp	r2, r7
 8018e6e:	bf38      	it	cc
 8018e70:	2304      	movcc	r3, #4
 8018e72:	9301      	str	r3, [sp, #4]
 8018e74:	9b02      	ldr	r3, [sp, #8]
 8018e76:	9103      	str	r1, [sp, #12]
 8018e78:	428b      	cmp	r3, r1
 8018e7a:	d80c      	bhi.n	8018e96 <__multiply+0x9e>
 8018e7c:	2e00      	cmp	r6, #0
 8018e7e:	dd03      	ble.n	8018e88 <__multiply+0x90>
 8018e80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d05b      	beq.n	8018f40 <__multiply+0x148>
 8018e88:	6106      	str	r6, [r0, #16]
 8018e8a:	b005      	add	sp, #20
 8018e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e90:	f843 2b04 	str.w	r2, [r3], #4
 8018e94:	e7d8      	b.n	8018e48 <__multiply+0x50>
 8018e96:	f8b1 a000 	ldrh.w	sl, [r1]
 8018e9a:	f1ba 0f00 	cmp.w	sl, #0
 8018e9e:	d024      	beq.n	8018eea <__multiply+0xf2>
 8018ea0:	f104 0e14 	add.w	lr, r4, #20
 8018ea4:	46a9      	mov	r9, r5
 8018ea6:	f04f 0c00 	mov.w	ip, #0
 8018eaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018eae:	f8d9 3000 	ldr.w	r3, [r9]
 8018eb2:	fa1f fb87 	uxth.w	fp, r7
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	fb0a 330b 	mla	r3, sl, fp, r3
 8018ebc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018ec0:	f8d9 7000 	ldr.w	r7, [r9]
 8018ec4:	4463      	add	r3, ip
 8018ec6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018eca:	fb0a c70b 	mla	r7, sl, fp, ip
 8018ece:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018ed2:	b29b      	uxth	r3, r3
 8018ed4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018ed8:	4572      	cmp	r2, lr
 8018eda:	f849 3b04 	str.w	r3, [r9], #4
 8018ede:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018ee2:	d8e2      	bhi.n	8018eaa <__multiply+0xb2>
 8018ee4:	9b01      	ldr	r3, [sp, #4]
 8018ee6:	f845 c003 	str.w	ip, [r5, r3]
 8018eea:	9b03      	ldr	r3, [sp, #12]
 8018eec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018ef0:	3104      	adds	r1, #4
 8018ef2:	f1b9 0f00 	cmp.w	r9, #0
 8018ef6:	d021      	beq.n	8018f3c <__multiply+0x144>
 8018ef8:	682b      	ldr	r3, [r5, #0]
 8018efa:	f104 0c14 	add.w	ip, r4, #20
 8018efe:	46ae      	mov	lr, r5
 8018f00:	f04f 0a00 	mov.w	sl, #0
 8018f04:	f8bc b000 	ldrh.w	fp, [ip]
 8018f08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018f0c:	fb09 770b 	mla	r7, r9, fp, r7
 8018f10:	4457      	add	r7, sl
 8018f12:	b29b      	uxth	r3, r3
 8018f14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018f18:	f84e 3b04 	str.w	r3, [lr], #4
 8018f1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018f20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018f24:	f8be 3000 	ldrh.w	r3, [lr]
 8018f28:	fb09 330a 	mla	r3, r9, sl, r3
 8018f2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018f30:	4562      	cmp	r2, ip
 8018f32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018f36:	d8e5      	bhi.n	8018f04 <__multiply+0x10c>
 8018f38:	9f01      	ldr	r7, [sp, #4]
 8018f3a:	51eb      	str	r3, [r5, r7]
 8018f3c:	3504      	adds	r5, #4
 8018f3e:	e799      	b.n	8018e74 <__multiply+0x7c>
 8018f40:	3e01      	subs	r6, #1
 8018f42:	e79b      	b.n	8018e7c <__multiply+0x84>
 8018f44:	08054d37 	.word	0x08054d37
 8018f48:	08054d48 	.word	0x08054d48

08018f4c <__pow5mult>:
 8018f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f50:	4615      	mov	r5, r2
 8018f52:	f012 0203 	ands.w	r2, r2, #3
 8018f56:	4607      	mov	r7, r0
 8018f58:	460e      	mov	r6, r1
 8018f5a:	d007      	beq.n	8018f6c <__pow5mult+0x20>
 8018f5c:	4c25      	ldr	r4, [pc, #148]	@ (8018ff4 <__pow5mult+0xa8>)
 8018f5e:	3a01      	subs	r2, #1
 8018f60:	2300      	movs	r3, #0
 8018f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018f66:	f7ff fe9f 	bl	8018ca8 <__multadd>
 8018f6a:	4606      	mov	r6, r0
 8018f6c:	10ad      	asrs	r5, r5, #2
 8018f6e:	d03d      	beq.n	8018fec <__pow5mult+0xa0>
 8018f70:	69fc      	ldr	r4, [r7, #28]
 8018f72:	b97c      	cbnz	r4, 8018f94 <__pow5mult+0x48>
 8018f74:	2010      	movs	r0, #16
 8018f76:	f7fd fe7b 	bl	8016c70 <malloc>
 8018f7a:	4602      	mov	r2, r0
 8018f7c:	61f8      	str	r0, [r7, #28]
 8018f7e:	b928      	cbnz	r0, 8018f8c <__pow5mult+0x40>
 8018f80:	4b1d      	ldr	r3, [pc, #116]	@ (8018ff8 <__pow5mult+0xac>)
 8018f82:	481e      	ldr	r0, [pc, #120]	@ (8018ffc <__pow5mult+0xb0>)
 8018f84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018f88:	f7fe ff76 	bl	8017e78 <__assert_func>
 8018f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018f90:	6004      	str	r4, [r0, #0]
 8018f92:	60c4      	str	r4, [r0, #12]
 8018f94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018f9c:	b94c      	cbnz	r4, 8018fb2 <__pow5mult+0x66>
 8018f9e:	f240 2171 	movw	r1, #625	@ 0x271
 8018fa2:	4638      	mov	r0, r7
 8018fa4:	f7ff ff12 	bl	8018dcc <__i2b>
 8018fa8:	2300      	movs	r3, #0
 8018faa:	f8c8 0008 	str.w	r0, [r8, #8]
 8018fae:	4604      	mov	r4, r0
 8018fb0:	6003      	str	r3, [r0, #0]
 8018fb2:	f04f 0900 	mov.w	r9, #0
 8018fb6:	07eb      	lsls	r3, r5, #31
 8018fb8:	d50a      	bpl.n	8018fd0 <__pow5mult+0x84>
 8018fba:	4631      	mov	r1, r6
 8018fbc:	4622      	mov	r2, r4
 8018fbe:	4638      	mov	r0, r7
 8018fc0:	f7ff ff1a 	bl	8018df8 <__multiply>
 8018fc4:	4631      	mov	r1, r6
 8018fc6:	4680      	mov	r8, r0
 8018fc8:	4638      	mov	r0, r7
 8018fca:	f7ff fe4b 	bl	8018c64 <_Bfree>
 8018fce:	4646      	mov	r6, r8
 8018fd0:	106d      	asrs	r5, r5, #1
 8018fd2:	d00b      	beq.n	8018fec <__pow5mult+0xa0>
 8018fd4:	6820      	ldr	r0, [r4, #0]
 8018fd6:	b938      	cbnz	r0, 8018fe8 <__pow5mult+0x9c>
 8018fd8:	4622      	mov	r2, r4
 8018fda:	4621      	mov	r1, r4
 8018fdc:	4638      	mov	r0, r7
 8018fde:	f7ff ff0b 	bl	8018df8 <__multiply>
 8018fe2:	6020      	str	r0, [r4, #0]
 8018fe4:	f8c0 9000 	str.w	r9, [r0]
 8018fe8:	4604      	mov	r4, r0
 8018fea:	e7e4      	b.n	8018fb6 <__pow5mult+0x6a>
 8018fec:	4630      	mov	r0, r6
 8018fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ff2:	bf00      	nop
 8018ff4:	08054da4 	.word	0x08054da4
 8018ff8:	08054af2 	.word	0x08054af2
 8018ffc:	08054d48 	.word	0x08054d48

08019000 <__lshift>:
 8019000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019004:	460c      	mov	r4, r1
 8019006:	6849      	ldr	r1, [r1, #4]
 8019008:	6923      	ldr	r3, [r4, #16]
 801900a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801900e:	68a3      	ldr	r3, [r4, #8]
 8019010:	4607      	mov	r7, r0
 8019012:	4691      	mov	r9, r2
 8019014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019018:	f108 0601 	add.w	r6, r8, #1
 801901c:	42b3      	cmp	r3, r6
 801901e:	db0b      	blt.n	8019038 <__lshift+0x38>
 8019020:	4638      	mov	r0, r7
 8019022:	f7ff fddf 	bl	8018be4 <_Balloc>
 8019026:	4605      	mov	r5, r0
 8019028:	b948      	cbnz	r0, 801903e <__lshift+0x3e>
 801902a:	4602      	mov	r2, r0
 801902c:	4b28      	ldr	r3, [pc, #160]	@ (80190d0 <__lshift+0xd0>)
 801902e:	4829      	ldr	r0, [pc, #164]	@ (80190d4 <__lshift+0xd4>)
 8019030:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8019034:	f7fe ff20 	bl	8017e78 <__assert_func>
 8019038:	3101      	adds	r1, #1
 801903a:	005b      	lsls	r3, r3, #1
 801903c:	e7ee      	b.n	801901c <__lshift+0x1c>
 801903e:	2300      	movs	r3, #0
 8019040:	f100 0114 	add.w	r1, r0, #20
 8019044:	f100 0210 	add.w	r2, r0, #16
 8019048:	4618      	mov	r0, r3
 801904a:	4553      	cmp	r3, sl
 801904c:	db33      	blt.n	80190b6 <__lshift+0xb6>
 801904e:	6920      	ldr	r0, [r4, #16]
 8019050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019054:	f104 0314 	add.w	r3, r4, #20
 8019058:	f019 091f 	ands.w	r9, r9, #31
 801905c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019060:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019064:	d02b      	beq.n	80190be <__lshift+0xbe>
 8019066:	f1c9 0e20 	rsb	lr, r9, #32
 801906a:	468a      	mov	sl, r1
 801906c:	2200      	movs	r2, #0
 801906e:	6818      	ldr	r0, [r3, #0]
 8019070:	fa00 f009 	lsl.w	r0, r0, r9
 8019074:	4310      	orrs	r0, r2
 8019076:	f84a 0b04 	str.w	r0, [sl], #4
 801907a:	f853 2b04 	ldr.w	r2, [r3], #4
 801907e:	459c      	cmp	ip, r3
 8019080:	fa22 f20e 	lsr.w	r2, r2, lr
 8019084:	d8f3      	bhi.n	801906e <__lshift+0x6e>
 8019086:	ebac 0304 	sub.w	r3, ip, r4
 801908a:	3b15      	subs	r3, #21
 801908c:	f023 0303 	bic.w	r3, r3, #3
 8019090:	3304      	adds	r3, #4
 8019092:	f104 0015 	add.w	r0, r4, #21
 8019096:	4584      	cmp	ip, r0
 8019098:	bf38      	it	cc
 801909a:	2304      	movcc	r3, #4
 801909c:	50ca      	str	r2, [r1, r3]
 801909e:	b10a      	cbz	r2, 80190a4 <__lshift+0xa4>
 80190a0:	f108 0602 	add.w	r6, r8, #2
 80190a4:	3e01      	subs	r6, #1
 80190a6:	4638      	mov	r0, r7
 80190a8:	612e      	str	r6, [r5, #16]
 80190aa:	4621      	mov	r1, r4
 80190ac:	f7ff fdda 	bl	8018c64 <_Bfree>
 80190b0:	4628      	mov	r0, r5
 80190b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80190ba:	3301      	adds	r3, #1
 80190bc:	e7c5      	b.n	801904a <__lshift+0x4a>
 80190be:	3904      	subs	r1, #4
 80190c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80190c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80190c8:	459c      	cmp	ip, r3
 80190ca:	d8f9      	bhi.n	80190c0 <__lshift+0xc0>
 80190cc:	e7ea      	b.n	80190a4 <__lshift+0xa4>
 80190ce:	bf00      	nop
 80190d0:	08054d37 	.word	0x08054d37
 80190d4:	08054d48 	.word	0x08054d48

080190d8 <__mcmp>:
 80190d8:	690a      	ldr	r2, [r1, #16]
 80190da:	4603      	mov	r3, r0
 80190dc:	6900      	ldr	r0, [r0, #16]
 80190de:	1a80      	subs	r0, r0, r2
 80190e0:	b530      	push	{r4, r5, lr}
 80190e2:	d10e      	bne.n	8019102 <__mcmp+0x2a>
 80190e4:	3314      	adds	r3, #20
 80190e6:	3114      	adds	r1, #20
 80190e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80190ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80190f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80190f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80190f8:	4295      	cmp	r5, r2
 80190fa:	d003      	beq.n	8019104 <__mcmp+0x2c>
 80190fc:	d205      	bcs.n	801910a <__mcmp+0x32>
 80190fe:	f04f 30ff 	mov.w	r0, #4294967295
 8019102:	bd30      	pop	{r4, r5, pc}
 8019104:	42a3      	cmp	r3, r4
 8019106:	d3f3      	bcc.n	80190f0 <__mcmp+0x18>
 8019108:	e7fb      	b.n	8019102 <__mcmp+0x2a>
 801910a:	2001      	movs	r0, #1
 801910c:	e7f9      	b.n	8019102 <__mcmp+0x2a>
	...

08019110 <__mdiff>:
 8019110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019114:	4689      	mov	r9, r1
 8019116:	4606      	mov	r6, r0
 8019118:	4611      	mov	r1, r2
 801911a:	4648      	mov	r0, r9
 801911c:	4614      	mov	r4, r2
 801911e:	f7ff ffdb 	bl	80190d8 <__mcmp>
 8019122:	1e05      	subs	r5, r0, #0
 8019124:	d112      	bne.n	801914c <__mdiff+0x3c>
 8019126:	4629      	mov	r1, r5
 8019128:	4630      	mov	r0, r6
 801912a:	f7ff fd5b 	bl	8018be4 <_Balloc>
 801912e:	4602      	mov	r2, r0
 8019130:	b928      	cbnz	r0, 801913e <__mdiff+0x2e>
 8019132:	4b3f      	ldr	r3, [pc, #252]	@ (8019230 <__mdiff+0x120>)
 8019134:	f240 2137 	movw	r1, #567	@ 0x237
 8019138:	483e      	ldr	r0, [pc, #248]	@ (8019234 <__mdiff+0x124>)
 801913a:	f7fe fe9d 	bl	8017e78 <__assert_func>
 801913e:	2301      	movs	r3, #1
 8019140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019144:	4610      	mov	r0, r2
 8019146:	b003      	add	sp, #12
 8019148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801914c:	bfbc      	itt	lt
 801914e:	464b      	movlt	r3, r9
 8019150:	46a1      	movlt	r9, r4
 8019152:	4630      	mov	r0, r6
 8019154:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019158:	bfba      	itte	lt
 801915a:	461c      	movlt	r4, r3
 801915c:	2501      	movlt	r5, #1
 801915e:	2500      	movge	r5, #0
 8019160:	f7ff fd40 	bl	8018be4 <_Balloc>
 8019164:	4602      	mov	r2, r0
 8019166:	b918      	cbnz	r0, 8019170 <__mdiff+0x60>
 8019168:	4b31      	ldr	r3, [pc, #196]	@ (8019230 <__mdiff+0x120>)
 801916a:	f240 2145 	movw	r1, #581	@ 0x245
 801916e:	e7e3      	b.n	8019138 <__mdiff+0x28>
 8019170:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8019174:	6926      	ldr	r6, [r4, #16]
 8019176:	60c5      	str	r5, [r0, #12]
 8019178:	f109 0310 	add.w	r3, r9, #16
 801917c:	f109 0514 	add.w	r5, r9, #20
 8019180:	f104 0e14 	add.w	lr, r4, #20
 8019184:	f100 0b14 	add.w	fp, r0, #20
 8019188:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801918c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019190:	9301      	str	r3, [sp, #4]
 8019192:	46d9      	mov	r9, fp
 8019194:	f04f 0c00 	mov.w	ip, #0
 8019198:	9b01      	ldr	r3, [sp, #4]
 801919a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801919e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80191a2:	9301      	str	r3, [sp, #4]
 80191a4:	fa1f f38a 	uxth.w	r3, sl
 80191a8:	4619      	mov	r1, r3
 80191aa:	b283      	uxth	r3, r0
 80191ac:	1acb      	subs	r3, r1, r3
 80191ae:	0c00      	lsrs	r0, r0, #16
 80191b0:	4463      	add	r3, ip
 80191b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80191b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80191ba:	b29b      	uxth	r3, r3
 80191bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80191c0:	4576      	cmp	r6, lr
 80191c2:	f849 3b04 	str.w	r3, [r9], #4
 80191c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80191ca:	d8e5      	bhi.n	8019198 <__mdiff+0x88>
 80191cc:	1b33      	subs	r3, r6, r4
 80191ce:	3b15      	subs	r3, #21
 80191d0:	f023 0303 	bic.w	r3, r3, #3
 80191d4:	3415      	adds	r4, #21
 80191d6:	3304      	adds	r3, #4
 80191d8:	42a6      	cmp	r6, r4
 80191da:	bf38      	it	cc
 80191dc:	2304      	movcc	r3, #4
 80191de:	441d      	add	r5, r3
 80191e0:	445b      	add	r3, fp
 80191e2:	461e      	mov	r6, r3
 80191e4:	462c      	mov	r4, r5
 80191e6:	4544      	cmp	r4, r8
 80191e8:	d30e      	bcc.n	8019208 <__mdiff+0xf8>
 80191ea:	f108 0103 	add.w	r1, r8, #3
 80191ee:	1b49      	subs	r1, r1, r5
 80191f0:	f021 0103 	bic.w	r1, r1, #3
 80191f4:	3d03      	subs	r5, #3
 80191f6:	45a8      	cmp	r8, r5
 80191f8:	bf38      	it	cc
 80191fa:	2100      	movcc	r1, #0
 80191fc:	440b      	add	r3, r1
 80191fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019202:	b191      	cbz	r1, 801922a <__mdiff+0x11a>
 8019204:	6117      	str	r7, [r2, #16]
 8019206:	e79d      	b.n	8019144 <__mdiff+0x34>
 8019208:	f854 1b04 	ldr.w	r1, [r4], #4
 801920c:	46e6      	mov	lr, ip
 801920e:	0c08      	lsrs	r0, r1, #16
 8019210:	fa1c fc81 	uxtah	ip, ip, r1
 8019214:	4471      	add	r1, lr
 8019216:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801921a:	b289      	uxth	r1, r1
 801921c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019220:	f846 1b04 	str.w	r1, [r6], #4
 8019224:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8019228:	e7dd      	b.n	80191e6 <__mdiff+0xd6>
 801922a:	3f01      	subs	r7, #1
 801922c:	e7e7      	b.n	80191fe <__mdiff+0xee>
 801922e:	bf00      	nop
 8019230:	08054d37 	.word	0x08054d37
 8019234:	08054d48 	.word	0x08054d48

08019238 <__d2b>:
 8019238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801923c:	460f      	mov	r7, r1
 801923e:	2101      	movs	r1, #1
 8019240:	ec59 8b10 	vmov	r8, r9, d0
 8019244:	4616      	mov	r6, r2
 8019246:	f7ff fccd 	bl	8018be4 <_Balloc>
 801924a:	4604      	mov	r4, r0
 801924c:	b930      	cbnz	r0, 801925c <__d2b+0x24>
 801924e:	4602      	mov	r2, r0
 8019250:	4b23      	ldr	r3, [pc, #140]	@ (80192e0 <__d2b+0xa8>)
 8019252:	4824      	ldr	r0, [pc, #144]	@ (80192e4 <__d2b+0xac>)
 8019254:	f240 310f 	movw	r1, #783	@ 0x30f
 8019258:	f7fe fe0e 	bl	8017e78 <__assert_func>
 801925c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019264:	b10d      	cbz	r5, 801926a <__d2b+0x32>
 8019266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801926a:	9301      	str	r3, [sp, #4]
 801926c:	f1b8 0300 	subs.w	r3, r8, #0
 8019270:	d023      	beq.n	80192ba <__d2b+0x82>
 8019272:	4668      	mov	r0, sp
 8019274:	9300      	str	r3, [sp, #0]
 8019276:	f7ff fd7c 	bl	8018d72 <__lo0bits>
 801927a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801927e:	b1d0      	cbz	r0, 80192b6 <__d2b+0x7e>
 8019280:	f1c0 0320 	rsb	r3, r0, #32
 8019284:	fa02 f303 	lsl.w	r3, r2, r3
 8019288:	430b      	orrs	r3, r1
 801928a:	40c2      	lsrs	r2, r0
 801928c:	6163      	str	r3, [r4, #20]
 801928e:	9201      	str	r2, [sp, #4]
 8019290:	9b01      	ldr	r3, [sp, #4]
 8019292:	61a3      	str	r3, [r4, #24]
 8019294:	2b00      	cmp	r3, #0
 8019296:	bf0c      	ite	eq
 8019298:	2201      	moveq	r2, #1
 801929a:	2202      	movne	r2, #2
 801929c:	6122      	str	r2, [r4, #16]
 801929e:	b1a5      	cbz	r5, 80192ca <__d2b+0x92>
 80192a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80192a4:	4405      	add	r5, r0
 80192a6:	603d      	str	r5, [r7, #0]
 80192a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80192ac:	6030      	str	r0, [r6, #0]
 80192ae:	4620      	mov	r0, r4
 80192b0:	b003      	add	sp, #12
 80192b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192b6:	6161      	str	r1, [r4, #20]
 80192b8:	e7ea      	b.n	8019290 <__d2b+0x58>
 80192ba:	a801      	add	r0, sp, #4
 80192bc:	f7ff fd59 	bl	8018d72 <__lo0bits>
 80192c0:	9b01      	ldr	r3, [sp, #4]
 80192c2:	6163      	str	r3, [r4, #20]
 80192c4:	3020      	adds	r0, #32
 80192c6:	2201      	movs	r2, #1
 80192c8:	e7e8      	b.n	801929c <__d2b+0x64>
 80192ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80192ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80192d2:	6038      	str	r0, [r7, #0]
 80192d4:	6918      	ldr	r0, [r3, #16]
 80192d6:	f7ff fd2d 	bl	8018d34 <__hi0bits>
 80192da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80192de:	e7e5      	b.n	80192ac <__d2b+0x74>
 80192e0:	08054d37 	.word	0x08054d37
 80192e4:	08054d48 	.word	0x08054d48

080192e8 <__ssputs_r>:
 80192e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192ec:	688e      	ldr	r6, [r1, #8]
 80192ee:	461f      	mov	r7, r3
 80192f0:	42be      	cmp	r6, r7
 80192f2:	680b      	ldr	r3, [r1, #0]
 80192f4:	4682      	mov	sl, r0
 80192f6:	460c      	mov	r4, r1
 80192f8:	4690      	mov	r8, r2
 80192fa:	d82d      	bhi.n	8019358 <__ssputs_r+0x70>
 80192fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019300:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019304:	d026      	beq.n	8019354 <__ssputs_r+0x6c>
 8019306:	6965      	ldr	r5, [r4, #20]
 8019308:	6909      	ldr	r1, [r1, #16]
 801930a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801930e:	eba3 0901 	sub.w	r9, r3, r1
 8019312:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019316:	1c7b      	adds	r3, r7, #1
 8019318:	444b      	add	r3, r9
 801931a:	106d      	asrs	r5, r5, #1
 801931c:	429d      	cmp	r5, r3
 801931e:	bf38      	it	cc
 8019320:	461d      	movcc	r5, r3
 8019322:	0553      	lsls	r3, r2, #21
 8019324:	d527      	bpl.n	8019376 <__ssputs_r+0x8e>
 8019326:	4629      	mov	r1, r5
 8019328:	f7fd fcd4 	bl	8016cd4 <_malloc_r>
 801932c:	4606      	mov	r6, r0
 801932e:	b360      	cbz	r0, 801938a <__ssputs_r+0xa2>
 8019330:	6921      	ldr	r1, [r4, #16]
 8019332:	464a      	mov	r2, r9
 8019334:	f7fe fd91 	bl	8017e5a <memcpy>
 8019338:	89a3      	ldrh	r3, [r4, #12]
 801933a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801933e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019342:	81a3      	strh	r3, [r4, #12]
 8019344:	6126      	str	r6, [r4, #16]
 8019346:	6165      	str	r5, [r4, #20]
 8019348:	444e      	add	r6, r9
 801934a:	eba5 0509 	sub.w	r5, r5, r9
 801934e:	6026      	str	r6, [r4, #0]
 8019350:	60a5      	str	r5, [r4, #8]
 8019352:	463e      	mov	r6, r7
 8019354:	42be      	cmp	r6, r7
 8019356:	d900      	bls.n	801935a <__ssputs_r+0x72>
 8019358:	463e      	mov	r6, r7
 801935a:	6820      	ldr	r0, [r4, #0]
 801935c:	4632      	mov	r2, r6
 801935e:	4641      	mov	r1, r8
 8019360:	f7fe fc98 	bl	8017c94 <memmove>
 8019364:	68a3      	ldr	r3, [r4, #8]
 8019366:	1b9b      	subs	r3, r3, r6
 8019368:	60a3      	str	r3, [r4, #8]
 801936a:	6823      	ldr	r3, [r4, #0]
 801936c:	4433      	add	r3, r6
 801936e:	6023      	str	r3, [r4, #0]
 8019370:	2000      	movs	r0, #0
 8019372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019376:	462a      	mov	r2, r5
 8019378:	f000 fbbf 	bl	8019afa <_realloc_r>
 801937c:	4606      	mov	r6, r0
 801937e:	2800      	cmp	r0, #0
 8019380:	d1e0      	bne.n	8019344 <__ssputs_r+0x5c>
 8019382:	6921      	ldr	r1, [r4, #16]
 8019384:	4650      	mov	r0, sl
 8019386:	f7ff fbe3 	bl	8018b50 <_free_r>
 801938a:	230c      	movs	r3, #12
 801938c:	f8ca 3000 	str.w	r3, [sl]
 8019390:	89a3      	ldrh	r3, [r4, #12]
 8019392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019396:	81a3      	strh	r3, [r4, #12]
 8019398:	f04f 30ff 	mov.w	r0, #4294967295
 801939c:	e7e9      	b.n	8019372 <__ssputs_r+0x8a>
	...

080193a0 <_svfiprintf_r>:
 80193a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a4:	4698      	mov	r8, r3
 80193a6:	898b      	ldrh	r3, [r1, #12]
 80193a8:	061b      	lsls	r3, r3, #24
 80193aa:	b09d      	sub	sp, #116	@ 0x74
 80193ac:	4607      	mov	r7, r0
 80193ae:	460d      	mov	r5, r1
 80193b0:	4614      	mov	r4, r2
 80193b2:	d510      	bpl.n	80193d6 <_svfiprintf_r+0x36>
 80193b4:	690b      	ldr	r3, [r1, #16]
 80193b6:	b973      	cbnz	r3, 80193d6 <_svfiprintf_r+0x36>
 80193b8:	2140      	movs	r1, #64	@ 0x40
 80193ba:	f7fd fc8b 	bl	8016cd4 <_malloc_r>
 80193be:	6028      	str	r0, [r5, #0]
 80193c0:	6128      	str	r0, [r5, #16]
 80193c2:	b930      	cbnz	r0, 80193d2 <_svfiprintf_r+0x32>
 80193c4:	230c      	movs	r3, #12
 80193c6:	603b      	str	r3, [r7, #0]
 80193c8:	f04f 30ff 	mov.w	r0, #4294967295
 80193cc:	b01d      	add	sp, #116	@ 0x74
 80193ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193d2:	2340      	movs	r3, #64	@ 0x40
 80193d4:	616b      	str	r3, [r5, #20]
 80193d6:	2300      	movs	r3, #0
 80193d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80193da:	2320      	movs	r3, #32
 80193dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80193e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80193e4:	2330      	movs	r3, #48	@ 0x30
 80193e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019584 <_svfiprintf_r+0x1e4>
 80193ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80193ee:	f04f 0901 	mov.w	r9, #1
 80193f2:	4623      	mov	r3, r4
 80193f4:	469a      	mov	sl, r3
 80193f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193fa:	b10a      	cbz	r2, 8019400 <_svfiprintf_r+0x60>
 80193fc:	2a25      	cmp	r2, #37	@ 0x25
 80193fe:	d1f9      	bne.n	80193f4 <_svfiprintf_r+0x54>
 8019400:	ebba 0b04 	subs.w	fp, sl, r4
 8019404:	d00b      	beq.n	801941e <_svfiprintf_r+0x7e>
 8019406:	465b      	mov	r3, fp
 8019408:	4622      	mov	r2, r4
 801940a:	4629      	mov	r1, r5
 801940c:	4638      	mov	r0, r7
 801940e:	f7ff ff6b 	bl	80192e8 <__ssputs_r>
 8019412:	3001      	adds	r0, #1
 8019414:	f000 80a7 	beq.w	8019566 <_svfiprintf_r+0x1c6>
 8019418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801941a:	445a      	add	r2, fp
 801941c:	9209      	str	r2, [sp, #36]	@ 0x24
 801941e:	f89a 3000 	ldrb.w	r3, [sl]
 8019422:	2b00      	cmp	r3, #0
 8019424:	f000 809f 	beq.w	8019566 <_svfiprintf_r+0x1c6>
 8019428:	2300      	movs	r3, #0
 801942a:	f04f 32ff 	mov.w	r2, #4294967295
 801942e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019432:	f10a 0a01 	add.w	sl, sl, #1
 8019436:	9304      	str	r3, [sp, #16]
 8019438:	9307      	str	r3, [sp, #28]
 801943a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801943e:	931a      	str	r3, [sp, #104]	@ 0x68
 8019440:	4654      	mov	r4, sl
 8019442:	2205      	movs	r2, #5
 8019444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019448:	484e      	ldr	r0, [pc, #312]	@ (8019584 <_svfiprintf_r+0x1e4>)
 801944a:	f7e6 fef1 	bl	8000230 <memchr>
 801944e:	9a04      	ldr	r2, [sp, #16]
 8019450:	b9d8      	cbnz	r0, 801948a <_svfiprintf_r+0xea>
 8019452:	06d0      	lsls	r0, r2, #27
 8019454:	bf44      	itt	mi
 8019456:	2320      	movmi	r3, #32
 8019458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801945c:	0711      	lsls	r1, r2, #28
 801945e:	bf44      	itt	mi
 8019460:	232b      	movmi	r3, #43	@ 0x2b
 8019462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019466:	f89a 3000 	ldrb.w	r3, [sl]
 801946a:	2b2a      	cmp	r3, #42	@ 0x2a
 801946c:	d015      	beq.n	801949a <_svfiprintf_r+0xfa>
 801946e:	9a07      	ldr	r2, [sp, #28]
 8019470:	4654      	mov	r4, sl
 8019472:	2000      	movs	r0, #0
 8019474:	f04f 0c0a 	mov.w	ip, #10
 8019478:	4621      	mov	r1, r4
 801947a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801947e:	3b30      	subs	r3, #48	@ 0x30
 8019480:	2b09      	cmp	r3, #9
 8019482:	d94b      	bls.n	801951c <_svfiprintf_r+0x17c>
 8019484:	b1b0      	cbz	r0, 80194b4 <_svfiprintf_r+0x114>
 8019486:	9207      	str	r2, [sp, #28]
 8019488:	e014      	b.n	80194b4 <_svfiprintf_r+0x114>
 801948a:	eba0 0308 	sub.w	r3, r0, r8
 801948e:	fa09 f303 	lsl.w	r3, r9, r3
 8019492:	4313      	orrs	r3, r2
 8019494:	9304      	str	r3, [sp, #16]
 8019496:	46a2      	mov	sl, r4
 8019498:	e7d2      	b.n	8019440 <_svfiprintf_r+0xa0>
 801949a:	9b03      	ldr	r3, [sp, #12]
 801949c:	1d19      	adds	r1, r3, #4
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	9103      	str	r1, [sp, #12]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	bfbb      	ittet	lt
 80194a6:	425b      	neglt	r3, r3
 80194a8:	f042 0202 	orrlt.w	r2, r2, #2
 80194ac:	9307      	strge	r3, [sp, #28]
 80194ae:	9307      	strlt	r3, [sp, #28]
 80194b0:	bfb8      	it	lt
 80194b2:	9204      	strlt	r2, [sp, #16]
 80194b4:	7823      	ldrb	r3, [r4, #0]
 80194b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80194b8:	d10a      	bne.n	80194d0 <_svfiprintf_r+0x130>
 80194ba:	7863      	ldrb	r3, [r4, #1]
 80194bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80194be:	d132      	bne.n	8019526 <_svfiprintf_r+0x186>
 80194c0:	9b03      	ldr	r3, [sp, #12]
 80194c2:	1d1a      	adds	r2, r3, #4
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	9203      	str	r2, [sp, #12]
 80194c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80194cc:	3402      	adds	r4, #2
 80194ce:	9305      	str	r3, [sp, #20]
 80194d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019594 <_svfiprintf_r+0x1f4>
 80194d4:	7821      	ldrb	r1, [r4, #0]
 80194d6:	2203      	movs	r2, #3
 80194d8:	4650      	mov	r0, sl
 80194da:	f7e6 fea9 	bl	8000230 <memchr>
 80194de:	b138      	cbz	r0, 80194f0 <_svfiprintf_r+0x150>
 80194e0:	9b04      	ldr	r3, [sp, #16]
 80194e2:	eba0 000a 	sub.w	r0, r0, sl
 80194e6:	2240      	movs	r2, #64	@ 0x40
 80194e8:	4082      	lsls	r2, r0
 80194ea:	4313      	orrs	r3, r2
 80194ec:	3401      	adds	r4, #1
 80194ee:	9304      	str	r3, [sp, #16]
 80194f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194f4:	4824      	ldr	r0, [pc, #144]	@ (8019588 <_svfiprintf_r+0x1e8>)
 80194f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80194fa:	2206      	movs	r2, #6
 80194fc:	f7e6 fe98 	bl	8000230 <memchr>
 8019500:	2800      	cmp	r0, #0
 8019502:	d036      	beq.n	8019572 <_svfiprintf_r+0x1d2>
 8019504:	4b21      	ldr	r3, [pc, #132]	@ (801958c <_svfiprintf_r+0x1ec>)
 8019506:	bb1b      	cbnz	r3, 8019550 <_svfiprintf_r+0x1b0>
 8019508:	9b03      	ldr	r3, [sp, #12]
 801950a:	3307      	adds	r3, #7
 801950c:	f023 0307 	bic.w	r3, r3, #7
 8019510:	3308      	adds	r3, #8
 8019512:	9303      	str	r3, [sp, #12]
 8019514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019516:	4433      	add	r3, r6
 8019518:	9309      	str	r3, [sp, #36]	@ 0x24
 801951a:	e76a      	b.n	80193f2 <_svfiprintf_r+0x52>
 801951c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019520:	460c      	mov	r4, r1
 8019522:	2001      	movs	r0, #1
 8019524:	e7a8      	b.n	8019478 <_svfiprintf_r+0xd8>
 8019526:	2300      	movs	r3, #0
 8019528:	3401      	adds	r4, #1
 801952a:	9305      	str	r3, [sp, #20]
 801952c:	4619      	mov	r1, r3
 801952e:	f04f 0c0a 	mov.w	ip, #10
 8019532:	4620      	mov	r0, r4
 8019534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019538:	3a30      	subs	r2, #48	@ 0x30
 801953a:	2a09      	cmp	r2, #9
 801953c:	d903      	bls.n	8019546 <_svfiprintf_r+0x1a6>
 801953e:	2b00      	cmp	r3, #0
 8019540:	d0c6      	beq.n	80194d0 <_svfiprintf_r+0x130>
 8019542:	9105      	str	r1, [sp, #20]
 8019544:	e7c4      	b.n	80194d0 <_svfiprintf_r+0x130>
 8019546:	fb0c 2101 	mla	r1, ip, r1, r2
 801954a:	4604      	mov	r4, r0
 801954c:	2301      	movs	r3, #1
 801954e:	e7f0      	b.n	8019532 <_svfiprintf_r+0x192>
 8019550:	ab03      	add	r3, sp, #12
 8019552:	9300      	str	r3, [sp, #0]
 8019554:	462a      	mov	r2, r5
 8019556:	4b0e      	ldr	r3, [pc, #56]	@ (8019590 <_svfiprintf_r+0x1f0>)
 8019558:	a904      	add	r1, sp, #16
 801955a:	4638      	mov	r0, r7
 801955c:	f7fd fda8 	bl	80170b0 <_printf_float>
 8019560:	1c42      	adds	r2, r0, #1
 8019562:	4606      	mov	r6, r0
 8019564:	d1d6      	bne.n	8019514 <_svfiprintf_r+0x174>
 8019566:	89ab      	ldrh	r3, [r5, #12]
 8019568:	065b      	lsls	r3, r3, #25
 801956a:	f53f af2d 	bmi.w	80193c8 <_svfiprintf_r+0x28>
 801956e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019570:	e72c      	b.n	80193cc <_svfiprintf_r+0x2c>
 8019572:	ab03      	add	r3, sp, #12
 8019574:	9300      	str	r3, [sp, #0]
 8019576:	462a      	mov	r2, r5
 8019578:	4b05      	ldr	r3, [pc, #20]	@ (8019590 <_svfiprintf_r+0x1f0>)
 801957a:	a904      	add	r1, sp, #16
 801957c:	4638      	mov	r0, r7
 801957e:	f7fe f82f 	bl	80175e0 <_printf_i>
 8019582:	e7ed      	b.n	8019560 <_svfiprintf_r+0x1c0>
 8019584:	08054ea0 	.word	0x08054ea0
 8019588:	08054eaa 	.word	0x08054eaa
 801958c:	080170b1 	.word	0x080170b1
 8019590:	080192e9 	.word	0x080192e9
 8019594:	08054ea6 	.word	0x08054ea6

08019598 <__sfputc_r>:
 8019598:	6893      	ldr	r3, [r2, #8]
 801959a:	3b01      	subs	r3, #1
 801959c:	2b00      	cmp	r3, #0
 801959e:	b410      	push	{r4}
 80195a0:	6093      	str	r3, [r2, #8]
 80195a2:	da08      	bge.n	80195b6 <__sfputc_r+0x1e>
 80195a4:	6994      	ldr	r4, [r2, #24]
 80195a6:	42a3      	cmp	r3, r4
 80195a8:	db01      	blt.n	80195ae <__sfputc_r+0x16>
 80195aa:	290a      	cmp	r1, #10
 80195ac:	d103      	bne.n	80195b6 <__sfputc_r+0x1e>
 80195ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195b2:	f7fe baca 	b.w	8017b4a <__swbuf_r>
 80195b6:	6813      	ldr	r3, [r2, #0]
 80195b8:	1c58      	adds	r0, r3, #1
 80195ba:	6010      	str	r0, [r2, #0]
 80195bc:	7019      	strb	r1, [r3, #0]
 80195be:	4608      	mov	r0, r1
 80195c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195c4:	4770      	bx	lr

080195c6 <__sfputs_r>:
 80195c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195c8:	4606      	mov	r6, r0
 80195ca:	460f      	mov	r7, r1
 80195cc:	4614      	mov	r4, r2
 80195ce:	18d5      	adds	r5, r2, r3
 80195d0:	42ac      	cmp	r4, r5
 80195d2:	d101      	bne.n	80195d8 <__sfputs_r+0x12>
 80195d4:	2000      	movs	r0, #0
 80195d6:	e007      	b.n	80195e8 <__sfputs_r+0x22>
 80195d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195dc:	463a      	mov	r2, r7
 80195de:	4630      	mov	r0, r6
 80195e0:	f7ff ffda 	bl	8019598 <__sfputc_r>
 80195e4:	1c43      	adds	r3, r0, #1
 80195e6:	d1f3      	bne.n	80195d0 <__sfputs_r+0xa>
 80195e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080195ec <_vfiprintf_r>:
 80195ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f0:	460d      	mov	r5, r1
 80195f2:	b09d      	sub	sp, #116	@ 0x74
 80195f4:	4614      	mov	r4, r2
 80195f6:	4698      	mov	r8, r3
 80195f8:	4606      	mov	r6, r0
 80195fa:	b118      	cbz	r0, 8019604 <_vfiprintf_r+0x18>
 80195fc:	6a03      	ldr	r3, [r0, #32]
 80195fe:	b90b      	cbnz	r3, 8019604 <_vfiprintf_r+0x18>
 8019600:	f7fe f99a 	bl	8017938 <__sinit>
 8019604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019606:	07d9      	lsls	r1, r3, #31
 8019608:	d405      	bmi.n	8019616 <_vfiprintf_r+0x2a>
 801960a:	89ab      	ldrh	r3, [r5, #12]
 801960c:	059a      	lsls	r2, r3, #22
 801960e:	d402      	bmi.n	8019616 <_vfiprintf_r+0x2a>
 8019610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019612:	f7fe fc18 	bl	8017e46 <__retarget_lock_acquire_recursive>
 8019616:	89ab      	ldrh	r3, [r5, #12]
 8019618:	071b      	lsls	r3, r3, #28
 801961a:	d501      	bpl.n	8019620 <_vfiprintf_r+0x34>
 801961c:	692b      	ldr	r3, [r5, #16]
 801961e:	b99b      	cbnz	r3, 8019648 <_vfiprintf_r+0x5c>
 8019620:	4629      	mov	r1, r5
 8019622:	4630      	mov	r0, r6
 8019624:	f7fe fad0 	bl	8017bc8 <__swsetup_r>
 8019628:	b170      	cbz	r0, 8019648 <_vfiprintf_r+0x5c>
 801962a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801962c:	07dc      	lsls	r4, r3, #31
 801962e:	d504      	bpl.n	801963a <_vfiprintf_r+0x4e>
 8019630:	f04f 30ff 	mov.w	r0, #4294967295
 8019634:	b01d      	add	sp, #116	@ 0x74
 8019636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801963a:	89ab      	ldrh	r3, [r5, #12]
 801963c:	0598      	lsls	r0, r3, #22
 801963e:	d4f7      	bmi.n	8019630 <_vfiprintf_r+0x44>
 8019640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019642:	f7fe fc01 	bl	8017e48 <__retarget_lock_release_recursive>
 8019646:	e7f3      	b.n	8019630 <_vfiprintf_r+0x44>
 8019648:	2300      	movs	r3, #0
 801964a:	9309      	str	r3, [sp, #36]	@ 0x24
 801964c:	2320      	movs	r3, #32
 801964e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019652:	f8cd 800c 	str.w	r8, [sp, #12]
 8019656:	2330      	movs	r3, #48	@ 0x30
 8019658:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019808 <_vfiprintf_r+0x21c>
 801965c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019660:	f04f 0901 	mov.w	r9, #1
 8019664:	4623      	mov	r3, r4
 8019666:	469a      	mov	sl, r3
 8019668:	f813 2b01 	ldrb.w	r2, [r3], #1
 801966c:	b10a      	cbz	r2, 8019672 <_vfiprintf_r+0x86>
 801966e:	2a25      	cmp	r2, #37	@ 0x25
 8019670:	d1f9      	bne.n	8019666 <_vfiprintf_r+0x7a>
 8019672:	ebba 0b04 	subs.w	fp, sl, r4
 8019676:	d00b      	beq.n	8019690 <_vfiprintf_r+0xa4>
 8019678:	465b      	mov	r3, fp
 801967a:	4622      	mov	r2, r4
 801967c:	4629      	mov	r1, r5
 801967e:	4630      	mov	r0, r6
 8019680:	f7ff ffa1 	bl	80195c6 <__sfputs_r>
 8019684:	3001      	adds	r0, #1
 8019686:	f000 80a7 	beq.w	80197d8 <_vfiprintf_r+0x1ec>
 801968a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801968c:	445a      	add	r2, fp
 801968e:	9209      	str	r2, [sp, #36]	@ 0x24
 8019690:	f89a 3000 	ldrb.w	r3, [sl]
 8019694:	2b00      	cmp	r3, #0
 8019696:	f000 809f 	beq.w	80197d8 <_vfiprintf_r+0x1ec>
 801969a:	2300      	movs	r3, #0
 801969c:	f04f 32ff 	mov.w	r2, #4294967295
 80196a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196a4:	f10a 0a01 	add.w	sl, sl, #1
 80196a8:	9304      	str	r3, [sp, #16]
 80196aa:	9307      	str	r3, [sp, #28]
 80196ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80196b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80196b2:	4654      	mov	r4, sl
 80196b4:	2205      	movs	r2, #5
 80196b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196ba:	4853      	ldr	r0, [pc, #332]	@ (8019808 <_vfiprintf_r+0x21c>)
 80196bc:	f7e6 fdb8 	bl	8000230 <memchr>
 80196c0:	9a04      	ldr	r2, [sp, #16]
 80196c2:	b9d8      	cbnz	r0, 80196fc <_vfiprintf_r+0x110>
 80196c4:	06d1      	lsls	r1, r2, #27
 80196c6:	bf44      	itt	mi
 80196c8:	2320      	movmi	r3, #32
 80196ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80196ce:	0713      	lsls	r3, r2, #28
 80196d0:	bf44      	itt	mi
 80196d2:	232b      	movmi	r3, #43	@ 0x2b
 80196d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80196d8:	f89a 3000 	ldrb.w	r3, [sl]
 80196dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80196de:	d015      	beq.n	801970c <_vfiprintf_r+0x120>
 80196e0:	9a07      	ldr	r2, [sp, #28]
 80196e2:	4654      	mov	r4, sl
 80196e4:	2000      	movs	r0, #0
 80196e6:	f04f 0c0a 	mov.w	ip, #10
 80196ea:	4621      	mov	r1, r4
 80196ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80196f0:	3b30      	subs	r3, #48	@ 0x30
 80196f2:	2b09      	cmp	r3, #9
 80196f4:	d94b      	bls.n	801978e <_vfiprintf_r+0x1a2>
 80196f6:	b1b0      	cbz	r0, 8019726 <_vfiprintf_r+0x13a>
 80196f8:	9207      	str	r2, [sp, #28]
 80196fa:	e014      	b.n	8019726 <_vfiprintf_r+0x13a>
 80196fc:	eba0 0308 	sub.w	r3, r0, r8
 8019700:	fa09 f303 	lsl.w	r3, r9, r3
 8019704:	4313      	orrs	r3, r2
 8019706:	9304      	str	r3, [sp, #16]
 8019708:	46a2      	mov	sl, r4
 801970a:	e7d2      	b.n	80196b2 <_vfiprintf_r+0xc6>
 801970c:	9b03      	ldr	r3, [sp, #12]
 801970e:	1d19      	adds	r1, r3, #4
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	9103      	str	r1, [sp, #12]
 8019714:	2b00      	cmp	r3, #0
 8019716:	bfbb      	ittet	lt
 8019718:	425b      	neglt	r3, r3
 801971a:	f042 0202 	orrlt.w	r2, r2, #2
 801971e:	9307      	strge	r3, [sp, #28]
 8019720:	9307      	strlt	r3, [sp, #28]
 8019722:	bfb8      	it	lt
 8019724:	9204      	strlt	r2, [sp, #16]
 8019726:	7823      	ldrb	r3, [r4, #0]
 8019728:	2b2e      	cmp	r3, #46	@ 0x2e
 801972a:	d10a      	bne.n	8019742 <_vfiprintf_r+0x156>
 801972c:	7863      	ldrb	r3, [r4, #1]
 801972e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019730:	d132      	bne.n	8019798 <_vfiprintf_r+0x1ac>
 8019732:	9b03      	ldr	r3, [sp, #12]
 8019734:	1d1a      	adds	r2, r3, #4
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	9203      	str	r2, [sp, #12]
 801973a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801973e:	3402      	adds	r4, #2
 8019740:	9305      	str	r3, [sp, #20]
 8019742:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019818 <_vfiprintf_r+0x22c>
 8019746:	7821      	ldrb	r1, [r4, #0]
 8019748:	2203      	movs	r2, #3
 801974a:	4650      	mov	r0, sl
 801974c:	f7e6 fd70 	bl	8000230 <memchr>
 8019750:	b138      	cbz	r0, 8019762 <_vfiprintf_r+0x176>
 8019752:	9b04      	ldr	r3, [sp, #16]
 8019754:	eba0 000a 	sub.w	r0, r0, sl
 8019758:	2240      	movs	r2, #64	@ 0x40
 801975a:	4082      	lsls	r2, r0
 801975c:	4313      	orrs	r3, r2
 801975e:	3401      	adds	r4, #1
 8019760:	9304      	str	r3, [sp, #16]
 8019762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019766:	4829      	ldr	r0, [pc, #164]	@ (801980c <_vfiprintf_r+0x220>)
 8019768:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801976c:	2206      	movs	r2, #6
 801976e:	f7e6 fd5f 	bl	8000230 <memchr>
 8019772:	2800      	cmp	r0, #0
 8019774:	d03f      	beq.n	80197f6 <_vfiprintf_r+0x20a>
 8019776:	4b26      	ldr	r3, [pc, #152]	@ (8019810 <_vfiprintf_r+0x224>)
 8019778:	bb1b      	cbnz	r3, 80197c2 <_vfiprintf_r+0x1d6>
 801977a:	9b03      	ldr	r3, [sp, #12]
 801977c:	3307      	adds	r3, #7
 801977e:	f023 0307 	bic.w	r3, r3, #7
 8019782:	3308      	adds	r3, #8
 8019784:	9303      	str	r3, [sp, #12]
 8019786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019788:	443b      	add	r3, r7
 801978a:	9309      	str	r3, [sp, #36]	@ 0x24
 801978c:	e76a      	b.n	8019664 <_vfiprintf_r+0x78>
 801978e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019792:	460c      	mov	r4, r1
 8019794:	2001      	movs	r0, #1
 8019796:	e7a8      	b.n	80196ea <_vfiprintf_r+0xfe>
 8019798:	2300      	movs	r3, #0
 801979a:	3401      	adds	r4, #1
 801979c:	9305      	str	r3, [sp, #20]
 801979e:	4619      	mov	r1, r3
 80197a0:	f04f 0c0a 	mov.w	ip, #10
 80197a4:	4620      	mov	r0, r4
 80197a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197aa:	3a30      	subs	r2, #48	@ 0x30
 80197ac:	2a09      	cmp	r2, #9
 80197ae:	d903      	bls.n	80197b8 <_vfiprintf_r+0x1cc>
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d0c6      	beq.n	8019742 <_vfiprintf_r+0x156>
 80197b4:	9105      	str	r1, [sp, #20]
 80197b6:	e7c4      	b.n	8019742 <_vfiprintf_r+0x156>
 80197b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80197bc:	4604      	mov	r4, r0
 80197be:	2301      	movs	r3, #1
 80197c0:	e7f0      	b.n	80197a4 <_vfiprintf_r+0x1b8>
 80197c2:	ab03      	add	r3, sp, #12
 80197c4:	9300      	str	r3, [sp, #0]
 80197c6:	462a      	mov	r2, r5
 80197c8:	4b12      	ldr	r3, [pc, #72]	@ (8019814 <_vfiprintf_r+0x228>)
 80197ca:	a904      	add	r1, sp, #16
 80197cc:	4630      	mov	r0, r6
 80197ce:	f7fd fc6f 	bl	80170b0 <_printf_float>
 80197d2:	4607      	mov	r7, r0
 80197d4:	1c78      	adds	r0, r7, #1
 80197d6:	d1d6      	bne.n	8019786 <_vfiprintf_r+0x19a>
 80197d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80197da:	07d9      	lsls	r1, r3, #31
 80197dc:	d405      	bmi.n	80197ea <_vfiprintf_r+0x1fe>
 80197de:	89ab      	ldrh	r3, [r5, #12]
 80197e0:	059a      	lsls	r2, r3, #22
 80197e2:	d402      	bmi.n	80197ea <_vfiprintf_r+0x1fe>
 80197e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80197e6:	f7fe fb2f 	bl	8017e48 <__retarget_lock_release_recursive>
 80197ea:	89ab      	ldrh	r3, [r5, #12]
 80197ec:	065b      	lsls	r3, r3, #25
 80197ee:	f53f af1f 	bmi.w	8019630 <_vfiprintf_r+0x44>
 80197f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80197f4:	e71e      	b.n	8019634 <_vfiprintf_r+0x48>
 80197f6:	ab03      	add	r3, sp, #12
 80197f8:	9300      	str	r3, [sp, #0]
 80197fa:	462a      	mov	r2, r5
 80197fc:	4b05      	ldr	r3, [pc, #20]	@ (8019814 <_vfiprintf_r+0x228>)
 80197fe:	a904      	add	r1, sp, #16
 8019800:	4630      	mov	r0, r6
 8019802:	f7fd feed 	bl	80175e0 <_printf_i>
 8019806:	e7e4      	b.n	80197d2 <_vfiprintf_r+0x1e6>
 8019808:	08054ea0 	.word	0x08054ea0
 801980c:	08054eaa 	.word	0x08054eaa
 8019810:	080170b1 	.word	0x080170b1
 8019814:	080195c7 	.word	0x080195c7
 8019818:	08054ea6 	.word	0x08054ea6

0801981c <__sflush_r>:
 801981c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019824:	0716      	lsls	r6, r2, #28
 8019826:	4605      	mov	r5, r0
 8019828:	460c      	mov	r4, r1
 801982a:	d454      	bmi.n	80198d6 <__sflush_r+0xba>
 801982c:	684b      	ldr	r3, [r1, #4]
 801982e:	2b00      	cmp	r3, #0
 8019830:	dc02      	bgt.n	8019838 <__sflush_r+0x1c>
 8019832:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019834:	2b00      	cmp	r3, #0
 8019836:	dd48      	ble.n	80198ca <__sflush_r+0xae>
 8019838:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801983a:	2e00      	cmp	r6, #0
 801983c:	d045      	beq.n	80198ca <__sflush_r+0xae>
 801983e:	2300      	movs	r3, #0
 8019840:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019844:	682f      	ldr	r7, [r5, #0]
 8019846:	6a21      	ldr	r1, [r4, #32]
 8019848:	602b      	str	r3, [r5, #0]
 801984a:	d030      	beq.n	80198ae <__sflush_r+0x92>
 801984c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801984e:	89a3      	ldrh	r3, [r4, #12]
 8019850:	0759      	lsls	r1, r3, #29
 8019852:	d505      	bpl.n	8019860 <__sflush_r+0x44>
 8019854:	6863      	ldr	r3, [r4, #4]
 8019856:	1ad2      	subs	r2, r2, r3
 8019858:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801985a:	b10b      	cbz	r3, 8019860 <__sflush_r+0x44>
 801985c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801985e:	1ad2      	subs	r2, r2, r3
 8019860:	2300      	movs	r3, #0
 8019862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019864:	6a21      	ldr	r1, [r4, #32]
 8019866:	4628      	mov	r0, r5
 8019868:	47b0      	blx	r6
 801986a:	1c43      	adds	r3, r0, #1
 801986c:	89a3      	ldrh	r3, [r4, #12]
 801986e:	d106      	bne.n	801987e <__sflush_r+0x62>
 8019870:	6829      	ldr	r1, [r5, #0]
 8019872:	291d      	cmp	r1, #29
 8019874:	d82b      	bhi.n	80198ce <__sflush_r+0xb2>
 8019876:	4a2a      	ldr	r2, [pc, #168]	@ (8019920 <__sflush_r+0x104>)
 8019878:	410a      	asrs	r2, r1
 801987a:	07d6      	lsls	r6, r2, #31
 801987c:	d427      	bmi.n	80198ce <__sflush_r+0xb2>
 801987e:	2200      	movs	r2, #0
 8019880:	6062      	str	r2, [r4, #4]
 8019882:	04d9      	lsls	r1, r3, #19
 8019884:	6922      	ldr	r2, [r4, #16]
 8019886:	6022      	str	r2, [r4, #0]
 8019888:	d504      	bpl.n	8019894 <__sflush_r+0x78>
 801988a:	1c42      	adds	r2, r0, #1
 801988c:	d101      	bne.n	8019892 <__sflush_r+0x76>
 801988e:	682b      	ldr	r3, [r5, #0]
 8019890:	b903      	cbnz	r3, 8019894 <__sflush_r+0x78>
 8019892:	6560      	str	r0, [r4, #84]	@ 0x54
 8019894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019896:	602f      	str	r7, [r5, #0]
 8019898:	b1b9      	cbz	r1, 80198ca <__sflush_r+0xae>
 801989a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801989e:	4299      	cmp	r1, r3
 80198a0:	d002      	beq.n	80198a8 <__sflush_r+0x8c>
 80198a2:	4628      	mov	r0, r5
 80198a4:	f7ff f954 	bl	8018b50 <_free_r>
 80198a8:	2300      	movs	r3, #0
 80198aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80198ac:	e00d      	b.n	80198ca <__sflush_r+0xae>
 80198ae:	2301      	movs	r3, #1
 80198b0:	4628      	mov	r0, r5
 80198b2:	47b0      	blx	r6
 80198b4:	4602      	mov	r2, r0
 80198b6:	1c50      	adds	r0, r2, #1
 80198b8:	d1c9      	bne.n	801984e <__sflush_r+0x32>
 80198ba:	682b      	ldr	r3, [r5, #0]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d0c6      	beq.n	801984e <__sflush_r+0x32>
 80198c0:	2b1d      	cmp	r3, #29
 80198c2:	d001      	beq.n	80198c8 <__sflush_r+0xac>
 80198c4:	2b16      	cmp	r3, #22
 80198c6:	d11e      	bne.n	8019906 <__sflush_r+0xea>
 80198c8:	602f      	str	r7, [r5, #0]
 80198ca:	2000      	movs	r0, #0
 80198cc:	e022      	b.n	8019914 <__sflush_r+0xf8>
 80198ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80198d2:	b21b      	sxth	r3, r3
 80198d4:	e01b      	b.n	801990e <__sflush_r+0xf2>
 80198d6:	690f      	ldr	r7, [r1, #16]
 80198d8:	2f00      	cmp	r7, #0
 80198da:	d0f6      	beq.n	80198ca <__sflush_r+0xae>
 80198dc:	0793      	lsls	r3, r2, #30
 80198de:	680e      	ldr	r6, [r1, #0]
 80198e0:	bf08      	it	eq
 80198e2:	694b      	ldreq	r3, [r1, #20]
 80198e4:	600f      	str	r7, [r1, #0]
 80198e6:	bf18      	it	ne
 80198e8:	2300      	movne	r3, #0
 80198ea:	eba6 0807 	sub.w	r8, r6, r7
 80198ee:	608b      	str	r3, [r1, #8]
 80198f0:	f1b8 0f00 	cmp.w	r8, #0
 80198f4:	dde9      	ble.n	80198ca <__sflush_r+0xae>
 80198f6:	6a21      	ldr	r1, [r4, #32]
 80198f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80198fa:	4643      	mov	r3, r8
 80198fc:	463a      	mov	r2, r7
 80198fe:	4628      	mov	r0, r5
 8019900:	47b0      	blx	r6
 8019902:	2800      	cmp	r0, #0
 8019904:	dc08      	bgt.n	8019918 <__sflush_r+0xfc>
 8019906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801990a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801990e:	81a3      	strh	r3, [r4, #12]
 8019910:	f04f 30ff 	mov.w	r0, #4294967295
 8019914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019918:	4407      	add	r7, r0
 801991a:	eba8 0800 	sub.w	r8, r8, r0
 801991e:	e7e7      	b.n	80198f0 <__sflush_r+0xd4>
 8019920:	dfbffffe 	.word	0xdfbffffe

08019924 <_fflush_r>:
 8019924:	b538      	push	{r3, r4, r5, lr}
 8019926:	690b      	ldr	r3, [r1, #16]
 8019928:	4605      	mov	r5, r0
 801992a:	460c      	mov	r4, r1
 801992c:	b913      	cbnz	r3, 8019934 <_fflush_r+0x10>
 801992e:	2500      	movs	r5, #0
 8019930:	4628      	mov	r0, r5
 8019932:	bd38      	pop	{r3, r4, r5, pc}
 8019934:	b118      	cbz	r0, 801993e <_fflush_r+0x1a>
 8019936:	6a03      	ldr	r3, [r0, #32]
 8019938:	b90b      	cbnz	r3, 801993e <_fflush_r+0x1a>
 801993a:	f7fd fffd 	bl	8017938 <__sinit>
 801993e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019942:	2b00      	cmp	r3, #0
 8019944:	d0f3      	beq.n	801992e <_fflush_r+0xa>
 8019946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019948:	07d0      	lsls	r0, r2, #31
 801994a:	d404      	bmi.n	8019956 <_fflush_r+0x32>
 801994c:	0599      	lsls	r1, r3, #22
 801994e:	d402      	bmi.n	8019956 <_fflush_r+0x32>
 8019950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019952:	f7fe fa78 	bl	8017e46 <__retarget_lock_acquire_recursive>
 8019956:	4628      	mov	r0, r5
 8019958:	4621      	mov	r1, r4
 801995a:	f7ff ff5f 	bl	801981c <__sflush_r>
 801995e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019960:	07da      	lsls	r2, r3, #31
 8019962:	4605      	mov	r5, r0
 8019964:	d4e4      	bmi.n	8019930 <_fflush_r+0xc>
 8019966:	89a3      	ldrh	r3, [r4, #12]
 8019968:	059b      	lsls	r3, r3, #22
 801996a:	d4e1      	bmi.n	8019930 <_fflush_r+0xc>
 801996c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801996e:	f7fe fa6b 	bl	8017e48 <__retarget_lock_release_recursive>
 8019972:	e7dd      	b.n	8019930 <_fflush_r+0xc>

08019974 <fiprintf>:
 8019974:	b40e      	push	{r1, r2, r3}
 8019976:	b503      	push	{r0, r1, lr}
 8019978:	4601      	mov	r1, r0
 801997a:	ab03      	add	r3, sp, #12
 801997c:	4805      	ldr	r0, [pc, #20]	@ (8019994 <fiprintf+0x20>)
 801997e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019982:	6800      	ldr	r0, [r0, #0]
 8019984:	9301      	str	r3, [sp, #4]
 8019986:	f7ff fe31 	bl	80195ec <_vfiprintf_r>
 801998a:	b002      	add	sp, #8
 801998c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019990:	b003      	add	sp, #12
 8019992:	4770      	bx	lr
 8019994:	2000968c 	.word	0x2000968c

08019998 <__swhatbuf_r>:
 8019998:	b570      	push	{r4, r5, r6, lr}
 801999a:	460c      	mov	r4, r1
 801999c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199a0:	2900      	cmp	r1, #0
 80199a2:	b096      	sub	sp, #88	@ 0x58
 80199a4:	4615      	mov	r5, r2
 80199a6:	461e      	mov	r6, r3
 80199a8:	da0d      	bge.n	80199c6 <__swhatbuf_r+0x2e>
 80199aa:	89a3      	ldrh	r3, [r4, #12]
 80199ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80199b0:	f04f 0100 	mov.w	r1, #0
 80199b4:	bf14      	ite	ne
 80199b6:	2340      	movne	r3, #64	@ 0x40
 80199b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80199bc:	2000      	movs	r0, #0
 80199be:	6031      	str	r1, [r6, #0]
 80199c0:	602b      	str	r3, [r5, #0]
 80199c2:	b016      	add	sp, #88	@ 0x58
 80199c4:	bd70      	pop	{r4, r5, r6, pc}
 80199c6:	466a      	mov	r2, sp
 80199c8:	f000 f848 	bl	8019a5c <_fstat_r>
 80199cc:	2800      	cmp	r0, #0
 80199ce:	dbec      	blt.n	80199aa <__swhatbuf_r+0x12>
 80199d0:	9901      	ldr	r1, [sp, #4]
 80199d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80199d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80199da:	4259      	negs	r1, r3
 80199dc:	4159      	adcs	r1, r3
 80199de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80199e2:	e7eb      	b.n	80199bc <__swhatbuf_r+0x24>

080199e4 <__smakebuf_r>:
 80199e4:	898b      	ldrh	r3, [r1, #12]
 80199e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199e8:	079d      	lsls	r5, r3, #30
 80199ea:	4606      	mov	r6, r0
 80199ec:	460c      	mov	r4, r1
 80199ee:	d507      	bpl.n	8019a00 <__smakebuf_r+0x1c>
 80199f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80199f4:	6023      	str	r3, [r4, #0]
 80199f6:	6123      	str	r3, [r4, #16]
 80199f8:	2301      	movs	r3, #1
 80199fa:	6163      	str	r3, [r4, #20]
 80199fc:	b003      	add	sp, #12
 80199fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a00:	ab01      	add	r3, sp, #4
 8019a02:	466a      	mov	r2, sp
 8019a04:	f7ff ffc8 	bl	8019998 <__swhatbuf_r>
 8019a08:	9f00      	ldr	r7, [sp, #0]
 8019a0a:	4605      	mov	r5, r0
 8019a0c:	4639      	mov	r1, r7
 8019a0e:	4630      	mov	r0, r6
 8019a10:	f7fd f960 	bl	8016cd4 <_malloc_r>
 8019a14:	b948      	cbnz	r0, 8019a2a <__smakebuf_r+0x46>
 8019a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a1a:	059a      	lsls	r2, r3, #22
 8019a1c:	d4ee      	bmi.n	80199fc <__smakebuf_r+0x18>
 8019a1e:	f023 0303 	bic.w	r3, r3, #3
 8019a22:	f043 0302 	orr.w	r3, r3, #2
 8019a26:	81a3      	strh	r3, [r4, #12]
 8019a28:	e7e2      	b.n	80199f0 <__smakebuf_r+0xc>
 8019a2a:	89a3      	ldrh	r3, [r4, #12]
 8019a2c:	6020      	str	r0, [r4, #0]
 8019a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019a32:	81a3      	strh	r3, [r4, #12]
 8019a34:	9b01      	ldr	r3, [sp, #4]
 8019a36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019a3a:	b15b      	cbz	r3, 8019a54 <__smakebuf_r+0x70>
 8019a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a40:	4630      	mov	r0, r6
 8019a42:	f000 f81d 	bl	8019a80 <_isatty_r>
 8019a46:	b128      	cbz	r0, 8019a54 <__smakebuf_r+0x70>
 8019a48:	89a3      	ldrh	r3, [r4, #12]
 8019a4a:	f023 0303 	bic.w	r3, r3, #3
 8019a4e:	f043 0301 	orr.w	r3, r3, #1
 8019a52:	81a3      	strh	r3, [r4, #12]
 8019a54:	89a3      	ldrh	r3, [r4, #12]
 8019a56:	431d      	orrs	r5, r3
 8019a58:	81a5      	strh	r5, [r4, #12]
 8019a5a:	e7cf      	b.n	80199fc <__smakebuf_r+0x18>

08019a5c <_fstat_r>:
 8019a5c:	b538      	push	{r3, r4, r5, lr}
 8019a5e:	4d07      	ldr	r5, [pc, #28]	@ (8019a7c <_fstat_r+0x20>)
 8019a60:	2300      	movs	r3, #0
 8019a62:	4604      	mov	r4, r0
 8019a64:	4608      	mov	r0, r1
 8019a66:	4611      	mov	r1, r2
 8019a68:	602b      	str	r3, [r5, #0]
 8019a6a:	f7eb f8ad 	bl	8004bc8 <_fstat>
 8019a6e:	1c43      	adds	r3, r0, #1
 8019a70:	d102      	bne.n	8019a78 <_fstat_r+0x1c>
 8019a72:	682b      	ldr	r3, [r5, #0]
 8019a74:	b103      	cbz	r3, 8019a78 <_fstat_r+0x1c>
 8019a76:	6023      	str	r3, [r4, #0]
 8019a78:	bd38      	pop	{r3, r4, r5, pc}
 8019a7a:	bf00      	nop
 8019a7c:	200148b8 	.word	0x200148b8

08019a80 <_isatty_r>:
 8019a80:	b538      	push	{r3, r4, r5, lr}
 8019a82:	4d06      	ldr	r5, [pc, #24]	@ (8019a9c <_isatty_r+0x1c>)
 8019a84:	2300      	movs	r3, #0
 8019a86:	4604      	mov	r4, r0
 8019a88:	4608      	mov	r0, r1
 8019a8a:	602b      	str	r3, [r5, #0]
 8019a8c:	f7eb f8ac 	bl	8004be8 <_isatty>
 8019a90:	1c43      	adds	r3, r0, #1
 8019a92:	d102      	bne.n	8019a9a <_isatty_r+0x1a>
 8019a94:	682b      	ldr	r3, [r5, #0]
 8019a96:	b103      	cbz	r3, 8019a9a <_isatty_r+0x1a>
 8019a98:	6023      	str	r3, [r4, #0]
 8019a9a:	bd38      	pop	{r3, r4, r5, pc}
 8019a9c:	200148b8 	.word	0x200148b8

08019aa0 <abort>:
 8019aa0:	b508      	push	{r3, lr}
 8019aa2:	2006      	movs	r0, #6
 8019aa4:	f000 f88c 	bl	8019bc0 <raise>
 8019aa8:	2001      	movs	r0, #1
 8019aaa:	f7eb f83d 	bl	8004b28 <_exit>

08019aae <_calloc_r>:
 8019aae:	b570      	push	{r4, r5, r6, lr}
 8019ab0:	fba1 5402 	umull	r5, r4, r1, r2
 8019ab4:	b93c      	cbnz	r4, 8019ac6 <_calloc_r+0x18>
 8019ab6:	4629      	mov	r1, r5
 8019ab8:	f7fd f90c 	bl	8016cd4 <_malloc_r>
 8019abc:	4606      	mov	r6, r0
 8019abe:	b928      	cbnz	r0, 8019acc <_calloc_r+0x1e>
 8019ac0:	2600      	movs	r6, #0
 8019ac2:	4630      	mov	r0, r6
 8019ac4:	bd70      	pop	{r4, r5, r6, pc}
 8019ac6:	220c      	movs	r2, #12
 8019ac8:	6002      	str	r2, [r0, #0]
 8019aca:	e7f9      	b.n	8019ac0 <_calloc_r+0x12>
 8019acc:	462a      	mov	r2, r5
 8019ace:	4621      	mov	r1, r4
 8019ad0:	f7fe f8fa 	bl	8017cc8 <memset>
 8019ad4:	e7f5      	b.n	8019ac2 <_calloc_r+0x14>

08019ad6 <__ascii_mbtowc>:
 8019ad6:	b082      	sub	sp, #8
 8019ad8:	b901      	cbnz	r1, 8019adc <__ascii_mbtowc+0x6>
 8019ada:	a901      	add	r1, sp, #4
 8019adc:	b142      	cbz	r2, 8019af0 <__ascii_mbtowc+0x1a>
 8019ade:	b14b      	cbz	r3, 8019af4 <__ascii_mbtowc+0x1e>
 8019ae0:	7813      	ldrb	r3, [r2, #0]
 8019ae2:	600b      	str	r3, [r1, #0]
 8019ae4:	7812      	ldrb	r2, [r2, #0]
 8019ae6:	1e10      	subs	r0, r2, #0
 8019ae8:	bf18      	it	ne
 8019aea:	2001      	movne	r0, #1
 8019aec:	b002      	add	sp, #8
 8019aee:	4770      	bx	lr
 8019af0:	4610      	mov	r0, r2
 8019af2:	e7fb      	b.n	8019aec <__ascii_mbtowc+0x16>
 8019af4:	f06f 0001 	mvn.w	r0, #1
 8019af8:	e7f8      	b.n	8019aec <__ascii_mbtowc+0x16>

08019afa <_realloc_r>:
 8019afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019afe:	4680      	mov	r8, r0
 8019b00:	4615      	mov	r5, r2
 8019b02:	460c      	mov	r4, r1
 8019b04:	b921      	cbnz	r1, 8019b10 <_realloc_r+0x16>
 8019b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b0a:	4611      	mov	r1, r2
 8019b0c:	f7fd b8e2 	b.w	8016cd4 <_malloc_r>
 8019b10:	b92a      	cbnz	r2, 8019b1e <_realloc_r+0x24>
 8019b12:	f7ff f81d 	bl	8018b50 <_free_r>
 8019b16:	2400      	movs	r4, #0
 8019b18:	4620      	mov	r0, r4
 8019b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b1e:	f000 f86b 	bl	8019bf8 <_malloc_usable_size_r>
 8019b22:	4285      	cmp	r5, r0
 8019b24:	4606      	mov	r6, r0
 8019b26:	d802      	bhi.n	8019b2e <_realloc_r+0x34>
 8019b28:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019b2c:	d8f4      	bhi.n	8019b18 <_realloc_r+0x1e>
 8019b2e:	4629      	mov	r1, r5
 8019b30:	4640      	mov	r0, r8
 8019b32:	f7fd f8cf 	bl	8016cd4 <_malloc_r>
 8019b36:	4607      	mov	r7, r0
 8019b38:	2800      	cmp	r0, #0
 8019b3a:	d0ec      	beq.n	8019b16 <_realloc_r+0x1c>
 8019b3c:	42b5      	cmp	r5, r6
 8019b3e:	462a      	mov	r2, r5
 8019b40:	4621      	mov	r1, r4
 8019b42:	bf28      	it	cs
 8019b44:	4632      	movcs	r2, r6
 8019b46:	f7fe f988 	bl	8017e5a <memcpy>
 8019b4a:	4621      	mov	r1, r4
 8019b4c:	4640      	mov	r0, r8
 8019b4e:	f7fe ffff 	bl	8018b50 <_free_r>
 8019b52:	463c      	mov	r4, r7
 8019b54:	e7e0      	b.n	8019b18 <_realloc_r+0x1e>

08019b56 <__ascii_wctomb>:
 8019b56:	4603      	mov	r3, r0
 8019b58:	4608      	mov	r0, r1
 8019b5a:	b141      	cbz	r1, 8019b6e <__ascii_wctomb+0x18>
 8019b5c:	2aff      	cmp	r2, #255	@ 0xff
 8019b5e:	d904      	bls.n	8019b6a <__ascii_wctomb+0x14>
 8019b60:	228a      	movs	r2, #138	@ 0x8a
 8019b62:	601a      	str	r2, [r3, #0]
 8019b64:	f04f 30ff 	mov.w	r0, #4294967295
 8019b68:	4770      	bx	lr
 8019b6a:	700a      	strb	r2, [r1, #0]
 8019b6c:	2001      	movs	r0, #1
 8019b6e:	4770      	bx	lr

08019b70 <_raise_r>:
 8019b70:	291f      	cmp	r1, #31
 8019b72:	b538      	push	{r3, r4, r5, lr}
 8019b74:	4605      	mov	r5, r0
 8019b76:	460c      	mov	r4, r1
 8019b78:	d904      	bls.n	8019b84 <_raise_r+0x14>
 8019b7a:	2316      	movs	r3, #22
 8019b7c:	6003      	str	r3, [r0, #0]
 8019b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b82:	bd38      	pop	{r3, r4, r5, pc}
 8019b84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019b86:	b112      	cbz	r2, 8019b8e <_raise_r+0x1e>
 8019b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019b8c:	b94b      	cbnz	r3, 8019ba2 <_raise_r+0x32>
 8019b8e:	4628      	mov	r0, r5
 8019b90:	f000 f830 	bl	8019bf4 <_getpid_r>
 8019b94:	4622      	mov	r2, r4
 8019b96:	4601      	mov	r1, r0
 8019b98:	4628      	mov	r0, r5
 8019b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b9e:	f000 b817 	b.w	8019bd0 <_kill_r>
 8019ba2:	2b01      	cmp	r3, #1
 8019ba4:	d00a      	beq.n	8019bbc <_raise_r+0x4c>
 8019ba6:	1c59      	adds	r1, r3, #1
 8019ba8:	d103      	bne.n	8019bb2 <_raise_r+0x42>
 8019baa:	2316      	movs	r3, #22
 8019bac:	6003      	str	r3, [r0, #0]
 8019bae:	2001      	movs	r0, #1
 8019bb0:	e7e7      	b.n	8019b82 <_raise_r+0x12>
 8019bb2:	2100      	movs	r1, #0
 8019bb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019bb8:	4620      	mov	r0, r4
 8019bba:	4798      	blx	r3
 8019bbc:	2000      	movs	r0, #0
 8019bbe:	e7e0      	b.n	8019b82 <_raise_r+0x12>

08019bc0 <raise>:
 8019bc0:	4b02      	ldr	r3, [pc, #8]	@ (8019bcc <raise+0xc>)
 8019bc2:	4601      	mov	r1, r0
 8019bc4:	6818      	ldr	r0, [r3, #0]
 8019bc6:	f7ff bfd3 	b.w	8019b70 <_raise_r>
 8019bca:	bf00      	nop
 8019bcc:	2000968c 	.word	0x2000968c

08019bd0 <_kill_r>:
 8019bd0:	b538      	push	{r3, r4, r5, lr}
 8019bd2:	4d07      	ldr	r5, [pc, #28]	@ (8019bf0 <_kill_r+0x20>)
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	4604      	mov	r4, r0
 8019bd8:	4608      	mov	r0, r1
 8019bda:	4611      	mov	r1, r2
 8019bdc:	602b      	str	r3, [r5, #0]
 8019bde:	f7ea ff91 	bl	8004b04 <_kill>
 8019be2:	1c43      	adds	r3, r0, #1
 8019be4:	d102      	bne.n	8019bec <_kill_r+0x1c>
 8019be6:	682b      	ldr	r3, [r5, #0]
 8019be8:	b103      	cbz	r3, 8019bec <_kill_r+0x1c>
 8019bea:	6023      	str	r3, [r4, #0]
 8019bec:	bd38      	pop	{r3, r4, r5, pc}
 8019bee:	bf00      	nop
 8019bf0:	200148b8 	.word	0x200148b8

08019bf4 <_getpid_r>:
 8019bf4:	f7ea bf7e 	b.w	8004af4 <_getpid>

08019bf8 <_malloc_usable_size_r>:
 8019bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019bfc:	1f18      	subs	r0, r3, #4
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	bfbc      	itt	lt
 8019c02:	580b      	ldrlt	r3, [r1, r0]
 8019c04:	18c0      	addlt	r0, r0, r3
 8019c06:	4770      	bx	lr

08019c08 <_init>:
 8019c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c0a:	bf00      	nop
 8019c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c0e:	bc08      	pop	{r3}
 8019c10:	469e      	mov	lr, r3
 8019c12:	4770      	bx	lr

08019c14 <_fini>:
 8019c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c16:	bf00      	nop
 8019c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c1a:	bc08      	pop	{r3}
 8019c1c:	469e      	mov	lr, r3
 8019c1e:	4770      	bx	lr
